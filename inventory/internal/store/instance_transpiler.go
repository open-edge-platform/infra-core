// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-filters, DO NOT EDIT.

package store

import (
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	inv_v1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/inventory/v1"
)

func (r *registry) RegisterInstanceResource() {
	r.Register(
		newResourceTranspiler(
			inv_v1.ResourceKind_RESOURCE_KIND_INSTANCE,
			instanceresource.ValidColumn,
			map[string]edgeHandler{
				instanceresource.EdgeCustomConfig: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasCustomConfigWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_CUSTOMCONFIG,
				},

				instanceresource.EdgeHost: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasHostWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_HOST,
				},

				instanceresource.EdgeLocalaccount: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasLocalaccountWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_LOCALACCOUNT,
				},

				instanceresource.EdgeOs: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasOsWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_OS,
				},

				instanceresource.EdgeOsUpdatePolicy: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasOsUpdatePolicyWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_OSUPDATEPOLICY,
				},

				instanceresource.EdgeProvider: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasProviderWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_PROVIDER,
				},

				instanceresource.EdgeWorkloadMembers: {
					func(p sqlPredicate) sqlPredicate { return instanceresource.HasWorkloadMembersWith(p) },
					inv_v1.ResourceKind_RESOURCE_KIND_WORKLOAD_MEMBER,
				},
			},
			map[string]sqlPredicate{
				instanceresource.EdgeCustomConfig:    instanceresource.HasCustomConfig(),
				instanceresource.EdgeHost:            instanceresource.HasHost(),
				instanceresource.EdgeLocalaccount:    instanceresource.HasLocalaccount(),
				instanceresource.EdgeOs:              instanceresource.HasOs(),
				instanceresource.EdgeOsUpdatePolicy:  instanceresource.HasOsUpdatePolicy(),
				instanceresource.EdgeProvider:        instanceresource.HasProvider(),
				instanceresource.EdgeWorkloadMembers: instanceresource.HasWorkloadMembers(),
			},
		))

}
