// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
)

// ProviderResourceUpdate is the builder for updating ProviderResource entities.
type ProviderResourceUpdate struct {
	config
	hooks    []Hook
	mutation *ProviderResourceMutation
}

// Where appends a list predicates to the ProviderResourceUpdate builder.
func (_u *ProviderResourceUpdate) Where(ps ...predicate.ProviderResource) *ProviderResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *ProviderResourceUpdate) SetResourceID(v string) *ProviderResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableResourceID(v *string) *ProviderResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetProviderKind sets the "provider_kind" field.
func (_u *ProviderResourceUpdate) SetProviderKind(v providerresource.ProviderKind) *ProviderResourceUpdate {
	_u.mutation.SetProviderKind(v)
	return _u
}

// SetNillableProviderKind sets the "provider_kind" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableProviderKind(v *providerresource.ProviderKind) *ProviderResourceUpdate {
	if v != nil {
		_u.SetProviderKind(*v)
	}
	return _u
}

// SetProviderVendor sets the "provider_vendor" field.
func (_u *ProviderResourceUpdate) SetProviderVendor(v providerresource.ProviderVendor) *ProviderResourceUpdate {
	_u.mutation.SetProviderVendor(v)
	return _u
}

// SetNillableProviderVendor sets the "provider_vendor" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableProviderVendor(v *providerresource.ProviderVendor) *ProviderResourceUpdate {
	if v != nil {
		_u.SetProviderVendor(*v)
	}
	return _u
}

// ClearProviderVendor clears the value of the "provider_vendor" field.
func (_u *ProviderResourceUpdate) ClearProviderVendor() *ProviderResourceUpdate {
	_u.mutation.ClearProviderVendor()
	return _u
}

// SetName sets the "name" field.
func (_u *ProviderResourceUpdate) SetName(v string) *ProviderResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableName(v *string) *ProviderResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAPIEndpoint sets the "api_endpoint" field.
func (_u *ProviderResourceUpdate) SetAPIEndpoint(v string) *ProviderResourceUpdate {
	_u.mutation.SetAPIEndpoint(v)
	return _u
}

// SetNillableAPIEndpoint sets the "api_endpoint" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableAPIEndpoint(v *string) *ProviderResourceUpdate {
	if v != nil {
		_u.SetAPIEndpoint(*v)
	}
	return _u
}

// SetAPICredentials sets the "api_credentials" field.
func (_u *ProviderResourceUpdate) SetAPICredentials(v string) *ProviderResourceUpdate {
	_u.mutation.SetAPICredentials(v)
	return _u
}

// SetNillableAPICredentials sets the "api_credentials" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableAPICredentials(v *string) *ProviderResourceUpdate {
	if v != nil {
		_u.SetAPICredentials(*v)
	}
	return _u
}

// ClearAPICredentials clears the value of the "api_credentials" field.
func (_u *ProviderResourceUpdate) ClearAPICredentials() *ProviderResourceUpdate {
	_u.mutation.ClearAPICredentials()
	return _u
}

// SetConfig sets the "config" field.
func (_u *ProviderResourceUpdate) SetConfig(v string) *ProviderResourceUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableConfig(v *string) *ProviderResourceUpdate {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *ProviderResourceUpdate) ClearConfig() *ProviderResourceUpdate {
	_u.mutation.ClearConfig()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProviderResourceUpdate) SetUpdatedAt(v string) *ProviderResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ProviderResourceUpdate) SetNillableUpdatedAt(v *string) *ProviderResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// Mutation returns the ProviderResourceMutation object of the builder.
func (_u *ProviderResourceUpdate) Mutation() *ProviderResourceMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProviderResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProviderResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProviderResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProviderResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProviderResourceUpdate) check() error {
	if v, ok := _u.mutation.ProviderKind(); ok {
		if err := providerresource.ProviderKindValidator(v); err != nil {
			return &ValidationError{Name: "provider_kind", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.provider_kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderVendor(); ok {
		if err := providerresource.ProviderVendorValidator(v); err != nil {
			return &ValidationError{Name: "provider_vendor", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.provider_vendor": %w`, err)}
		}
	}
	return nil
}

func (_u *ProviderResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerresource.Table, providerresource.Columns, sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(providerresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderKind(); ok {
		_spec.SetField(providerresource.FieldProviderKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ProviderVendor(); ok {
		_spec.SetField(providerresource.FieldProviderVendor, field.TypeEnum, value)
	}
	if _u.mutation.ProviderVendorCleared() {
		_spec.ClearField(providerresource.FieldProviderVendor, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(providerresource.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.APIEndpoint(); ok {
		_spec.SetField(providerresource.FieldAPIEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.APICredentials(); ok {
		_spec.SetField(providerresource.FieldAPICredentials, field.TypeString, value)
	}
	if _u.mutation.APICredentialsCleared() {
		_spec.ClearField(providerresource.FieldAPICredentials, field.TypeString)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(providerresource.FieldConfig, field.TypeString, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(providerresource.FieldConfig, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(providerresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProviderResourceUpdateOne is the builder for updating a single ProviderResource entity.
type ProviderResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProviderResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *ProviderResourceUpdateOne) SetResourceID(v string) *ProviderResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableResourceID(v *string) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetProviderKind sets the "provider_kind" field.
func (_u *ProviderResourceUpdateOne) SetProviderKind(v providerresource.ProviderKind) *ProviderResourceUpdateOne {
	_u.mutation.SetProviderKind(v)
	return _u
}

// SetNillableProviderKind sets the "provider_kind" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableProviderKind(v *providerresource.ProviderKind) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetProviderKind(*v)
	}
	return _u
}

// SetProviderVendor sets the "provider_vendor" field.
func (_u *ProviderResourceUpdateOne) SetProviderVendor(v providerresource.ProviderVendor) *ProviderResourceUpdateOne {
	_u.mutation.SetProviderVendor(v)
	return _u
}

// SetNillableProviderVendor sets the "provider_vendor" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableProviderVendor(v *providerresource.ProviderVendor) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetProviderVendor(*v)
	}
	return _u
}

// ClearProviderVendor clears the value of the "provider_vendor" field.
func (_u *ProviderResourceUpdateOne) ClearProviderVendor() *ProviderResourceUpdateOne {
	_u.mutation.ClearProviderVendor()
	return _u
}

// SetName sets the "name" field.
func (_u *ProviderResourceUpdateOne) SetName(v string) *ProviderResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableName(v *string) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetAPIEndpoint sets the "api_endpoint" field.
func (_u *ProviderResourceUpdateOne) SetAPIEndpoint(v string) *ProviderResourceUpdateOne {
	_u.mutation.SetAPIEndpoint(v)
	return _u
}

// SetNillableAPIEndpoint sets the "api_endpoint" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableAPIEndpoint(v *string) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetAPIEndpoint(*v)
	}
	return _u
}

// SetAPICredentials sets the "api_credentials" field.
func (_u *ProviderResourceUpdateOne) SetAPICredentials(v string) *ProviderResourceUpdateOne {
	_u.mutation.SetAPICredentials(v)
	return _u
}

// SetNillableAPICredentials sets the "api_credentials" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableAPICredentials(v *string) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetAPICredentials(*v)
	}
	return _u
}

// ClearAPICredentials clears the value of the "api_credentials" field.
func (_u *ProviderResourceUpdateOne) ClearAPICredentials() *ProviderResourceUpdateOne {
	_u.mutation.ClearAPICredentials()
	return _u
}

// SetConfig sets the "config" field.
func (_u *ProviderResourceUpdateOne) SetConfig(v string) *ProviderResourceUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableConfig(v *string) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *ProviderResourceUpdateOne) ClearConfig() *ProviderResourceUpdateOne {
	_u.mutation.ClearConfig()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProviderResourceUpdateOne) SetUpdatedAt(v string) *ProviderResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *ProviderResourceUpdateOne) SetNillableUpdatedAt(v *string) *ProviderResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// Mutation returns the ProviderResourceMutation object of the builder.
func (_u *ProviderResourceUpdateOne) Mutation() *ProviderResourceMutation {
	return _u.mutation
}

// Where appends a list predicates to the ProviderResourceUpdate builder.
func (_u *ProviderResourceUpdateOne) Where(ps ...predicate.ProviderResource) *ProviderResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProviderResourceUpdateOne) Select(field string, fields ...string) *ProviderResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProviderResource entity.
func (_u *ProviderResourceUpdateOne) Save(ctx context.Context) (*ProviderResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProviderResourceUpdateOne) SaveX(ctx context.Context) *ProviderResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProviderResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProviderResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProviderResourceUpdateOne) check() error {
	if v, ok := _u.mutation.ProviderKind(); ok {
		if err := providerresource.ProviderKindValidator(v); err != nil {
			return &ValidationError{Name: "provider_kind", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.provider_kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProviderVendor(); ok {
		if err := providerresource.ProviderVendorValidator(v); err != nil {
			return &ValidationError{Name: "provider_vendor", err: fmt.Errorf(`ent: validator failed for field "ProviderResource.provider_vendor": %w`, err)}
		}
	}
	return nil
}

func (_u *ProviderResourceUpdateOne) sqlSave(ctx context.Context) (_node *ProviderResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(providerresource.Table, providerresource.Columns, sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProviderResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, providerresource.FieldID)
		for _, f := range fields {
			if !providerresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != providerresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(providerresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ProviderKind(); ok {
		_spec.SetField(providerresource.FieldProviderKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ProviderVendor(); ok {
		_spec.SetField(providerresource.FieldProviderVendor, field.TypeEnum, value)
	}
	if _u.mutation.ProviderVendorCleared() {
		_spec.ClearField(providerresource.FieldProviderVendor, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(providerresource.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.APIEndpoint(); ok {
		_spec.SetField(providerresource.FieldAPIEndpoint, field.TypeString, value)
	}
	if value, ok := _u.mutation.APICredentials(); ok {
		_spec.SetField(providerresource.FieldAPICredentials, field.TypeString, value)
	}
	if _u.mutation.APICredentialsCleared() {
		_spec.ClearField(providerresource.FieldAPICredentials, field.TypeString)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(providerresource.FieldConfig, field.TypeString, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(providerresource.FieldConfig, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(providerresource.FieldUpdatedAt, field.TypeString, value)
	}
	_node = &ProviderResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{providerresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
