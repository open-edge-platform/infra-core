// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/repeatedscheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// RepeatedScheduleResourceCreate is the builder for creating a RepeatedScheduleResource entity.
type RepeatedScheduleResourceCreate struct {
	config
	mutation *RepeatedScheduleResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (_c *RepeatedScheduleResourceCreate) SetResourceID(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetScheduleStatus sets the "schedule_status" field.
func (_c *RepeatedScheduleResourceCreate) SetScheduleStatus(v repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceCreate {
	_c.mutation.SetScheduleStatus(v)
	return _c
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableScheduleStatus(v *repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceCreate {
	if v != nil {
		_c.SetScheduleStatus(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *RepeatedScheduleResourceCreate) SetName(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableName(v *string) *RepeatedScheduleResourceCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_c *RepeatedScheduleResourceCreate) SetDurationSeconds(v uint32) *RepeatedScheduleResourceCreate {
	_c.mutation.SetDurationSeconds(v)
	return _c
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableDurationSeconds(v *uint32) *RepeatedScheduleResourceCreate {
	if v != nil {
		_c.SetDurationSeconds(*v)
	}
	return _c
}

// SetCronMinutes sets the "cron_minutes" field.
func (_c *RepeatedScheduleResourceCreate) SetCronMinutes(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetCronMinutes(v)
	return _c
}

// SetCronHours sets the "cron_hours" field.
func (_c *RepeatedScheduleResourceCreate) SetCronHours(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetCronHours(v)
	return _c
}

// SetCronDayMonth sets the "cron_day_month" field.
func (_c *RepeatedScheduleResourceCreate) SetCronDayMonth(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetCronDayMonth(v)
	return _c
}

// SetCronMonth sets the "cron_month" field.
func (_c *RepeatedScheduleResourceCreate) SetCronMonth(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetCronMonth(v)
	return _c
}

// SetCronDayWeek sets the "cron_day_week" field.
func (_c *RepeatedScheduleResourceCreate) SetCronDayWeek(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetCronDayWeek(v)
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *RepeatedScheduleResourceCreate) SetTenantID(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *RepeatedScheduleResourceCreate) SetCreatedAt(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *RepeatedScheduleResourceCreate) SetUpdatedAt(v string) *RepeatedScheduleResourceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (_c *RepeatedScheduleResourceCreate) SetTargetSiteID(id int) *RepeatedScheduleResourceCreate {
	_c.mutation.SetTargetSiteID(id)
	return _c
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableTargetSiteID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		_c = _c.SetTargetSiteID(*id)
	}
	return _c
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (_c *RepeatedScheduleResourceCreate) SetTargetSite(v *SiteResource) *RepeatedScheduleResourceCreate {
	return _c.SetTargetSiteID(v.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (_c *RepeatedScheduleResourceCreate) SetTargetHostID(id int) *RepeatedScheduleResourceCreate {
	_c.mutation.SetTargetHostID(id)
	return _c
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableTargetHostID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		_c = _c.SetTargetHostID(*id)
	}
	return _c
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (_c *RepeatedScheduleResourceCreate) SetTargetHost(v *HostResource) *RepeatedScheduleResourceCreate {
	return _c.SetTargetHostID(v.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (_c *RepeatedScheduleResourceCreate) SetTargetWorkloadID(id int) *RepeatedScheduleResourceCreate {
	_c.mutation.SetTargetWorkloadID(id)
	return _c
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableTargetWorkloadID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		_c = _c.SetTargetWorkloadID(*id)
	}
	return _c
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (_c *RepeatedScheduleResourceCreate) SetTargetWorkload(v *WorkloadResource) *RepeatedScheduleResourceCreate {
	return _c.SetTargetWorkloadID(v.ID)
}

// SetTargetRegionID sets the "target_region" edge to the RegionResource entity by ID.
func (_c *RepeatedScheduleResourceCreate) SetTargetRegionID(id int) *RepeatedScheduleResourceCreate {
	_c.mutation.SetTargetRegionID(id)
	return _c
}

// SetNillableTargetRegionID sets the "target_region" edge to the RegionResource entity by ID if the given value is not nil.
func (_c *RepeatedScheduleResourceCreate) SetNillableTargetRegionID(id *int) *RepeatedScheduleResourceCreate {
	if id != nil {
		_c = _c.SetTargetRegionID(*id)
	}
	return _c
}

// SetTargetRegion sets the "target_region" edge to the RegionResource entity.
func (_c *RepeatedScheduleResourceCreate) SetTargetRegion(v *RegionResource) *RepeatedScheduleResourceCreate {
	return _c.SetTargetRegionID(v.ID)
}

// Mutation returns the RepeatedScheduleResourceMutation object of the builder.
func (_c *RepeatedScheduleResourceCreate) Mutation() *RepeatedScheduleResourceMutation {
	return _c.mutation
}

// Save creates the RepeatedScheduleResource in the database.
func (_c *RepeatedScheduleResourceCreate) Save(ctx context.Context) (*RepeatedScheduleResource, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RepeatedScheduleResourceCreate) SaveX(ctx context.Context) *RepeatedScheduleResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RepeatedScheduleResourceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RepeatedScheduleResourceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RepeatedScheduleResourceCreate) check() error {
	if _, ok := _c.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "RepeatedScheduleResource.resource_id"`)}
	}
	if v, ok := _c.mutation.ScheduleStatus(); ok {
		if err := repeatedscheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "RepeatedScheduleResource.schedule_status": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CronMinutes(); !ok {
		return &ValidationError{Name: "cron_minutes", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_minutes"`)}
	}
	if _, ok := _c.mutation.CronHours(); !ok {
		return &ValidationError{Name: "cron_hours", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_hours"`)}
	}
	if _, ok := _c.mutation.CronDayMonth(); !ok {
		return &ValidationError{Name: "cron_day_month", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_day_month"`)}
	}
	if _, ok := _c.mutation.CronMonth(); !ok {
		return &ValidationError{Name: "cron_month", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_month"`)}
	}
	if _, ok := _c.mutation.CronDayWeek(); !ok {
		return &ValidationError{Name: "cron_day_week", err: errors.New(`ent: missing required field "RepeatedScheduleResource.cron_day_week"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "RepeatedScheduleResource.tenant_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RepeatedScheduleResource.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RepeatedScheduleResource.updated_at"`)}
	}
	return nil
}

func (_c *RepeatedScheduleResourceCreate) sqlSave(ctx context.Context) (*RepeatedScheduleResource, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RepeatedScheduleResourceCreate) createSpec() (*RepeatedScheduleResource, *sqlgraph.CreateSpec) {
	var (
		_node = &RepeatedScheduleResource{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(repeatedscheduleresource.Table, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.ScheduleStatus(); ok {
		_spec.SetField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum, value)
		_node.ScheduleStatus = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(repeatedscheduleresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.DurationSeconds(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
		_node.DurationSeconds = value
	}
	if value, ok := _c.mutation.CronMinutes(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMinutes, field.TypeString, value)
		_node.CronMinutes = value
	}
	if value, ok := _c.mutation.CronHours(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronHours, field.TypeString, value)
		_node.CronHours = value
	}
	if value, ok := _c.mutation.CronDayMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayMonth, field.TypeString, value)
		_node.CronDayMonth = value
	}
	if value, ok := _c.mutation.CronMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMonth, field.TypeString, value)
		_node.CronMonth = value
	}
	if value, ok := _c.mutation.CronDayWeek(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayWeek, field.TypeString, value)
		_node.CronDayWeek = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(repeatedscheduleresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_site = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_workload = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TargetRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetRegionTable,
			Columns: []string{repeatedscheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.repeated_schedule_resource_target_region = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RepeatedScheduleResourceCreateBulk is the builder for creating many RepeatedScheduleResource entities in bulk.
type RepeatedScheduleResourceCreateBulk struct {
	config
	err      error
	builders []*RepeatedScheduleResourceCreate
}

// Save creates the RepeatedScheduleResource entities in the database.
func (_c *RepeatedScheduleResourceCreateBulk) Save(ctx context.Context) ([]*RepeatedScheduleResource, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*RepeatedScheduleResource, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RepeatedScheduleResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RepeatedScheduleResourceCreateBulk) SaveX(ctx context.Context) []*RepeatedScheduleResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RepeatedScheduleResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RepeatedScheduleResourceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
