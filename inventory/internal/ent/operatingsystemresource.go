// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
)

// OperatingSystemResource is the model entity for the OperatingSystemResource schema.
type OperatingSystemResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Architecture holds the value of the "architecture" field.
	Architecture string `json:"architecture,omitempty"`
	// KernelCommand holds the value of the "kernel_command" field.
	KernelCommand string `json:"kernel_command,omitempty"`
	// UpdateSources holds the value of the "update_sources" field.
	UpdateSources string `json:"update_sources,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// ImageID holds the value of the "image_id" field.
	ImageID string `json:"image_id,omitempty"`
	// Sha256 holds the value of the "sha256" field.
	Sha256 string `json:"sha256,omitempty"`
	// ProfileName holds the value of the "profile_name" field.
	ProfileName string `json:"profile_name,omitempty"`
	// ProfileVersion holds the value of the "profile_version" field.
	ProfileVersion string `json:"profile_version,omitempty"`
	// InstalledPackages holds the value of the "installed_packages" field.
	InstalledPackages string `json:"installed_packages,omitempty"`
	// InstalledPackagesURL holds the value of the "installed_packages_url" field.
	InstalledPackagesURL string `json:"installed_packages_url,omitempty"`
	// SecurityFeature holds the value of the "security_feature" field.
	SecurityFeature operatingsystemresource.SecurityFeature `json:"security_feature,omitempty"`
	// OsType holds the value of the "os_type" field.
	OsType operatingsystemresource.OsType `json:"os_type,omitempty"`
	// OsProvider holds the value of the "os_provider" field.
	OsProvider operatingsystemresource.OsProvider `json:"os_provider,omitempty"`
	// PlatformBundle holds the value of the "platform_bundle" field.
	PlatformBundle string `json:"platform_bundle,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// TLSCaCert holds the value of the "tls_ca_cert" field.
	TLSCaCert string `json:"tls_ca_cert,omitempty"`
	// ExistingCvesURL holds the value of the "existing_cves_url" field.
	ExistingCvesURL string `json:"existing_cves_url,omitempty"`
	// ExistingCves holds the value of the "existing_cves" field.
	ExistingCves string `json:"existing_cves,omitempty"`
	// FixedCvesURL holds the value of the "fixed_cves_url" field.
	FixedCvesURL string `json:"fixed_cves_url,omitempty"`
	// FixedCves holds the value of the "fixed_cves" field.
	FixedCves string `json:"fixed_cves,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    string `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OperatingSystemResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case operatingsystemresource.FieldID:
			values[i] = new(sql.NullInt64)
		case operatingsystemresource.FieldResourceID, operatingsystemresource.FieldName, operatingsystemresource.FieldArchitecture, operatingsystemresource.FieldKernelCommand, operatingsystemresource.FieldUpdateSources, operatingsystemresource.FieldImageURL, operatingsystemresource.FieldImageID, operatingsystemresource.FieldSha256, operatingsystemresource.FieldProfileName, operatingsystemresource.FieldProfileVersion, operatingsystemresource.FieldInstalledPackages, operatingsystemresource.FieldInstalledPackagesURL, operatingsystemresource.FieldSecurityFeature, operatingsystemresource.FieldOsType, operatingsystemresource.FieldOsProvider, operatingsystemresource.FieldPlatformBundle, operatingsystemresource.FieldDescription, operatingsystemresource.FieldMetadata, operatingsystemresource.FieldTLSCaCert, operatingsystemresource.FieldExistingCvesURL, operatingsystemresource.FieldExistingCves, operatingsystemresource.FieldFixedCvesURL, operatingsystemresource.FieldFixedCves, operatingsystemresource.FieldTenantID, operatingsystemresource.FieldCreatedAt, operatingsystemresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OperatingSystemResource fields.
func (_m *OperatingSystemResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case operatingsystemresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case operatingsystemresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case operatingsystemresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case operatingsystemresource.FieldArchitecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field architecture", values[i])
			} else if value.Valid {
				_m.Architecture = value.String
			}
		case operatingsystemresource.FieldKernelCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kernel_command", values[i])
			} else if value.Valid {
				_m.KernelCommand = value.String
			}
		case operatingsystemresource.FieldUpdateSources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_sources", values[i])
			} else if value.Valid {
				_m.UpdateSources = value.String
			}
		case operatingsystemresource.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				_m.ImageURL = value.String
			}
		case operatingsystemresource.FieldImageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_id", values[i])
			} else if value.Valid {
				_m.ImageID = value.String
			}
		case operatingsystemresource.FieldSha256:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sha256", values[i])
			} else if value.Valid {
				_m.Sha256 = value.String
			}
		case operatingsystemresource.FieldProfileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_name", values[i])
			} else if value.Valid {
				_m.ProfileName = value.String
			}
		case operatingsystemresource.FieldProfileVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_version", values[i])
			} else if value.Valid {
				_m.ProfileVersion = value.String
			}
		case operatingsystemresource.FieldInstalledPackages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field installed_packages", values[i])
			} else if value.Valid {
				_m.InstalledPackages = value.String
			}
		case operatingsystemresource.FieldInstalledPackagesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field installed_packages_url", values[i])
			} else if value.Valid {
				_m.InstalledPackagesURL = value.String
			}
		case operatingsystemresource.FieldSecurityFeature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field security_feature", values[i])
			} else if value.Valid {
				_m.SecurityFeature = operatingsystemresource.SecurityFeature(value.String)
			}
		case operatingsystemresource.FieldOsType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_type", values[i])
			} else if value.Valid {
				_m.OsType = operatingsystemresource.OsType(value.String)
			}
		case operatingsystemresource.FieldOsProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_provider", values[i])
			} else if value.Valid {
				_m.OsProvider = operatingsystemresource.OsProvider(value.String)
			}
		case operatingsystemresource.FieldPlatformBundle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field platform_bundle", values[i])
			} else if value.Valid {
				_m.PlatformBundle = value.String
			}
		case operatingsystemresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case operatingsystemresource.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				_m.Metadata = value.String
			}
		case operatingsystemresource.FieldTLSCaCert:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tls_ca_cert", values[i])
			} else if value.Valid {
				_m.TLSCaCert = value.String
			}
		case operatingsystemresource.FieldExistingCvesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field existing_cves_url", values[i])
			} else if value.Valid {
				_m.ExistingCvesURL = value.String
			}
		case operatingsystemresource.FieldExistingCves:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field existing_cves", values[i])
			} else if value.Valid {
				_m.ExistingCves = value.String
			}
		case operatingsystemresource.FieldFixedCvesURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_cves_url", values[i])
			} else if value.Valid {
				_m.FixedCvesURL = value.String
			}
		case operatingsystemresource.FieldFixedCves:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_cves", values[i])
			} else if value.Valid {
				_m.FixedCves = value.String
			}
		case operatingsystemresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case operatingsystemresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case operatingsystemresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OperatingSystemResource.
// This includes values selected through modifiers, order, etc.
func (_m *OperatingSystemResource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this OperatingSystemResource.
// Note that you need to call OperatingSystemResource.Unwrap() before calling this method if this OperatingSystemResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *OperatingSystemResource) Update() *OperatingSystemResourceUpdateOne {
	return NewOperatingSystemResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the OperatingSystemResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *OperatingSystemResource) Unwrap() *OperatingSystemResource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: OperatingSystemResource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *OperatingSystemResource) String() string {
	var builder strings.Builder
	builder.WriteString("OperatingSystemResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("architecture=")
	builder.WriteString(_m.Architecture)
	builder.WriteString(", ")
	builder.WriteString("kernel_command=")
	builder.WriteString(_m.KernelCommand)
	builder.WriteString(", ")
	builder.WriteString("update_sources=")
	builder.WriteString(_m.UpdateSources)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(_m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("image_id=")
	builder.WriteString(_m.ImageID)
	builder.WriteString(", ")
	builder.WriteString("sha256=")
	builder.WriteString(_m.Sha256)
	builder.WriteString(", ")
	builder.WriteString("profile_name=")
	builder.WriteString(_m.ProfileName)
	builder.WriteString(", ")
	builder.WriteString("profile_version=")
	builder.WriteString(_m.ProfileVersion)
	builder.WriteString(", ")
	builder.WriteString("installed_packages=")
	builder.WriteString(_m.InstalledPackages)
	builder.WriteString(", ")
	builder.WriteString("installed_packages_url=")
	builder.WriteString(_m.InstalledPackagesURL)
	builder.WriteString(", ")
	builder.WriteString("security_feature=")
	builder.WriteString(fmt.Sprintf("%v", _m.SecurityFeature))
	builder.WriteString(", ")
	builder.WriteString("os_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.OsType))
	builder.WriteString(", ")
	builder.WriteString("os_provider=")
	builder.WriteString(fmt.Sprintf("%v", _m.OsProvider))
	builder.WriteString(", ")
	builder.WriteString("platform_bundle=")
	builder.WriteString(_m.PlatformBundle)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(_m.Metadata)
	builder.WriteString(", ")
	builder.WriteString("tls_ca_cert=")
	builder.WriteString(_m.TLSCaCert)
	builder.WriteString(", ")
	builder.WriteString("existing_cves_url=")
	builder.WriteString(_m.ExistingCvesURL)
	builder.WriteString(", ")
	builder.WriteString("existing_cves=")
	builder.WriteString(_m.ExistingCves)
	builder.WriteString(", ")
	builder.WriteString("fixed_cves_url=")
	builder.WriteString(_m.FixedCvesURL)
	builder.WriteString(", ")
	builder.WriteString("fixed_cves=")
	builder.WriteString(_m.FixedCves)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// OperatingSystemResources is a parsable slice of OperatingSystemResource.
type OperatingSystemResources []*OperatingSystemResource
