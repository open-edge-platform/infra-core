// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/telemetrygroupresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/telemetryprofile"
)

// TelemetryGroupResourceUpdate is the builder for updating TelemetryGroupResource entities.
type TelemetryGroupResourceUpdate struct {
	config
	hooks    []Hook
	mutation *TelemetryGroupResourceMutation
}

// Where appends a list predicates to the TelemetryGroupResourceUpdate builder.
func (_u *TelemetryGroupResourceUpdate) Where(ps ...predicate.TelemetryGroupResource) *TelemetryGroupResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *TelemetryGroupResourceUpdate) SetResourceID(v string) *TelemetryGroupResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdate) SetNillableResourceID(v *string) *TelemetryGroupResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *TelemetryGroupResourceUpdate) SetName(v string) *TelemetryGroupResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdate) SetNillableName(v *string) *TelemetryGroupResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *TelemetryGroupResourceUpdate) SetKind(v telemetrygroupresource.Kind) *TelemetryGroupResourceUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdate) SetNillableKind(v *telemetrygroupresource.Kind) *TelemetryGroupResourceUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// SetCollectorKind sets the "collector_kind" field.
func (_u *TelemetryGroupResourceUpdate) SetCollectorKind(v telemetrygroupresource.CollectorKind) *TelemetryGroupResourceUpdate {
	_u.mutation.SetCollectorKind(v)
	return _u
}

// SetNillableCollectorKind sets the "collector_kind" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdate) SetNillableCollectorKind(v *telemetrygroupresource.CollectorKind) *TelemetryGroupResourceUpdate {
	if v != nil {
		_u.SetCollectorKind(*v)
	}
	return _u
}

// SetGroups sets the "groups" field.
func (_u *TelemetryGroupResourceUpdate) SetGroups(v string) *TelemetryGroupResourceUpdate {
	_u.mutation.SetGroups(v)
	return _u
}

// SetNillableGroups sets the "groups" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdate) SetNillableGroups(v *string) *TelemetryGroupResourceUpdate {
	if v != nil {
		_u.SetGroups(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TelemetryGroupResourceUpdate) SetUpdatedAt(v string) *TelemetryGroupResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdate) SetNillableUpdatedAt(v *string) *TelemetryGroupResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// AddProfileIDs adds the "profiles" edge to the TelemetryProfile entity by IDs.
func (_u *TelemetryGroupResourceUpdate) AddProfileIDs(ids ...int) *TelemetryGroupResourceUpdate {
	_u.mutation.AddProfileIDs(ids...)
	return _u
}

// AddProfiles adds the "profiles" edges to the TelemetryProfile entity.
func (_u *TelemetryGroupResourceUpdate) AddProfiles(v ...*TelemetryProfile) *TelemetryGroupResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProfileIDs(ids...)
}

// Mutation returns the TelemetryGroupResourceMutation object of the builder.
func (_u *TelemetryGroupResourceUpdate) Mutation() *TelemetryGroupResourceMutation {
	return _u.mutation
}

// ClearProfiles clears all "profiles" edges to the TelemetryProfile entity.
func (_u *TelemetryGroupResourceUpdate) ClearProfiles() *TelemetryGroupResourceUpdate {
	_u.mutation.ClearProfiles()
	return _u
}

// RemoveProfileIDs removes the "profiles" edge to TelemetryProfile entities by IDs.
func (_u *TelemetryGroupResourceUpdate) RemoveProfileIDs(ids ...int) *TelemetryGroupResourceUpdate {
	_u.mutation.RemoveProfileIDs(ids...)
	return _u
}

// RemoveProfiles removes "profiles" edges to TelemetryProfile entities.
func (_u *TelemetryGroupResourceUpdate) RemoveProfiles(v ...*TelemetryProfile) *TelemetryGroupResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TelemetryGroupResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelemetryGroupResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TelemetryGroupResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelemetryGroupResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TelemetryGroupResourceUpdate) check() error {
	if v, ok := _u.mutation.Kind(); ok {
		if err := telemetrygroupresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CollectorKind(); ok {
		if err := telemetrygroupresource.CollectorKindValidator(v); err != nil {
			return &ValidationError{Name: "collector_kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.collector_kind": %w`, err)}
		}
	}
	return nil
}

func (_u *TelemetryGroupResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetrygroupresource.Table, telemetrygroupresource.Columns, sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(telemetrygroupresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(telemetrygroupresource.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(telemetrygroupresource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.CollectorKind(); ok {
		_spec.SetField(telemetrygroupresource.FieldCollectorKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Groups(); ok {
		_spec.SetField(telemetrygroupresource.FieldGroups, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(telemetrygroupresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !_u.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetrygroupresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TelemetryGroupResourceUpdateOne is the builder for updating a single TelemetryGroupResource entity.
type TelemetryGroupResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TelemetryGroupResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *TelemetryGroupResourceUpdateOne) SetResourceID(v string) *TelemetryGroupResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdateOne) SetNillableResourceID(v *string) *TelemetryGroupResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *TelemetryGroupResourceUpdateOne) SetName(v string) *TelemetryGroupResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdateOne) SetNillableName(v *string) *TelemetryGroupResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *TelemetryGroupResourceUpdateOne) SetKind(v telemetrygroupresource.Kind) *TelemetryGroupResourceUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdateOne) SetNillableKind(v *telemetrygroupresource.Kind) *TelemetryGroupResourceUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// SetCollectorKind sets the "collector_kind" field.
func (_u *TelemetryGroupResourceUpdateOne) SetCollectorKind(v telemetrygroupresource.CollectorKind) *TelemetryGroupResourceUpdateOne {
	_u.mutation.SetCollectorKind(v)
	return _u
}

// SetNillableCollectorKind sets the "collector_kind" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdateOne) SetNillableCollectorKind(v *telemetrygroupresource.CollectorKind) *TelemetryGroupResourceUpdateOne {
	if v != nil {
		_u.SetCollectorKind(*v)
	}
	return _u
}

// SetGroups sets the "groups" field.
func (_u *TelemetryGroupResourceUpdateOne) SetGroups(v string) *TelemetryGroupResourceUpdateOne {
	_u.mutation.SetGroups(v)
	return _u
}

// SetNillableGroups sets the "groups" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdateOne) SetNillableGroups(v *string) *TelemetryGroupResourceUpdateOne {
	if v != nil {
		_u.SetGroups(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TelemetryGroupResourceUpdateOne) SetUpdatedAt(v string) *TelemetryGroupResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TelemetryGroupResourceUpdateOne) SetNillableUpdatedAt(v *string) *TelemetryGroupResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// AddProfileIDs adds the "profiles" edge to the TelemetryProfile entity by IDs.
func (_u *TelemetryGroupResourceUpdateOne) AddProfileIDs(ids ...int) *TelemetryGroupResourceUpdateOne {
	_u.mutation.AddProfileIDs(ids...)
	return _u
}

// AddProfiles adds the "profiles" edges to the TelemetryProfile entity.
func (_u *TelemetryGroupResourceUpdateOne) AddProfiles(v ...*TelemetryProfile) *TelemetryGroupResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProfileIDs(ids...)
}

// Mutation returns the TelemetryGroupResourceMutation object of the builder.
func (_u *TelemetryGroupResourceUpdateOne) Mutation() *TelemetryGroupResourceMutation {
	return _u.mutation
}

// ClearProfiles clears all "profiles" edges to the TelemetryProfile entity.
func (_u *TelemetryGroupResourceUpdateOne) ClearProfiles() *TelemetryGroupResourceUpdateOne {
	_u.mutation.ClearProfiles()
	return _u
}

// RemoveProfileIDs removes the "profiles" edge to TelemetryProfile entities by IDs.
func (_u *TelemetryGroupResourceUpdateOne) RemoveProfileIDs(ids ...int) *TelemetryGroupResourceUpdateOne {
	_u.mutation.RemoveProfileIDs(ids...)
	return _u
}

// RemoveProfiles removes "profiles" edges to TelemetryProfile entities.
func (_u *TelemetryGroupResourceUpdateOne) RemoveProfiles(v ...*TelemetryProfile) *TelemetryGroupResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProfileIDs(ids...)
}

// Where appends a list predicates to the TelemetryGroupResourceUpdate builder.
func (_u *TelemetryGroupResourceUpdateOne) Where(ps ...predicate.TelemetryGroupResource) *TelemetryGroupResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TelemetryGroupResourceUpdateOne) Select(field string, fields ...string) *TelemetryGroupResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TelemetryGroupResource entity.
func (_u *TelemetryGroupResourceUpdateOne) Save(ctx context.Context) (*TelemetryGroupResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TelemetryGroupResourceUpdateOne) SaveX(ctx context.Context) *TelemetryGroupResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TelemetryGroupResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TelemetryGroupResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TelemetryGroupResourceUpdateOne) check() error {
	if v, ok := _u.mutation.Kind(); ok {
		if err := telemetrygroupresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CollectorKind(); ok {
		if err := telemetrygroupresource.CollectorKindValidator(v); err != nil {
			return &ValidationError{Name: "collector_kind", err: fmt.Errorf(`ent: validator failed for field "TelemetryGroupResource.collector_kind": %w`, err)}
		}
	}
	return nil
}

func (_u *TelemetryGroupResourceUpdateOne) sqlSave(ctx context.Context) (_node *TelemetryGroupResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(telemetrygroupresource.Table, telemetrygroupresource.Columns, sqlgraph.NewFieldSpec(telemetrygroupresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TelemetryGroupResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, telemetrygroupresource.FieldID)
		for _, f := range fields {
			if !telemetrygroupresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != telemetrygroupresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(telemetrygroupresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(telemetrygroupresource.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(telemetrygroupresource.FieldKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.CollectorKind(); ok {
		_spec.SetField(telemetrygroupresource.FieldCollectorKind, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Groups(); ok {
		_spec.SetField(telemetrygroupresource.FieldGroups, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(telemetrygroupresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !_u.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   telemetrygroupresource.ProfilesTable,
			Columns: []string{telemetrygroupresource.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(telemetryprofile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TelemetryGroupResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{telemetrygroupresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
