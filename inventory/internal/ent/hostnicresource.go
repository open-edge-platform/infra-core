// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
)

// HostnicResource is the model entity for the HostnicResource schema.
type HostnicResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// ProviderStatus holds the value of the "provider_status" field.
	ProviderStatus string `json:"provider_status,omitempty"`
	// DeviceName holds the value of the "device_name" field.
	DeviceName string `json:"device_name,omitempty"`
	// PciIdentifier holds the value of the "pci_identifier" field.
	PciIdentifier string `json:"pci_identifier,omitempty"`
	// MACAddr holds the value of the "mac_addr" field.
	MACAddr string `json:"mac_addr,omitempty"`
	// SriovEnabled holds the value of the "sriov_enabled" field.
	SriovEnabled bool `json:"sriov_enabled,omitempty"`
	// SriovVfsNum holds the value of the "sriov_vfs_num" field.
	SriovVfsNum uint32 `json:"sriov_vfs_num,omitempty"`
	// SriovVfsTotal holds the value of the "sriov_vfs_total" field.
	SriovVfsTotal uint32 `json:"sriov_vfs_total,omitempty"`
	// PeerName holds the value of the "peer_name" field.
	PeerName string `json:"peer_name,omitempty"`
	// PeerDescription holds the value of the "peer_description" field.
	PeerDescription string `json:"peer_description,omitempty"`
	// PeerMAC holds the value of the "peer_mac" field.
	PeerMAC string `json:"peer_mac,omitempty"`
	// PeerMgmtIP holds the value of the "peer_mgmt_ip" field.
	PeerMgmtIP string `json:"peer_mgmt_ip,omitempty"`
	// PeerPort holds the value of the "peer_port" field.
	PeerPort string `json:"peer_port,omitempty"`
	// SupportedLinkMode holds the value of the "supported_link_mode" field.
	SupportedLinkMode string `json:"supported_link_mode,omitempty"`
	// AdvertisingLinkMode holds the value of the "advertising_link_mode" field.
	AdvertisingLinkMode string `json:"advertising_link_mode,omitempty"`
	// CurrentSpeedBps holds the value of the "current_speed_bps" field.
	CurrentSpeedBps uint64 `json:"current_speed_bps,omitempty"`
	// CurrentDuplex holds the value of the "current_duplex" field.
	CurrentDuplex string `json:"current_duplex,omitempty"`
	// Features holds the value of the "features" field.
	Features string `json:"features,omitempty"`
	// Mtu holds the value of the "mtu" field.
	Mtu uint32 `json:"mtu,omitempty"`
	// LinkState holds the value of the "link_state" field.
	LinkState hostnicresource.LinkState `json:"link_state,omitempty"`
	// BmcInterface holds the value of the "bmc_interface" field.
	BmcInterface bool `json:"bmc_interface,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostnicResourceQuery when eager-loading is set.
	Edges                 HostnicResourceEdges `json:"edges"`
	hostnic_resource_host *int
	selectValues          sql.SelectValues
}

// HostnicResourceEdges holds the relations/edges for other nodes in the graph.
type HostnicResourceEdges struct {
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostnicResourceEdges) HostOrErr() (*HostResource, error) {
	if e.Host != nil {
		return e.Host, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hostresource.Label}
	}
	return nil, &NotLoadedError{edge: "host"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostnicResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostnicresource.FieldSriovEnabled, hostnicresource.FieldBmcInterface:
			values[i] = new(sql.NullBool)
		case hostnicresource.FieldID, hostnicresource.FieldSriovVfsNum, hostnicresource.FieldSriovVfsTotal, hostnicresource.FieldCurrentSpeedBps, hostnicresource.FieldMtu:
			values[i] = new(sql.NullInt64)
		case hostnicresource.FieldResourceID, hostnicresource.FieldKind, hostnicresource.FieldProviderStatus, hostnicresource.FieldDeviceName, hostnicresource.FieldPciIdentifier, hostnicresource.FieldMACAddr, hostnicresource.FieldPeerName, hostnicresource.FieldPeerDescription, hostnicresource.FieldPeerMAC, hostnicresource.FieldPeerMgmtIP, hostnicresource.FieldPeerPort, hostnicresource.FieldSupportedLinkMode, hostnicresource.FieldAdvertisingLinkMode, hostnicresource.FieldCurrentDuplex, hostnicresource.FieldFeatures, hostnicresource.FieldLinkState, hostnicresource.FieldTenantID, hostnicresource.FieldCreatedAt, hostnicresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case hostnicresource.ForeignKeys[0]: // hostnic_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostnicResource fields.
func (_m *HostnicResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostnicresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case hostnicresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case hostnicresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				_m.Kind = value.String
			}
		case hostnicresource.FieldProviderStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_status", values[i])
			} else if value.Valid {
				_m.ProviderStatus = value.String
			}
		case hostnicresource.FieldDeviceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_name", values[i])
			} else if value.Valid {
				_m.DeviceName = value.String
			}
		case hostnicresource.FieldPciIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pci_identifier", values[i])
			} else if value.Valid {
				_m.PciIdentifier = value.String
			}
		case hostnicresource.FieldMACAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mac_addr", values[i])
			} else if value.Valid {
				_m.MACAddr = value.String
			}
		case hostnicresource.FieldSriovEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field sriov_enabled", values[i])
			} else if value.Valid {
				_m.SriovEnabled = value.Bool
			}
		case hostnicresource.FieldSriovVfsNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sriov_vfs_num", values[i])
			} else if value.Valid {
				_m.SriovVfsNum = uint32(value.Int64)
			}
		case hostnicresource.FieldSriovVfsTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sriov_vfs_total", values[i])
			} else if value.Valid {
				_m.SriovVfsTotal = uint32(value.Int64)
			}
		case hostnicresource.FieldPeerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_name", values[i])
			} else if value.Valid {
				_m.PeerName = value.String
			}
		case hostnicresource.FieldPeerDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_description", values[i])
			} else if value.Valid {
				_m.PeerDescription = value.String
			}
		case hostnicresource.FieldPeerMAC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_mac", values[i])
			} else if value.Valid {
				_m.PeerMAC = value.String
			}
		case hostnicresource.FieldPeerMgmtIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_mgmt_ip", values[i])
			} else if value.Valid {
				_m.PeerMgmtIP = value.String
			}
		case hostnicresource.FieldPeerPort:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field peer_port", values[i])
			} else if value.Valid {
				_m.PeerPort = value.String
			}
		case hostnicresource.FieldSupportedLinkMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field supported_link_mode", values[i])
			} else if value.Valid {
				_m.SupportedLinkMode = value.String
			}
		case hostnicresource.FieldAdvertisingLinkMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field advertising_link_mode", values[i])
			} else if value.Valid {
				_m.AdvertisingLinkMode = value.String
			}
		case hostnicresource.FieldCurrentSpeedBps:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field current_speed_bps", values[i])
			} else if value.Valid {
				_m.CurrentSpeedBps = uint64(value.Int64)
			}
		case hostnicresource.FieldCurrentDuplex:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_duplex", values[i])
			} else if value.Valid {
				_m.CurrentDuplex = value.String
			}
		case hostnicresource.FieldFeatures:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field features", values[i])
			} else if value.Valid {
				_m.Features = value.String
			}
		case hostnicresource.FieldMtu:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field mtu", values[i])
			} else if value.Valid {
				_m.Mtu = uint32(value.Int64)
			}
		case hostnicresource.FieldLinkState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link_state", values[i])
			} else if value.Valid {
				_m.LinkState = hostnicresource.LinkState(value.String)
			}
		case hostnicresource.FieldBmcInterface:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_interface", values[i])
			} else if value.Valid {
				_m.BmcInterface = value.Bool
			}
		case hostnicresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case hostnicresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case hostnicresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		case hostnicresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hostnic_resource_host", value)
			} else if value.Valid {
				_m.hostnic_resource_host = new(int)
				*_m.hostnic_resource_host = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostnicResource.
// This includes values selected through modifiers, order, etc.
func (_m *HostnicResource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the HostnicResource entity.
func (_m *HostnicResource) QueryHost() *HostResourceQuery {
	return NewHostnicResourceClient(_m.config).QueryHost(_m)
}

// Update returns a builder for updating this HostnicResource.
// Note that you need to call HostnicResource.Unwrap() before calling this method if this HostnicResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *HostnicResource) Update() *HostnicResourceUpdateOne {
	return NewHostnicResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the HostnicResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *HostnicResource) Unwrap() *HostnicResource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostnicResource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *HostnicResource) String() string {
	var builder strings.Builder
	builder.WriteString("HostnicResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(_m.Kind)
	builder.WriteString(", ")
	builder.WriteString("provider_status=")
	builder.WriteString(_m.ProviderStatus)
	builder.WriteString(", ")
	builder.WriteString("device_name=")
	builder.WriteString(_m.DeviceName)
	builder.WriteString(", ")
	builder.WriteString("pci_identifier=")
	builder.WriteString(_m.PciIdentifier)
	builder.WriteString(", ")
	builder.WriteString("mac_addr=")
	builder.WriteString(_m.MACAddr)
	builder.WriteString(", ")
	builder.WriteString("sriov_enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.SriovEnabled))
	builder.WriteString(", ")
	builder.WriteString("sriov_vfs_num=")
	builder.WriteString(fmt.Sprintf("%v", _m.SriovVfsNum))
	builder.WriteString(", ")
	builder.WriteString("sriov_vfs_total=")
	builder.WriteString(fmt.Sprintf("%v", _m.SriovVfsTotal))
	builder.WriteString(", ")
	builder.WriteString("peer_name=")
	builder.WriteString(_m.PeerName)
	builder.WriteString(", ")
	builder.WriteString("peer_description=")
	builder.WriteString(_m.PeerDescription)
	builder.WriteString(", ")
	builder.WriteString("peer_mac=")
	builder.WriteString(_m.PeerMAC)
	builder.WriteString(", ")
	builder.WriteString("peer_mgmt_ip=")
	builder.WriteString(_m.PeerMgmtIP)
	builder.WriteString(", ")
	builder.WriteString("peer_port=")
	builder.WriteString(_m.PeerPort)
	builder.WriteString(", ")
	builder.WriteString("supported_link_mode=")
	builder.WriteString(_m.SupportedLinkMode)
	builder.WriteString(", ")
	builder.WriteString("advertising_link_mode=")
	builder.WriteString(_m.AdvertisingLinkMode)
	builder.WriteString(", ")
	builder.WriteString("current_speed_bps=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentSpeedBps))
	builder.WriteString(", ")
	builder.WriteString("current_duplex=")
	builder.WriteString(_m.CurrentDuplex)
	builder.WriteString(", ")
	builder.WriteString("features=")
	builder.WriteString(_m.Features)
	builder.WriteString(", ")
	builder.WriteString("mtu=")
	builder.WriteString(fmt.Sprintf("%v", _m.Mtu))
	builder.WriteString(", ")
	builder.WriteString("link_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.LinkState))
	builder.WriteString(", ")
	builder.WriteString("bmc_interface=")
	builder.WriteString(fmt.Sprintf("%v", _m.BmcInterface))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// HostnicResources is a parsable slice of HostnicResource.
type HostnicResources []*HostnicResource
