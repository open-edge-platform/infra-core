// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OperatingSystemResourceUpdate is the builder for updating OperatingSystemResource entities.
type OperatingSystemResourceUpdate struct {
	config
	hooks    []Hook
	mutation *OperatingSystemResourceMutation
}

// Where appends a list predicates to the OperatingSystemResourceUpdate builder.
func (_u *OperatingSystemResourceUpdate) Where(ps ...predicate.OperatingSystemResource) *OperatingSystemResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *OperatingSystemResourceUpdate) SetResourceID(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableResourceID(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetArchitecture sets the "architecture" field.
func (_u *OperatingSystemResourceUpdate) SetArchitecture(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetArchitecture(v)
	return _u
}

// SetNillableArchitecture sets the "architecture" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableArchitecture(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetArchitecture(*v)
	}
	return _u
}

// ClearArchitecture clears the value of the "architecture" field.
func (_u *OperatingSystemResourceUpdate) ClearArchitecture() *OperatingSystemResourceUpdate {
	_u.mutation.ClearArchitecture()
	return _u
}

// SetInstalledPackages sets the "installed_packages" field.
func (_u *OperatingSystemResourceUpdate) SetInstalledPackages(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetInstalledPackages(v)
	return _u
}

// SetNillableInstalledPackages sets the "installed_packages" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableInstalledPackages(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetInstalledPackages(*v)
	}
	return _u
}

// ClearInstalledPackages clears the value of the "installed_packages" field.
func (_u *OperatingSystemResourceUpdate) ClearInstalledPackages() *OperatingSystemResourceUpdate {
	_u.mutation.ClearInstalledPackages()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *OperatingSystemResourceUpdate) SetMetadata(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableMetadata(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *OperatingSystemResourceUpdate) ClearMetadata() *OperatingSystemResourceUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetExistingCves sets the "existing_cves" field.
func (_u *OperatingSystemResourceUpdate) SetExistingCves(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetExistingCves(v)
	return _u
}

// SetNillableExistingCves sets the "existing_cves" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableExistingCves(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetExistingCves(*v)
	}
	return _u
}

// ClearExistingCves clears the value of the "existing_cves" field.
func (_u *OperatingSystemResourceUpdate) ClearExistingCves() *OperatingSystemResourceUpdate {
	_u.mutation.ClearExistingCves()
	return _u
}

// SetFixedCves sets the "fixed_cves" field.
func (_u *OperatingSystemResourceUpdate) SetFixedCves(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetFixedCves(v)
	return _u
}

// SetNillableFixedCves sets the "fixed_cves" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableFixedCves(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetFixedCves(*v)
	}
	return _u
}

// ClearFixedCves clears the value of the "fixed_cves" field.
func (_u *OperatingSystemResourceUpdate) ClearFixedCves() *OperatingSystemResourceUpdate {
	_u.mutation.ClearFixedCves()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OperatingSystemResourceUpdate) SetUpdatedAt(v string) *OperatingSystemResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdate) SetNillableUpdatedAt(v *string) *OperatingSystemResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// Mutation returns the OperatingSystemResourceMutation object of the builder.
func (_u *OperatingSystemResourceUpdate) Mutation() *OperatingSystemResourceMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OperatingSystemResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OperatingSystemResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OperatingSystemResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OperatingSystemResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *OperatingSystemResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(operatingsystemresource.Table, operatingsystemresource.Columns, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(operatingsystemresource.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(operatingsystemresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Architecture(); ok {
		_spec.SetField(operatingsystemresource.FieldArchitecture, field.TypeString, value)
	}
	if _u.mutation.ArchitectureCleared() {
		_spec.ClearField(operatingsystemresource.FieldArchitecture, field.TypeString)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldImageURL, field.TypeString)
	}
	if _u.mutation.ImageIDCleared() {
		_spec.ClearField(operatingsystemresource.FieldImageID, field.TypeString)
	}
	if _u.mutation.Sha256Cleared() {
		_spec.ClearField(operatingsystemresource.FieldSha256, field.TypeString)
	}
	if _u.mutation.ProfileNameCleared() {
		_spec.ClearField(operatingsystemresource.FieldProfileName, field.TypeString)
	}
	if _u.mutation.ProfileVersionCleared() {
		_spec.ClearField(operatingsystemresource.FieldProfileVersion, field.TypeString)
	}
	if value, ok := _u.mutation.InstalledPackages(); ok {
		_spec.SetField(operatingsystemresource.FieldInstalledPackages, field.TypeString, value)
	}
	if _u.mutation.InstalledPackagesCleared() {
		_spec.ClearField(operatingsystemresource.FieldInstalledPackages, field.TypeString)
	}
	if _u.mutation.InstalledPackagesURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldInstalledPackagesURL, field.TypeString)
	}
	if _u.mutation.SecurityFeatureCleared() {
		_spec.ClearField(operatingsystemresource.FieldSecurityFeature, field.TypeEnum)
	}
	if _u.mutation.OsTypeCleared() {
		_spec.ClearField(operatingsystemresource.FieldOsType, field.TypeEnum)
	}
	if _u.mutation.PlatformBundleCleared() {
		_spec.ClearField(operatingsystemresource.FieldPlatformBundle, field.TypeString)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(operatingsystemresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(operatingsystemresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(operatingsystemresource.FieldMetadata, field.TypeString)
	}
	if _u.mutation.ExistingCvesURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldExistingCvesURL, field.TypeString)
	}
	if value, ok := _u.mutation.ExistingCves(); ok {
		_spec.SetField(operatingsystemresource.FieldExistingCves, field.TypeString, value)
	}
	if _u.mutation.ExistingCvesCleared() {
		_spec.ClearField(operatingsystemresource.FieldExistingCves, field.TypeString)
	}
	if _u.mutation.FixedCvesURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldFixedCvesURL, field.TypeString)
	}
	if value, ok := _u.mutation.FixedCves(); ok {
		_spec.SetField(operatingsystemresource.FieldFixedCves, field.TypeString, value)
	}
	if _u.mutation.FixedCvesCleared() {
		_spec.ClearField(operatingsystemresource.FieldFixedCves, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystemresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OperatingSystemResourceUpdateOne is the builder for updating a single OperatingSystemResource entity.
type OperatingSystemResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OperatingSystemResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *OperatingSystemResourceUpdateOne) SetResourceID(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableResourceID(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetArchitecture sets the "architecture" field.
func (_u *OperatingSystemResourceUpdateOne) SetArchitecture(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetArchitecture(v)
	return _u
}

// SetNillableArchitecture sets the "architecture" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableArchitecture(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetArchitecture(*v)
	}
	return _u
}

// ClearArchitecture clears the value of the "architecture" field.
func (_u *OperatingSystemResourceUpdateOne) ClearArchitecture() *OperatingSystemResourceUpdateOne {
	_u.mutation.ClearArchitecture()
	return _u
}

// SetInstalledPackages sets the "installed_packages" field.
func (_u *OperatingSystemResourceUpdateOne) SetInstalledPackages(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetInstalledPackages(v)
	return _u
}

// SetNillableInstalledPackages sets the "installed_packages" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableInstalledPackages(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetInstalledPackages(*v)
	}
	return _u
}

// ClearInstalledPackages clears the value of the "installed_packages" field.
func (_u *OperatingSystemResourceUpdateOne) ClearInstalledPackages() *OperatingSystemResourceUpdateOne {
	_u.mutation.ClearInstalledPackages()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *OperatingSystemResourceUpdateOne) SetMetadata(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableMetadata(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *OperatingSystemResourceUpdateOne) ClearMetadata() *OperatingSystemResourceUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetExistingCves sets the "existing_cves" field.
func (_u *OperatingSystemResourceUpdateOne) SetExistingCves(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetExistingCves(v)
	return _u
}

// SetNillableExistingCves sets the "existing_cves" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableExistingCves(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetExistingCves(*v)
	}
	return _u
}

// ClearExistingCves clears the value of the "existing_cves" field.
func (_u *OperatingSystemResourceUpdateOne) ClearExistingCves() *OperatingSystemResourceUpdateOne {
	_u.mutation.ClearExistingCves()
	return _u
}

// SetFixedCves sets the "fixed_cves" field.
func (_u *OperatingSystemResourceUpdateOne) SetFixedCves(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetFixedCves(v)
	return _u
}

// SetNillableFixedCves sets the "fixed_cves" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableFixedCves(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetFixedCves(*v)
	}
	return _u
}

// ClearFixedCves clears the value of the "fixed_cves" field.
func (_u *OperatingSystemResourceUpdateOne) ClearFixedCves() *OperatingSystemResourceUpdateOne {
	_u.mutation.ClearFixedCves()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OperatingSystemResourceUpdateOne) SetUpdatedAt(v string) *OperatingSystemResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OperatingSystemResourceUpdateOne) SetNillableUpdatedAt(v *string) *OperatingSystemResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// Mutation returns the OperatingSystemResourceMutation object of the builder.
func (_u *OperatingSystemResourceUpdateOne) Mutation() *OperatingSystemResourceMutation {
	return _u.mutation
}

// Where appends a list predicates to the OperatingSystemResourceUpdate builder.
func (_u *OperatingSystemResourceUpdateOne) Where(ps ...predicate.OperatingSystemResource) *OperatingSystemResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OperatingSystemResourceUpdateOne) Select(field string, fields ...string) *OperatingSystemResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OperatingSystemResource entity.
func (_u *OperatingSystemResourceUpdateOne) Save(ctx context.Context) (*OperatingSystemResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OperatingSystemResourceUpdateOne) SaveX(ctx context.Context) *OperatingSystemResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OperatingSystemResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OperatingSystemResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *OperatingSystemResourceUpdateOne) sqlSave(ctx context.Context) (_node *OperatingSystemResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(operatingsystemresource.Table, operatingsystemresource.Columns, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OperatingSystemResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, operatingsystemresource.FieldID)
		for _, f := range fields {
			if !operatingsystemresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != operatingsystemresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(operatingsystemresource.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(operatingsystemresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Architecture(); ok {
		_spec.SetField(operatingsystemresource.FieldArchitecture, field.TypeString, value)
	}
	if _u.mutation.ArchitectureCleared() {
		_spec.ClearField(operatingsystemresource.FieldArchitecture, field.TypeString)
	}
	if _u.mutation.ImageURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldImageURL, field.TypeString)
	}
	if _u.mutation.ImageIDCleared() {
		_spec.ClearField(operatingsystemresource.FieldImageID, field.TypeString)
	}
	if _u.mutation.Sha256Cleared() {
		_spec.ClearField(operatingsystemresource.FieldSha256, field.TypeString)
	}
	if _u.mutation.ProfileNameCleared() {
		_spec.ClearField(operatingsystemresource.FieldProfileName, field.TypeString)
	}
	if _u.mutation.ProfileVersionCleared() {
		_spec.ClearField(operatingsystemresource.FieldProfileVersion, field.TypeString)
	}
	if value, ok := _u.mutation.InstalledPackages(); ok {
		_spec.SetField(operatingsystemresource.FieldInstalledPackages, field.TypeString, value)
	}
	if _u.mutation.InstalledPackagesCleared() {
		_spec.ClearField(operatingsystemresource.FieldInstalledPackages, field.TypeString)
	}
	if _u.mutation.InstalledPackagesURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldInstalledPackagesURL, field.TypeString)
	}
	if _u.mutation.SecurityFeatureCleared() {
		_spec.ClearField(operatingsystemresource.FieldSecurityFeature, field.TypeEnum)
	}
	if _u.mutation.OsTypeCleared() {
		_spec.ClearField(operatingsystemresource.FieldOsType, field.TypeEnum)
	}
	if _u.mutation.PlatformBundleCleared() {
		_spec.ClearField(operatingsystemresource.FieldPlatformBundle, field.TypeString)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(operatingsystemresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(operatingsystemresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(operatingsystemresource.FieldMetadata, field.TypeString)
	}
	if _u.mutation.ExistingCvesURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldExistingCvesURL, field.TypeString)
	}
	if value, ok := _u.mutation.ExistingCves(); ok {
		_spec.SetField(operatingsystemresource.FieldExistingCves, field.TypeString, value)
	}
	if _u.mutation.ExistingCvesCleared() {
		_spec.ClearField(operatingsystemresource.FieldExistingCves, field.TypeString)
	}
	if _u.mutation.FixedCvesURLCleared() {
		_spec.ClearField(operatingsystemresource.FieldFixedCvesURL, field.TypeString)
	}
	if value, ok := _u.mutation.FixedCves(); ok {
		_spec.SetField(operatingsystemresource.FieldFixedCves, field.TypeString, value)
	}
	if _u.mutation.FixedCvesCleared() {
		_spec.ClearField(operatingsystemresource.FieldFixedCves, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdatedAt, field.TypeString, value)
	}
	_node = &OperatingSystemResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{operatingsystemresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
