// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/endpointresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/netlinkresource"
)

// NetlinkResourceCreate is the builder for creating a NetlinkResource entity.
type NetlinkResourceCreate struct {
	config
	mutation *NetlinkResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (_c *NetlinkResourceCreate) SetResourceID(v string) *NetlinkResourceCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetKind sets the "kind" field.
func (_c *NetlinkResourceCreate) SetKind(v string) *NetlinkResourceCreate {
	_c.mutation.SetKind(v)
	return _c
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_c *NetlinkResourceCreate) SetNillableKind(v *string) *NetlinkResourceCreate {
	if v != nil {
		_c.SetKind(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *NetlinkResourceCreate) SetName(v string) *NetlinkResourceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *NetlinkResourceCreate) SetNillableName(v *string) *NetlinkResourceCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDesiredState sets the "desired_state" field.
func (_c *NetlinkResourceCreate) SetDesiredState(v netlinkresource.DesiredState) *NetlinkResourceCreate {
	_c.mutation.SetDesiredState(v)
	return _c
}

// SetCurrentState sets the "current_state" field.
func (_c *NetlinkResourceCreate) SetCurrentState(v netlinkresource.CurrentState) *NetlinkResourceCreate {
	_c.mutation.SetCurrentState(v)
	return _c
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_c *NetlinkResourceCreate) SetNillableCurrentState(v *netlinkresource.CurrentState) *NetlinkResourceCreate {
	if v != nil {
		_c.SetCurrentState(*v)
	}
	return _c
}

// SetProviderStatus sets the "provider_status" field.
func (_c *NetlinkResourceCreate) SetProviderStatus(v string) *NetlinkResourceCreate {
	_c.mutation.SetProviderStatus(v)
	return _c
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (_c *NetlinkResourceCreate) SetNillableProviderStatus(v *string) *NetlinkResourceCreate {
	if v != nil {
		_c.SetProviderStatus(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *NetlinkResourceCreate) SetTenantID(v string) *NetlinkResourceCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *NetlinkResourceCreate) SetCreatedAt(v string) *NetlinkResourceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NetlinkResourceCreate) SetUpdatedAt(v string) *NetlinkResourceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetSrcID sets the "src" edge to the EndpointResource entity by ID.
func (_c *NetlinkResourceCreate) SetSrcID(id int) *NetlinkResourceCreate {
	_c.mutation.SetSrcID(id)
	return _c
}

// SetNillableSrcID sets the "src" edge to the EndpointResource entity by ID if the given value is not nil.
func (_c *NetlinkResourceCreate) SetNillableSrcID(id *int) *NetlinkResourceCreate {
	if id != nil {
		_c = _c.SetSrcID(*id)
	}
	return _c
}

// SetSrc sets the "src" edge to the EndpointResource entity.
func (_c *NetlinkResourceCreate) SetSrc(v *EndpointResource) *NetlinkResourceCreate {
	return _c.SetSrcID(v.ID)
}

// SetDstID sets the "dst" edge to the EndpointResource entity by ID.
func (_c *NetlinkResourceCreate) SetDstID(id int) *NetlinkResourceCreate {
	_c.mutation.SetDstID(id)
	return _c
}

// SetNillableDstID sets the "dst" edge to the EndpointResource entity by ID if the given value is not nil.
func (_c *NetlinkResourceCreate) SetNillableDstID(id *int) *NetlinkResourceCreate {
	if id != nil {
		_c = _c.SetDstID(*id)
	}
	return _c
}

// SetDst sets the "dst" edge to the EndpointResource entity.
func (_c *NetlinkResourceCreate) SetDst(v *EndpointResource) *NetlinkResourceCreate {
	return _c.SetDstID(v.ID)
}

// Mutation returns the NetlinkResourceMutation object of the builder.
func (_c *NetlinkResourceCreate) Mutation() *NetlinkResourceMutation {
	return _c.mutation
}

// Save creates the NetlinkResource in the database.
func (_c *NetlinkResourceCreate) Save(ctx context.Context) (*NetlinkResource, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NetlinkResourceCreate) SaveX(ctx context.Context) *NetlinkResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NetlinkResourceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NetlinkResourceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NetlinkResourceCreate) check() error {
	if _, ok := _c.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "NetlinkResource.resource_id"`)}
	}
	if _, ok := _c.mutation.DesiredState(); !ok {
		return &ValidationError{Name: "desired_state", err: errors.New(`ent: missing required field "NetlinkResource.desired_state"`)}
	}
	if v, ok := _c.mutation.DesiredState(); ok {
		if err := netlinkresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "NetlinkResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CurrentState(); ok {
		if err := netlinkresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "NetlinkResource.current_state": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "NetlinkResource.tenant_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NetlinkResource.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NetlinkResource.updated_at"`)}
	}
	return nil
}

func (_c *NetlinkResourceCreate) sqlSave(ctx context.Context) (*NetlinkResource, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NetlinkResourceCreate) createSpec() (*NetlinkResource, *sqlgraph.CreateSpec) {
	var (
		_node = &NetlinkResource{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(netlinkresource.Table, sqlgraph.NewFieldSpec(netlinkresource.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(netlinkresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.Kind(); ok {
		_spec.SetField(netlinkresource.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(netlinkresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.DesiredState(); ok {
		_spec.SetField(netlinkresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := _c.mutation.CurrentState(); ok {
		_spec.SetField(netlinkresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := _c.mutation.ProviderStatus(); ok {
		_spec.SetField(netlinkresource.FieldProviderStatus, field.TypeString, value)
		_node.ProviderStatus = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(netlinkresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(netlinkresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(netlinkresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.SrcIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   netlinkresource.SrcTable,
			Columns: []string{netlinkresource.SrcColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.netlink_resource_src = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   netlinkresource.DstTable,
			Columns: []string{netlinkresource.DstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(endpointresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.netlink_resource_dst = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetlinkResourceCreateBulk is the builder for creating many NetlinkResource entities in bulk.
type NetlinkResourceCreateBulk struct {
	config
	err      error
	builders []*NetlinkResourceCreate
}

// Save creates the NetlinkResource entities in the database.
func (_c *NetlinkResourceCreateBulk) Save(ctx context.Context) ([]*NetlinkResource, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NetlinkResource, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetlinkResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NetlinkResourceCreateBulk) SaveX(ctx context.Context) []*NetlinkResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NetlinkResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NetlinkResourceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
