// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdatePolicyResourceDelete is the builder for deleting a OSUpdatePolicyResource entity.
type OSUpdatePolicyResourceDelete struct {
	config
	hooks    []Hook
	mutation *OSUpdatePolicyResourceMutation
}

// Where appends a list predicates to the OSUpdatePolicyResourceDelete builder.
func (ouprd *OSUpdatePolicyResourceDelete) Where(ps ...predicate.OSUpdatePolicyResource) *OSUpdatePolicyResourceDelete {
	ouprd.mutation.Where(ps...)
	return ouprd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ouprd *OSUpdatePolicyResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ouprd.sqlExec, ouprd.mutation, ouprd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ouprd *OSUpdatePolicyResourceDelete) ExecX(ctx context.Context) int {
	n, err := ouprd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ouprd *OSUpdatePolicyResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(osupdatepolicyresource.Table, sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt))
	if ps := ouprd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ouprd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ouprd.mutation.done = true
	return affected, err
}

// OSUpdatePolicyResourceDeleteOne is the builder for deleting a single OSUpdatePolicyResource entity.
type OSUpdatePolicyResourceDeleteOne struct {
	ouprd *OSUpdatePolicyResourceDelete
}

// Where appends a list predicates to the OSUpdatePolicyResourceDelete builder.
func (ouprdo *OSUpdatePolicyResourceDeleteOne) Where(ps ...predicate.OSUpdatePolicyResource) *OSUpdatePolicyResourceDeleteOne {
	ouprdo.ouprd.mutation.Where(ps...)
	return ouprdo
}

// Exec executes the deletion query.
func (ouprdo *OSUpdatePolicyResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := ouprdo.ouprd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{osupdatepolicyresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ouprdo *OSUpdatePolicyResourceDeleteOne) ExecX(ctx context.Context) {
	if err := ouprdo.Exec(ctx); err != nil {
		panic(err)
	}
}
