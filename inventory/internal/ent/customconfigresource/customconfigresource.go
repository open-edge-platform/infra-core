// Code generated by ent, DO NOT EDIT.

package customconfigresource

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the customconfigresource type in the database.
	Label = "custom_config_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldConfigName holds the string denoting the config_name field in the database.
	FieldConfigName = "config_name"
	// FieldConfigDescription holds the string denoting the config_description field in the database.
	FieldConfigDescription = "config_description"
	// FieldConfigData holds the string denoting the config_data field in the database.
	FieldConfigData = "config_data"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the customconfigresource in the database.
	Table = "custom_config_resources"
)

// Columns holds all SQL columns for customconfigresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldConfigName,
	FieldConfigDescription,
	FieldConfigData,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "custom_config_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"instance_resource_custom_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CustomConfigResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByConfigName orders the results by the config_name field.
func ByConfigName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigName, opts...).ToFunc()
}

// ByConfigDescription orders the results by the config_description field.
func ByConfigDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigDescription, opts...).ToFunc()
}

// ByConfigData orders the results by the config_data field.
func ByConfigData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConfigData, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
