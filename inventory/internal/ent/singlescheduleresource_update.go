// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/singlescheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// SingleScheduleResourceUpdate is the builder for updating SingleScheduleResource entities.
type SingleScheduleResourceUpdate struct {
	config
	hooks    []Hook
	mutation *SingleScheduleResourceMutation
}

// Where appends a list predicates to the SingleScheduleResourceUpdate builder.
func (_u *SingleScheduleResourceUpdate) Where(ps ...predicate.SingleScheduleResource) *SingleScheduleResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *SingleScheduleResourceUpdate) SetResourceID(v string) *SingleScheduleResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableResourceID(v *string) *SingleScheduleResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetScheduleStatus sets the "schedule_status" field.
func (_u *SingleScheduleResourceUpdate) SetScheduleStatus(v singlescheduleresource.ScheduleStatus) *SingleScheduleResourceUpdate {
	_u.mutation.SetScheduleStatus(v)
	return _u
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableScheduleStatus(v *singlescheduleresource.ScheduleStatus) *SingleScheduleResourceUpdate {
	if v != nil {
		_u.SetScheduleStatus(*v)
	}
	return _u
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (_u *SingleScheduleResourceUpdate) ClearScheduleStatus() *SingleScheduleResourceUpdate {
	_u.mutation.ClearScheduleStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *SingleScheduleResourceUpdate) SetName(v string) *SingleScheduleResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableName(v *string) *SingleScheduleResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *SingleScheduleResourceUpdate) ClearName() *SingleScheduleResourceUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetStartSeconds sets the "start_seconds" field.
func (_u *SingleScheduleResourceUpdate) SetStartSeconds(v uint64) *SingleScheduleResourceUpdate {
	_u.mutation.ResetStartSeconds()
	_u.mutation.SetStartSeconds(v)
	return _u
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableStartSeconds(v *uint64) *SingleScheduleResourceUpdate {
	if v != nil {
		_u.SetStartSeconds(*v)
	}
	return _u
}

// AddStartSeconds adds value to the "start_seconds" field.
func (_u *SingleScheduleResourceUpdate) AddStartSeconds(v int64) *SingleScheduleResourceUpdate {
	_u.mutation.AddStartSeconds(v)
	return _u
}

// SetEndSeconds sets the "end_seconds" field.
func (_u *SingleScheduleResourceUpdate) SetEndSeconds(v uint64) *SingleScheduleResourceUpdate {
	_u.mutation.ResetEndSeconds()
	_u.mutation.SetEndSeconds(v)
	return _u
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableEndSeconds(v *uint64) *SingleScheduleResourceUpdate {
	if v != nil {
		_u.SetEndSeconds(*v)
	}
	return _u
}

// AddEndSeconds adds value to the "end_seconds" field.
func (_u *SingleScheduleResourceUpdate) AddEndSeconds(v int64) *SingleScheduleResourceUpdate {
	_u.mutation.AddEndSeconds(v)
	return _u
}

// ClearEndSeconds clears the value of the "end_seconds" field.
func (_u *SingleScheduleResourceUpdate) ClearEndSeconds() *SingleScheduleResourceUpdate {
	_u.mutation.ClearEndSeconds()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SingleScheduleResourceUpdate) SetUpdatedAt(v string) *SingleScheduleResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableUpdatedAt(v *string) *SingleScheduleResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (_u *SingleScheduleResourceUpdate) SetTargetSiteID(id int) *SingleScheduleResourceUpdate {
	_u.mutation.SetTargetSiteID(id)
	return _u
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableTargetSiteID(id *int) *SingleScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetSiteID(*id)
	}
	return _u
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (_u *SingleScheduleResourceUpdate) SetTargetSite(v *SiteResource) *SingleScheduleResourceUpdate {
	return _u.SetTargetSiteID(v.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (_u *SingleScheduleResourceUpdate) SetTargetHostID(id int) *SingleScheduleResourceUpdate {
	_u.mutation.SetTargetHostID(id)
	return _u
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableTargetHostID(id *int) *SingleScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetHostID(*id)
	}
	return _u
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (_u *SingleScheduleResourceUpdate) SetTargetHost(v *HostResource) *SingleScheduleResourceUpdate {
	return _u.SetTargetHostID(v.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (_u *SingleScheduleResourceUpdate) SetTargetWorkloadID(id int) *SingleScheduleResourceUpdate {
	_u.mutation.SetTargetWorkloadID(id)
	return _u
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableTargetWorkloadID(id *int) *SingleScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetWorkloadID(*id)
	}
	return _u
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (_u *SingleScheduleResourceUpdate) SetTargetWorkload(v *WorkloadResource) *SingleScheduleResourceUpdate {
	return _u.SetTargetWorkloadID(v.ID)
}

// SetTargetRegionID sets the "target_region" edge to the RegionResource entity by ID.
func (_u *SingleScheduleResourceUpdate) SetTargetRegionID(id int) *SingleScheduleResourceUpdate {
	_u.mutation.SetTargetRegionID(id)
	return _u
}

// SetNillableTargetRegionID sets the "target_region" edge to the RegionResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdate) SetNillableTargetRegionID(id *int) *SingleScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetRegionID(*id)
	}
	return _u
}

// SetTargetRegion sets the "target_region" edge to the RegionResource entity.
func (_u *SingleScheduleResourceUpdate) SetTargetRegion(v *RegionResource) *SingleScheduleResourceUpdate {
	return _u.SetTargetRegionID(v.ID)
}

// Mutation returns the SingleScheduleResourceMutation object of the builder.
func (_u *SingleScheduleResourceUpdate) Mutation() *SingleScheduleResourceMutation {
	return _u.mutation
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (_u *SingleScheduleResourceUpdate) ClearTargetSite() *SingleScheduleResourceUpdate {
	_u.mutation.ClearTargetSite()
	return _u
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (_u *SingleScheduleResourceUpdate) ClearTargetHost() *SingleScheduleResourceUpdate {
	_u.mutation.ClearTargetHost()
	return _u
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (_u *SingleScheduleResourceUpdate) ClearTargetWorkload() *SingleScheduleResourceUpdate {
	_u.mutation.ClearTargetWorkload()
	return _u
}

// ClearTargetRegion clears the "target_region" edge to the RegionResource entity.
func (_u *SingleScheduleResourceUpdate) ClearTargetRegion() *SingleScheduleResourceUpdate {
	_u.mutation.ClearTargetRegion()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SingleScheduleResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SingleScheduleResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SingleScheduleResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SingleScheduleResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SingleScheduleResourceUpdate) check() error {
	if v, ok := _u.mutation.ScheduleStatus(); ok {
		if err := singlescheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "SingleScheduleResource.schedule_status": %w`, err)}
		}
	}
	return nil
}

func (_u *SingleScheduleResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(singlescheduleresource.Table, singlescheduleresource.Columns, sqlgraph.NewFieldSpec(singlescheduleresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(singlescheduleresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScheduleStatus(); ok {
		_spec.SetField(singlescheduleresource.FieldScheduleStatus, field.TypeEnum, value)
	}
	if _u.mutation.ScheduleStatusCleared() {
		_spec.ClearField(singlescheduleresource.FieldScheduleStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(singlescheduleresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(singlescheduleresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.StartSeconds(); ok {
		_spec.SetField(singlescheduleresource.FieldStartSeconds, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedStartSeconds(); ok {
		_spec.AddField(singlescheduleresource.FieldStartSeconds, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.EndSeconds(); ok {
		_spec.SetField(singlescheduleresource.FieldEndSeconds, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedEndSeconds(); ok {
		_spec.AddField(singlescheduleresource.FieldEndSeconds, field.TypeUint64, value)
	}
	if _u.mutation.EndSecondsCleared() {
		_spec.ClearField(singlescheduleresource.FieldEndSeconds, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(singlescheduleresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.TargetSiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetSiteTable,
			Columns: []string{singlescheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetSiteTable,
			Columns: []string{singlescheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetHostTable,
			Columns: []string{singlescheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetHostTable,
			Columns: []string{singlescheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetWorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetWorkloadTable,
			Columns: []string{singlescheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetWorkloadTable,
			Columns: []string{singlescheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetRegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetRegionTable,
			Columns: []string{singlescheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetRegionTable,
			Columns: []string{singlescheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{singlescheduleresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SingleScheduleResourceUpdateOne is the builder for updating a single SingleScheduleResource entity.
type SingleScheduleResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SingleScheduleResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *SingleScheduleResourceUpdateOne) SetResourceID(v string) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableResourceID(v *string) *SingleScheduleResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetScheduleStatus sets the "schedule_status" field.
func (_u *SingleScheduleResourceUpdateOne) SetScheduleStatus(v singlescheduleresource.ScheduleStatus) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetScheduleStatus(v)
	return _u
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableScheduleStatus(v *singlescheduleresource.ScheduleStatus) *SingleScheduleResourceUpdateOne {
	if v != nil {
		_u.SetScheduleStatus(*v)
	}
	return _u
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (_u *SingleScheduleResourceUpdateOne) ClearScheduleStatus() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearScheduleStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *SingleScheduleResourceUpdateOne) SetName(v string) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableName(v *string) *SingleScheduleResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *SingleScheduleResourceUpdateOne) ClearName() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetStartSeconds sets the "start_seconds" field.
func (_u *SingleScheduleResourceUpdateOne) SetStartSeconds(v uint64) *SingleScheduleResourceUpdateOne {
	_u.mutation.ResetStartSeconds()
	_u.mutation.SetStartSeconds(v)
	return _u
}

// SetNillableStartSeconds sets the "start_seconds" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableStartSeconds(v *uint64) *SingleScheduleResourceUpdateOne {
	if v != nil {
		_u.SetStartSeconds(*v)
	}
	return _u
}

// AddStartSeconds adds value to the "start_seconds" field.
func (_u *SingleScheduleResourceUpdateOne) AddStartSeconds(v int64) *SingleScheduleResourceUpdateOne {
	_u.mutation.AddStartSeconds(v)
	return _u
}

// SetEndSeconds sets the "end_seconds" field.
func (_u *SingleScheduleResourceUpdateOne) SetEndSeconds(v uint64) *SingleScheduleResourceUpdateOne {
	_u.mutation.ResetEndSeconds()
	_u.mutation.SetEndSeconds(v)
	return _u
}

// SetNillableEndSeconds sets the "end_seconds" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableEndSeconds(v *uint64) *SingleScheduleResourceUpdateOne {
	if v != nil {
		_u.SetEndSeconds(*v)
	}
	return _u
}

// AddEndSeconds adds value to the "end_seconds" field.
func (_u *SingleScheduleResourceUpdateOne) AddEndSeconds(v int64) *SingleScheduleResourceUpdateOne {
	_u.mutation.AddEndSeconds(v)
	return _u
}

// ClearEndSeconds clears the value of the "end_seconds" field.
func (_u *SingleScheduleResourceUpdateOne) ClearEndSeconds() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearEndSeconds()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SingleScheduleResourceUpdateOne) SetUpdatedAt(v string) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableUpdatedAt(v *string) *SingleScheduleResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (_u *SingleScheduleResourceUpdateOne) SetTargetSiteID(id int) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetTargetSiteID(id)
	return _u
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableTargetSiteID(id *int) *SingleScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetSiteID(*id)
	}
	return _u
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (_u *SingleScheduleResourceUpdateOne) SetTargetSite(v *SiteResource) *SingleScheduleResourceUpdateOne {
	return _u.SetTargetSiteID(v.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (_u *SingleScheduleResourceUpdateOne) SetTargetHostID(id int) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetTargetHostID(id)
	return _u
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableTargetHostID(id *int) *SingleScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetHostID(*id)
	}
	return _u
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (_u *SingleScheduleResourceUpdateOne) SetTargetHost(v *HostResource) *SingleScheduleResourceUpdateOne {
	return _u.SetTargetHostID(v.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (_u *SingleScheduleResourceUpdateOne) SetTargetWorkloadID(id int) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetTargetWorkloadID(id)
	return _u
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableTargetWorkloadID(id *int) *SingleScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetWorkloadID(*id)
	}
	return _u
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (_u *SingleScheduleResourceUpdateOne) SetTargetWorkload(v *WorkloadResource) *SingleScheduleResourceUpdateOne {
	return _u.SetTargetWorkloadID(v.ID)
}

// SetTargetRegionID sets the "target_region" edge to the RegionResource entity by ID.
func (_u *SingleScheduleResourceUpdateOne) SetTargetRegionID(id int) *SingleScheduleResourceUpdateOne {
	_u.mutation.SetTargetRegionID(id)
	return _u
}

// SetNillableTargetRegionID sets the "target_region" edge to the RegionResource entity by ID if the given value is not nil.
func (_u *SingleScheduleResourceUpdateOne) SetNillableTargetRegionID(id *int) *SingleScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetRegionID(*id)
	}
	return _u
}

// SetTargetRegion sets the "target_region" edge to the RegionResource entity.
func (_u *SingleScheduleResourceUpdateOne) SetTargetRegion(v *RegionResource) *SingleScheduleResourceUpdateOne {
	return _u.SetTargetRegionID(v.ID)
}

// Mutation returns the SingleScheduleResourceMutation object of the builder.
func (_u *SingleScheduleResourceUpdateOne) Mutation() *SingleScheduleResourceMutation {
	return _u.mutation
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (_u *SingleScheduleResourceUpdateOne) ClearTargetSite() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearTargetSite()
	return _u
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (_u *SingleScheduleResourceUpdateOne) ClearTargetHost() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearTargetHost()
	return _u
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (_u *SingleScheduleResourceUpdateOne) ClearTargetWorkload() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearTargetWorkload()
	return _u
}

// ClearTargetRegion clears the "target_region" edge to the RegionResource entity.
func (_u *SingleScheduleResourceUpdateOne) ClearTargetRegion() *SingleScheduleResourceUpdateOne {
	_u.mutation.ClearTargetRegion()
	return _u
}

// Where appends a list predicates to the SingleScheduleResourceUpdate builder.
func (_u *SingleScheduleResourceUpdateOne) Where(ps ...predicate.SingleScheduleResource) *SingleScheduleResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SingleScheduleResourceUpdateOne) Select(field string, fields ...string) *SingleScheduleResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SingleScheduleResource entity.
func (_u *SingleScheduleResourceUpdateOne) Save(ctx context.Context) (*SingleScheduleResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SingleScheduleResourceUpdateOne) SaveX(ctx context.Context) *SingleScheduleResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SingleScheduleResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SingleScheduleResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SingleScheduleResourceUpdateOne) check() error {
	if v, ok := _u.mutation.ScheduleStatus(); ok {
		if err := singlescheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "SingleScheduleResource.schedule_status": %w`, err)}
		}
	}
	return nil
}

func (_u *SingleScheduleResourceUpdateOne) sqlSave(ctx context.Context) (_node *SingleScheduleResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(singlescheduleresource.Table, singlescheduleresource.Columns, sqlgraph.NewFieldSpec(singlescheduleresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SingleScheduleResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, singlescheduleresource.FieldID)
		for _, f := range fields {
			if !singlescheduleresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != singlescheduleresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(singlescheduleresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScheduleStatus(); ok {
		_spec.SetField(singlescheduleresource.FieldScheduleStatus, field.TypeEnum, value)
	}
	if _u.mutation.ScheduleStatusCleared() {
		_spec.ClearField(singlescheduleresource.FieldScheduleStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(singlescheduleresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(singlescheduleresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.StartSeconds(); ok {
		_spec.SetField(singlescheduleresource.FieldStartSeconds, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedStartSeconds(); ok {
		_spec.AddField(singlescheduleresource.FieldStartSeconds, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.EndSeconds(); ok {
		_spec.SetField(singlescheduleresource.FieldEndSeconds, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedEndSeconds(); ok {
		_spec.AddField(singlescheduleresource.FieldEndSeconds, field.TypeUint64, value)
	}
	if _u.mutation.EndSecondsCleared() {
		_spec.ClearField(singlescheduleresource.FieldEndSeconds, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(singlescheduleresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.TargetSiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetSiteTable,
			Columns: []string{singlescheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetSiteTable,
			Columns: []string{singlescheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetHostTable,
			Columns: []string{singlescheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetHostTable,
			Columns: []string{singlescheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetWorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetWorkloadTable,
			Columns: []string{singlescheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetWorkloadTable,
			Columns: []string{singlescheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetRegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetRegionTable,
			Columns: []string{singlescheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   singlescheduleresource.TargetRegionTable,
			Columns: []string{singlescheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SingleScheduleResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{singlescheduleresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
