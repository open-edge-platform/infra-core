// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
)

// InstanceResource is the model entity for the InstanceResource schema.
type InstanceResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind instanceresource.Kind `json:"kind,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState instanceresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState instanceresource.CurrentState `json:"current_state,omitempty"`
	// VMMemoryBytes holds the value of the "vm_memory_bytes" field.
	VMMemoryBytes uint64 `json:"vm_memory_bytes,omitempty"`
	// VMCPUCores holds the value of the "vm_cpu_cores" field.
	VMCPUCores uint32 `json:"vm_cpu_cores,omitempty"`
	// VMStorageBytes holds the value of the "vm_storage_bytes" field.
	VMStorageBytes uint64 `json:"vm_storage_bytes,omitempty"`
	// SecurityFeature holds the value of the "security_feature" field.
	SecurityFeature instanceresource.SecurityFeature `json:"security_feature,omitempty"`
	// InstanceStatus holds the value of the "instance_status" field.
	InstanceStatus string `json:"instance_status,omitempty"`
	// InstanceStatusIndicator holds the value of the "instance_status_indicator" field.
	InstanceStatusIndicator instanceresource.InstanceStatusIndicator `json:"instance_status_indicator,omitempty"`
	// InstanceStatusTimestamp holds the value of the "instance_status_timestamp" field.
	InstanceStatusTimestamp uint64 `json:"instance_status_timestamp,omitempty"`
	// ProvisioningStatus holds the value of the "provisioning_status" field.
	ProvisioningStatus string `json:"provisioning_status,omitempty"`
	// ProvisioningStatusIndicator holds the value of the "provisioning_status_indicator" field.
	ProvisioningStatusIndicator instanceresource.ProvisioningStatusIndicator `json:"provisioning_status_indicator,omitempty"`
	// ProvisioningStatusTimestamp holds the value of the "provisioning_status_timestamp" field.
	ProvisioningStatusTimestamp uint64 `json:"provisioning_status_timestamp,omitempty"`
	// UpdateStatus holds the value of the "update_status" field.
	UpdateStatus string `json:"update_status,omitempty"`
	// UpdateStatusIndicator holds the value of the "update_status_indicator" field.
	UpdateStatusIndicator instanceresource.UpdateStatusIndicator `json:"update_status_indicator,omitempty"`
	// UpdateStatusTimestamp holds the value of the "update_status_timestamp" field.
	UpdateStatusTimestamp uint64 `json:"update_status_timestamp,omitempty"`
	// UpdateStatusDetail holds the value of the "update_status_detail" field.
	UpdateStatusDetail string `json:"update_status_detail,omitempty"`
	// TrustedAttestationStatus holds the value of the "trusted_attestation_status" field.
	TrustedAttestationStatus string `json:"trusted_attestation_status,omitempty"`
	// TrustedAttestationStatusIndicator holds the value of the "trusted_attestation_status_indicator" field.
	TrustedAttestationStatusIndicator instanceresource.TrustedAttestationStatusIndicator `json:"trusted_attestation_status_indicator,omitempty"`
	// TrustedAttestationStatusTimestamp holds the value of the "trusted_attestation_status_timestamp" field.
	TrustedAttestationStatusTimestamp uint64 `json:"trusted_attestation_status_timestamp,omitempty"`
	// ExistingCves holds the value of the "existing_cves" field.
	ExistingCves string `json:"existing_cves,omitempty"`
	// RuntimePackages holds the value of the "runtime_packages" field.
	RuntimePackages string `json:"runtime_packages,omitempty"`
	// OsUpdateAvailable holds the value of the "os_update_available" field.
	OsUpdateAvailable string `json:"os_update_available,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// InstanceStatusDetail holds the value of the "instance_status_detail" field.
	InstanceStatusDetail string `json:"instance_status_detail,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstanceResourceQuery when eager-loading is set.
	Edges                              InstanceResourceEdges `json:"edges"`
	instance_resource_desired_os       *int
	instance_resource_current_os       *int
	instance_resource_os               *int
	instance_resource_provider         *int
	instance_resource_localaccount     *int
	instance_resource_os_update_policy *int
	selectValues                       sql.SelectValues
}

// InstanceResourceEdges holds the relations/edges for other nodes in the graph.
type InstanceResourceEdges struct {
	// Host holds the value of the host edge.
	Host *HostResource `json:"host,omitempty"`
	// DesiredOs holds the value of the desired_os edge.
	DesiredOs *OperatingSystemResource `json:"desired_os,omitempty"`
	// CurrentOs holds the value of the current_os edge.
	CurrentOs *OperatingSystemResource `json:"current_os,omitempty"`
	// Os holds the value of the os edge.
	Os *OperatingSystemResource `json:"os,omitempty"`
	// WorkloadMembers holds the value of the workload_members edge.
	WorkloadMembers []*WorkloadMember `json:"workload_members,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *ProviderResource `json:"provider,omitempty"`
	// Localaccount holds the value of the localaccount edge.
	Localaccount *LocalAccountResource `json:"localaccount,omitempty"`
	// OsUpdatePolicy holds the value of the os_update_policy edge.
	OsUpdatePolicy *OSUpdatePolicyResource `json:"os_update_policy,omitempty"`
	// CustomConfig holds the value of the custom_config edge.
	CustomConfig []*CustomConfigResource `json:"custom_config,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [9]bool
}

// HostOrErr returns the Host value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) HostOrErr() (*HostResource, error) {
	if e.Host != nil {
		return e.Host, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hostresource.Label}
	}
	return nil, &NotLoadedError{edge: "host"}
}

// DesiredOsOrErr returns the DesiredOs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) DesiredOsOrErr() (*OperatingSystemResource, error) {
	if e.DesiredOs != nil {
		return e.DesiredOs, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: operatingsystemresource.Label}
	}
	return nil, &NotLoadedError{edge: "desired_os"}
}

// CurrentOsOrErr returns the CurrentOs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) CurrentOsOrErr() (*OperatingSystemResource, error) {
	if e.CurrentOs != nil {
		return e.CurrentOs, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: operatingsystemresource.Label}
	}
	return nil, &NotLoadedError{edge: "current_os"}
}

// OsOrErr returns the Os value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) OsOrErr() (*OperatingSystemResource, error) {
	if e.Os != nil {
		return e.Os, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: operatingsystemresource.Label}
	}
	return nil, &NotLoadedError{edge: "os"}
}

// WorkloadMembersOrErr returns the WorkloadMembers value or an error if the edge
// was not loaded in eager-loading.
func (e InstanceResourceEdges) WorkloadMembersOrErr() ([]*WorkloadMember, error) {
	if e.loadedTypes[4] {
		return e.WorkloadMembers, nil
	}
	return nil, &NotLoadedError{edge: "workload_members"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) ProviderOrErr() (*ProviderResource, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[5] {
		return nil, &NotFoundError{label: providerresource.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// LocalaccountOrErr returns the Localaccount value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) LocalaccountOrErr() (*LocalAccountResource, error) {
	if e.Localaccount != nil {
		return e.Localaccount, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: localaccountresource.Label}
	}
	return nil, &NotLoadedError{edge: "localaccount"}
}

// OsUpdatePolicyOrErr returns the OsUpdatePolicy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InstanceResourceEdges) OsUpdatePolicyOrErr() (*OSUpdatePolicyResource, error) {
	if e.OsUpdatePolicy != nil {
		return e.OsUpdatePolicy, nil
	} else if e.loadedTypes[7] {
		return nil, &NotFoundError{label: osupdatepolicyresource.Label}
	}
	return nil, &NotLoadedError{edge: "os_update_policy"}
}

// CustomConfigOrErr returns the CustomConfig value or an error if the edge
// was not loaded in eager-loading.
func (e InstanceResourceEdges) CustomConfigOrErr() ([]*CustomConfigResource, error) {
	if e.loadedTypes[8] {
		return e.CustomConfig, nil
	}
	return nil, &NotLoadedError{edge: "custom_config"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InstanceResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case instanceresource.FieldID, instanceresource.FieldVMMemoryBytes, instanceresource.FieldVMCPUCores, instanceresource.FieldVMStorageBytes, instanceresource.FieldInstanceStatusTimestamp, instanceresource.FieldProvisioningStatusTimestamp, instanceresource.FieldUpdateStatusTimestamp, instanceresource.FieldTrustedAttestationStatusTimestamp:
			values[i] = new(sql.NullInt64)
		case instanceresource.FieldResourceID, instanceresource.FieldKind, instanceresource.FieldName, instanceresource.FieldDesiredState, instanceresource.FieldCurrentState, instanceresource.FieldSecurityFeature, instanceresource.FieldInstanceStatus, instanceresource.FieldInstanceStatusIndicator, instanceresource.FieldProvisioningStatus, instanceresource.FieldProvisioningStatusIndicator, instanceresource.FieldUpdateStatus, instanceresource.FieldUpdateStatusIndicator, instanceresource.FieldUpdateStatusDetail, instanceresource.FieldTrustedAttestationStatus, instanceresource.FieldTrustedAttestationStatusIndicator, instanceresource.FieldExistingCves, instanceresource.FieldRuntimePackages, instanceresource.FieldOsUpdateAvailable, instanceresource.FieldTenantID, instanceresource.FieldInstanceStatusDetail, instanceresource.FieldCreatedAt, instanceresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case instanceresource.ForeignKeys[0]: // instance_resource_desired_os
			values[i] = new(sql.NullInt64)
		case instanceresource.ForeignKeys[1]: // instance_resource_current_os
			values[i] = new(sql.NullInt64)
		case instanceresource.ForeignKeys[2]: // instance_resource_os
			values[i] = new(sql.NullInt64)
		case instanceresource.ForeignKeys[3]: // instance_resource_provider
			values[i] = new(sql.NullInt64)
		case instanceresource.ForeignKeys[4]: // instance_resource_localaccount
			values[i] = new(sql.NullInt64)
		case instanceresource.ForeignKeys[5]: // instance_resource_os_update_policy
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InstanceResource fields.
func (ir *InstanceResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case instanceresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ir.ID = int(value.Int64)
		case instanceresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ir.ResourceID = value.String
			}
		case instanceresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				ir.Kind = instanceresource.Kind(value.String)
			}
		case instanceresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ir.Name = value.String
			}
		case instanceresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				ir.DesiredState = instanceresource.DesiredState(value.String)
			}
		case instanceresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				ir.CurrentState = instanceresource.CurrentState(value.String)
			}
		case instanceresource.FieldVMMemoryBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vm_memory_bytes", values[i])
			} else if value.Valid {
				ir.VMMemoryBytes = uint64(value.Int64)
			}
		case instanceresource.FieldVMCPUCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vm_cpu_cores", values[i])
			} else if value.Valid {
				ir.VMCPUCores = uint32(value.Int64)
			}
		case instanceresource.FieldVMStorageBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field vm_storage_bytes", values[i])
			} else if value.Valid {
				ir.VMStorageBytes = uint64(value.Int64)
			}
		case instanceresource.FieldSecurityFeature:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field security_feature", values[i])
			} else if value.Valid {
				ir.SecurityFeature = instanceresource.SecurityFeature(value.String)
			}
		case instanceresource.FieldInstanceStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_status", values[i])
			} else if value.Valid {
				ir.InstanceStatus = value.String
			}
		case instanceresource.FieldInstanceStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_status_indicator", values[i])
			} else if value.Valid {
				ir.InstanceStatusIndicator = instanceresource.InstanceStatusIndicator(value.String)
			}
		case instanceresource.FieldInstanceStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field instance_status_timestamp", values[i])
			} else if value.Valid {
				ir.InstanceStatusTimestamp = uint64(value.Int64)
			}
		case instanceresource.FieldProvisioningStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_status", values[i])
			} else if value.Valid {
				ir.ProvisioningStatus = value.String
			}
		case instanceresource.FieldProvisioningStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_status_indicator", values[i])
			} else if value.Valid {
				ir.ProvisioningStatusIndicator = instanceresource.ProvisioningStatusIndicator(value.String)
			}
		case instanceresource.FieldProvisioningStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field provisioning_status_timestamp", values[i])
			} else if value.Valid {
				ir.ProvisioningStatusTimestamp = uint64(value.Int64)
			}
		case instanceresource.FieldUpdateStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_status", values[i])
			} else if value.Valid {
				ir.UpdateStatus = value.String
			}
		case instanceresource.FieldUpdateStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_status_indicator", values[i])
			} else if value.Valid {
				ir.UpdateStatusIndicator = instanceresource.UpdateStatusIndicator(value.String)
			}
		case instanceresource.FieldUpdateStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_status_timestamp", values[i])
			} else if value.Valid {
				ir.UpdateStatusTimestamp = uint64(value.Int64)
			}
		case instanceresource.FieldUpdateStatusDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_status_detail", values[i])
			} else if value.Valid {
				ir.UpdateStatusDetail = value.String
			}
		case instanceresource.FieldTrustedAttestationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trusted_attestation_status", values[i])
			} else if value.Valid {
				ir.TrustedAttestationStatus = value.String
			}
		case instanceresource.FieldTrustedAttestationStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trusted_attestation_status_indicator", values[i])
			} else if value.Valid {
				ir.TrustedAttestationStatusIndicator = instanceresource.TrustedAttestationStatusIndicator(value.String)
			}
		case instanceresource.FieldTrustedAttestationStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field trusted_attestation_status_timestamp", values[i])
			} else if value.Valid {
				ir.TrustedAttestationStatusTimestamp = uint64(value.Int64)
			}
		case instanceresource.FieldExistingCves:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field existing_cves", values[i])
			} else if value.Valid {
				ir.ExistingCves = value.String
			}
		case instanceresource.FieldRuntimePackages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field runtime_packages", values[i])
			} else if value.Valid {
				ir.RuntimePackages = value.String
			}
		case instanceresource.FieldOsUpdateAvailable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os_update_available", values[i])
			} else if value.Valid {
				ir.OsUpdateAvailable = value.String
			}
		case instanceresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ir.TenantID = value.String
			}
		case instanceresource.FieldInstanceStatusDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instance_status_detail", values[i])
			} else if value.Valid {
				ir.InstanceStatusDetail = value.String
			}
		case instanceresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ir.CreatedAt = value.String
			}
		case instanceresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ir.UpdatedAt = value.String
			}
		case instanceresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_desired_os", value)
			} else if value.Valid {
				ir.instance_resource_desired_os = new(int)
				*ir.instance_resource_desired_os = int(value.Int64)
			}
		case instanceresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_current_os", value)
			} else if value.Valid {
				ir.instance_resource_current_os = new(int)
				*ir.instance_resource_current_os = int(value.Int64)
			}
		case instanceresource.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_os", value)
			} else if value.Valid {
				ir.instance_resource_os = new(int)
				*ir.instance_resource_os = int(value.Int64)
			}
		case instanceresource.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_provider", value)
			} else if value.Valid {
				ir.instance_resource_provider = new(int)
				*ir.instance_resource_provider = int(value.Int64)
			}
		case instanceresource.ForeignKeys[4]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_localaccount", value)
			} else if value.Valid {
				ir.instance_resource_localaccount = new(int)
				*ir.instance_resource_localaccount = int(value.Int64)
			}
		case instanceresource.ForeignKeys[5]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_os_update_policy", value)
			} else if value.Valid {
				ir.instance_resource_os_update_policy = new(int)
				*ir.instance_resource_os_update_policy = int(value.Int64)
			}
		default:
			ir.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InstanceResource.
// This includes values selected through modifiers, order, etc.
func (ir *InstanceResource) Value(name string) (ent.Value, error) {
	return ir.selectValues.Get(name)
}

// QueryHost queries the "host" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryHost() *HostResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryHost(ir)
}

// QueryDesiredOs queries the "desired_os" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryDesiredOs() *OperatingSystemResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryDesiredOs(ir)
}

// QueryCurrentOs queries the "current_os" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryCurrentOs() *OperatingSystemResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryCurrentOs(ir)
}

// QueryOs queries the "os" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryOs() *OperatingSystemResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryOs(ir)
}

// QueryWorkloadMembers queries the "workload_members" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryWorkloadMembers() *WorkloadMemberQuery {
	return NewInstanceResourceClient(ir.config).QueryWorkloadMembers(ir)
}

// QueryProvider queries the "provider" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryProvider() *ProviderResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryProvider(ir)
}

// QueryLocalaccount queries the "localaccount" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryLocalaccount() *LocalAccountResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryLocalaccount(ir)
}

// QueryOsUpdatePolicy queries the "os_update_policy" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryOsUpdatePolicy() *OSUpdatePolicyResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryOsUpdatePolicy(ir)
}

// QueryCustomConfig queries the "custom_config" edge of the InstanceResource entity.
func (ir *InstanceResource) QueryCustomConfig() *CustomConfigResourceQuery {
	return NewInstanceResourceClient(ir.config).QueryCustomConfig(ir)
}

// Update returns a builder for updating this InstanceResource.
// Note that you need to call InstanceResource.Unwrap() before calling this method if this InstanceResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ir *InstanceResource) Update() *InstanceResourceUpdateOne {
	return NewInstanceResourceClient(ir.config).UpdateOne(ir)
}

// Unwrap unwraps the InstanceResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ir *InstanceResource) Unwrap() *InstanceResource {
	_tx, ok := ir.config.driver.(*txDriver)
	if !ok {
		panic("ent: InstanceResource is not a transactional entity")
	}
	ir.config.driver = _tx.drv
	return ir
}

// String implements the fmt.Stringer.
func (ir *InstanceResource) String() string {
	var builder strings.Builder
	builder.WriteString("InstanceResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ir.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(ir.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", ir.Kind))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ir.Name)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", ir.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", ir.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("vm_memory_bytes=")
	builder.WriteString(fmt.Sprintf("%v", ir.VMMemoryBytes))
	builder.WriteString(", ")
	builder.WriteString("vm_cpu_cores=")
	builder.WriteString(fmt.Sprintf("%v", ir.VMCPUCores))
	builder.WriteString(", ")
	builder.WriteString("vm_storage_bytes=")
	builder.WriteString(fmt.Sprintf("%v", ir.VMStorageBytes))
	builder.WriteString(", ")
	builder.WriteString("security_feature=")
	builder.WriteString(fmt.Sprintf("%v", ir.SecurityFeature))
	builder.WriteString(", ")
	builder.WriteString("instance_status=")
	builder.WriteString(ir.InstanceStatus)
	builder.WriteString(", ")
	builder.WriteString("instance_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", ir.InstanceStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("instance_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", ir.InstanceStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("provisioning_status=")
	builder.WriteString(ir.ProvisioningStatus)
	builder.WriteString(", ")
	builder.WriteString("provisioning_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", ir.ProvisioningStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("provisioning_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", ir.ProvisioningStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("update_status=")
	builder.WriteString(ir.UpdateStatus)
	builder.WriteString(", ")
	builder.WriteString("update_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", ir.UpdateStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("update_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", ir.UpdateStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("update_status_detail=")
	builder.WriteString(ir.UpdateStatusDetail)
	builder.WriteString(", ")
	builder.WriteString("trusted_attestation_status=")
	builder.WriteString(ir.TrustedAttestationStatus)
	builder.WriteString(", ")
	builder.WriteString("trusted_attestation_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", ir.TrustedAttestationStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("trusted_attestation_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", ir.TrustedAttestationStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("existing_cves=")
	builder.WriteString(ir.ExistingCves)
	builder.WriteString(", ")
	builder.WriteString("runtime_packages=")
	builder.WriteString(ir.RuntimePackages)
	builder.WriteString(", ")
	builder.WriteString("os_update_available=")
	builder.WriteString(ir.OsUpdateAvailable)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(ir.TenantID)
	builder.WriteString(", ")
	builder.WriteString("instance_status_detail=")
	builder.WriteString(ir.InstanceStatusDetail)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ir.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ir.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// InstanceResources is a parsable slice of InstanceResource.
type InstanceResources []*InstanceResource
