// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ouresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
)

// SiteResourceUpdate is the builder for updating SiteResource entities.
type SiteResourceUpdate struct {
	config
	hooks    []Hook
	mutation *SiteResourceMutation
}

// Where appends a list predicates to the SiteResourceUpdate builder.
func (_u *SiteResourceUpdate) Where(ps ...predicate.SiteResource) *SiteResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *SiteResourceUpdate) SetResourceID(v string) *SiteResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableResourceID(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SiteResourceUpdate) SetName(v string) *SiteResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableName(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *SiteResourceUpdate) ClearName() *SiteResourceUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetAddress sets the "address" field.
func (_u *SiteResourceUpdate) SetAddress(v string) *SiteResourceUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableAddress(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *SiteResourceUpdate) ClearAddress() *SiteResourceUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetSiteLat sets the "site_lat" field.
func (_u *SiteResourceUpdate) SetSiteLat(v int32) *SiteResourceUpdate {
	_u.mutation.ResetSiteLat()
	_u.mutation.SetSiteLat(v)
	return _u
}

// SetNillableSiteLat sets the "site_lat" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableSiteLat(v *int32) *SiteResourceUpdate {
	if v != nil {
		_u.SetSiteLat(*v)
	}
	return _u
}

// AddSiteLat adds value to the "site_lat" field.
func (_u *SiteResourceUpdate) AddSiteLat(v int32) *SiteResourceUpdate {
	_u.mutation.AddSiteLat(v)
	return _u
}

// ClearSiteLat clears the value of the "site_lat" field.
func (_u *SiteResourceUpdate) ClearSiteLat() *SiteResourceUpdate {
	_u.mutation.ClearSiteLat()
	return _u
}

// SetSiteLng sets the "site_lng" field.
func (_u *SiteResourceUpdate) SetSiteLng(v int32) *SiteResourceUpdate {
	_u.mutation.ResetSiteLng()
	_u.mutation.SetSiteLng(v)
	return _u
}

// SetNillableSiteLng sets the "site_lng" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableSiteLng(v *int32) *SiteResourceUpdate {
	if v != nil {
		_u.SetSiteLng(*v)
	}
	return _u
}

// AddSiteLng adds value to the "site_lng" field.
func (_u *SiteResourceUpdate) AddSiteLng(v int32) *SiteResourceUpdate {
	_u.mutation.AddSiteLng(v)
	return _u
}

// ClearSiteLng clears the value of the "site_lng" field.
func (_u *SiteResourceUpdate) ClearSiteLng() *SiteResourceUpdate {
	_u.mutation.ClearSiteLng()
	return _u
}

// SetDNSServers sets the "dns_servers" field.
func (_u *SiteResourceUpdate) SetDNSServers(v string) *SiteResourceUpdate {
	_u.mutation.SetDNSServers(v)
	return _u
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableDNSServers(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetDNSServers(*v)
	}
	return _u
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (_u *SiteResourceUpdate) ClearDNSServers() *SiteResourceUpdate {
	_u.mutation.ClearDNSServers()
	return _u
}

// SetDockerRegistries sets the "docker_registries" field.
func (_u *SiteResourceUpdate) SetDockerRegistries(v string) *SiteResourceUpdate {
	_u.mutation.SetDockerRegistries(v)
	return _u
}

// SetNillableDockerRegistries sets the "docker_registries" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableDockerRegistries(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetDockerRegistries(*v)
	}
	return _u
}

// ClearDockerRegistries clears the value of the "docker_registries" field.
func (_u *SiteResourceUpdate) ClearDockerRegistries() *SiteResourceUpdate {
	_u.mutation.ClearDockerRegistries()
	return _u
}

// SetMetricsEndpoint sets the "metrics_endpoint" field.
func (_u *SiteResourceUpdate) SetMetricsEndpoint(v string) *SiteResourceUpdate {
	_u.mutation.SetMetricsEndpoint(v)
	return _u
}

// SetNillableMetricsEndpoint sets the "metrics_endpoint" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableMetricsEndpoint(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetMetricsEndpoint(*v)
	}
	return _u
}

// ClearMetricsEndpoint clears the value of the "metrics_endpoint" field.
func (_u *SiteResourceUpdate) ClearMetricsEndpoint() *SiteResourceUpdate {
	_u.mutation.ClearMetricsEndpoint()
	return _u
}

// SetHTTPProxy sets the "http_proxy" field.
func (_u *SiteResourceUpdate) SetHTTPProxy(v string) *SiteResourceUpdate {
	_u.mutation.SetHTTPProxy(v)
	return _u
}

// SetNillableHTTPProxy sets the "http_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableHTTPProxy(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetHTTPProxy(*v)
	}
	return _u
}

// ClearHTTPProxy clears the value of the "http_proxy" field.
func (_u *SiteResourceUpdate) ClearHTTPProxy() *SiteResourceUpdate {
	_u.mutation.ClearHTTPProxy()
	return _u
}

// SetHTTPSProxy sets the "https_proxy" field.
func (_u *SiteResourceUpdate) SetHTTPSProxy(v string) *SiteResourceUpdate {
	_u.mutation.SetHTTPSProxy(v)
	return _u
}

// SetNillableHTTPSProxy sets the "https_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableHTTPSProxy(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetHTTPSProxy(*v)
	}
	return _u
}

// ClearHTTPSProxy clears the value of the "https_proxy" field.
func (_u *SiteResourceUpdate) ClearHTTPSProxy() *SiteResourceUpdate {
	_u.mutation.ClearHTTPSProxy()
	return _u
}

// SetFtpProxy sets the "ftp_proxy" field.
func (_u *SiteResourceUpdate) SetFtpProxy(v string) *SiteResourceUpdate {
	_u.mutation.SetFtpProxy(v)
	return _u
}

// SetNillableFtpProxy sets the "ftp_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableFtpProxy(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetFtpProxy(*v)
	}
	return _u
}

// ClearFtpProxy clears the value of the "ftp_proxy" field.
func (_u *SiteResourceUpdate) ClearFtpProxy() *SiteResourceUpdate {
	_u.mutation.ClearFtpProxy()
	return _u
}

// SetNoProxy sets the "no_proxy" field.
func (_u *SiteResourceUpdate) SetNoProxy(v string) *SiteResourceUpdate {
	_u.mutation.SetNoProxy(v)
	return _u
}

// SetNillableNoProxy sets the "no_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableNoProxy(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetNoProxy(*v)
	}
	return _u
}

// ClearNoProxy clears the value of the "no_proxy" field.
func (_u *SiteResourceUpdate) ClearNoProxy() *SiteResourceUpdate {
	_u.mutation.ClearNoProxy()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SiteResourceUpdate) SetMetadata(v string) *SiteResourceUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableMetadata(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SiteResourceUpdate) ClearMetadata() *SiteResourceUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SiteResourceUpdate) SetUpdatedAt(v string) *SiteResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableUpdatedAt(v *string) *SiteResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetRegionID sets the "region" edge to the RegionResource entity by ID.
func (_u *SiteResourceUpdate) SetRegionID(id int) *SiteResourceUpdate {
	_u.mutation.SetRegionID(id)
	return _u
}

// SetNillableRegionID sets the "region" edge to the RegionResource entity by ID if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableRegionID(id *int) *SiteResourceUpdate {
	if id != nil {
		_u = _u.SetRegionID(*id)
	}
	return _u
}

// SetRegion sets the "region" edge to the RegionResource entity.
func (_u *SiteResourceUpdate) SetRegion(v *RegionResource) *SiteResourceUpdate {
	return _u.SetRegionID(v.ID)
}

// SetOuID sets the "ou" edge to the OuResource entity by ID.
func (_u *SiteResourceUpdate) SetOuID(id int) *SiteResourceUpdate {
	_u.mutation.SetOuID(id)
	return _u
}

// SetNillableOuID sets the "ou" edge to the OuResource entity by ID if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableOuID(id *int) *SiteResourceUpdate {
	if id != nil {
		_u = _u.SetOuID(*id)
	}
	return _u
}

// SetOu sets the "ou" edge to the OuResource entity.
func (_u *SiteResourceUpdate) SetOu(v *OuResource) *SiteResourceUpdate {
	return _u.SetOuID(v.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_u *SiteResourceUpdate) SetProviderID(id int) *SiteResourceUpdate {
	_u.mutation.SetProviderID(id)
	return _u
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_u *SiteResourceUpdate) SetNillableProviderID(id *int) *SiteResourceUpdate {
	if id != nil {
		_u = _u.SetProviderID(*id)
	}
	return _u
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_u *SiteResourceUpdate) SetProvider(v *ProviderResource) *SiteResourceUpdate {
	return _u.SetProviderID(v.ID)
}

// Mutation returns the SiteResourceMutation object of the builder.
func (_u *SiteResourceUpdate) Mutation() *SiteResourceMutation {
	return _u.mutation
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (_u *SiteResourceUpdate) ClearRegion() *SiteResourceUpdate {
	_u.mutation.ClearRegion()
	return _u
}

// ClearOu clears the "ou" edge to the OuResource entity.
func (_u *SiteResourceUpdate) ClearOu() *SiteResourceUpdate {
	_u.mutation.ClearOu()
	return _u
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (_u *SiteResourceUpdate) ClearProvider() *SiteResourceUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SiteResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SiteResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SiteResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(siteresource.Table, siteresource.Columns, sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(siteresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(siteresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(siteresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(siteresource.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(siteresource.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.SiteLat(); ok {
		_spec.SetField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSiteLat(); ok {
		_spec.AddField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if _u.mutation.SiteLatCleared() {
		_spec.ClearField(siteresource.FieldSiteLat, field.TypeInt32)
	}
	if value, ok := _u.mutation.SiteLng(); ok {
		_spec.SetField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSiteLng(); ok {
		_spec.AddField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if _u.mutation.SiteLngCleared() {
		_spec.ClearField(siteresource.FieldSiteLng, field.TypeInt32)
	}
	if value, ok := _u.mutation.DNSServers(); ok {
		_spec.SetField(siteresource.FieldDNSServers, field.TypeString, value)
	}
	if _u.mutation.DNSServersCleared() {
		_spec.ClearField(siteresource.FieldDNSServers, field.TypeString)
	}
	if value, ok := _u.mutation.DockerRegistries(); ok {
		_spec.SetField(siteresource.FieldDockerRegistries, field.TypeString, value)
	}
	if _u.mutation.DockerRegistriesCleared() {
		_spec.ClearField(siteresource.FieldDockerRegistries, field.TypeString)
	}
	if value, ok := _u.mutation.MetricsEndpoint(); ok {
		_spec.SetField(siteresource.FieldMetricsEndpoint, field.TypeString, value)
	}
	if _u.mutation.MetricsEndpointCleared() {
		_spec.ClearField(siteresource.FieldMetricsEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.HTTPProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPProxy, field.TypeString, value)
	}
	if _u.mutation.HTTPProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPProxy, field.TypeString)
	}
	if value, ok := _u.mutation.HTTPSProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPSProxy, field.TypeString, value)
	}
	if _u.mutation.HTTPSProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPSProxy, field.TypeString)
	}
	if value, ok := _u.mutation.FtpProxy(); ok {
		_spec.SetField(siteresource.FieldFtpProxy, field.TypeString, value)
	}
	if _u.mutation.FtpProxyCleared() {
		_spec.ClearField(siteresource.FieldFtpProxy, field.TypeString)
	}
	if value, ok := _u.mutation.NoProxy(); ok {
		_spec.SetField(siteresource.FieldNoProxy, field.TypeString, value)
	}
	if _u.mutation.NoProxyCleared() {
		_spec.ClearField(siteresource.FieldNoProxy, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(siteresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(siteresource.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(siteresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.ProviderTable,
			Columns: []string{siteresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.ProviderTable,
			Columns: []string{siteresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SiteResourceUpdateOne is the builder for updating a single SiteResource entity.
type SiteResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SiteResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *SiteResourceUpdateOne) SetResourceID(v string) *SiteResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableResourceID(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *SiteResourceUpdateOne) SetName(v string) *SiteResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableName(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *SiteResourceUpdateOne) ClearName() *SiteResourceUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetAddress sets the "address" field.
func (_u *SiteResourceUpdateOne) SetAddress(v string) *SiteResourceUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableAddress(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *SiteResourceUpdateOne) ClearAddress() *SiteResourceUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetSiteLat sets the "site_lat" field.
func (_u *SiteResourceUpdateOne) SetSiteLat(v int32) *SiteResourceUpdateOne {
	_u.mutation.ResetSiteLat()
	_u.mutation.SetSiteLat(v)
	return _u
}

// SetNillableSiteLat sets the "site_lat" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableSiteLat(v *int32) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetSiteLat(*v)
	}
	return _u
}

// AddSiteLat adds value to the "site_lat" field.
func (_u *SiteResourceUpdateOne) AddSiteLat(v int32) *SiteResourceUpdateOne {
	_u.mutation.AddSiteLat(v)
	return _u
}

// ClearSiteLat clears the value of the "site_lat" field.
func (_u *SiteResourceUpdateOne) ClearSiteLat() *SiteResourceUpdateOne {
	_u.mutation.ClearSiteLat()
	return _u
}

// SetSiteLng sets the "site_lng" field.
func (_u *SiteResourceUpdateOne) SetSiteLng(v int32) *SiteResourceUpdateOne {
	_u.mutation.ResetSiteLng()
	_u.mutation.SetSiteLng(v)
	return _u
}

// SetNillableSiteLng sets the "site_lng" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableSiteLng(v *int32) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetSiteLng(*v)
	}
	return _u
}

// AddSiteLng adds value to the "site_lng" field.
func (_u *SiteResourceUpdateOne) AddSiteLng(v int32) *SiteResourceUpdateOne {
	_u.mutation.AddSiteLng(v)
	return _u
}

// ClearSiteLng clears the value of the "site_lng" field.
func (_u *SiteResourceUpdateOne) ClearSiteLng() *SiteResourceUpdateOne {
	_u.mutation.ClearSiteLng()
	return _u
}

// SetDNSServers sets the "dns_servers" field.
func (_u *SiteResourceUpdateOne) SetDNSServers(v string) *SiteResourceUpdateOne {
	_u.mutation.SetDNSServers(v)
	return _u
}

// SetNillableDNSServers sets the "dns_servers" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableDNSServers(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetDNSServers(*v)
	}
	return _u
}

// ClearDNSServers clears the value of the "dns_servers" field.
func (_u *SiteResourceUpdateOne) ClearDNSServers() *SiteResourceUpdateOne {
	_u.mutation.ClearDNSServers()
	return _u
}

// SetDockerRegistries sets the "docker_registries" field.
func (_u *SiteResourceUpdateOne) SetDockerRegistries(v string) *SiteResourceUpdateOne {
	_u.mutation.SetDockerRegistries(v)
	return _u
}

// SetNillableDockerRegistries sets the "docker_registries" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableDockerRegistries(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetDockerRegistries(*v)
	}
	return _u
}

// ClearDockerRegistries clears the value of the "docker_registries" field.
func (_u *SiteResourceUpdateOne) ClearDockerRegistries() *SiteResourceUpdateOne {
	_u.mutation.ClearDockerRegistries()
	return _u
}

// SetMetricsEndpoint sets the "metrics_endpoint" field.
func (_u *SiteResourceUpdateOne) SetMetricsEndpoint(v string) *SiteResourceUpdateOne {
	_u.mutation.SetMetricsEndpoint(v)
	return _u
}

// SetNillableMetricsEndpoint sets the "metrics_endpoint" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableMetricsEndpoint(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetMetricsEndpoint(*v)
	}
	return _u
}

// ClearMetricsEndpoint clears the value of the "metrics_endpoint" field.
func (_u *SiteResourceUpdateOne) ClearMetricsEndpoint() *SiteResourceUpdateOne {
	_u.mutation.ClearMetricsEndpoint()
	return _u
}

// SetHTTPProxy sets the "http_proxy" field.
func (_u *SiteResourceUpdateOne) SetHTTPProxy(v string) *SiteResourceUpdateOne {
	_u.mutation.SetHTTPProxy(v)
	return _u
}

// SetNillableHTTPProxy sets the "http_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableHTTPProxy(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetHTTPProxy(*v)
	}
	return _u
}

// ClearHTTPProxy clears the value of the "http_proxy" field.
func (_u *SiteResourceUpdateOne) ClearHTTPProxy() *SiteResourceUpdateOne {
	_u.mutation.ClearHTTPProxy()
	return _u
}

// SetHTTPSProxy sets the "https_proxy" field.
func (_u *SiteResourceUpdateOne) SetHTTPSProxy(v string) *SiteResourceUpdateOne {
	_u.mutation.SetHTTPSProxy(v)
	return _u
}

// SetNillableHTTPSProxy sets the "https_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableHTTPSProxy(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetHTTPSProxy(*v)
	}
	return _u
}

// ClearHTTPSProxy clears the value of the "https_proxy" field.
func (_u *SiteResourceUpdateOne) ClearHTTPSProxy() *SiteResourceUpdateOne {
	_u.mutation.ClearHTTPSProxy()
	return _u
}

// SetFtpProxy sets the "ftp_proxy" field.
func (_u *SiteResourceUpdateOne) SetFtpProxy(v string) *SiteResourceUpdateOne {
	_u.mutation.SetFtpProxy(v)
	return _u
}

// SetNillableFtpProxy sets the "ftp_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableFtpProxy(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetFtpProxy(*v)
	}
	return _u
}

// ClearFtpProxy clears the value of the "ftp_proxy" field.
func (_u *SiteResourceUpdateOne) ClearFtpProxy() *SiteResourceUpdateOne {
	_u.mutation.ClearFtpProxy()
	return _u
}

// SetNoProxy sets the "no_proxy" field.
func (_u *SiteResourceUpdateOne) SetNoProxy(v string) *SiteResourceUpdateOne {
	_u.mutation.SetNoProxy(v)
	return _u
}

// SetNillableNoProxy sets the "no_proxy" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableNoProxy(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetNoProxy(*v)
	}
	return _u
}

// ClearNoProxy clears the value of the "no_proxy" field.
func (_u *SiteResourceUpdateOne) ClearNoProxy() *SiteResourceUpdateOne {
	_u.mutation.ClearNoProxy()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *SiteResourceUpdateOne) SetMetadata(v string) *SiteResourceUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableMetadata(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *SiteResourceUpdateOne) ClearMetadata() *SiteResourceUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SiteResourceUpdateOne) SetUpdatedAt(v string) *SiteResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableUpdatedAt(v *string) *SiteResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetRegionID sets the "region" edge to the RegionResource entity by ID.
func (_u *SiteResourceUpdateOne) SetRegionID(id int) *SiteResourceUpdateOne {
	_u.mutation.SetRegionID(id)
	return _u
}

// SetNillableRegionID sets the "region" edge to the RegionResource entity by ID if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableRegionID(id *int) *SiteResourceUpdateOne {
	if id != nil {
		_u = _u.SetRegionID(*id)
	}
	return _u
}

// SetRegion sets the "region" edge to the RegionResource entity.
func (_u *SiteResourceUpdateOne) SetRegion(v *RegionResource) *SiteResourceUpdateOne {
	return _u.SetRegionID(v.ID)
}

// SetOuID sets the "ou" edge to the OuResource entity by ID.
func (_u *SiteResourceUpdateOne) SetOuID(id int) *SiteResourceUpdateOne {
	_u.mutation.SetOuID(id)
	return _u
}

// SetNillableOuID sets the "ou" edge to the OuResource entity by ID if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableOuID(id *int) *SiteResourceUpdateOne {
	if id != nil {
		_u = _u.SetOuID(*id)
	}
	return _u
}

// SetOu sets the "ou" edge to the OuResource entity.
func (_u *SiteResourceUpdateOne) SetOu(v *OuResource) *SiteResourceUpdateOne {
	return _u.SetOuID(v.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_u *SiteResourceUpdateOne) SetProviderID(id int) *SiteResourceUpdateOne {
	_u.mutation.SetProviderID(id)
	return _u
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_u *SiteResourceUpdateOne) SetNillableProviderID(id *int) *SiteResourceUpdateOne {
	if id != nil {
		_u = _u.SetProviderID(*id)
	}
	return _u
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_u *SiteResourceUpdateOne) SetProvider(v *ProviderResource) *SiteResourceUpdateOne {
	return _u.SetProviderID(v.ID)
}

// Mutation returns the SiteResourceMutation object of the builder.
func (_u *SiteResourceUpdateOne) Mutation() *SiteResourceMutation {
	return _u.mutation
}

// ClearRegion clears the "region" edge to the RegionResource entity.
func (_u *SiteResourceUpdateOne) ClearRegion() *SiteResourceUpdateOne {
	_u.mutation.ClearRegion()
	return _u
}

// ClearOu clears the "ou" edge to the OuResource entity.
func (_u *SiteResourceUpdateOne) ClearOu() *SiteResourceUpdateOne {
	_u.mutation.ClearOu()
	return _u
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (_u *SiteResourceUpdateOne) ClearProvider() *SiteResourceUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// Where appends a list predicates to the SiteResourceUpdate builder.
func (_u *SiteResourceUpdateOne) Where(ps ...predicate.SiteResource) *SiteResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SiteResourceUpdateOne) Select(field string, fields ...string) *SiteResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SiteResource entity.
func (_u *SiteResourceUpdateOne) Save(ctx context.Context) (*SiteResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SiteResourceUpdateOne) SaveX(ctx context.Context) *SiteResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SiteResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SiteResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SiteResourceUpdateOne) sqlSave(ctx context.Context) (_node *SiteResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(siteresource.Table, siteresource.Columns, sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SiteResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, siteresource.FieldID)
		for _, f := range fields {
			if !siteresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != siteresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(siteresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(siteresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(siteresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(siteresource.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(siteresource.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.SiteLat(); ok {
		_spec.SetField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSiteLat(); ok {
		_spec.AddField(siteresource.FieldSiteLat, field.TypeInt32, value)
	}
	if _u.mutation.SiteLatCleared() {
		_spec.ClearField(siteresource.FieldSiteLat, field.TypeInt32)
	}
	if value, ok := _u.mutation.SiteLng(); ok {
		_spec.SetField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedSiteLng(); ok {
		_spec.AddField(siteresource.FieldSiteLng, field.TypeInt32, value)
	}
	if _u.mutation.SiteLngCleared() {
		_spec.ClearField(siteresource.FieldSiteLng, field.TypeInt32)
	}
	if value, ok := _u.mutation.DNSServers(); ok {
		_spec.SetField(siteresource.FieldDNSServers, field.TypeString, value)
	}
	if _u.mutation.DNSServersCleared() {
		_spec.ClearField(siteresource.FieldDNSServers, field.TypeString)
	}
	if value, ok := _u.mutation.DockerRegistries(); ok {
		_spec.SetField(siteresource.FieldDockerRegistries, field.TypeString, value)
	}
	if _u.mutation.DockerRegistriesCleared() {
		_spec.ClearField(siteresource.FieldDockerRegistries, field.TypeString)
	}
	if value, ok := _u.mutation.MetricsEndpoint(); ok {
		_spec.SetField(siteresource.FieldMetricsEndpoint, field.TypeString, value)
	}
	if _u.mutation.MetricsEndpointCleared() {
		_spec.ClearField(siteresource.FieldMetricsEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.HTTPProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPProxy, field.TypeString, value)
	}
	if _u.mutation.HTTPProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPProxy, field.TypeString)
	}
	if value, ok := _u.mutation.HTTPSProxy(); ok {
		_spec.SetField(siteresource.FieldHTTPSProxy, field.TypeString, value)
	}
	if _u.mutation.HTTPSProxyCleared() {
		_spec.ClearField(siteresource.FieldHTTPSProxy, field.TypeString)
	}
	if value, ok := _u.mutation.FtpProxy(); ok {
		_spec.SetField(siteresource.FieldFtpProxy, field.TypeString, value)
	}
	if _u.mutation.FtpProxyCleared() {
		_spec.ClearField(siteresource.FieldFtpProxy, field.TypeString)
	}
	if value, ok := _u.mutation.NoProxy(); ok {
		_spec.SetField(siteresource.FieldNoProxy, field.TypeString, value)
	}
	if _u.mutation.NoProxyCleared() {
		_spec.ClearField(siteresource.FieldNoProxy, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(siteresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(siteresource.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(siteresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.RegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.RegionTable,
			Columns: []string{siteresource.RegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.OuTable,
			Columns: []string{siteresource.OuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.ProviderTable,
			Columns: []string{siteresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   siteresource.ProviderTable,
			Columns: []string{siteresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SiteResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{siteresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
