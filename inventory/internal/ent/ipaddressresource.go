// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ipaddressresource"
)

// IPAddressResource is the model entity for the IPAddressResource schema.
type IPAddressResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState ipaddressresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState ipaddressresource.CurrentState `json:"current_state,omitempty"`
	// Status holds the value of the "status" field.
	Status ipaddressresource.Status `json:"status,omitempty"`
	// StatusDetail holds the value of the "status_detail" field.
	StatusDetail string `json:"status_detail,omitempty"`
	// ConfigMethod holds the value of the "config_method" field.
	ConfigMethod ipaddressresource.ConfigMethod `json:"config_method,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IPAddressResourceQuery when eager-loading is set.
	Edges                   IPAddressResourceEdges `json:"edges"`
	ip_address_resource_nic *int
	selectValues            sql.SelectValues
}

// IPAddressResourceEdges holds the relations/edges for other nodes in the graph.
type IPAddressResourceEdges struct {
	// Nic holds the value of the nic edge.
	Nic *HostnicResource `json:"nic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NicOrErr returns the Nic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IPAddressResourceEdges) NicOrErr() (*HostnicResource, error) {
	if e.Nic != nil {
		return e.Nic, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: hostnicresource.Label}
	}
	return nil, &NotLoadedError{edge: "nic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IPAddressResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ipaddressresource.FieldID:
			values[i] = new(sql.NullInt64)
		case ipaddressresource.FieldResourceID, ipaddressresource.FieldAddress, ipaddressresource.FieldDesiredState, ipaddressresource.FieldCurrentState, ipaddressresource.FieldStatus, ipaddressresource.FieldStatusDetail, ipaddressresource.FieldConfigMethod, ipaddressresource.FieldTenantID, ipaddressresource.FieldCreatedAt, ipaddressresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case ipaddressresource.ForeignKeys[0]: // ip_address_resource_nic
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IPAddressResource fields.
func (_m *IPAddressResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ipaddressresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case ipaddressresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case ipaddressresource.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				_m.Address = value.String
			}
		case ipaddressresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				_m.DesiredState = ipaddressresource.DesiredState(value.String)
			}
		case ipaddressresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				_m.CurrentState = ipaddressresource.CurrentState(value.String)
			}
		case ipaddressresource.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = ipaddressresource.Status(value.String)
			}
		case ipaddressresource.FieldStatusDetail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_detail", values[i])
			} else if value.Valid {
				_m.StatusDetail = value.String
			}
		case ipaddressresource.FieldConfigMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config_method", values[i])
			} else if value.Valid {
				_m.ConfigMethod = ipaddressresource.ConfigMethod(value.String)
			}
		case ipaddressresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case ipaddressresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case ipaddressresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		case ipaddressresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field ip_address_resource_nic", value)
			} else if value.Valid {
				_m.ip_address_resource_nic = new(int)
				*_m.ip_address_resource_nic = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IPAddressResource.
// This includes values selected through modifiers, order, etc.
func (_m *IPAddressResource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryNic queries the "nic" edge of the IPAddressResource entity.
func (_m *IPAddressResource) QueryNic() *HostnicResourceQuery {
	return NewIPAddressResourceClient(_m.config).QueryNic(_m)
}

// Update returns a builder for updating this IPAddressResource.
// Note that you need to call IPAddressResource.Unwrap() before calling this method if this IPAddressResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *IPAddressResource) Update() *IPAddressResourceUpdateOne {
	return NewIPAddressResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the IPAddressResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *IPAddressResource) Unwrap() *IPAddressResource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: IPAddressResource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *IPAddressResource) String() string {
	var builder strings.Builder
	builder.WriteString("IPAddressResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(_m.Address)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("status_detail=")
	builder.WriteString(_m.StatusDetail)
	builder.WriteString(", ")
	builder.WriteString("config_method=")
	builder.WriteString(fmt.Sprintf("%v", _m.ConfigMethod))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// IPAddressResources is a parsable slice of IPAddressResource.
type IPAddressResources []*IPAddressResource
