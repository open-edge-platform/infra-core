// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostgpuresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
)

// HostgpuResourceCreate is the builder for creating a HostgpuResource entity.
type HostgpuResourceCreate struct {
	config
	mutation *HostgpuResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (_c *HostgpuResourceCreate) SetResourceID(v string) *HostgpuResourceCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetPciID sets the "pci_id" field.
func (_c *HostgpuResourceCreate) SetPciID(v string) *HostgpuResourceCreate {
	_c.mutation.SetPciID(v)
	return _c
}

// SetNillablePciID sets the "pci_id" field if the given value is not nil.
func (_c *HostgpuResourceCreate) SetNillablePciID(v *string) *HostgpuResourceCreate {
	if v != nil {
		_c.SetPciID(*v)
	}
	return _c
}

// SetProduct sets the "product" field.
func (_c *HostgpuResourceCreate) SetProduct(v string) *HostgpuResourceCreate {
	_c.mutation.SetProduct(v)
	return _c
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (_c *HostgpuResourceCreate) SetNillableProduct(v *string) *HostgpuResourceCreate {
	if v != nil {
		_c.SetProduct(*v)
	}
	return _c
}

// SetVendor sets the "vendor" field.
func (_c *HostgpuResourceCreate) SetVendor(v string) *HostgpuResourceCreate {
	_c.mutation.SetVendor(v)
	return _c
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (_c *HostgpuResourceCreate) SetNillableVendor(v *string) *HostgpuResourceCreate {
	if v != nil {
		_c.SetVendor(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *HostgpuResourceCreate) SetDescription(v string) *HostgpuResourceCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *HostgpuResourceCreate) SetNillableDescription(v *string) *HostgpuResourceCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetDeviceName sets the "device_name" field.
func (_c *HostgpuResourceCreate) SetDeviceName(v string) *HostgpuResourceCreate {
	_c.mutation.SetDeviceName(v)
	return _c
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_c *HostgpuResourceCreate) SetNillableDeviceName(v *string) *HostgpuResourceCreate {
	if v != nil {
		_c.SetDeviceName(*v)
	}
	return _c
}

// SetFeatures sets the "features" field.
func (_c *HostgpuResourceCreate) SetFeatures(v string) *HostgpuResourceCreate {
	_c.mutation.SetFeatures(v)
	return _c
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (_c *HostgpuResourceCreate) SetNillableFeatures(v *string) *HostgpuResourceCreate {
	if v != nil {
		_c.SetFeatures(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *HostgpuResourceCreate) SetTenantID(v string) *HostgpuResourceCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *HostgpuResourceCreate) SetCreatedAt(v string) *HostgpuResourceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *HostgpuResourceCreate) SetUpdatedAt(v string) *HostgpuResourceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_c *HostgpuResourceCreate) SetHostID(id int) *HostgpuResourceCreate {
	_c.mutation.SetHostID(id)
	return _c
}

// SetHost sets the "host" edge to the HostResource entity.
func (_c *HostgpuResourceCreate) SetHost(v *HostResource) *HostgpuResourceCreate {
	return _c.SetHostID(v.ID)
}

// Mutation returns the HostgpuResourceMutation object of the builder.
func (_c *HostgpuResourceCreate) Mutation() *HostgpuResourceMutation {
	return _c.mutation
}

// Save creates the HostgpuResource in the database.
func (_c *HostgpuResourceCreate) Save(ctx context.Context) (*HostgpuResource, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *HostgpuResourceCreate) SaveX(ctx context.Context) *HostgpuResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HostgpuResourceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HostgpuResourceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *HostgpuResourceCreate) check() error {
	if _, ok := _c.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "HostgpuResource.resource_id"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "HostgpuResource.tenant_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "HostgpuResource.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "HostgpuResource.updated_at"`)}
	}
	if len(_c.mutation.HostIDs()) == 0 {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required edge "HostgpuResource.host"`)}
	}
	return nil
}

func (_c *HostgpuResourceCreate) sqlSave(ctx context.Context) (*HostgpuResource, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *HostgpuResourceCreate) createSpec() (*HostgpuResource, *sqlgraph.CreateSpec) {
	var (
		_node = &HostgpuResource{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(hostgpuresource.Table, sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(hostgpuresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.PciID(); ok {
		_spec.SetField(hostgpuresource.FieldPciID, field.TypeString, value)
		_node.PciID = value
	}
	if value, ok := _c.mutation.Product(); ok {
		_spec.SetField(hostgpuresource.FieldProduct, field.TypeString, value)
		_node.Product = value
	}
	if value, ok := _c.mutation.Vendor(); ok {
		_spec.SetField(hostgpuresource.FieldVendor, field.TypeString, value)
		_node.Vendor = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(hostgpuresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.DeviceName(); ok {
		_spec.SetField(hostgpuresource.FieldDeviceName, field.TypeString, value)
		_node.DeviceName = value
	}
	if value, ok := _c.mutation.Features(); ok {
		_spec.SetField(hostgpuresource.FieldFeatures, field.TypeString, value)
		_node.Features = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(hostgpuresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(hostgpuresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(hostgpuresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgpuresource.HostTable,
			Columns: []string{hostgpuresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.hostgpu_resource_host = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// HostgpuResourceCreateBulk is the builder for creating many HostgpuResource entities in bulk.
type HostgpuResourceCreateBulk struct {
	config
	err      error
	builders []*HostgpuResourceCreate
}

// Save creates the HostgpuResource entities in the database.
func (_c *HostgpuResourceCreateBulk) Save(ctx context.Context) ([]*HostgpuResource, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*HostgpuResource, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HostgpuResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *HostgpuResourceCreateBulk) SaveX(ctx context.Context) []*HostgpuResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *HostgpuResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *HostgpuResourceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
