// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
)

// InstanceResourceUpdate is the builder for updating InstanceResource entities.
type InstanceResourceUpdate struct {
	config
	hooks    []Hook
	mutation *InstanceResourceMutation
}

// Where appends a list predicates to the InstanceResourceUpdate builder.
func (iru *InstanceResourceUpdate) Where(ps ...predicate.InstanceResource) *InstanceResourceUpdate {
	iru.mutation.Where(ps...)
	return iru
}

// SetResourceID sets the "resource_id" field.
func (iru *InstanceResourceUpdate) SetResourceID(s string) *InstanceResourceUpdate {
	iru.mutation.SetResourceID(s)
	return iru
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableResourceID(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetResourceID(*s)
	}
	return iru
}

// SetKind sets the "kind" field.
func (iru *InstanceResourceUpdate) SetKind(i instanceresource.Kind) *InstanceResourceUpdate {
	iru.mutation.SetKind(i)
	return iru
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableKind(i *instanceresource.Kind) *InstanceResourceUpdate {
	if i != nil {
		iru.SetKind(*i)
	}
	return iru
}

// ClearKind clears the value of the "kind" field.
func (iru *InstanceResourceUpdate) ClearKind() *InstanceResourceUpdate {
	iru.mutation.ClearKind()
	return iru
}

// SetName sets the "name" field.
func (iru *InstanceResourceUpdate) SetName(s string) *InstanceResourceUpdate {
	iru.mutation.SetName(s)
	return iru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableName(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetName(*s)
	}
	return iru
}

// ClearName clears the value of the "name" field.
func (iru *InstanceResourceUpdate) ClearName() *InstanceResourceUpdate {
	iru.mutation.ClearName()
	return iru
}

// SetDesiredState sets the "desired_state" field.
func (iru *InstanceResourceUpdate) SetDesiredState(is instanceresource.DesiredState) *InstanceResourceUpdate {
	iru.mutation.SetDesiredState(is)
	return iru
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableDesiredState(is *instanceresource.DesiredState) *InstanceResourceUpdate {
	if is != nil {
		iru.SetDesiredState(*is)
	}
	return iru
}

// ClearDesiredState clears the value of the "desired_state" field.
func (iru *InstanceResourceUpdate) ClearDesiredState() *InstanceResourceUpdate {
	iru.mutation.ClearDesiredState()
	return iru
}

// SetCurrentState sets the "current_state" field.
func (iru *InstanceResourceUpdate) SetCurrentState(is instanceresource.CurrentState) *InstanceResourceUpdate {
	iru.mutation.SetCurrentState(is)
	return iru
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableCurrentState(is *instanceresource.CurrentState) *InstanceResourceUpdate {
	if is != nil {
		iru.SetCurrentState(*is)
	}
	return iru
}

// ClearCurrentState clears the value of the "current_state" field.
func (iru *InstanceResourceUpdate) ClearCurrentState() *InstanceResourceUpdate {
	iru.mutation.ClearCurrentState()
	return iru
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (iru *InstanceResourceUpdate) SetVMMemoryBytes(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetVMMemoryBytes()
	iru.mutation.SetVMMemoryBytes(u)
	return iru
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableVMMemoryBytes(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetVMMemoryBytes(*u)
	}
	return iru
}

// AddVMMemoryBytes adds u to the "vm_memory_bytes" field.
func (iru *InstanceResourceUpdate) AddVMMemoryBytes(u int64) *InstanceResourceUpdate {
	iru.mutation.AddVMMemoryBytes(u)
	return iru
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (iru *InstanceResourceUpdate) ClearVMMemoryBytes() *InstanceResourceUpdate {
	iru.mutation.ClearVMMemoryBytes()
	return iru
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (iru *InstanceResourceUpdate) SetVMCPUCores(u uint32) *InstanceResourceUpdate {
	iru.mutation.ResetVMCPUCores()
	iru.mutation.SetVMCPUCores(u)
	return iru
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableVMCPUCores(u *uint32) *InstanceResourceUpdate {
	if u != nil {
		iru.SetVMCPUCores(*u)
	}
	return iru
}

// AddVMCPUCores adds u to the "vm_cpu_cores" field.
func (iru *InstanceResourceUpdate) AddVMCPUCores(u int32) *InstanceResourceUpdate {
	iru.mutation.AddVMCPUCores(u)
	return iru
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (iru *InstanceResourceUpdate) ClearVMCPUCores() *InstanceResourceUpdate {
	iru.mutation.ClearVMCPUCores()
	return iru
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (iru *InstanceResourceUpdate) SetVMStorageBytes(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetVMStorageBytes()
	iru.mutation.SetVMStorageBytes(u)
	return iru
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableVMStorageBytes(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetVMStorageBytes(*u)
	}
	return iru
}

// AddVMStorageBytes adds u to the "vm_storage_bytes" field.
func (iru *InstanceResourceUpdate) AddVMStorageBytes(u int64) *InstanceResourceUpdate {
	iru.mutation.AddVMStorageBytes(u)
	return iru
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (iru *InstanceResourceUpdate) ClearVMStorageBytes() *InstanceResourceUpdate {
	iru.mutation.ClearVMStorageBytes()
	return iru
}

// SetInstanceStatus sets the "instance_status" field.
func (iru *InstanceResourceUpdate) SetInstanceStatus(s string) *InstanceResourceUpdate {
	iru.mutation.SetInstanceStatus(s)
	return iru
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableInstanceStatus(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetInstanceStatus(*s)
	}
	return iru
}

// ClearInstanceStatus clears the value of the "instance_status" field.
func (iru *InstanceResourceUpdate) ClearInstanceStatus() *InstanceResourceUpdate {
	iru.mutation.ClearInstanceStatus()
	return iru
}

// SetInstanceStatusIndicator sets the "instance_status_indicator" field.
func (iru *InstanceResourceUpdate) SetInstanceStatusIndicator(isi instanceresource.InstanceStatusIndicator) *InstanceResourceUpdate {
	iru.mutation.SetInstanceStatusIndicator(isi)
	return iru
}

// SetNillableInstanceStatusIndicator sets the "instance_status_indicator" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableInstanceStatusIndicator(isi *instanceresource.InstanceStatusIndicator) *InstanceResourceUpdate {
	if isi != nil {
		iru.SetInstanceStatusIndicator(*isi)
	}
	return iru
}

// ClearInstanceStatusIndicator clears the value of the "instance_status_indicator" field.
func (iru *InstanceResourceUpdate) ClearInstanceStatusIndicator() *InstanceResourceUpdate {
	iru.mutation.ClearInstanceStatusIndicator()
	return iru
}

// SetInstanceStatusTimestamp sets the "instance_status_timestamp" field.
func (iru *InstanceResourceUpdate) SetInstanceStatusTimestamp(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetInstanceStatusTimestamp()
	iru.mutation.SetInstanceStatusTimestamp(u)
	return iru
}

// SetNillableInstanceStatusTimestamp sets the "instance_status_timestamp" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableInstanceStatusTimestamp(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetInstanceStatusTimestamp(*u)
	}
	return iru
}

// AddInstanceStatusTimestamp adds u to the "instance_status_timestamp" field.
func (iru *InstanceResourceUpdate) AddInstanceStatusTimestamp(u int64) *InstanceResourceUpdate {
	iru.mutation.AddInstanceStatusTimestamp(u)
	return iru
}

// ClearInstanceStatusTimestamp clears the value of the "instance_status_timestamp" field.
func (iru *InstanceResourceUpdate) ClearInstanceStatusTimestamp() *InstanceResourceUpdate {
	iru.mutation.ClearInstanceStatusTimestamp()
	return iru
}

// SetProvisioningStatus sets the "provisioning_status" field.
func (iru *InstanceResourceUpdate) SetProvisioningStatus(s string) *InstanceResourceUpdate {
	iru.mutation.SetProvisioningStatus(s)
	return iru
}

// SetNillableProvisioningStatus sets the "provisioning_status" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableProvisioningStatus(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetProvisioningStatus(*s)
	}
	return iru
}

// ClearProvisioningStatus clears the value of the "provisioning_status" field.
func (iru *InstanceResourceUpdate) ClearProvisioningStatus() *InstanceResourceUpdate {
	iru.mutation.ClearProvisioningStatus()
	return iru
}

// SetProvisioningStatusIndicator sets the "provisioning_status_indicator" field.
func (iru *InstanceResourceUpdate) SetProvisioningStatusIndicator(isi instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdate {
	iru.mutation.SetProvisioningStatusIndicator(isi)
	return iru
}

// SetNillableProvisioningStatusIndicator sets the "provisioning_status_indicator" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableProvisioningStatusIndicator(isi *instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdate {
	if isi != nil {
		iru.SetProvisioningStatusIndicator(*isi)
	}
	return iru
}

// ClearProvisioningStatusIndicator clears the value of the "provisioning_status_indicator" field.
func (iru *InstanceResourceUpdate) ClearProvisioningStatusIndicator() *InstanceResourceUpdate {
	iru.mutation.ClearProvisioningStatusIndicator()
	return iru
}

// SetProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field.
func (iru *InstanceResourceUpdate) SetProvisioningStatusTimestamp(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetProvisioningStatusTimestamp()
	iru.mutation.SetProvisioningStatusTimestamp(u)
	return iru
}

// SetNillableProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableProvisioningStatusTimestamp(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetProvisioningStatusTimestamp(*u)
	}
	return iru
}

// AddProvisioningStatusTimestamp adds u to the "provisioning_status_timestamp" field.
func (iru *InstanceResourceUpdate) AddProvisioningStatusTimestamp(u int64) *InstanceResourceUpdate {
	iru.mutation.AddProvisioningStatusTimestamp(u)
	return iru
}

// ClearProvisioningStatusTimestamp clears the value of the "provisioning_status_timestamp" field.
func (iru *InstanceResourceUpdate) ClearProvisioningStatusTimestamp() *InstanceResourceUpdate {
	iru.mutation.ClearProvisioningStatusTimestamp()
	return iru
}

// SetUpdateStatus sets the "update_status" field.
func (iru *InstanceResourceUpdate) SetUpdateStatus(s string) *InstanceResourceUpdate {
	iru.mutation.SetUpdateStatus(s)
	return iru
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableUpdateStatus(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetUpdateStatus(*s)
	}
	return iru
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (iru *InstanceResourceUpdate) ClearUpdateStatus() *InstanceResourceUpdate {
	iru.mutation.ClearUpdateStatus()
	return iru
}

// SetUpdateStatusIndicator sets the "update_status_indicator" field.
func (iru *InstanceResourceUpdate) SetUpdateStatusIndicator(isi instanceresource.UpdateStatusIndicator) *InstanceResourceUpdate {
	iru.mutation.SetUpdateStatusIndicator(isi)
	return iru
}

// SetNillableUpdateStatusIndicator sets the "update_status_indicator" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableUpdateStatusIndicator(isi *instanceresource.UpdateStatusIndicator) *InstanceResourceUpdate {
	if isi != nil {
		iru.SetUpdateStatusIndicator(*isi)
	}
	return iru
}

// ClearUpdateStatusIndicator clears the value of the "update_status_indicator" field.
func (iru *InstanceResourceUpdate) ClearUpdateStatusIndicator() *InstanceResourceUpdate {
	iru.mutation.ClearUpdateStatusIndicator()
	return iru
}

// SetUpdateStatusTimestamp sets the "update_status_timestamp" field.
func (iru *InstanceResourceUpdate) SetUpdateStatusTimestamp(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetUpdateStatusTimestamp()
	iru.mutation.SetUpdateStatusTimestamp(u)
	return iru
}

// SetNillableUpdateStatusTimestamp sets the "update_status_timestamp" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableUpdateStatusTimestamp(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetUpdateStatusTimestamp(*u)
	}
	return iru
}

// AddUpdateStatusTimestamp adds u to the "update_status_timestamp" field.
func (iru *InstanceResourceUpdate) AddUpdateStatusTimestamp(u int64) *InstanceResourceUpdate {
	iru.mutation.AddUpdateStatusTimestamp(u)
	return iru
}

// ClearUpdateStatusTimestamp clears the value of the "update_status_timestamp" field.
func (iru *InstanceResourceUpdate) ClearUpdateStatusTimestamp() *InstanceResourceUpdate {
	iru.mutation.ClearUpdateStatusTimestamp()
	return iru
}

// SetUpdateStatusDetail sets the "update_status_detail" field.
func (iru *InstanceResourceUpdate) SetUpdateStatusDetail(s string) *InstanceResourceUpdate {
	iru.mutation.SetUpdateStatusDetail(s)
	return iru
}

// SetNillableUpdateStatusDetail sets the "update_status_detail" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableUpdateStatusDetail(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetUpdateStatusDetail(*s)
	}
	return iru
}

// ClearUpdateStatusDetail clears the value of the "update_status_detail" field.
func (iru *InstanceResourceUpdate) ClearUpdateStatusDetail() *InstanceResourceUpdate {
	iru.mutation.ClearUpdateStatusDetail()
	return iru
}

// SetTrustedAttestationStatus sets the "trusted_attestation_status" field.
func (iru *InstanceResourceUpdate) SetTrustedAttestationStatus(s string) *InstanceResourceUpdate {
	iru.mutation.SetTrustedAttestationStatus(s)
	return iru
}

// SetNillableTrustedAttestationStatus sets the "trusted_attestation_status" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableTrustedAttestationStatus(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetTrustedAttestationStatus(*s)
	}
	return iru
}

// ClearTrustedAttestationStatus clears the value of the "trusted_attestation_status" field.
func (iru *InstanceResourceUpdate) ClearTrustedAttestationStatus() *InstanceResourceUpdate {
	iru.mutation.ClearTrustedAttestationStatus()
	return iru
}

// SetTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field.
func (iru *InstanceResourceUpdate) SetTrustedAttestationStatusIndicator(iasi instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdate {
	iru.mutation.SetTrustedAttestationStatusIndicator(iasi)
	return iru
}

// SetNillableTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableTrustedAttestationStatusIndicator(iasi *instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdate {
	if iasi != nil {
		iru.SetTrustedAttestationStatusIndicator(*iasi)
	}
	return iru
}

// ClearTrustedAttestationStatusIndicator clears the value of the "trusted_attestation_status_indicator" field.
func (iru *InstanceResourceUpdate) ClearTrustedAttestationStatusIndicator() *InstanceResourceUpdate {
	iru.mutation.ClearTrustedAttestationStatusIndicator()
	return iru
}

// SetTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field.
func (iru *InstanceResourceUpdate) SetTrustedAttestationStatusTimestamp(u uint64) *InstanceResourceUpdate {
	iru.mutation.ResetTrustedAttestationStatusTimestamp()
	iru.mutation.SetTrustedAttestationStatusTimestamp(u)
	return iru
}

// SetNillableTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableTrustedAttestationStatusTimestamp(u *uint64) *InstanceResourceUpdate {
	if u != nil {
		iru.SetTrustedAttestationStatusTimestamp(*u)
	}
	return iru
}

// AddTrustedAttestationStatusTimestamp adds u to the "trusted_attestation_status_timestamp" field.
func (iru *InstanceResourceUpdate) AddTrustedAttestationStatusTimestamp(u int64) *InstanceResourceUpdate {
	iru.mutation.AddTrustedAttestationStatusTimestamp(u)
	return iru
}

// ClearTrustedAttestationStatusTimestamp clears the value of the "trusted_attestation_status_timestamp" field.
func (iru *InstanceResourceUpdate) ClearTrustedAttestationStatusTimestamp() *InstanceResourceUpdate {
	iru.mutation.ClearTrustedAttestationStatusTimestamp()
	return iru
}

// SetInstanceStatusDetail sets the "instance_status_detail" field.
func (iru *InstanceResourceUpdate) SetInstanceStatusDetail(s string) *InstanceResourceUpdate {
	iru.mutation.SetInstanceStatusDetail(s)
	return iru
}

// SetNillableInstanceStatusDetail sets the "instance_status_detail" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableInstanceStatusDetail(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetInstanceStatusDetail(*s)
	}
	return iru
}

// ClearInstanceStatusDetail clears the value of the "instance_status_detail" field.
func (iru *InstanceResourceUpdate) ClearInstanceStatusDetail() *InstanceResourceUpdate {
	iru.mutation.ClearInstanceStatusDetail()
	return iru
}

// SetUpdatedAt sets the "updated_at" field.
func (iru *InstanceResourceUpdate) SetUpdatedAt(s string) *InstanceResourceUpdate {
	iru.mutation.SetUpdatedAt(s)
	return iru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableUpdatedAt(s *string) *InstanceResourceUpdate {
	if s != nil {
		iru.SetUpdatedAt(*s)
	}
	return iru
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (iru *InstanceResourceUpdate) SetHostID(id int) *InstanceResourceUpdate {
	iru.mutation.SetHostID(id)
	return iru
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableHostID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetHostID(*id)
	}
	return iru
}

// SetHost sets the "host" edge to the HostResource entity.
func (iru *InstanceResourceUpdate) SetHost(h *HostResource) *InstanceResourceUpdate {
	return iru.SetHostID(h.ID)
}

// SetDesiredOsID sets the "desired_os" edge to the OperatingSystemResource entity by ID.
func (iru *InstanceResourceUpdate) SetDesiredOsID(id int) *InstanceResourceUpdate {
	iru.mutation.SetDesiredOsID(id)
	return iru
}

// SetDesiredOs sets the "desired_os" edge to the OperatingSystemResource entity.
func (iru *InstanceResourceUpdate) SetDesiredOs(o *OperatingSystemResource) *InstanceResourceUpdate {
	return iru.SetDesiredOsID(o.ID)
}

// SetCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID.
func (iru *InstanceResourceUpdate) SetCurrentOsID(id int) *InstanceResourceUpdate {
	iru.mutation.SetCurrentOsID(id)
	return iru
}

// SetNillableCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableCurrentOsID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetCurrentOsID(*id)
	}
	return iru
}

// SetCurrentOs sets the "current_os" edge to the OperatingSystemResource entity.
func (iru *InstanceResourceUpdate) SetCurrentOs(o *OperatingSystemResource) *InstanceResourceUpdate {
	return iru.SetCurrentOsID(o.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (iru *InstanceResourceUpdate) AddWorkloadMemberIDs(ids ...int) *InstanceResourceUpdate {
	iru.mutation.AddWorkloadMemberIDs(ids...)
	return iru
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (iru *InstanceResourceUpdate) AddWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iru.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (iru *InstanceResourceUpdate) SetProviderID(id int) *InstanceResourceUpdate {
	iru.mutation.SetProviderID(id)
	return iru
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableProviderID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetProviderID(*id)
	}
	return iru
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (iru *InstanceResourceUpdate) SetProvider(p *ProviderResource) *InstanceResourceUpdate {
	return iru.SetProviderID(p.ID)
}

// SetLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID.
func (iru *InstanceResourceUpdate) SetLocalaccountID(id int) *InstanceResourceUpdate {
	iru.mutation.SetLocalaccountID(id)
	return iru
}

// SetNillableLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID if the given value is not nil.
func (iru *InstanceResourceUpdate) SetNillableLocalaccountID(id *int) *InstanceResourceUpdate {
	if id != nil {
		iru = iru.SetLocalaccountID(*id)
	}
	return iru
}

// SetLocalaccount sets the "localaccount" edge to the LocalAccountResource entity.
func (iru *InstanceResourceUpdate) SetLocalaccount(l *LocalAccountResource) *InstanceResourceUpdate {
	return iru.SetLocalaccountID(l.ID)
}

// AddCustomConfigIDs adds the "custom_config" edge to the CustomConfigResource entity by IDs.
func (iru *InstanceResourceUpdate) AddCustomConfigIDs(ids ...int) *InstanceResourceUpdate {
	iru.mutation.AddCustomConfigIDs(ids...)
	return iru
}

// AddCustomConfig adds the "custom_config" edges to the CustomConfigResource entity.
func (iru *InstanceResourceUpdate) AddCustomConfig(c ...*CustomConfigResource) *InstanceResourceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iru.AddCustomConfigIDs(ids...)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (iru *InstanceResourceUpdate) Mutation() *InstanceResourceMutation {
	return iru.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (iru *InstanceResourceUpdate) ClearHost() *InstanceResourceUpdate {
	iru.mutation.ClearHost()
	return iru
}

// ClearDesiredOs clears the "desired_os" edge to the OperatingSystemResource entity.
func (iru *InstanceResourceUpdate) ClearDesiredOs() *InstanceResourceUpdate {
	iru.mutation.ClearDesiredOs()
	return iru
}

// ClearCurrentOs clears the "current_os" edge to the OperatingSystemResource entity.
func (iru *InstanceResourceUpdate) ClearCurrentOs() *InstanceResourceUpdate {
	iru.mutation.ClearCurrentOs()
	return iru
}

// ClearWorkloadMembers clears all "workload_members" edges to the WorkloadMember entity.
func (iru *InstanceResourceUpdate) ClearWorkloadMembers() *InstanceResourceUpdate {
	iru.mutation.ClearWorkloadMembers()
	return iru
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to WorkloadMember entities by IDs.
func (iru *InstanceResourceUpdate) RemoveWorkloadMemberIDs(ids ...int) *InstanceResourceUpdate {
	iru.mutation.RemoveWorkloadMemberIDs(ids...)
	return iru
}

// RemoveWorkloadMembers removes "workload_members" edges to WorkloadMember entities.
func (iru *InstanceResourceUpdate) RemoveWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iru.RemoveWorkloadMemberIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (iru *InstanceResourceUpdate) ClearProvider() *InstanceResourceUpdate {
	iru.mutation.ClearProvider()
	return iru
}

// ClearLocalaccount clears the "localaccount" edge to the LocalAccountResource entity.
func (iru *InstanceResourceUpdate) ClearLocalaccount() *InstanceResourceUpdate {
	iru.mutation.ClearLocalaccount()
	return iru
}

// ClearCustomConfig clears all "custom_config" edges to the CustomConfigResource entity.
func (iru *InstanceResourceUpdate) ClearCustomConfig() *InstanceResourceUpdate {
	iru.mutation.ClearCustomConfig()
	return iru
}

// RemoveCustomConfigIDs removes the "custom_config" edge to CustomConfigResource entities by IDs.
func (iru *InstanceResourceUpdate) RemoveCustomConfigIDs(ids ...int) *InstanceResourceUpdate {
	iru.mutation.RemoveCustomConfigIDs(ids...)
	return iru
}

// RemoveCustomConfig removes "custom_config" edges to CustomConfigResource entities.
func (iru *InstanceResourceUpdate) RemoveCustomConfig(c ...*CustomConfigResource) *InstanceResourceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iru.RemoveCustomConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iru *InstanceResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iru.sqlSave, iru.mutation, iru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iru *InstanceResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *InstanceResourceUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *InstanceResourceUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iru *InstanceResourceUpdate) check() error {
	if v, ok := iru.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := iru.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := iru.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := iru.mutation.InstanceStatusIndicator(); ok {
		if err := instanceresource.InstanceStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "instance_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.instance_status_indicator": %w`, err)}
		}
	}
	if v, ok := iru.mutation.ProvisioningStatusIndicator(); ok {
		if err := instanceresource.ProvisioningStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "provisioning_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.provisioning_status_indicator": %w`, err)}
		}
	}
	if v, ok := iru.mutation.UpdateStatusIndicator(); ok {
		if err := instanceresource.UpdateStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "update_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.update_status_indicator": %w`, err)}
		}
	}
	if v, ok := iru.mutation.TrustedAttestationStatusIndicator(); ok {
		if err := instanceresource.TrustedAttestationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "trusted_attestation_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.trusted_attestation_status_indicator": %w`, err)}
		}
	}
	if iru.mutation.DesiredOsCleared() && len(iru.mutation.DesiredOsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InstanceResource.desired_os"`)
	}
	return nil
}

func (iru *InstanceResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	if ps := iru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := iru.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
	}
	if iru.mutation.KindCleared() {
		_spec.ClearField(instanceresource.FieldKind, field.TypeEnum)
	}
	if value, ok := iru.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
	}
	if iru.mutation.NameCleared() {
		_spec.ClearField(instanceresource.FieldName, field.TypeString)
	}
	if value, ok := iru.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
	}
	if iru.mutation.DesiredStateCleared() {
		_spec.ClearField(instanceresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := iru.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
	}
	if iru.mutation.CurrentStateCleared() {
		_spec.ClearField(instanceresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := iru.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedVMMemoryBytes(); ok {
		_spec.AddField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if iru.mutation.VMMemoryBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMMemoryBytes, field.TypeUint64)
	}
	if value, ok := iru.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if value, ok := iru.mutation.AddedVMCPUCores(); ok {
		_spec.AddField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if iru.mutation.VMCPUCoresCleared() {
		_spec.ClearField(instanceresource.FieldVMCPUCores, field.TypeUint32)
	}
	if value, ok := iru.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedVMStorageBytes(); ok {
		_spec.AddField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if iru.mutation.VMStorageBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMStorageBytes, field.TypeUint64)
	}
	if iru.mutation.SecurityFeatureCleared() {
		_spec.ClearField(instanceresource.FieldSecurityFeature, field.TypeEnum)
	}
	if value, ok := iru.mutation.InstanceStatus(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatus, field.TypeString, value)
	}
	if iru.mutation.InstanceStatusCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatus, field.TypeString)
	}
	if value, ok := iru.mutation.InstanceStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum, value)
	}
	if iru.mutation.InstanceStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum)
	}
	if value, ok := iru.mutation.InstanceStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedInstanceStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if iru.mutation.InstanceStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iru.mutation.ProvisioningStatus(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatus, field.TypeString, value)
	}
	if iru.mutation.ProvisioningStatusCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatus, field.TypeString)
	}
	if value, ok := iru.mutation.ProvisioningStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum, value)
	}
	if iru.mutation.ProvisioningStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum)
	}
	if value, ok := iru.mutation.ProvisioningStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedProvisioningStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if iru.mutation.ProvisioningStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iru.mutation.UpdateStatus(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatus, field.TypeString, value)
	}
	if iru.mutation.UpdateStatusCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatus, field.TypeString)
	}
	if value, ok := iru.mutation.UpdateStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum, value)
	}
	if iru.mutation.UpdateStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum)
	}
	if value, ok := iru.mutation.UpdateStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedUpdateStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if iru.mutation.UpdateStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iru.mutation.UpdateStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusDetail, field.TypeString, value)
	}
	if iru.mutation.UpdateStatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusDetail, field.TypeString)
	}
	if value, ok := iru.mutation.TrustedAttestationStatus(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatus, field.TypeString, value)
	}
	if iru.mutation.TrustedAttestationStatusCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatus, field.TypeString)
	}
	if value, ok := iru.mutation.TrustedAttestationStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum, value)
	}
	if iru.mutation.TrustedAttestationStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum)
	}
	if value, ok := iru.mutation.TrustedAttestationStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iru.mutation.AddedTrustedAttestationStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if iru.mutation.TrustedAttestationStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iru.mutation.InstanceStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusDetail, field.TypeString, value)
	}
	if iru.mutation.InstanceStatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusDetail, field.TypeString)
	}
	if value, ok := iru.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceresource.FieldUpdatedAt, field.TypeString, value)
	}
	if iru.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.DesiredOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.DesiredOsTable,
			Columns: []string{instanceresource.DesiredOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.DesiredOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.DesiredOsTable,
			Columns: []string{instanceresource.DesiredOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.CurrentOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.CurrentOsTable,
			Columns: []string{instanceresource.CurrentOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.CurrentOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.CurrentOsTable,
			Columns: []string{instanceresource.CurrentOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.RemovedWorkloadMembersIDs(); len(nodes) > 0 && !iru.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.LocalaccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.LocalaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iru.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.RemovedCustomConfigIDs(); len(nodes) > 0 && !iru.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.CustomConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iru.mutation.done = true
	return n, nil
}

// InstanceResourceUpdateOne is the builder for updating a single InstanceResource entity.
type InstanceResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstanceResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (iruo *InstanceResourceUpdateOne) SetResourceID(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetResourceID(s)
	return iruo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableResourceID(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetResourceID(*s)
	}
	return iruo
}

// SetKind sets the "kind" field.
func (iruo *InstanceResourceUpdateOne) SetKind(i instanceresource.Kind) *InstanceResourceUpdateOne {
	iruo.mutation.SetKind(i)
	return iruo
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableKind(i *instanceresource.Kind) *InstanceResourceUpdateOne {
	if i != nil {
		iruo.SetKind(*i)
	}
	return iruo
}

// ClearKind clears the value of the "kind" field.
func (iruo *InstanceResourceUpdateOne) ClearKind() *InstanceResourceUpdateOne {
	iruo.mutation.ClearKind()
	return iruo
}

// SetName sets the "name" field.
func (iruo *InstanceResourceUpdateOne) SetName(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetName(s)
	return iruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableName(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetName(*s)
	}
	return iruo
}

// ClearName clears the value of the "name" field.
func (iruo *InstanceResourceUpdateOne) ClearName() *InstanceResourceUpdateOne {
	iruo.mutation.ClearName()
	return iruo
}

// SetDesiredState sets the "desired_state" field.
func (iruo *InstanceResourceUpdateOne) SetDesiredState(is instanceresource.DesiredState) *InstanceResourceUpdateOne {
	iruo.mutation.SetDesiredState(is)
	return iruo
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableDesiredState(is *instanceresource.DesiredState) *InstanceResourceUpdateOne {
	if is != nil {
		iruo.SetDesiredState(*is)
	}
	return iruo
}

// ClearDesiredState clears the value of the "desired_state" field.
func (iruo *InstanceResourceUpdateOne) ClearDesiredState() *InstanceResourceUpdateOne {
	iruo.mutation.ClearDesiredState()
	return iruo
}

// SetCurrentState sets the "current_state" field.
func (iruo *InstanceResourceUpdateOne) SetCurrentState(is instanceresource.CurrentState) *InstanceResourceUpdateOne {
	iruo.mutation.SetCurrentState(is)
	return iruo
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableCurrentState(is *instanceresource.CurrentState) *InstanceResourceUpdateOne {
	if is != nil {
		iruo.SetCurrentState(*is)
	}
	return iruo
}

// ClearCurrentState clears the value of the "current_state" field.
func (iruo *InstanceResourceUpdateOne) ClearCurrentState() *InstanceResourceUpdateOne {
	iruo.mutation.ClearCurrentState()
	return iruo
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (iruo *InstanceResourceUpdateOne) SetVMMemoryBytes(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetVMMemoryBytes()
	iruo.mutation.SetVMMemoryBytes(u)
	return iruo
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableVMMemoryBytes(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetVMMemoryBytes(*u)
	}
	return iruo
}

// AddVMMemoryBytes adds u to the "vm_memory_bytes" field.
func (iruo *InstanceResourceUpdateOne) AddVMMemoryBytes(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddVMMemoryBytes(u)
	return iruo
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (iruo *InstanceResourceUpdateOne) ClearVMMemoryBytes() *InstanceResourceUpdateOne {
	iruo.mutation.ClearVMMemoryBytes()
	return iruo
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (iruo *InstanceResourceUpdateOne) SetVMCPUCores(u uint32) *InstanceResourceUpdateOne {
	iruo.mutation.ResetVMCPUCores()
	iruo.mutation.SetVMCPUCores(u)
	return iruo
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableVMCPUCores(u *uint32) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetVMCPUCores(*u)
	}
	return iruo
}

// AddVMCPUCores adds u to the "vm_cpu_cores" field.
func (iruo *InstanceResourceUpdateOne) AddVMCPUCores(u int32) *InstanceResourceUpdateOne {
	iruo.mutation.AddVMCPUCores(u)
	return iruo
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (iruo *InstanceResourceUpdateOne) ClearVMCPUCores() *InstanceResourceUpdateOne {
	iruo.mutation.ClearVMCPUCores()
	return iruo
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (iruo *InstanceResourceUpdateOne) SetVMStorageBytes(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetVMStorageBytes()
	iruo.mutation.SetVMStorageBytes(u)
	return iruo
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableVMStorageBytes(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetVMStorageBytes(*u)
	}
	return iruo
}

// AddVMStorageBytes adds u to the "vm_storage_bytes" field.
func (iruo *InstanceResourceUpdateOne) AddVMStorageBytes(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddVMStorageBytes(u)
	return iruo
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (iruo *InstanceResourceUpdateOne) ClearVMStorageBytes() *InstanceResourceUpdateOne {
	iruo.mutation.ClearVMStorageBytes()
	return iruo
}

// SetInstanceStatus sets the "instance_status" field.
func (iruo *InstanceResourceUpdateOne) SetInstanceStatus(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetInstanceStatus(s)
	return iruo
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableInstanceStatus(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetInstanceStatus(*s)
	}
	return iruo
}

// ClearInstanceStatus clears the value of the "instance_status" field.
func (iruo *InstanceResourceUpdateOne) ClearInstanceStatus() *InstanceResourceUpdateOne {
	iruo.mutation.ClearInstanceStatus()
	return iruo
}

// SetInstanceStatusIndicator sets the "instance_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) SetInstanceStatusIndicator(isi instanceresource.InstanceStatusIndicator) *InstanceResourceUpdateOne {
	iruo.mutation.SetInstanceStatusIndicator(isi)
	return iruo
}

// SetNillableInstanceStatusIndicator sets the "instance_status_indicator" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableInstanceStatusIndicator(isi *instanceresource.InstanceStatusIndicator) *InstanceResourceUpdateOne {
	if isi != nil {
		iruo.SetInstanceStatusIndicator(*isi)
	}
	return iruo
}

// ClearInstanceStatusIndicator clears the value of the "instance_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) ClearInstanceStatusIndicator() *InstanceResourceUpdateOne {
	iruo.mutation.ClearInstanceStatusIndicator()
	return iruo
}

// SetInstanceStatusTimestamp sets the "instance_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) SetInstanceStatusTimestamp(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetInstanceStatusTimestamp()
	iruo.mutation.SetInstanceStatusTimestamp(u)
	return iruo
}

// SetNillableInstanceStatusTimestamp sets the "instance_status_timestamp" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableInstanceStatusTimestamp(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetInstanceStatusTimestamp(*u)
	}
	return iruo
}

// AddInstanceStatusTimestamp adds u to the "instance_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) AddInstanceStatusTimestamp(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddInstanceStatusTimestamp(u)
	return iruo
}

// ClearInstanceStatusTimestamp clears the value of the "instance_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) ClearInstanceStatusTimestamp() *InstanceResourceUpdateOne {
	iruo.mutation.ClearInstanceStatusTimestamp()
	return iruo
}

// SetProvisioningStatus sets the "provisioning_status" field.
func (iruo *InstanceResourceUpdateOne) SetProvisioningStatus(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetProvisioningStatus(s)
	return iruo
}

// SetNillableProvisioningStatus sets the "provisioning_status" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableProvisioningStatus(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetProvisioningStatus(*s)
	}
	return iruo
}

// ClearProvisioningStatus clears the value of the "provisioning_status" field.
func (iruo *InstanceResourceUpdateOne) ClearProvisioningStatus() *InstanceResourceUpdateOne {
	iruo.mutation.ClearProvisioningStatus()
	return iruo
}

// SetProvisioningStatusIndicator sets the "provisioning_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) SetProvisioningStatusIndicator(isi instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdateOne {
	iruo.mutation.SetProvisioningStatusIndicator(isi)
	return iruo
}

// SetNillableProvisioningStatusIndicator sets the "provisioning_status_indicator" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableProvisioningStatusIndicator(isi *instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdateOne {
	if isi != nil {
		iruo.SetProvisioningStatusIndicator(*isi)
	}
	return iruo
}

// ClearProvisioningStatusIndicator clears the value of the "provisioning_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) ClearProvisioningStatusIndicator() *InstanceResourceUpdateOne {
	iruo.mutation.ClearProvisioningStatusIndicator()
	return iruo
}

// SetProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) SetProvisioningStatusTimestamp(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetProvisioningStatusTimestamp()
	iruo.mutation.SetProvisioningStatusTimestamp(u)
	return iruo
}

// SetNillableProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableProvisioningStatusTimestamp(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetProvisioningStatusTimestamp(*u)
	}
	return iruo
}

// AddProvisioningStatusTimestamp adds u to the "provisioning_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) AddProvisioningStatusTimestamp(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddProvisioningStatusTimestamp(u)
	return iruo
}

// ClearProvisioningStatusTimestamp clears the value of the "provisioning_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) ClearProvisioningStatusTimestamp() *InstanceResourceUpdateOne {
	iruo.mutation.ClearProvisioningStatusTimestamp()
	return iruo
}

// SetUpdateStatus sets the "update_status" field.
func (iruo *InstanceResourceUpdateOne) SetUpdateStatus(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetUpdateStatus(s)
	return iruo
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableUpdateStatus(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetUpdateStatus(*s)
	}
	return iruo
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (iruo *InstanceResourceUpdateOne) ClearUpdateStatus() *InstanceResourceUpdateOne {
	iruo.mutation.ClearUpdateStatus()
	return iruo
}

// SetUpdateStatusIndicator sets the "update_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) SetUpdateStatusIndicator(isi instanceresource.UpdateStatusIndicator) *InstanceResourceUpdateOne {
	iruo.mutation.SetUpdateStatusIndicator(isi)
	return iruo
}

// SetNillableUpdateStatusIndicator sets the "update_status_indicator" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableUpdateStatusIndicator(isi *instanceresource.UpdateStatusIndicator) *InstanceResourceUpdateOne {
	if isi != nil {
		iruo.SetUpdateStatusIndicator(*isi)
	}
	return iruo
}

// ClearUpdateStatusIndicator clears the value of the "update_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) ClearUpdateStatusIndicator() *InstanceResourceUpdateOne {
	iruo.mutation.ClearUpdateStatusIndicator()
	return iruo
}

// SetUpdateStatusTimestamp sets the "update_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) SetUpdateStatusTimestamp(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetUpdateStatusTimestamp()
	iruo.mutation.SetUpdateStatusTimestamp(u)
	return iruo
}

// SetNillableUpdateStatusTimestamp sets the "update_status_timestamp" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableUpdateStatusTimestamp(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetUpdateStatusTimestamp(*u)
	}
	return iruo
}

// AddUpdateStatusTimestamp adds u to the "update_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) AddUpdateStatusTimestamp(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddUpdateStatusTimestamp(u)
	return iruo
}

// ClearUpdateStatusTimestamp clears the value of the "update_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) ClearUpdateStatusTimestamp() *InstanceResourceUpdateOne {
	iruo.mutation.ClearUpdateStatusTimestamp()
	return iruo
}

// SetUpdateStatusDetail sets the "update_status_detail" field.
func (iruo *InstanceResourceUpdateOne) SetUpdateStatusDetail(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetUpdateStatusDetail(s)
	return iruo
}

// SetNillableUpdateStatusDetail sets the "update_status_detail" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableUpdateStatusDetail(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetUpdateStatusDetail(*s)
	}
	return iruo
}

// ClearUpdateStatusDetail clears the value of the "update_status_detail" field.
func (iruo *InstanceResourceUpdateOne) ClearUpdateStatusDetail() *InstanceResourceUpdateOne {
	iruo.mutation.ClearUpdateStatusDetail()
	return iruo
}

// SetTrustedAttestationStatus sets the "trusted_attestation_status" field.
func (iruo *InstanceResourceUpdateOne) SetTrustedAttestationStatus(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetTrustedAttestationStatus(s)
	return iruo
}

// SetNillableTrustedAttestationStatus sets the "trusted_attestation_status" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableTrustedAttestationStatus(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetTrustedAttestationStatus(*s)
	}
	return iruo
}

// ClearTrustedAttestationStatus clears the value of the "trusted_attestation_status" field.
func (iruo *InstanceResourceUpdateOne) ClearTrustedAttestationStatus() *InstanceResourceUpdateOne {
	iruo.mutation.ClearTrustedAttestationStatus()
	return iruo
}

// SetTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) SetTrustedAttestationStatusIndicator(iasi instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdateOne {
	iruo.mutation.SetTrustedAttestationStatusIndicator(iasi)
	return iruo
}

// SetNillableTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableTrustedAttestationStatusIndicator(iasi *instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdateOne {
	if iasi != nil {
		iruo.SetTrustedAttestationStatusIndicator(*iasi)
	}
	return iruo
}

// ClearTrustedAttestationStatusIndicator clears the value of the "trusted_attestation_status_indicator" field.
func (iruo *InstanceResourceUpdateOne) ClearTrustedAttestationStatusIndicator() *InstanceResourceUpdateOne {
	iruo.mutation.ClearTrustedAttestationStatusIndicator()
	return iruo
}

// SetTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) SetTrustedAttestationStatusTimestamp(u uint64) *InstanceResourceUpdateOne {
	iruo.mutation.ResetTrustedAttestationStatusTimestamp()
	iruo.mutation.SetTrustedAttestationStatusTimestamp(u)
	return iruo
}

// SetNillableTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableTrustedAttestationStatusTimestamp(u *uint64) *InstanceResourceUpdateOne {
	if u != nil {
		iruo.SetTrustedAttestationStatusTimestamp(*u)
	}
	return iruo
}

// AddTrustedAttestationStatusTimestamp adds u to the "trusted_attestation_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) AddTrustedAttestationStatusTimestamp(u int64) *InstanceResourceUpdateOne {
	iruo.mutation.AddTrustedAttestationStatusTimestamp(u)
	return iruo
}

// ClearTrustedAttestationStatusTimestamp clears the value of the "trusted_attestation_status_timestamp" field.
func (iruo *InstanceResourceUpdateOne) ClearTrustedAttestationStatusTimestamp() *InstanceResourceUpdateOne {
	iruo.mutation.ClearTrustedAttestationStatusTimestamp()
	return iruo
}

// SetInstanceStatusDetail sets the "instance_status_detail" field.
func (iruo *InstanceResourceUpdateOne) SetInstanceStatusDetail(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetInstanceStatusDetail(s)
	return iruo
}

// SetNillableInstanceStatusDetail sets the "instance_status_detail" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableInstanceStatusDetail(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetInstanceStatusDetail(*s)
	}
	return iruo
}

// ClearInstanceStatusDetail clears the value of the "instance_status_detail" field.
func (iruo *InstanceResourceUpdateOne) ClearInstanceStatusDetail() *InstanceResourceUpdateOne {
	iruo.mutation.ClearInstanceStatusDetail()
	return iruo
}

// SetUpdatedAt sets the "updated_at" field.
func (iruo *InstanceResourceUpdateOne) SetUpdatedAt(s string) *InstanceResourceUpdateOne {
	iruo.mutation.SetUpdatedAt(s)
	return iruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableUpdatedAt(s *string) *InstanceResourceUpdateOne {
	if s != nil {
		iruo.SetUpdatedAt(*s)
	}
	return iruo
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetHostID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetHostID(id)
	return iruo
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableHostID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetHostID(*id)
	}
	return iruo
}

// SetHost sets the "host" edge to the HostResource entity.
func (iruo *InstanceResourceUpdateOne) SetHost(h *HostResource) *InstanceResourceUpdateOne {
	return iruo.SetHostID(h.ID)
}

// SetDesiredOsID sets the "desired_os" edge to the OperatingSystemResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetDesiredOsID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetDesiredOsID(id)
	return iruo
}

// SetDesiredOs sets the "desired_os" edge to the OperatingSystemResource entity.
func (iruo *InstanceResourceUpdateOne) SetDesiredOs(o *OperatingSystemResource) *InstanceResourceUpdateOne {
	return iruo.SetDesiredOsID(o.ID)
}

// SetCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetCurrentOsID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetCurrentOsID(id)
	return iruo
}

// SetNillableCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableCurrentOsID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetCurrentOsID(*id)
	}
	return iruo
}

// SetCurrentOs sets the "current_os" edge to the OperatingSystemResource entity.
func (iruo *InstanceResourceUpdateOne) SetCurrentOs(o *OperatingSystemResource) *InstanceResourceUpdateOne {
	return iruo.SetCurrentOsID(o.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (iruo *InstanceResourceUpdateOne) AddWorkloadMemberIDs(ids ...int) *InstanceResourceUpdateOne {
	iruo.mutation.AddWorkloadMemberIDs(ids...)
	return iruo
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (iruo *InstanceResourceUpdateOne) AddWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iruo.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetProviderID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetProviderID(id)
	return iruo
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableProviderID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetProviderID(*id)
	}
	return iruo
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (iruo *InstanceResourceUpdateOne) SetProvider(p *ProviderResource) *InstanceResourceUpdateOne {
	return iruo.SetProviderID(p.ID)
}

// SetLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID.
func (iruo *InstanceResourceUpdateOne) SetLocalaccountID(id int) *InstanceResourceUpdateOne {
	iruo.mutation.SetLocalaccountID(id)
	return iruo
}

// SetNillableLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID if the given value is not nil.
func (iruo *InstanceResourceUpdateOne) SetNillableLocalaccountID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		iruo = iruo.SetLocalaccountID(*id)
	}
	return iruo
}

// SetLocalaccount sets the "localaccount" edge to the LocalAccountResource entity.
func (iruo *InstanceResourceUpdateOne) SetLocalaccount(l *LocalAccountResource) *InstanceResourceUpdateOne {
	return iruo.SetLocalaccountID(l.ID)
}

// AddCustomConfigIDs adds the "custom_config" edge to the CustomConfigResource entity by IDs.
func (iruo *InstanceResourceUpdateOne) AddCustomConfigIDs(ids ...int) *InstanceResourceUpdateOne {
	iruo.mutation.AddCustomConfigIDs(ids...)
	return iruo
}

// AddCustomConfig adds the "custom_config" edges to the CustomConfigResource entity.
func (iruo *InstanceResourceUpdateOne) AddCustomConfig(c ...*CustomConfigResource) *InstanceResourceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iruo.AddCustomConfigIDs(ids...)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (iruo *InstanceResourceUpdateOne) Mutation() *InstanceResourceMutation {
	return iruo.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (iruo *InstanceResourceUpdateOne) ClearHost() *InstanceResourceUpdateOne {
	iruo.mutation.ClearHost()
	return iruo
}

// ClearDesiredOs clears the "desired_os" edge to the OperatingSystemResource entity.
func (iruo *InstanceResourceUpdateOne) ClearDesiredOs() *InstanceResourceUpdateOne {
	iruo.mutation.ClearDesiredOs()
	return iruo
}

// ClearCurrentOs clears the "current_os" edge to the OperatingSystemResource entity.
func (iruo *InstanceResourceUpdateOne) ClearCurrentOs() *InstanceResourceUpdateOne {
	iruo.mutation.ClearCurrentOs()
	return iruo
}

// ClearWorkloadMembers clears all "workload_members" edges to the WorkloadMember entity.
func (iruo *InstanceResourceUpdateOne) ClearWorkloadMembers() *InstanceResourceUpdateOne {
	iruo.mutation.ClearWorkloadMembers()
	return iruo
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to WorkloadMember entities by IDs.
func (iruo *InstanceResourceUpdateOne) RemoveWorkloadMemberIDs(ids ...int) *InstanceResourceUpdateOne {
	iruo.mutation.RemoveWorkloadMemberIDs(ids...)
	return iruo
}

// RemoveWorkloadMembers removes "workload_members" edges to WorkloadMember entities.
func (iruo *InstanceResourceUpdateOne) RemoveWorkloadMembers(w ...*WorkloadMember) *InstanceResourceUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return iruo.RemoveWorkloadMemberIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (iruo *InstanceResourceUpdateOne) ClearProvider() *InstanceResourceUpdateOne {
	iruo.mutation.ClearProvider()
	return iruo
}

// ClearLocalaccount clears the "localaccount" edge to the LocalAccountResource entity.
func (iruo *InstanceResourceUpdateOne) ClearLocalaccount() *InstanceResourceUpdateOne {
	iruo.mutation.ClearLocalaccount()
	return iruo
}

// ClearCustomConfig clears all "custom_config" edges to the CustomConfigResource entity.
func (iruo *InstanceResourceUpdateOne) ClearCustomConfig() *InstanceResourceUpdateOne {
	iruo.mutation.ClearCustomConfig()
	return iruo
}

// RemoveCustomConfigIDs removes the "custom_config" edge to CustomConfigResource entities by IDs.
func (iruo *InstanceResourceUpdateOne) RemoveCustomConfigIDs(ids ...int) *InstanceResourceUpdateOne {
	iruo.mutation.RemoveCustomConfigIDs(ids...)
	return iruo
}

// RemoveCustomConfig removes "custom_config" edges to CustomConfigResource entities.
func (iruo *InstanceResourceUpdateOne) RemoveCustomConfig(c ...*CustomConfigResource) *InstanceResourceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iruo.RemoveCustomConfigIDs(ids...)
}

// Where appends a list predicates to the InstanceResourceUpdate builder.
func (iruo *InstanceResourceUpdateOne) Where(ps ...predicate.InstanceResource) *InstanceResourceUpdateOne {
	iruo.mutation.Where(ps...)
	return iruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iruo *InstanceResourceUpdateOne) Select(field string, fields ...string) *InstanceResourceUpdateOne {
	iruo.fields = append([]string{field}, fields...)
	return iruo
}

// Save executes the query and returns the updated InstanceResource entity.
func (iruo *InstanceResourceUpdateOne) Save(ctx context.Context) (*InstanceResource, error) {
	return withHooks(ctx, iruo.sqlSave, iruo.mutation, iruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *InstanceResourceUpdateOne) SaveX(ctx context.Context) *InstanceResource {
	node, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iruo *InstanceResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *InstanceResourceUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iruo *InstanceResourceUpdateOne) check() error {
	if v, ok := iruo.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.InstanceStatusIndicator(); ok {
		if err := instanceresource.InstanceStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "instance_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.instance_status_indicator": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.ProvisioningStatusIndicator(); ok {
		if err := instanceresource.ProvisioningStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "provisioning_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.provisioning_status_indicator": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.UpdateStatusIndicator(); ok {
		if err := instanceresource.UpdateStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "update_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.update_status_indicator": %w`, err)}
		}
	}
	if v, ok := iruo.mutation.TrustedAttestationStatusIndicator(); ok {
		if err := instanceresource.TrustedAttestationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "trusted_attestation_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.trusted_attestation_status_indicator": %w`, err)}
		}
	}
	if iruo.mutation.DesiredOsCleared() && len(iruo.mutation.DesiredOsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InstanceResource.desired_os"`)
	}
	return nil
}

func (iruo *InstanceResourceUpdateOne) sqlSave(ctx context.Context) (_node *InstanceResource, err error) {
	if err := iruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstanceResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.FieldID)
		for _, f := range fields {
			if !instanceresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instanceresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iruo.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := iruo.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
	}
	if iruo.mutation.KindCleared() {
		_spec.ClearField(instanceresource.FieldKind, field.TypeEnum)
	}
	if value, ok := iruo.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
	}
	if iruo.mutation.NameCleared() {
		_spec.ClearField(instanceresource.FieldName, field.TypeString)
	}
	if value, ok := iruo.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
	}
	if iruo.mutation.DesiredStateCleared() {
		_spec.ClearField(instanceresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := iruo.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
	}
	if iruo.mutation.CurrentStateCleared() {
		_spec.ClearField(instanceresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := iruo.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedVMMemoryBytes(); ok {
		_spec.AddField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if iruo.mutation.VMMemoryBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMMemoryBytes, field.TypeUint64)
	}
	if value, ok := iruo.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if value, ok := iruo.mutation.AddedVMCPUCores(); ok {
		_spec.AddField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if iruo.mutation.VMCPUCoresCleared() {
		_spec.ClearField(instanceresource.FieldVMCPUCores, field.TypeUint32)
	}
	if value, ok := iruo.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedVMStorageBytes(); ok {
		_spec.AddField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if iruo.mutation.VMStorageBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMStorageBytes, field.TypeUint64)
	}
	if iruo.mutation.SecurityFeatureCleared() {
		_spec.ClearField(instanceresource.FieldSecurityFeature, field.TypeEnum)
	}
	if value, ok := iruo.mutation.InstanceStatus(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatus, field.TypeString, value)
	}
	if iruo.mutation.InstanceStatusCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatus, field.TypeString)
	}
	if value, ok := iruo.mutation.InstanceStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum, value)
	}
	if iruo.mutation.InstanceStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum)
	}
	if value, ok := iruo.mutation.InstanceStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedInstanceStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if iruo.mutation.InstanceStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iruo.mutation.ProvisioningStatus(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatus, field.TypeString, value)
	}
	if iruo.mutation.ProvisioningStatusCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatus, field.TypeString)
	}
	if value, ok := iruo.mutation.ProvisioningStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum, value)
	}
	if iruo.mutation.ProvisioningStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum)
	}
	if value, ok := iruo.mutation.ProvisioningStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedProvisioningStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if iruo.mutation.ProvisioningStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iruo.mutation.UpdateStatus(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatus, field.TypeString, value)
	}
	if iruo.mutation.UpdateStatusCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatus, field.TypeString)
	}
	if value, ok := iruo.mutation.UpdateStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum, value)
	}
	if iruo.mutation.UpdateStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum)
	}
	if value, ok := iruo.mutation.UpdateStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedUpdateStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if iruo.mutation.UpdateStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iruo.mutation.UpdateStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusDetail, field.TypeString, value)
	}
	if iruo.mutation.UpdateStatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusDetail, field.TypeString)
	}
	if value, ok := iruo.mutation.TrustedAttestationStatus(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatus, field.TypeString, value)
	}
	if iruo.mutation.TrustedAttestationStatusCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatus, field.TypeString)
	}
	if value, ok := iruo.mutation.TrustedAttestationStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum, value)
	}
	if iruo.mutation.TrustedAttestationStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum)
	}
	if value, ok := iruo.mutation.TrustedAttestationStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := iruo.mutation.AddedTrustedAttestationStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if iruo.mutation.TrustedAttestationStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := iruo.mutation.InstanceStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusDetail, field.TypeString, value)
	}
	if iruo.mutation.InstanceStatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusDetail, field.TypeString)
	}
	if value, ok := iruo.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceresource.FieldUpdatedAt, field.TypeString, value)
	}
	if iruo.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.DesiredOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.DesiredOsTable,
			Columns: []string{instanceresource.DesiredOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.DesiredOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.DesiredOsTable,
			Columns: []string{instanceresource.DesiredOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.CurrentOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.CurrentOsTable,
			Columns: []string{instanceresource.CurrentOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.CurrentOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.CurrentOsTable,
			Columns: []string{instanceresource.CurrentOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.RemovedWorkloadMembersIDs(); len(nodes) > 0 && !iruo.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.LocalaccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.LocalaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iruo.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.RemovedCustomConfigIDs(); len(nodes) > 0 && !iruo.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.CustomConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InstanceResource{config: iruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iruo.mutation.done = true
	return _node, nil
}
