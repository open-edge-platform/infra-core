// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
)

// InstanceResourceUpdate is the builder for updating InstanceResource entities.
type InstanceResourceUpdate struct {
	config
	hooks    []Hook
	mutation *InstanceResourceMutation
}

// Where appends a list predicates to the InstanceResourceUpdate builder.
func (_u *InstanceResourceUpdate) Where(ps ...predicate.InstanceResource) *InstanceResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *InstanceResourceUpdate) SetResourceID(v string) *InstanceResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableResourceID(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *InstanceResourceUpdate) SetKind(v instanceresource.Kind) *InstanceResourceUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableKind(v *instanceresource.Kind) *InstanceResourceUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *InstanceResourceUpdate) ClearKind() *InstanceResourceUpdate {
	_u.mutation.ClearKind()
	return _u
}

// SetName sets the "name" field.
func (_u *InstanceResourceUpdate) SetName(v string) *InstanceResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableName(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *InstanceResourceUpdate) ClearName() *InstanceResourceUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *InstanceResourceUpdate) SetDesiredState(v instanceresource.DesiredState) *InstanceResourceUpdate {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableDesiredState(v *instanceresource.DesiredState) *InstanceResourceUpdate {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// ClearDesiredState clears the value of the "desired_state" field.
func (_u *InstanceResourceUpdate) ClearDesiredState() *InstanceResourceUpdate {
	_u.mutation.ClearDesiredState()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *InstanceResourceUpdate) SetCurrentState(v instanceresource.CurrentState) *InstanceResourceUpdate {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableCurrentState(v *instanceresource.CurrentState) *InstanceResourceUpdate {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *InstanceResourceUpdate) ClearCurrentState() *InstanceResourceUpdate {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (_u *InstanceResourceUpdate) SetVMMemoryBytes(v uint64) *InstanceResourceUpdate {
	_u.mutation.ResetVMMemoryBytes()
	_u.mutation.SetVMMemoryBytes(v)
	return _u
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableVMMemoryBytes(v *uint64) *InstanceResourceUpdate {
	if v != nil {
		_u.SetVMMemoryBytes(*v)
	}
	return _u
}

// AddVMMemoryBytes adds value to the "vm_memory_bytes" field.
func (_u *InstanceResourceUpdate) AddVMMemoryBytes(v int64) *InstanceResourceUpdate {
	_u.mutation.AddVMMemoryBytes(v)
	return _u
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (_u *InstanceResourceUpdate) ClearVMMemoryBytes() *InstanceResourceUpdate {
	_u.mutation.ClearVMMemoryBytes()
	return _u
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (_u *InstanceResourceUpdate) SetVMCPUCores(v uint32) *InstanceResourceUpdate {
	_u.mutation.ResetVMCPUCores()
	_u.mutation.SetVMCPUCores(v)
	return _u
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableVMCPUCores(v *uint32) *InstanceResourceUpdate {
	if v != nil {
		_u.SetVMCPUCores(*v)
	}
	return _u
}

// AddVMCPUCores adds value to the "vm_cpu_cores" field.
func (_u *InstanceResourceUpdate) AddVMCPUCores(v int32) *InstanceResourceUpdate {
	_u.mutation.AddVMCPUCores(v)
	return _u
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (_u *InstanceResourceUpdate) ClearVMCPUCores() *InstanceResourceUpdate {
	_u.mutation.ClearVMCPUCores()
	return _u
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (_u *InstanceResourceUpdate) SetVMStorageBytes(v uint64) *InstanceResourceUpdate {
	_u.mutation.ResetVMStorageBytes()
	_u.mutation.SetVMStorageBytes(v)
	return _u
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableVMStorageBytes(v *uint64) *InstanceResourceUpdate {
	if v != nil {
		_u.SetVMStorageBytes(*v)
	}
	return _u
}

// AddVMStorageBytes adds value to the "vm_storage_bytes" field.
func (_u *InstanceResourceUpdate) AddVMStorageBytes(v int64) *InstanceResourceUpdate {
	_u.mutation.AddVMStorageBytes(v)
	return _u
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (_u *InstanceResourceUpdate) ClearVMStorageBytes() *InstanceResourceUpdate {
	_u.mutation.ClearVMStorageBytes()
	return _u
}

// SetInstanceStatus sets the "instance_status" field.
func (_u *InstanceResourceUpdate) SetInstanceStatus(v string) *InstanceResourceUpdate {
	_u.mutation.SetInstanceStatus(v)
	return _u
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableInstanceStatus(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetInstanceStatus(*v)
	}
	return _u
}

// ClearInstanceStatus clears the value of the "instance_status" field.
func (_u *InstanceResourceUpdate) ClearInstanceStatus() *InstanceResourceUpdate {
	_u.mutation.ClearInstanceStatus()
	return _u
}

// SetInstanceStatusIndicator sets the "instance_status_indicator" field.
func (_u *InstanceResourceUpdate) SetInstanceStatusIndicator(v instanceresource.InstanceStatusIndicator) *InstanceResourceUpdate {
	_u.mutation.SetInstanceStatusIndicator(v)
	return _u
}

// SetNillableInstanceStatusIndicator sets the "instance_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableInstanceStatusIndicator(v *instanceresource.InstanceStatusIndicator) *InstanceResourceUpdate {
	if v != nil {
		_u.SetInstanceStatusIndicator(*v)
	}
	return _u
}

// ClearInstanceStatusIndicator clears the value of the "instance_status_indicator" field.
func (_u *InstanceResourceUpdate) ClearInstanceStatusIndicator() *InstanceResourceUpdate {
	_u.mutation.ClearInstanceStatusIndicator()
	return _u
}

// SetInstanceStatusTimestamp sets the "instance_status_timestamp" field.
func (_u *InstanceResourceUpdate) SetInstanceStatusTimestamp(v uint64) *InstanceResourceUpdate {
	_u.mutation.ResetInstanceStatusTimestamp()
	_u.mutation.SetInstanceStatusTimestamp(v)
	return _u
}

// SetNillableInstanceStatusTimestamp sets the "instance_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableInstanceStatusTimestamp(v *uint64) *InstanceResourceUpdate {
	if v != nil {
		_u.SetInstanceStatusTimestamp(*v)
	}
	return _u
}

// AddInstanceStatusTimestamp adds value to the "instance_status_timestamp" field.
func (_u *InstanceResourceUpdate) AddInstanceStatusTimestamp(v int64) *InstanceResourceUpdate {
	_u.mutation.AddInstanceStatusTimestamp(v)
	return _u
}

// ClearInstanceStatusTimestamp clears the value of the "instance_status_timestamp" field.
func (_u *InstanceResourceUpdate) ClearInstanceStatusTimestamp() *InstanceResourceUpdate {
	_u.mutation.ClearInstanceStatusTimestamp()
	return _u
}

// SetProvisioningStatus sets the "provisioning_status" field.
func (_u *InstanceResourceUpdate) SetProvisioningStatus(v string) *InstanceResourceUpdate {
	_u.mutation.SetProvisioningStatus(v)
	return _u
}

// SetNillableProvisioningStatus sets the "provisioning_status" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableProvisioningStatus(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetProvisioningStatus(*v)
	}
	return _u
}

// ClearProvisioningStatus clears the value of the "provisioning_status" field.
func (_u *InstanceResourceUpdate) ClearProvisioningStatus() *InstanceResourceUpdate {
	_u.mutation.ClearProvisioningStatus()
	return _u
}

// SetProvisioningStatusIndicator sets the "provisioning_status_indicator" field.
func (_u *InstanceResourceUpdate) SetProvisioningStatusIndicator(v instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdate {
	_u.mutation.SetProvisioningStatusIndicator(v)
	return _u
}

// SetNillableProvisioningStatusIndicator sets the "provisioning_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableProvisioningStatusIndicator(v *instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdate {
	if v != nil {
		_u.SetProvisioningStatusIndicator(*v)
	}
	return _u
}

// ClearProvisioningStatusIndicator clears the value of the "provisioning_status_indicator" field.
func (_u *InstanceResourceUpdate) ClearProvisioningStatusIndicator() *InstanceResourceUpdate {
	_u.mutation.ClearProvisioningStatusIndicator()
	return _u
}

// SetProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field.
func (_u *InstanceResourceUpdate) SetProvisioningStatusTimestamp(v uint64) *InstanceResourceUpdate {
	_u.mutation.ResetProvisioningStatusTimestamp()
	_u.mutation.SetProvisioningStatusTimestamp(v)
	return _u
}

// SetNillableProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableProvisioningStatusTimestamp(v *uint64) *InstanceResourceUpdate {
	if v != nil {
		_u.SetProvisioningStatusTimestamp(*v)
	}
	return _u
}

// AddProvisioningStatusTimestamp adds value to the "provisioning_status_timestamp" field.
func (_u *InstanceResourceUpdate) AddProvisioningStatusTimestamp(v int64) *InstanceResourceUpdate {
	_u.mutation.AddProvisioningStatusTimestamp(v)
	return _u
}

// ClearProvisioningStatusTimestamp clears the value of the "provisioning_status_timestamp" field.
func (_u *InstanceResourceUpdate) ClearProvisioningStatusTimestamp() *InstanceResourceUpdate {
	_u.mutation.ClearProvisioningStatusTimestamp()
	return _u
}

// SetUpdateStatus sets the "update_status" field.
func (_u *InstanceResourceUpdate) SetUpdateStatus(v string) *InstanceResourceUpdate {
	_u.mutation.SetUpdateStatus(v)
	return _u
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableUpdateStatus(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetUpdateStatus(*v)
	}
	return _u
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (_u *InstanceResourceUpdate) ClearUpdateStatus() *InstanceResourceUpdate {
	_u.mutation.ClearUpdateStatus()
	return _u
}

// SetUpdateStatusIndicator sets the "update_status_indicator" field.
func (_u *InstanceResourceUpdate) SetUpdateStatusIndicator(v instanceresource.UpdateStatusIndicator) *InstanceResourceUpdate {
	_u.mutation.SetUpdateStatusIndicator(v)
	return _u
}

// SetNillableUpdateStatusIndicator sets the "update_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableUpdateStatusIndicator(v *instanceresource.UpdateStatusIndicator) *InstanceResourceUpdate {
	if v != nil {
		_u.SetUpdateStatusIndicator(*v)
	}
	return _u
}

// ClearUpdateStatusIndicator clears the value of the "update_status_indicator" field.
func (_u *InstanceResourceUpdate) ClearUpdateStatusIndicator() *InstanceResourceUpdate {
	_u.mutation.ClearUpdateStatusIndicator()
	return _u
}

// SetUpdateStatusTimestamp sets the "update_status_timestamp" field.
func (_u *InstanceResourceUpdate) SetUpdateStatusTimestamp(v uint64) *InstanceResourceUpdate {
	_u.mutation.ResetUpdateStatusTimestamp()
	_u.mutation.SetUpdateStatusTimestamp(v)
	return _u
}

// SetNillableUpdateStatusTimestamp sets the "update_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableUpdateStatusTimestamp(v *uint64) *InstanceResourceUpdate {
	if v != nil {
		_u.SetUpdateStatusTimestamp(*v)
	}
	return _u
}

// AddUpdateStatusTimestamp adds value to the "update_status_timestamp" field.
func (_u *InstanceResourceUpdate) AddUpdateStatusTimestamp(v int64) *InstanceResourceUpdate {
	_u.mutation.AddUpdateStatusTimestamp(v)
	return _u
}

// ClearUpdateStatusTimestamp clears the value of the "update_status_timestamp" field.
func (_u *InstanceResourceUpdate) ClearUpdateStatusTimestamp() *InstanceResourceUpdate {
	_u.mutation.ClearUpdateStatusTimestamp()
	return _u
}

// SetTrustedAttestationStatus sets the "trusted_attestation_status" field.
func (_u *InstanceResourceUpdate) SetTrustedAttestationStatus(v string) *InstanceResourceUpdate {
	_u.mutation.SetTrustedAttestationStatus(v)
	return _u
}

// SetNillableTrustedAttestationStatus sets the "trusted_attestation_status" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableTrustedAttestationStatus(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetTrustedAttestationStatus(*v)
	}
	return _u
}

// ClearTrustedAttestationStatus clears the value of the "trusted_attestation_status" field.
func (_u *InstanceResourceUpdate) ClearTrustedAttestationStatus() *InstanceResourceUpdate {
	_u.mutation.ClearTrustedAttestationStatus()
	return _u
}

// SetTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field.
func (_u *InstanceResourceUpdate) SetTrustedAttestationStatusIndicator(v instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdate {
	_u.mutation.SetTrustedAttestationStatusIndicator(v)
	return _u
}

// SetNillableTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableTrustedAttestationStatusIndicator(v *instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdate {
	if v != nil {
		_u.SetTrustedAttestationStatusIndicator(*v)
	}
	return _u
}

// ClearTrustedAttestationStatusIndicator clears the value of the "trusted_attestation_status_indicator" field.
func (_u *InstanceResourceUpdate) ClearTrustedAttestationStatusIndicator() *InstanceResourceUpdate {
	_u.mutation.ClearTrustedAttestationStatusIndicator()
	return _u
}

// SetTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field.
func (_u *InstanceResourceUpdate) SetTrustedAttestationStatusTimestamp(v uint64) *InstanceResourceUpdate {
	_u.mutation.ResetTrustedAttestationStatusTimestamp()
	_u.mutation.SetTrustedAttestationStatusTimestamp(v)
	return _u
}

// SetNillableTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableTrustedAttestationStatusTimestamp(v *uint64) *InstanceResourceUpdate {
	if v != nil {
		_u.SetTrustedAttestationStatusTimestamp(*v)
	}
	return _u
}

// AddTrustedAttestationStatusTimestamp adds value to the "trusted_attestation_status_timestamp" field.
func (_u *InstanceResourceUpdate) AddTrustedAttestationStatusTimestamp(v int64) *InstanceResourceUpdate {
	_u.mutation.AddTrustedAttestationStatusTimestamp(v)
	return _u
}

// ClearTrustedAttestationStatusTimestamp clears the value of the "trusted_attestation_status_timestamp" field.
func (_u *InstanceResourceUpdate) ClearTrustedAttestationStatusTimestamp() *InstanceResourceUpdate {
	_u.mutation.ClearTrustedAttestationStatusTimestamp()
	return _u
}

// SetExistingCves sets the "existing_cves" field.
func (_u *InstanceResourceUpdate) SetExistingCves(v string) *InstanceResourceUpdate {
	_u.mutation.SetExistingCves(v)
	return _u
}

// SetNillableExistingCves sets the "existing_cves" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableExistingCves(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetExistingCves(*v)
	}
	return _u
}

// ClearExistingCves clears the value of the "existing_cves" field.
func (_u *InstanceResourceUpdate) ClearExistingCves() *InstanceResourceUpdate {
	_u.mutation.ClearExistingCves()
	return _u
}

// SetRuntimePackages sets the "runtime_packages" field.
func (_u *InstanceResourceUpdate) SetRuntimePackages(v string) *InstanceResourceUpdate {
	_u.mutation.SetRuntimePackages(v)
	return _u
}

// SetNillableRuntimePackages sets the "runtime_packages" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableRuntimePackages(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetRuntimePackages(*v)
	}
	return _u
}

// ClearRuntimePackages clears the value of the "runtime_packages" field.
func (_u *InstanceResourceUpdate) ClearRuntimePackages() *InstanceResourceUpdate {
	_u.mutation.ClearRuntimePackages()
	return _u
}

// SetOsUpdateAvailable sets the "os_update_available" field.
func (_u *InstanceResourceUpdate) SetOsUpdateAvailable(v string) *InstanceResourceUpdate {
	_u.mutation.SetOsUpdateAvailable(v)
	return _u
}

// SetNillableOsUpdateAvailable sets the "os_update_available" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableOsUpdateAvailable(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetOsUpdateAvailable(*v)
	}
	return _u
}

// ClearOsUpdateAvailable clears the value of the "os_update_available" field.
func (_u *InstanceResourceUpdate) ClearOsUpdateAvailable() *InstanceResourceUpdate {
	_u.mutation.ClearOsUpdateAvailable()
	return _u
}

// SetInstanceStatusDetail sets the "instance_status_detail" field.
func (_u *InstanceResourceUpdate) SetInstanceStatusDetail(v string) *InstanceResourceUpdate {
	_u.mutation.SetInstanceStatusDetail(v)
	return _u
}

// SetNillableInstanceStatusDetail sets the "instance_status_detail" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableInstanceStatusDetail(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetInstanceStatusDetail(*v)
	}
	return _u
}

// ClearInstanceStatusDetail clears the value of the "instance_status_detail" field.
func (_u *InstanceResourceUpdate) ClearInstanceStatusDetail() *InstanceResourceUpdate {
	_u.mutation.ClearInstanceStatusDetail()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InstanceResourceUpdate) SetUpdatedAt(v string) *InstanceResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableUpdatedAt(v *string) *InstanceResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *InstanceResourceUpdate) SetHostID(id int) *InstanceResourceUpdate {
	_u.mutation.SetHostID(id)
	return _u
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableHostID(id *int) *InstanceResourceUpdate {
	if id != nil {
		_u = _u.SetHostID(*id)
	}
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *InstanceResourceUpdate) SetHost(v *HostResource) *InstanceResourceUpdate {
	return _u.SetHostID(v.ID)
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by ID.
func (_u *InstanceResourceUpdate) SetOsID(id int) *InstanceResourceUpdate {
	_u.mutation.SetOsID(id)
	return _u
}

// SetOs sets the "os" edge to the OperatingSystemResource entity.
func (_u *InstanceResourceUpdate) SetOs(v *OperatingSystemResource) *InstanceResourceUpdate {
	return _u.SetOsID(v.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (_u *InstanceResourceUpdate) AddWorkloadMemberIDs(ids ...int) *InstanceResourceUpdate {
	_u.mutation.AddWorkloadMemberIDs(ids...)
	return _u
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (_u *InstanceResourceUpdate) AddWorkloadMembers(v ...*WorkloadMember) *InstanceResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_u *InstanceResourceUpdate) SetProviderID(id int) *InstanceResourceUpdate {
	_u.mutation.SetProviderID(id)
	return _u
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableProviderID(id *int) *InstanceResourceUpdate {
	if id != nil {
		_u = _u.SetProviderID(*id)
	}
	return _u
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_u *InstanceResourceUpdate) SetProvider(v *ProviderResource) *InstanceResourceUpdate {
	return _u.SetProviderID(v.ID)
}

// SetLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID.
func (_u *InstanceResourceUpdate) SetLocalaccountID(id int) *InstanceResourceUpdate {
	_u.mutation.SetLocalaccountID(id)
	return _u
}

// SetNillableLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableLocalaccountID(id *int) *InstanceResourceUpdate {
	if id != nil {
		_u = _u.SetLocalaccountID(*id)
	}
	return _u
}

// SetLocalaccount sets the "localaccount" edge to the LocalAccountResource entity.
func (_u *InstanceResourceUpdate) SetLocalaccount(v *LocalAccountResource) *InstanceResourceUpdate {
	return _u.SetLocalaccountID(v.ID)
}

// SetOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID.
func (_u *InstanceResourceUpdate) SetOsUpdatePolicyID(id int) *InstanceResourceUpdate {
	_u.mutation.SetOsUpdatePolicyID(id)
	return _u
}

// SetNillableOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdate) SetNillableOsUpdatePolicyID(id *int) *InstanceResourceUpdate {
	if id != nil {
		_u = _u.SetOsUpdatePolicyID(*id)
	}
	return _u
}

// SetOsUpdatePolicy sets the "os_update_policy" edge to the OSUpdatePolicyResource entity.
func (_u *InstanceResourceUpdate) SetOsUpdatePolicy(v *OSUpdatePolicyResource) *InstanceResourceUpdate {
	return _u.SetOsUpdatePolicyID(v.ID)
}

// AddCustomConfigIDs adds the "custom_config" edge to the CustomConfigResource entity by IDs.
func (_u *InstanceResourceUpdate) AddCustomConfigIDs(ids ...int) *InstanceResourceUpdate {
	_u.mutation.AddCustomConfigIDs(ids...)
	return _u
}

// AddCustomConfig adds the "custom_config" edges to the CustomConfigResource entity.
func (_u *InstanceResourceUpdate) AddCustomConfig(v ...*CustomConfigResource) *InstanceResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCustomConfigIDs(ids...)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (_u *InstanceResourceUpdate) Mutation() *InstanceResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *InstanceResourceUpdate) ClearHost() *InstanceResourceUpdate {
	_u.mutation.ClearHost()
	return _u
}

// ClearOs clears the "os" edge to the OperatingSystemResource entity.
func (_u *InstanceResourceUpdate) ClearOs() *InstanceResourceUpdate {
	_u.mutation.ClearOs()
	return _u
}

// ClearWorkloadMembers clears all "workload_members" edges to the WorkloadMember entity.
func (_u *InstanceResourceUpdate) ClearWorkloadMembers() *InstanceResourceUpdate {
	_u.mutation.ClearWorkloadMembers()
	return _u
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to WorkloadMember entities by IDs.
func (_u *InstanceResourceUpdate) RemoveWorkloadMemberIDs(ids ...int) *InstanceResourceUpdate {
	_u.mutation.RemoveWorkloadMemberIDs(ids...)
	return _u
}

// RemoveWorkloadMembers removes "workload_members" edges to WorkloadMember entities.
func (_u *InstanceResourceUpdate) RemoveWorkloadMembers(v ...*WorkloadMember) *InstanceResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWorkloadMemberIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (_u *InstanceResourceUpdate) ClearProvider() *InstanceResourceUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// ClearLocalaccount clears the "localaccount" edge to the LocalAccountResource entity.
func (_u *InstanceResourceUpdate) ClearLocalaccount() *InstanceResourceUpdate {
	_u.mutation.ClearLocalaccount()
	return _u
}

// ClearOsUpdatePolicy clears the "os_update_policy" edge to the OSUpdatePolicyResource entity.
func (_u *InstanceResourceUpdate) ClearOsUpdatePolicy() *InstanceResourceUpdate {
	_u.mutation.ClearOsUpdatePolicy()
	return _u
}

// ClearCustomConfig clears all "custom_config" edges to the CustomConfigResource entity.
func (_u *InstanceResourceUpdate) ClearCustomConfig() *InstanceResourceUpdate {
	_u.mutation.ClearCustomConfig()
	return _u
}

// RemoveCustomConfigIDs removes the "custom_config" edge to CustomConfigResource entities by IDs.
func (_u *InstanceResourceUpdate) RemoveCustomConfigIDs(ids ...int) *InstanceResourceUpdate {
	_u.mutation.RemoveCustomConfigIDs(ids...)
	return _u
}

// RemoveCustomConfig removes "custom_config" edges to CustomConfigResource entities.
func (_u *InstanceResourceUpdate) RemoveCustomConfig(v ...*CustomConfigResource) *InstanceResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCustomConfigIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *InstanceResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InstanceResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *InstanceResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InstanceResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InstanceResourceUpdate) check() error {
	if v, ok := _u.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InstanceStatusIndicator(); ok {
		if err := instanceresource.InstanceStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "instance_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.instance_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProvisioningStatusIndicator(); ok {
		if err := instanceresource.ProvisioningStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "provisioning_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.provisioning_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateStatusIndicator(); ok {
		if err := instanceresource.UpdateStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "update_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.update_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustedAttestationStatusIndicator(); ok {
		if err := instanceresource.TrustedAttestationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "trusted_attestation_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.trusted_attestation_status_indicator": %w`, err)}
		}
	}
	if _u.mutation.OsCleared() && len(_u.mutation.OsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InstanceResource.os"`)
	}
	return nil
}

func (_u *InstanceResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(instanceresource.FieldKind, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(instanceresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredStateCleared() {
		_spec.ClearField(instanceresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(instanceresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedVMMemoryBytes(); ok {
		_spec.AddField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if _u.mutation.VMMemoryBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMMemoryBytes, field.TypeUint64)
	}
	if value, ok := _u.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedVMCPUCores(); ok {
		_spec.AddField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if _u.mutation.VMCPUCoresCleared() {
		_spec.ClearField(instanceresource.FieldVMCPUCores, field.TypeUint32)
	}
	if value, ok := _u.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedVMStorageBytes(); ok {
		_spec.AddField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if _u.mutation.VMStorageBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMStorageBytes, field.TypeUint64)
	}
	if _u.mutation.SecurityFeatureCleared() {
		_spec.ClearField(instanceresource.FieldSecurityFeature, field.TypeEnum)
	}
	if value, ok := _u.mutation.InstanceStatus(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatus, field.TypeString, value)
	}
	if _u.mutation.InstanceStatusCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatus, field.TypeString)
	}
	if value, ok := _u.mutation.InstanceStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.InstanceStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.InstanceStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedInstanceStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.InstanceStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.ProvisioningStatus(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatus, field.TypeString, value)
	}
	if _u.mutation.ProvisioningStatusCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatus, field.TypeString)
	}
	if value, ok := _u.mutation.ProvisioningStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.ProvisioningStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.ProvisioningStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedProvisioningStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.ProvisioningStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateStatus(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatus, field.TypeString, value)
	}
	if _u.mutation.UpdateStatusCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatus, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.UpdateStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.UpdateStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.UpdateStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.TrustedAttestationStatus(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatus, field.TypeString, value)
	}
	if _u.mutation.TrustedAttestationStatusCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatus, field.TypeString)
	}
	if value, ok := _u.mutation.TrustedAttestationStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.TrustedAttestationStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.TrustedAttestationStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedTrustedAttestationStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.TrustedAttestationStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.ExistingCves(); ok {
		_spec.SetField(instanceresource.FieldExistingCves, field.TypeString, value)
	}
	if _u.mutation.ExistingCvesCleared() {
		_spec.ClearField(instanceresource.FieldExistingCves, field.TypeString)
	}
	if value, ok := _u.mutation.RuntimePackages(); ok {
		_spec.SetField(instanceresource.FieldRuntimePackages, field.TypeString, value)
	}
	if _u.mutation.RuntimePackagesCleared() {
		_spec.ClearField(instanceresource.FieldRuntimePackages, field.TypeString)
	}
	if value, ok := _u.mutation.OsUpdateAvailable(); ok {
		_spec.SetField(instanceresource.FieldOsUpdateAvailable, field.TypeString, value)
	}
	if _u.mutation.OsUpdateAvailableCleared() {
		_spec.ClearField(instanceresource.FieldOsUpdateAvailable, field.TypeString)
	}
	if value, ok := _u.mutation.InstanceStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusDetail, field.TypeString, value)
	}
	if _u.mutation.InstanceStatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusDetail, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWorkloadMembersIDs(); len(nodes) > 0 && !_u.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LocalaccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LocalaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OsUpdatePolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsUpdatePolicyTable,
			Columns: []string{instanceresource.OsUpdatePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OsUpdatePolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsUpdatePolicyTable,
			Columns: []string{instanceresource.OsUpdatePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCustomConfigIDs(); len(nodes) > 0 && !_u.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CustomConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// InstanceResourceUpdateOne is the builder for updating a single InstanceResource entity.
type InstanceResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InstanceResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *InstanceResourceUpdateOne) SetResourceID(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableResourceID(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *InstanceResourceUpdateOne) SetKind(v instanceresource.Kind) *InstanceResourceUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableKind(v *instanceresource.Kind) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *InstanceResourceUpdateOne) ClearKind() *InstanceResourceUpdateOne {
	_u.mutation.ClearKind()
	return _u
}

// SetName sets the "name" field.
func (_u *InstanceResourceUpdateOne) SetName(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableName(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *InstanceResourceUpdateOne) ClearName() *InstanceResourceUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *InstanceResourceUpdateOne) SetDesiredState(v instanceresource.DesiredState) *InstanceResourceUpdateOne {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableDesiredState(v *instanceresource.DesiredState) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// ClearDesiredState clears the value of the "desired_state" field.
func (_u *InstanceResourceUpdateOne) ClearDesiredState() *InstanceResourceUpdateOne {
	_u.mutation.ClearDesiredState()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *InstanceResourceUpdateOne) SetCurrentState(v instanceresource.CurrentState) *InstanceResourceUpdateOne {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableCurrentState(v *instanceresource.CurrentState) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *InstanceResourceUpdateOne) ClearCurrentState() *InstanceResourceUpdateOne {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (_u *InstanceResourceUpdateOne) SetVMMemoryBytes(v uint64) *InstanceResourceUpdateOne {
	_u.mutation.ResetVMMemoryBytes()
	_u.mutation.SetVMMemoryBytes(v)
	return _u
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableVMMemoryBytes(v *uint64) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetVMMemoryBytes(*v)
	}
	return _u
}

// AddVMMemoryBytes adds value to the "vm_memory_bytes" field.
func (_u *InstanceResourceUpdateOne) AddVMMemoryBytes(v int64) *InstanceResourceUpdateOne {
	_u.mutation.AddVMMemoryBytes(v)
	return _u
}

// ClearVMMemoryBytes clears the value of the "vm_memory_bytes" field.
func (_u *InstanceResourceUpdateOne) ClearVMMemoryBytes() *InstanceResourceUpdateOne {
	_u.mutation.ClearVMMemoryBytes()
	return _u
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (_u *InstanceResourceUpdateOne) SetVMCPUCores(v uint32) *InstanceResourceUpdateOne {
	_u.mutation.ResetVMCPUCores()
	_u.mutation.SetVMCPUCores(v)
	return _u
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableVMCPUCores(v *uint32) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetVMCPUCores(*v)
	}
	return _u
}

// AddVMCPUCores adds value to the "vm_cpu_cores" field.
func (_u *InstanceResourceUpdateOne) AddVMCPUCores(v int32) *InstanceResourceUpdateOne {
	_u.mutation.AddVMCPUCores(v)
	return _u
}

// ClearVMCPUCores clears the value of the "vm_cpu_cores" field.
func (_u *InstanceResourceUpdateOne) ClearVMCPUCores() *InstanceResourceUpdateOne {
	_u.mutation.ClearVMCPUCores()
	return _u
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (_u *InstanceResourceUpdateOne) SetVMStorageBytes(v uint64) *InstanceResourceUpdateOne {
	_u.mutation.ResetVMStorageBytes()
	_u.mutation.SetVMStorageBytes(v)
	return _u
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableVMStorageBytes(v *uint64) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetVMStorageBytes(*v)
	}
	return _u
}

// AddVMStorageBytes adds value to the "vm_storage_bytes" field.
func (_u *InstanceResourceUpdateOne) AddVMStorageBytes(v int64) *InstanceResourceUpdateOne {
	_u.mutation.AddVMStorageBytes(v)
	return _u
}

// ClearVMStorageBytes clears the value of the "vm_storage_bytes" field.
func (_u *InstanceResourceUpdateOne) ClearVMStorageBytes() *InstanceResourceUpdateOne {
	_u.mutation.ClearVMStorageBytes()
	return _u
}

// SetInstanceStatus sets the "instance_status" field.
func (_u *InstanceResourceUpdateOne) SetInstanceStatus(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetInstanceStatus(v)
	return _u
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableInstanceStatus(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetInstanceStatus(*v)
	}
	return _u
}

// ClearInstanceStatus clears the value of the "instance_status" field.
func (_u *InstanceResourceUpdateOne) ClearInstanceStatus() *InstanceResourceUpdateOne {
	_u.mutation.ClearInstanceStatus()
	return _u
}

// SetInstanceStatusIndicator sets the "instance_status_indicator" field.
func (_u *InstanceResourceUpdateOne) SetInstanceStatusIndicator(v instanceresource.InstanceStatusIndicator) *InstanceResourceUpdateOne {
	_u.mutation.SetInstanceStatusIndicator(v)
	return _u
}

// SetNillableInstanceStatusIndicator sets the "instance_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableInstanceStatusIndicator(v *instanceresource.InstanceStatusIndicator) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetInstanceStatusIndicator(*v)
	}
	return _u
}

// ClearInstanceStatusIndicator clears the value of the "instance_status_indicator" field.
func (_u *InstanceResourceUpdateOne) ClearInstanceStatusIndicator() *InstanceResourceUpdateOne {
	_u.mutation.ClearInstanceStatusIndicator()
	return _u
}

// SetInstanceStatusTimestamp sets the "instance_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) SetInstanceStatusTimestamp(v uint64) *InstanceResourceUpdateOne {
	_u.mutation.ResetInstanceStatusTimestamp()
	_u.mutation.SetInstanceStatusTimestamp(v)
	return _u
}

// SetNillableInstanceStatusTimestamp sets the "instance_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableInstanceStatusTimestamp(v *uint64) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetInstanceStatusTimestamp(*v)
	}
	return _u
}

// AddInstanceStatusTimestamp adds value to the "instance_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) AddInstanceStatusTimestamp(v int64) *InstanceResourceUpdateOne {
	_u.mutation.AddInstanceStatusTimestamp(v)
	return _u
}

// ClearInstanceStatusTimestamp clears the value of the "instance_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) ClearInstanceStatusTimestamp() *InstanceResourceUpdateOne {
	_u.mutation.ClearInstanceStatusTimestamp()
	return _u
}

// SetProvisioningStatus sets the "provisioning_status" field.
func (_u *InstanceResourceUpdateOne) SetProvisioningStatus(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetProvisioningStatus(v)
	return _u
}

// SetNillableProvisioningStatus sets the "provisioning_status" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableProvisioningStatus(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetProvisioningStatus(*v)
	}
	return _u
}

// ClearProvisioningStatus clears the value of the "provisioning_status" field.
func (_u *InstanceResourceUpdateOne) ClearProvisioningStatus() *InstanceResourceUpdateOne {
	_u.mutation.ClearProvisioningStatus()
	return _u
}

// SetProvisioningStatusIndicator sets the "provisioning_status_indicator" field.
func (_u *InstanceResourceUpdateOne) SetProvisioningStatusIndicator(v instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdateOne {
	_u.mutation.SetProvisioningStatusIndicator(v)
	return _u
}

// SetNillableProvisioningStatusIndicator sets the "provisioning_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableProvisioningStatusIndicator(v *instanceresource.ProvisioningStatusIndicator) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetProvisioningStatusIndicator(*v)
	}
	return _u
}

// ClearProvisioningStatusIndicator clears the value of the "provisioning_status_indicator" field.
func (_u *InstanceResourceUpdateOne) ClearProvisioningStatusIndicator() *InstanceResourceUpdateOne {
	_u.mutation.ClearProvisioningStatusIndicator()
	return _u
}

// SetProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) SetProvisioningStatusTimestamp(v uint64) *InstanceResourceUpdateOne {
	_u.mutation.ResetProvisioningStatusTimestamp()
	_u.mutation.SetProvisioningStatusTimestamp(v)
	return _u
}

// SetNillableProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableProvisioningStatusTimestamp(v *uint64) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetProvisioningStatusTimestamp(*v)
	}
	return _u
}

// AddProvisioningStatusTimestamp adds value to the "provisioning_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) AddProvisioningStatusTimestamp(v int64) *InstanceResourceUpdateOne {
	_u.mutation.AddProvisioningStatusTimestamp(v)
	return _u
}

// ClearProvisioningStatusTimestamp clears the value of the "provisioning_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) ClearProvisioningStatusTimestamp() *InstanceResourceUpdateOne {
	_u.mutation.ClearProvisioningStatusTimestamp()
	return _u
}

// SetUpdateStatus sets the "update_status" field.
func (_u *InstanceResourceUpdateOne) SetUpdateStatus(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetUpdateStatus(v)
	return _u
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableUpdateStatus(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetUpdateStatus(*v)
	}
	return _u
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (_u *InstanceResourceUpdateOne) ClearUpdateStatus() *InstanceResourceUpdateOne {
	_u.mutation.ClearUpdateStatus()
	return _u
}

// SetUpdateStatusIndicator sets the "update_status_indicator" field.
func (_u *InstanceResourceUpdateOne) SetUpdateStatusIndicator(v instanceresource.UpdateStatusIndicator) *InstanceResourceUpdateOne {
	_u.mutation.SetUpdateStatusIndicator(v)
	return _u
}

// SetNillableUpdateStatusIndicator sets the "update_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableUpdateStatusIndicator(v *instanceresource.UpdateStatusIndicator) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetUpdateStatusIndicator(*v)
	}
	return _u
}

// ClearUpdateStatusIndicator clears the value of the "update_status_indicator" field.
func (_u *InstanceResourceUpdateOne) ClearUpdateStatusIndicator() *InstanceResourceUpdateOne {
	_u.mutation.ClearUpdateStatusIndicator()
	return _u
}

// SetUpdateStatusTimestamp sets the "update_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) SetUpdateStatusTimestamp(v uint64) *InstanceResourceUpdateOne {
	_u.mutation.ResetUpdateStatusTimestamp()
	_u.mutation.SetUpdateStatusTimestamp(v)
	return _u
}

// SetNillableUpdateStatusTimestamp sets the "update_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableUpdateStatusTimestamp(v *uint64) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetUpdateStatusTimestamp(*v)
	}
	return _u
}

// AddUpdateStatusTimestamp adds value to the "update_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) AddUpdateStatusTimestamp(v int64) *InstanceResourceUpdateOne {
	_u.mutation.AddUpdateStatusTimestamp(v)
	return _u
}

// ClearUpdateStatusTimestamp clears the value of the "update_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) ClearUpdateStatusTimestamp() *InstanceResourceUpdateOne {
	_u.mutation.ClearUpdateStatusTimestamp()
	return _u
}

// SetTrustedAttestationStatus sets the "trusted_attestation_status" field.
func (_u *InstanceResourceUpdateOne) SetTrustedAttestationStatus(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetTrustedAttestationStatus(v)
	return _u
}

// SetNillableTrustedAttestationStatus sets the "trusted_attestation_status" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableTrustedAttestationStatus(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetTrustedAttestationStatus(*v)
	}
	return _u
}

// ClearTrustedAttestationStatus clears the value of the "trusted_attestation_status" field.
func (_u *InstanceResourceUpdateOne) ClearTrustedAttestationStatus() *InstanceResourceUpdateOne {
	_u.mutation.ClearTrustedAttestationStatus()
	return _u
}

// SetTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field.
func (_u *InstanceResourceUpdateOne) SetTrustedAttestationStatusIndicator(v instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdateOne {
	_u.mutation.SetTrustedAttestationStatusIndicator(v)
	return _u
}

// SetNillableTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableTrustedAttestationStatusIndicator(v *instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetTrustedAttestationStatusIndicator(*v)
	}
	return _u
}

// ClearTrustedAttestationStatusIndicator clears the value of the "trusted_attestation_status_indicator" field.
func (_u *InstanceResourceUpdateOne) ClearTrustedAttestationStatusIndicator() *InstanceResourceUpdateOne {
	_u.mutation.ClearTrustedAttestationStatusIndicator()
	return _u
}

// SetTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) SetTrustedAttestationStatusTimestamp(v uint64) *InstanceResourceUpdateOne {
	_u.mutation.ResetTrustedAttestationStatusTimestamp()
	_u.mutation.SetTrustedAttestationStatusTimestamp(v)
	return _u
}

// SetNillableTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableTrustedAttestationStatusTimestamp(v *uint64) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetTrustedAttestationStatusTimestamp(*v)
	}
	return _u
}

// AddTrustedAttestationStatusTimestamp adds value to the "trusted_attestation_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) AddTrustedAttestationStatusTimestamp(v int64) *InstanceResourceUpdateOne {
	_u.mutation.AddTrustedAttestationStatusTimestamp(v)
	return _u
}

// ClearTrustedAttestationStatusTimestamp clears the value of the "trusted_attestation_status_timestamp" field.
func (_u *InstanceResourceUpdateOne) ClearTrustedAttestationStatusTimestamp() *InstanceResourceUpdateOne {
	_u.mutation.ClearTrustedAttestationStatusTimestamp()
	return _u
}

// SetExistingCves sets the "existing_cves" field.
func (_u *InstanceResourceUpdateOne) SetExistingCves(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetExistingCves(v)
	return _u
}

// SetNillableExistingCves sets the "existing_cves" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableExistingCves(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetExistingCves(*v)
	}
	return _u
}

// ClearExistingCves clears the value of the "existing_cves" field.
func (_u *InstanceResourceUpdateOne) ClearExistingCves() *InstanceResourceUpdateOne {
	_u.mutation.ClearExistingCves()
	return _u
}

// SetRuntimePackages sets the "runtime_packages" field.
func (_u *InstanceResourceUpdateOne) SetRuntimePackages(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetRuntimePackages(v)
	return _u
}

// SetNillableRuntimePackages sets the "runtime_packages" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableRuntimePackages(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetRuntimePackages(*v)
	}
	return _u
}

// ClearRuntimePackages clears the value of the "runtime_packages" field.
func (_u *InstanceResourceUpdateOne) ClearRuntimePackages() *InstanceResourceUpdateOne {
	_u.mutation.ClearRuntimePackages()
	return _u
}

// SetOsUpdateAvailable sets the "os_update_available" field.
func (_u *InstanceResourceUpdateOne) SetOsUpdateAvailable(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetOsUpdateAvailable(v)
	return _u
}

// SetNillableOsUpdateAvailable sets the "os_update_available" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableOsUpdateAvailable(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetOsUpdateAvailable(*v)
	}
	return _u
}

// ClearOsUpdateAvailable clears the value of the "os_update_available" field.
func (_u *InstanceResourceUpdateOne) ClearOsUpdateAvailable() *InstanceResourceUpdateOne {
	_u.mutation.ClearOsUpdateAvailable()
	return _u
}

// SetInstanceStatusDetail sets the "instance_status_detail" field.
func (_u *InstanceResourceUpdateOne) SetInstanceStatusDetail(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetInstanceStatusDetail(v)
	return _u
}

// SetNillableInstanceStatusDetail sets the "instance_status_detail" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableInstanceStatusDetail(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetInstanceStatusDetail(*v)
	}
	return _u
}

// ClearInstanceStatusDetail clears the value of the "instance_status_detail" field.
func (_u *InstanceResourceUpdateOne) ClearInstanceStatusDetail() *InstanceResourceUpdateOne {
	_u.mutation.ClearInstanceStatusDetail()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *InstanceResourceUpdateOne) SetUpdatedAt(v string) *InstanceResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableUpdatedAt(v *string) *InstanceResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *InstanceResourceUpdateOne) SetHostID(id int) *InstanceResourceUpdateOne {
	_u.mutation.SetHostID(id)
	return _u
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableHostID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		_u = _u.SetHostID(*id)
	}
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *InstanceResourceUpdateOne) SetHost(v *HostResource) *InstanceResourceUpdateOne {
	return _u.SetHostID(v.ID)
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by ID.
func (_u *InstanceResourceUpdateOne) SetOsID(id int) *InstanceResourceUpdateOne {
	_u.mutation.SetOsID(id)
	return _u
}

// SetOs sets the "os" edge to the OperatingSystemResource entity.
func (_u *InstanceResourceUpdateOne) SetOs(v *OperatingSystemResource) *InstanceResourceUpdateOne {
	return _u.SetOsID(v.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (_u *InstanceResourceUpdateOne) AddWorkloadMemberIDs(ids ...int) *InstanceResourceUpdateOne {
	_u.mutation.AddWorkloadMemberIDs(ids...)
	return _u
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (_u *InstanceResourceUpdateOne) AddWorkloadMembers(v ...*WorkloadMember) *InstanceResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_u *InstanceResourceUpdateOne) SetProviderID(id int) *InstanceResourceUpdateOne {
	_u.mutation.SetProviderID(id)
	return _u
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableProviderID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		_u = _u.SetProviderID(*id)
	}
	return _u
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_u *InstanceResourceUpdateOne) SetProvider(v *ProviderResource) *InstanceResourceUpdateOne {
	return _u.SetProviderID(v.ID)
}

// SetLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID.
func (_u *InstanceResourceUpdateOne) SetLocalaccountID(id int) *InstanceResourceUpdateOne {
	_u.mutation.SetLocalaccountID(id)
	return _u
}

// SetNillableLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableLocalaccountID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		_u = _u.SetLocalaccountID(*id)
	}
	return _u
}

// SetLocalaccount sets the "localaccount" edge to the LocalAccountResource entity.
func (_u *InstanceResourceUpdateOne) SetLocalaccount(v *LocalAccountResource) *InstanceResourceUpdateOne {
	return _u.SetLocalaccountID(v.ID)
}

// SetOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID.
func (_u *InstanceResourceUpdateOne) SetOsUpdatePolicyID(id int) *InstanceResourceUpdateOne {
	_u.mutation.SetOsUpdatePolicyID(id)
	return _u
}

// SetNillableOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID if the given value is not nil.
func (_u *InstanceResourceUpdateOne) SetNillableOsUpdatePolicyID(id *int) *InstanceResourceUpdateOne {
	if id != nil {
		_u = _u.SetOsUpdatePolicyID(*id)
	}
	return _u
}

// SetOsUpdatePolicy sets the "os_update_policy" edge to the OSUpdatePolicyResource entity.
func (_u *InstanceResourceUpdateOne) SetOsUpdatePolicy(v *OSUpdatePolicyResource) *InstanceResourceUpdateOne {
	return _u.SetOsUpdatePolicyID(v.ID)
}

// AddCustomConfigIDs adds the "custom_config" edge to the CustomConfigResource entity by IDs.
func (_u *InstanceResourceUpdateOne) AddCustomConfigIDs(ids ...int) *InstanceResourceUpdateOne {
	_u.mutation.AddCustomConfigIDs(ids...)
	return _u
}

// AddCustomConfig adds the "custom_config" edges to the CustomConfigResource entity.
func (_u *InstanceResourceUpdateOne) AddCustomConfig(v ...*CustomConfigResource) *InstanceResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCustomConfigIDs(ids...)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (_u *InstanceResourceUpdateOne) Mutation() *InstanceResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *InstanceResourceUpdateOne) ClearHost() *InstanceResourceUpdateOne {
	_u.mutation.ClearHost()
	return _u
}

// ClearOs clears the "os" edge to the OperatingSystemResource entity.
func (_u *InstanceResourceUpdateOne) ClearOs() *InstanceResourceUpdateOne {
	_u.mutation.ClearOs()
	return _u
}

// ClearWorkloadMembers clears all "workload_members" edges to the WorkloadMember entity.
func (_u *InstanceResourceUpdateOne) ClearWorkloadMembers() *InstanceResourceUpdateOne {
	_u.mutation.ClearWorkloadMembers()
	return _u
}

// RemoveWorkloadMemberIDs removes the "workload_members" edge to WorkloadMember entities by IDs.
func (_u *InstanceResourceUpdateOne) RemoveWorkloadMemberIDs(ids ...int) *InstanceResourceUpdateOne {
	_u.mutation.RemoveWorkloadMemberIDs(ids...)
	return _u
}

// RemoveWorkloadMembers removes "workload_members" edges to WorkloadMember entities.
func (_u *InstanceResourceUpdateOne) RemoveWorkloadMembers(v ...*WorkloadMember) *InstanceResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveWorkloadMemberIDs(ids...)
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (_u *InstanceResourceUpdateOne) ClearProvider() *InstanceResourceUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// ClearLocalaccount clears the "localaccount" edge to the LocalAccountResource entity.
func (_u *InstanceResourceUpdateOne) ClearLocalaccount() *InstanceResourceUpdateOne {
	_u.mutation.ClearLocalaccount()
	return _u
}

// ClearOsUpdatePolicy clears the "os_update_policy" edge to the OSUpdatePolicyResource entity.
func (_u *InstanceResourceUpdateOne) ClearOsUpdatePolicy() *InstanceResourceUpdateOne {
	_u.mutation.ClearOsUpdatePolicy()
	return _u
}

// ClearCustomConfig clears all "custom_config" edges to the CustomConfigResource entity.
func (_u *InstanceResourceUpdateOne) ClearCustomConfig() *InstanceResourceUpdateOne {
	_u.mutation.ClearCustomConfig()
	return _u
}

// RemoveCustomConfigIDs removes the "custom_config" edge to CustomConfigResource entities by IDs.
func (_u *InstanceResourceUpdateOne) RemoveCustomConfigIDs(ids ...int) *InstanceResourceUpdateOne {
	_u.mutation.RemoveCustomConfigIDs(ids...)
	return _u
}

// RemoveCustomConfig removes "custom_config" edges to CustomConfigResource entities.
func (_u *InstanceResourceUpdateOne) RemoveCustomConfig(v ...*CustomConfigResource) *InstanceResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCustomConfigIDs(ids...)
}

// Where appends a list predicates to the InstanceResourceUpdate builder.
func (_u *InstanceResourceUpdateOne) Where(ps ...predicate.InstanceResource) *InstanceResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *InstanceResourceUpdateOne) Select(field string, fields ...string) *InstanceResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated InstanceResource entity.
func (_u *InstanceResourceUpdateOne) Save(ctx context.Context) (*InstanceResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *InstanceResourceUpdateOne) SaveX(ctx context.Context) *InstanceResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *InstanceResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *InstanceResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *InstanceResourceUpdateOne) check() error {
	if v, ok := _u.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.InstanceStatusIndicator(); ok {
		if err := instanceresource.InstanceStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "instance_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.instance_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ProvisioningStatusIndicator(); ok {
		if err := instanceresource.ProvisioningStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "provisioning_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.provisioning_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.UpdateStatusIndicator(); ok {
		if err := instanceresource.UpdateStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "update_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.update_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TrustedAttestationStatusIndicator(); ok {
		if err := instanceresource.TrustedAttestationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "trusted_attestation_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.trusted_attestation_status_indicator": %w`, err)}
		}
	}
	if _u.mutation.OsCleared() && len(_u.mutation.OsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "InstanceResource.os"`)
	}
	return nil
}

func (_u *InstanceResourceUpdateOne) sqlSave(ctx context.Context) (_node *InstanceResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InstanceResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.FieldID)
		for _, f := range fields {
			if !instanceresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != instanceresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(instanceresource.FieldKind, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(instanceresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredStateCleared() {
		_spec.ClearField(instanceresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(instanceresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedVMMemoryBytes(); ok {
		_spec.AddField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
	}
	if _u.mutation.VMMemoryBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMMemoryBytes, field.TypeUint64)
	}
	if value, ok := _u.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedVMCPUCores(); ok {
		_spec.AddField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
	}
	if _u.mutation.VMCPUCoresCleared() {
		_spec.ClearField(instanceresource.FieldVMCPUCores, field.TypeUint32)
	}
	if value, ok := _u.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedVMStorageBytes(); ok {
		_spec.AddField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
	}
	if _u.mutation.VMStorageBytesCleared() {
		_spec.ClearField(instanceresource.FieldVMStorageBytes, field.TypeUint64)
	}
	if _u.mutation.SecurityFeatureCleared() {
		_spec.ClearField(instanceresource.FieldSecurityFeature, field.TypeEnum)
	}
	if value, ok := _u.mutation.InstanceStatus(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatus, field.TypeString, value)
	}
	if _u.mutation.InstanceStatusCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatus, field.TypeString)
	}
	if value, ok := _u.mutation.InstanceStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.InstanceStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.InstanceStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedInstanceStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.InstanceStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.ProvisioningStatus(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatus, field.TypeString, value)
	}
	if _u.mutation.ProvisioningStatusCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatus, field.TypeString)
	}
	if value, ok := _u.mutation.ProvisioningStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.ProvisioningStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.ProvisioningStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedProvisioningStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.ProvisioningStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdateStatus(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatus, field.TypeString, value)
	}
	if _u.mutation.UpdateStatusCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatus, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.UpdateStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.UpdateStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedUpdateStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.UpdateStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.TrustedAttestationStatus(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatus, field.TypeString, value)
	}
	if _u.mutation.TrustedAttestationStatusCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatus, field.TypeString)
	}
	if value, ok := _u.mutation.TrustedAttestationStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.TrustedAttestationStatusIndicatorCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.TrustedAttestationStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedTrustedAttestationStatusTimestamp(); ok {
		_spec.AddField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.TrustedAttestationStatusTimestampCleared() {
		_spec.ClearField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.ExistingCves(); ok {
		_spec.SetField(instanceresource.FieldExistingCves, field.TypeString, value)
	}
	if _u.mutation.ExistingCvesCleared() {
		_spec.ClearField(instanceresource.FieldExistingCves, field.TypeString)
	}
	if value, ok := _u.mutation.RuntimePackages(); ok {
		_spec.SetField(instanceresource.FieldRuntimePackages, field.TypeString, value)
	}
	if _u.mutation.RuntimePackagesCleared() {
		_spec.ClearField(instanceresource.FieldRuntimePackages, field.TypeString)
	}
	if value, ok := _u.mutation.OsUpdateAvailable(); ok {
		_spec.SetField(instanceresource.FieldOsUpdateAvailable, field.TypeString, value)
	}
	if _u.mutation.OsUpdateAvailableCleared() {
		_spec.ClearField(instanceresource.FieldOsUpdateAvailable, field.TypeString)
	}
	if value, ok := _u.mutation.InstanceStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusDetail, field.TypeString, value)
	}
	if _u.mutation.InstanceStatusDetailCleared() {
		_spec.ClearField(instanceresource.FieldInstanceStatusDetail, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedWorkloadMembersIDs(); len(nodes) > 0 && !_u.mutation.WorkloadMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.LocalaccountCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.LocalaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.OsUpdatePolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsUpdatePolicyTable,
			Columns: []string{instanceresource.OsUpdatePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.OsUpdatePolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsUpdatePolicyTable,
			Columns: []string{instanceresource.OsUpdatePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCustomConfigIDs(); len(nodes) > 0 && !_u.mutation.CustomConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CustomConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InstanceResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instanceresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
