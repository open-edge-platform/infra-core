// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostusbresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// HostusbResourceUpdate is the builder for updating HostusbResource entities.
type HostusbResourceUpdate struct {
	config
	hooks    []Hook
	mutation *HostusbResourceMutation
}

// Where appends a list predicates to the HostusbResourceUpdate builder.
func (_u *HostusbResourceUpdate) Where(ps ...predicate.HostusbResource) *HostusbResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *HostusbResourceUpdate) SetResourceID(v string) *HostusbResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableResourceID(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *HostusbResourceUpdate) SetKind(v string) *HostusbResourceUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableKind(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *HostusbResourceUpdate) ClearKind() *HostusbResourceUpdate {
	_u.mutation.ClearKind()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *HostusbResourceUpdate) SetOwnerID(v string) *HostusbResourceUpdate {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableOwnerID(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *HostusbResourceUpdate) ClearOwnerID() *HostusbResourceUpdate {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetIdvendor sets the "idvendor" field.
func (_u *HostusbResourceUpdate) SetIdvendor(v string) *HostusbResourceUpdate {
	_u.mutation.SetIdvendor(v)
	return _u
}

// SetNillableIdvendor sets the "idvendor" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableIdvendor(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetIdvendor(*v)
	}
	return _u
}

// ClearIdvendor clears the value of the "idvendor" field.
func (_u *HostusbResourceUpdate) ClearIdvendor() *HostusbResourceUpdate {
	_u.mutation.ClearIdvendor()
	return _u
}

// SetIdproduct sets the "idproduct" field.
func (_u *HostusbResourceUpdate) SetIdproduct(v string) *HostusbResourceUpdate {
	_u.mutation.SetIdproduct(v)
	return _u
}

// SetNillableIdproduct sets the "idproduct" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableIdproduct(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetIdproduct(*v)
	}
	return _u
}

// ClearIdproduct clears the value of the "idproduct" field.
func (_u *HostusbResourceUpdate) ClearIdproduct() *HostusbResourceUpdate {
	_u.mutation.ClearIdproduct()
	return _u
}

// SetBus sets the "bus" field.
func (_u *HostusbResourceUpdate) SetBus(v uint32) *HostusbResourceUpdate {
	_u.mutation.ResetBus()
	_u.mutation.SetBus(v)
	return _u
}

// SetNillableBus sets the "bus" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableBus(v *uint32) *HostusbResourceUpdate {
	if v != nil {
		_u.SetBus(*v)
	}
	return _u
}

// AddBus adds value to the "bus" field.
func (_u *HostusbResourceUpdate) AddBus(v int32) *HostusbResourceUpdate {
	_u.mutation.AddBus(v)
	return _u
}

// ClearBus clears the value of the "bus" field.
func (_u *HostusbResourceUpdate) ClearBus() *HostusbResourceUpdate {
	_u.mutation.ClearBus()
	return _u
}

// SetAddr sets the "addr" field.
func (_u *HostusbResourceUpdate) SetAddr(v uint32) *HostusbResourceUpdate {
	_u.mutation.ResetAddr()
	_u.mutation.SetAddr(v)
	return _u
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableAddr(v *uint32) *HostusbResourceUpdate {
	if v != nil {
		_u.SetAddr(*v)
	}
	return _u
}

// AddAddr adds value to the "addr" field.
func (_u *HostusbResourceUpdate) AddAddr(v int32) *HostusbResourceUpdate {
	_u.mutation.AddAddr(v)
	return _u
}

// ClearAddr clears the value of the "addr" field.
func (_u *HostusbResourceUpdate) ClearAddr() *HostusbResourceUpdate {
	_u.mutation.ClearAddr()
	return _u
}

// SetClass sets the "class" field.
func (_u *HostusbResourceUpdate) SetClass(v string) *HostusbResourceUpdate {
	_u.mutation.SetClass(v)
	return _u
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableClass(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetClass(*v)
	}
	return _u
}

// ClearClass clears the value of the "class" field.
func (_u *HostusbResourceUpdate) ClearClass() *HostusbResourceUpdate {
	_u.mutation.ClearClass()
	return _u
}

// SetSerial sets the "serial" field.
func (_u *HostusbResourceUpdate) SetSerial(v string) *HostusbResourceUpdate {
	_u.mutation.SetSerial(v)
	return _u
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableSerial(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetSerial(*v)
	}
	return _u
}

// ClearSerial clears the value of the "serial" field.
func (_u *HostusbResourceUpdate) ClearSerial() *HostusbResourceUpdate {
	_u.mutation.ClearSerial()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *HostusbResourceUpdate) SetDeviceName(v string) *HostusbResourceUpdate {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableDeviceName(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *HostusbResourceUpdate) ClearDeviceName() *HostusbResourceUpdate {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostusbResourceUpdate) SetUpdatedAt(v string) *HostusbResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostusbResourceUpdate) SetNillableUpdatedAt(v *string) *HostusbResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *HostusbResourceUpdate) SetHostID(id int) *HostusbResourceUpdate {
	_u.mutation.SetHostID(id)
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *HostusbResourceUpdate) SetHost(v *HostResource) *HostusbResourceUpdate {
	return _u.SetHostID(v.ID)
}

// Mutation returns the HostusbResourceMutation object of the builder.
func (_u *HostusbResourceUpdate) Mutation() *HostusbResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *HostusbResourceUpdate) ClearHost() *HostusbResourceUpdate {
	_u.mutation.ClearHost()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HostusbResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostusbResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HostusbResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostusbResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostusbResourceUpdate) check() error {
	if _u.mutation.HostCleared() && len(_u.mutation.HostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HostusbResource.host"`)
	}
	return nil
}

func (_u *HostusbResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostusbresource.Table, hostusbresource.Columns, sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostusbresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(hostusbresource.FieldKind, field.TypeString, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(hostusbresource.FieldKind, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(hostusbresource.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(hostusbresource.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Idvendor(); ok {
		_spec.SetField(hostusbresource.FieldIdvendor, field.TypeString, value)
	}
	if _u.mutation.IdvendorCleared() {
		_spec.ClearField(hostusbresource.FieldIdvendor, field.TypeString)
	}
	if value, ok := _u.mutation.Idproduct(); ok {
		_spec.SetField(hostusbresource.FieldIdproduct, field.TypeString, value)
	}
	if _u.mutation.IdproductCleared() {
		_spec.ClearField(hostusbresource.FieldIdproduct, field.TypeString)
	}
	if value, ok := _u.mutation.Bus(); ok {
		_spec.SetField(hostusbresource.FieldBus, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedBus(); ok {
		_spec.AddField(hostusbresource.FieldBus, field.TypeUint32, value)
	}
	if _u.mutation.BusCleared() {
		_spec.ClearField(hostusbresource.FieldBus, field.TypeUint32)
	}
	if value, ok := _u.mutation.Addr(); ok {
		_spec.SetField(hostusbresource.FieldAddr, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedAddr(); ok {
		_spec.AddField(hostusbresource.FieldAddr, field.TypeUint32, value)
	}
	if _u.mutation.AddrCleared() {
		_spec.ClearField(hostusbresource.FieldAddr, field.TypeUint32)
	}
	if value, ok := _u.mutation.Class(); ok {
		_spec.SetField(hostusbresource.FieldClass, field.TypeString, value)
	}
	if _u.mutation.ClassCleared() {
		_spec.ClearField(hostusbresource.FieldClass, field.TypeString)
	}
	if value, ok := _u.mutation.Serial(); ok {
		_spec.SetField(hostusbresource.FieldSerial, field.TypeString, value)
	}
	if _u.mutation.SerialCleared() {
		_spec.ClearField(hostusbresource.FieldSerial, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(hostusbresource.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(hostusbresource.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostusbresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostusbresource.HostTable,
			Columns: []string{hostusbresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostusbresource.HostTable,
			Columns: []string{hostusbresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostusbresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HostusbResourceUpdateOne is the builder for updating a single HostusbResource entity.
type HostusbResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostusbResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *HostusbResourceUpdateOne) SetResourceID(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableResourceID(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *HostusbResourceUpdateOne) SetKind(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableKind(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *HostusbResourceUpdateOne) ClearKind() *HostusbResourceUpdateOne {
	_u.mutation.ClearKind()
	return _u
}

// SetOwnerID sets the "owner_id" field.
func (_u *HostusbResourceUpdateOne) SetOwnerID(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetOwnerID(v)
	return _u
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableOwnerID(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetOwnerID(*v)
	}
	return _u
}

// ClearOwnerID clears the value of the "owner_id" field.
func (_u *HostusbResourceUpdateOne) ClearOwnerID() *HostusbResourceUpdateOne {
	_u.mutation.ClearOwnerID()
	return _u
}

// SetIdvendor sets the "idvendor" field.
func (_u *HostusbResourceUpdateOne) SetIdvendor(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetIdvendor(v)
	return _u
}

// SetNillableIdvendor sets the "idvendor" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableIdvendor(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetIdvendor(*v)
	}
	return _u
}

// ClearIdvendor clears the value of the "idvendor" field.
func (_u *HostusbResourceUpdateOne) ClearIdvendor() *HostusbResourceUpdateOne {
	_u.mutation.ClearIdvendor()
	return _u
}

// SetIdproduct sets the "idproduct" field.
func (_u *HostusbResourceUpdateOne) SetIdproduct(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetIdproduct(v)
	return _u
}

// SetNillableIdproduct sets the "idproduct" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableIdproduct(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetIdproduct(*v)
	}
	return _u
}

// ClearIdproduct clears the value of the "idproduct" field.
func (_u *HostusbResourceUpdateOne) ClearIdproduct() *HostusbResourceUpdateOne {
	_u.mutation.ClearIdproduct()
	return _u
}

// SetBus sets the "bus" field.
func (_u *HostusbResourceUpdateOne) SetBus(v uint32) *HostusbResourceUpdateOne {
	_u.mutation.ResetBus()
	_u.mutation.SetBus(v)
	return _u
}

// SetNillableBus sets the "bus" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableBus(v *uint32) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetBus(*v)
	}
	return _u
}

// AddBus adds value to the "bus" field.
func (_u *HostusbResourceUpdateOne) AddBus(v int32) *HostusbResourceUpdateOne {
	_u.mutation.AddBus(v)
	return _u
}

// ClearBus clears the value of the "bus" field.
func (_u *HostusbResourceUpdateOne) ClearBus() *HostusbResourceUpdateOne {
	_u.mutation.ClearBus()
	return _u
}

// SetAddr sets the "addr" field.
func (_u *HostusbResourceUpdateOne) SetAddr(v uint32) *HostusbResourceUpdateOne {
	_u.mutation.ResetAddr()
	_u.mutation.SetAddr(v)
	return _u
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableAddr(v *uint32) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetAddr(*v)
	}
	return _u
}

// AddAddr adds value to the "addr" field.
func (_u *HostusbResourceUpdateOne) AddAddr(v int32) *HostusbResourceUpdateOne {
	_u.mutation.AddAddr(v)
	return _u
}

// ClearAddr clears the value of the "addr" field.
func (_u *HostusbResourceUpdateOne) ClearAddr() *HostusbResourceUpdateOne {
	_u.mutation.ClearAddr()
	return _u
}

// SetClass sets the "class" field.
func (_u *HostusbResourceUpdateOne) SetClass(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetClass(v)
	return _u
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableClass(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetClass(*v)
	}
	return _u
}

// ClearClass clears the value of the "class" field.
func (_u *HostusbResourceUpdateOne) ClearClass() *HostusbResourceUpdateOne {
	_u.mutation.ClearClass()
	return _u
}

// SetSerial sets the "serial" field.
func (_u *HostusbResourceUpdateOne) SetSerial(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetSerial(v)
	return _u
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableSerial(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetSerial(*v)
	}
	return _u
}

// ClearSerial clears the value of the "serial" field.
func (_u *HostusbResourceUpdateOne) ClearSerial() *HostusbResourceUpdateOne {
	_u.mutation.ClearSerial()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *HostusbResourceUpdateOne) SetDeviceName(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableDeviceName(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *HostusbResourceUpdateOne) ClearDeviceName() *HostusbResourceUpdateOne {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostusbResourceUpdateOne) SetUpdatedAt(v string) *HostusbResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostusbResourceUpdateOne) SetNillableUpdatedAt(v *string) *HostusbResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *HostusbResourceUpdateOne) SetHostID(id int) *HostusbResourceUpdateOne {
	_u.mutation.SetHostID(id)
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *HostusbResourceUpdateOne) SetHost(v *HostResource) *HostusbResourceUpdateOne {
	return _u.SetHostID(v.ID)
}

// Mutation returns the HostusbResourceMutation object of the builder.
func (_u *HostusbResourceUpdateOne) Mutation() *HostusbResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *HostusbResourceUpdateOne) ClearHost() *HostusbResourceUpdateOne {
	_u.mutation.ClearHost()
	return _u
}

// Where appends a list predicates to the HostusbResourceUpdate builder.
func (_u *HostusbResourceUpdateOne) Where(ps ...predicate.HostusbResource) *HostusbResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HostusbResourceUpdateOne) Select(field string, fields ...string) *HostusbResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated HostusbResource entity.
func (_u *HostusbResourceUpdateOne) Save(ctx context.Context) (*HostusbResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostusbResourceUpdateOne) SaveX(ctx context.Context) *HostusbResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HostusbResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostusbResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostusbResourceUpdateOne) check() error {
	if _u.mutation.HostCleared() && len(_u.mutation.HostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HostusbResource.host"`)
	}
	return nil
}

func (_u *HostusbResourceUpdateOne) sqlSave(ctx context.Context) (_node *HostusbResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostusbresource.Table, hostusbresource.Columns, sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostusbResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostusbresource.FieldID)
		for _, f := range fields {
			if !hostusbresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostusbresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostusbresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(hostusbresource.FieldKind, field.TypeString, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(hostusbresource.FieldKind, field.TypeString)
	}
	if value, ok := _u.mutation.OwnerID(); ok {
		_spec.SetField(hostusbresource.FieldOwnerID, field.TypeString, value)
	}
	if _u.mutation.OwnerIDCleared() {
		_spec.ClearField(hostusbresource.FieldOwnerID, field.TypeString)
	}
	if value, ok := _u.mutation.Idvendor(); ok {
		_spec.SetField(hostusbresource.FieldIdvendor, field.TypeString, value)
	}
	if _u.mutation.IdvendorCleared() {
		_spec.ClearField(hostusbresource.FieldIdvendor, field.TypeString)
	}
	if value, ok := _u.mutation.Idproduct(); ok {
		_spec.SetField(hostusbresource.FieldIdproduct, field.TypeString, value)
	}
	if _u.mutation.IdproductCleared() {
		_spec.ClearField(hostusbresource.FieldIdproduct, field.TypeString)
	}
	if value, ok := _u.mutation.Bus(); ok {
		_spec.SetField(hostusbresource.FieldBus, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedBus(); ok {
		_spec.AddField(hostusbresource.FieldBus, field.TypeUint32, value)
	}
	if _u.mutation.BusCleared() {
		_spec.ClearField(hostusbresource.FieldBus, field.TypeUint32)
	}
	if value, ok := _u.mutation.Addr(); ok {
		_spec.SetField(hostusbresource.FieldAddr, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedAddr(); ok {
		_spec.AddField(hostusbresource.FieldAddr, field.TypeUint32, value)
	}
	if _u.mutation.AddrCleared() {
		_spec.ClearField(hostusbresource.FieldAddr, field.TypeUint32)
	}
	if value, ok := _u.mutation.Class(); ok {
		_spec.SetField(hostusbresource.FieldClass, field.TypeString, value)
	}
	if _u.mutation.ClassCleared() {
		_spec.ClearField(hostusbresource.FieldClass, field.TypeString)
	}
	if value, ok := _u.mutation.Serial(); ok {
		_spec.SetField(hostusbresource.FieldSerial, field.TypeString, value)
	}
	if _u.mutation.SerialCleared() {
		_spec.ClearField(hostusbresource.FieldSerial, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(hostusbresource.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(hostusbresource.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostusbresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostusbresource.HostTable,
			Columns: []string{hostusbresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostusbresource.HostTable,
			Columns: []string{hostusbresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostusbResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostusbresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
