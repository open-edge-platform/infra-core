// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/repeatedscheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// RepeatedScheduleResourceUpdate is the builder for updating RepeatedScheduleResource entities.
type RepeatedScheduleResourceUpdate struct {
	config
	hooks    []Hook
	mutation *RepeatedScheduleResourceMutation
}

// Where appends a list predicates to the RepeatedScheduleResourceUpdate builder.
func (_u *RepeatedScheduleResourceUpdate) Where(ps ...predicate.RepeatedScheduleResource) *RepeatedScheduleResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *RepeatedScheduleResourceUpdate) SetResourceID(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableResourceID(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetScheduleStatus sets the "schedule_status" field.
func (_u *RepeatedScheduleResourceUpdate) SetScheduleStatus(v repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetScheduleStatus(v)
	return _u
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableScheduleStatus(v *repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetScheduleStatus(*v)
	}
	return _u
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (_u *RepeatedScheduleResourceUpdate) ClearScheduleStatus() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearScheduleStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *RepeatedScheduleResourceUpdate) SetName(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableName(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *RepeatedScheduleResourceUpdate) ClearName() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_u *RepeatedScheduleResourceUpdate) SetDurationSeconds(v uint32) *RepeatedScheduleResourceUpdate {
	_u.mutation.ResetDurationSeconds()
	_u.mutation.SetDurationSeconds(v)
	return _u
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableDurationSeconds(v *uint32) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetDurationSeconds(*v)
	}
	return _u
}

// AddDurationSeconds adds value to the "duration_seconds" field.
func (_u *RepeatedScheduleResourceUpdate) AddDurationSeconds(v int32) *RepeatedScheduleResourceUpdate {
	_u.mutation.AddDurationSeconds(v)
	return _u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (_u *RepeatedScheduleResourceUpdate) ClearDurationSeconds() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearDurationSeconds()
	return _u
}

// SetCronMinutes sets the "cron_minutes" field.
func (_u *RepeatedScheduleResourceUpdate) SetCronMinutes(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetCronMinutes(v)
	return _u
}

// SetNillableCronMinutes sets the "cron_minutes" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableCronMinutes(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetCronMinutes(*v)
	}
	return _u
}

// SetCronHours sets the "cron_hours" field.
func (_u *RepeatedScheduleResourceUpdate) SetCronHours(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetCronHours(v)
	return _u
}

// SetNillableCronHours sets the "cron_hours" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableCronHours(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetCronHours(*v)
	}
	return _u
}

// SetCronDayMonth sets the "cron_day_month" field.
func (_u *RepeatedScheduleResourceUpdate) SetCronDayMonth(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetCronDayMonth(v)
	return _u
}

// SetNillableCronDayMonth sets the "cron_day_month" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableCronDayMonth(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetCronDayMonth(*v)
	}
	return _u
}

// SetCronMonth sets the "cron_month" field.
func (_u *RepeatedScheduleResourceUpdate) SetCronMonth(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetCronMonth(v)
	return _u
}

// SetNillableCronMonth sets the "cron_month" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableCronMonth(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetCronMonth(*v)
	}
	return _u
}

// SetCronDayWeek sets the "cron_day_week" field.
func (_u *RepeatedScheduleResourceUpdate) SetCronDayWeek(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetCronDayWeek(v)
	return _u
}

// SetNillableCronDayWeek sets the "cron_day_week" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableCronDayWeek(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetCronDayWeek(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RepeatedScheduleResourceUpdate) SetUpdatedAt(v string) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableUpdatedAt(v *string) *RepeatedScheduleResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (_u *RepeatedScheduleResourceUpdate) SetTargetSiteID(id int) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetTargetSiteID(id)
	return _u
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableTargetSiteID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetSiteID(*id)
	}
	return _u
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (_u *RepeatedScheduleResourceUpdate) SetTargetSite(v *SiteResource) *RepeatedScheduleResourceUpdate {
	return _u.SetTargetSiteID(v.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (_u *RepeatedScheduleResourceUpdate) SetTargetHostID(id int) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetTargetHostID(id)
	return _u
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableTargetHostID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetHostID(*id)
	}
	return _u
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (_u *RepeatedScheduleResourceUpdate) SetTargetHost(v *HostResource) *RepeatedScheduleResourceUpdate {
	return _u.SetTargetHostID(v.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (_u *RepeatedScheduleResourceUpdate) SetTargetWorkloadID(id int) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetTargetWorkloadID(id)
	return _u
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableTargetWorkloadID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetWorkloadID(*id)
	}
	return _u
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (_u *RepeatedScheduleResourceUpdate) SetTargetWorkload(v *WorkloadResource) *RepeatedScheduleResourceUpdate {
	return _u.SetTargetWorkloadID(v.ID)
}

// SetTargetRegionID sets the "target_region" edge to the RegionResource entity by ID.
func (_u *RepeatedScheduleResourceUpdate) SetTargetRegionID(id int) *RepeatedScheduleResourceUpdate {
	_u.mutation.SetTargetRegionID(id)
	return _u
}

// SetNillableTargetRegionID sets the "target_region" edge to the RegionResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdate) SetNillableTargetRegionID(id *int) *RepeatedScheduleResourceUpdate {
	if id != nil {
		_u = _u.SetTargetRegionID(*id)
	}
	return _u
}

// SetTargetRegion sets the "target_region" edge to the RegionResource entity.
func (_u *RepeatedScheduleResourceUpdate) SetTargetRegion(v *RegionResource) *RepeatedScheduleResourceUpdate {
	return _u.SetTargetRegionID(v.ID)
}

// Mutation returns the RepeatedScheduleResourceMutation object of the builder.
func (_u *RepeatedScheduleResourceUpdate) Mutation() *RepeatedScheduleResourceMutation {
	return _u.mutation
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (_u *RepeatedScheduleResourceUpdate) ClearTargetSite() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearTargetSite()
	return _u
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (_u *RepeatedScheduleResourceUpdate) ClearTargetHost() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearTargetHost()
	return _u
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (_u *RepeatedScheduleResourceUpdate) ClearTargetWorkload() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearTargetWorkload()
	return _u
}

// ClearTargetRegion clears the "target_region" edge to the RegionResource entity.
func (_u *RepeatedScheduleResourceUpdate) ClearTargetRegion() *RepeatedScheduleResourceUpdate {
	_u.mutation.ClearTargetRegion()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RepeatedScheduleResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepeatedScheduleResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RepeatedScheduleResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepeatedScheduleResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RepeatedScheduleResourceUpdate) check() error {
	if v, ok := _u.mutation.ScheduleStatus(); ok {
		if err := repeatedscheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "RepeatedScheduleResource.schedule_status": %w`, err)}
		}
	}
	return nil
}

func (_u *RepeatedScheduleResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repeatedscheduleresource.Table, repeatedscheduleresource.Columns, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScheduleStatus(); ok {
		_spec.SetField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum, value)
	}
	if _u.mutation.ScheduleStatusCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(repeatedscheduleresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DurationSeconds(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if _u.mutation.DurationSecondsCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32)
	}
	if value, ok := _u.mutation.CronMinutes(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMinutes, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronHours(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronHours, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronDayMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayMonth, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMonth, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronDayWeek(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayWeek, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(repeatedscheduleresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.TargetSiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetWorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetRegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetRegionTable,
			Columns: []string{repeatedscheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetRegionTable,
			Columns: []string{repeatedscheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repeatedscheduleresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RepeatedScheduleResourceUpdateOne is the builder for updating a single RepeatedScheduleResource entity.
type RepeatedScheduleResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RepeatedScheduleResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetResourceID(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableResourceID(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetScheduleStatus sets the "schedule_status" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetScheduleStatus(v repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetScheduleStatus(v)
	return _u
}

// SetNillableScheduleStatus sets the "schedule_status" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableScheduleStatus(v *repeatedscheduleresource.ScheduleStatus) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetScheduleStatus(*v)
	}
	return _u
}

// ClearScheduleStatus clears the value of the "schedule_status" field.
func (_u *RepeatedScheduleResourceUpdateOne) ClearScheduleStatus() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearScheduleStatus()
	return _u
}

// SetName sets the "name" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetName(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableName(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *RepeatedScheduleResourceUpdateOne) ClearName() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDurationSeconds sets the "duration_seconds" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetDurationSeconds(v uint32) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ResetDurationSeconds()
	_u.mutation.SetDurationSeconds(v)
	return _u
}

// SetNillableDurationSeconds sets the "duration_seconds" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableDurationSeconds(v *uint32) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetDurationSeconds(*v)
	}
	return _u
}

// AddDurationSeconds adds value to the "duration_seconds" field.
func (_u *RepeatedScheduleResourceUpdateOne) AddDurationSeconds(v int32) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.AddDurationSeconds(v)
	return _u
}

// ClearDurationSeconds clears the value of the "duration_seconds" field.
func (_u *RepeatedScheduleResourceUpdateOne) ClearDurationSeconds() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearDurationSeconds()
	return _u
}

// SetCronMinutes sets the "cron_minutes" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetCronMinutes(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetCronMinutes(v)
	return _u
}

// SetNillableCronMinutes sets the "cron_minutes" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableCronMinutes(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetCronMinutes(*v)
	}
	return _u
}

// SetCronHours sets the "cron_hours" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetCronHours(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetCronHours(v)
	return _u
}

// SetNillableCronHours sets the "cron_hours" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableCronHours(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetCronHours(*v)
	}
	return _u
}

// SetCronDayMonth sets the "cron_day_month" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetCronDayMonth(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetCronDayMonth(v)
	return _u
}

// SetNillableCronDayMonth sets the "cron_day_month" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableCronDayMonth(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetCronDayMonth(*v)
	}
	return _u
}

// SetCronMonth sets the "cron_month" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetCronMonth(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetCronMonth(v)
	return _u
}

// SetNillableCronMonth sets the "cron_month" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableCronMonth(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetCronMonth(*v)
	}
	return _u
}

// SetCronDayWeek sets the "cron_day_week" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetCronDayWeek(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetCronDayWeek(v)
	return _u
}

// SetNillableCronDayWeek sets the "cron_day_week" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableCronDayWeek(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetCronDayWeek(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RepeatedScheduleResourceUpdateOne) SetUpdatedAt(v string) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableUpdatedAt(v *string) *RepeatedScheduleResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetTargetSiteID sets the "target_site" edge to the SiteResource entity by ID.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetSiteID(id int) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetTargetSiteID(id)
	return _u
}

// SetNillableTargetSiteID sets the "target_site" edge to the SiteResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableTargetSiteID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetSiteID(*id)
	}
	return _u
}

// SetTargetSite sets the "target_site" edge to the SiteResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetSite(v *SiteResource) *RepeatedScheduleResourceUpdateOne {
	return _u.SetTargetSiteID(v.ID)
}

// SetTargetHostID sets the "target_host" edge to the HostResource entity by ID.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetHostID(id int) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetTargetHostID(id)
	return _u
}

// SetNillableTargetHostID sets the "target_host" edge to the HostResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableTargetHostID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetHostID(*id)
	}
	return _u
}

// SetTargetHost sets the "target_host" edge to the HostResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetHost(v *HostResource) *RepeatedScheduleResourceUpdateOne {
	return _u.SetTargetHostID(v.ID)
}

// SetTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetWorkloadID(id int) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetTargetWorkloadID(id)
	return _u
}

// SetNillableTargetWorkloadID sets the "target_workload" edge to the WorkloadResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableTargetWorkloadID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetWorkloadID(*id)
	}
	return _u
}

// SetTargetWorkload sets the "target_workload" edge to the WorkloadResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetWorkload(v *WorkloadResource) *RepeatedScheduleResourceUpdateOne {
	return _u.SetTargetWorkloadID(v.ID)
}

// SetTargetRegionID sets the "target_region" edge to the RegionResource entity by ID.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetRegionID(id int) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.SetTargetRegionID(id)
	return _u
}

// SetNillableTargetRegionID sets the "target_region" edge to the RegionResource entity by ID if the given value is not nil.
func (_u *RepeatedScheduleResourceUpdateOne) SetNillableTargetRegionID(id *int) *RepeatedScheduleResourceUpdateOne {
	if id != nil {
		_u = _u.SetTargetRegionID(*id)
	}
	return _u
}

// SetTargetRegion sets the "target_region" edge to the RegionResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) SetTargetRegion(v *RegionResource) *RepeatedScheduleResourceUpdateOne {
	return _u.SetTargetRegionID(v.ID)
}

// Mutation returns the RepeatedScheduleResourceMutation object of the builder.
func (_u *RepeatedScheduleResourceUpdateOne) Mutation() *RepeatedScheduleResourceMutation {
	return _u.mutation
}

// ClearTargetSite clears the "target_site" edge to the SiteResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) ClearTargetSite() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearTargetSite()
	return _u
}

// ClearTargetHost clears the "target_host" edge to the HostResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) ClearTargetHost() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearTargetHost()
	return _u
}

// ClearTargetWorkload clears the "target_workload" edge to the WorkloadResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) ClearTargetWorkload() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearTargetWorkload()
	return _u
}

// ClearTargetRegion clears the "target_region" edge to the RegionResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) ClearTargetRegion() *RepeatedScheduleResourceUpdateOne {
	_u.mutation.ClearTargetRegion()
	return _u
}

// Where appends a list predicates to the RepeatedScheduleResourceUpdate builder.
func (_u *RepeatedScheduleResourceUpdateOne) Where(ps ...predicate.RepeatedScheduleResource) *RepeatedScheduleResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RepeatedScheduleResourceUpdateOne) Select(field string, fields ...string) *RepeatedScheduleResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RepeatedScheduleResource entity.
func (_u *RepeatedScheduleResourceUpdateOne) Save(ctx context.Context) (*RepeatedScheduleResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RepeatedScheduleResourceUpdateOne) SaveX(ctx context.Context) *RepeatedScheduleResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RepeatedScheduleResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RepeatedScheduleResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RepeatedScheduleResourceUpdateOne) check() error {
	if v, ok := _u.mutation.ScheduleStatus(); ok {
		if err := repeatedscheduleresource.ScheduleStatusValidator(v); err != nil {
			return &ValidationError{Name: "schedule_status", err: fmt.Errorf(`ent: validator failed for field "RepeatedScheduleResource.schedule_status": %w`, err)}
		}
	}
	return nil
}

func (_u *RepeatedScheduleResourceUpdateOne) sqlSave(ctx context.Context) (_node *RepeatedScheduleResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(repeatedscheduleresource.Table, repeatedscheduleresource.Columns, sqlgraph.NewFieldSpec(repeatedscheduleresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RepeatedScheduleResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, repeatedscheduleresource.FieldID)
		for _, f := range fields {
			if !repeatedscheduleresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != repeatedscheduleresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(repeatedscheduleresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ScheduleStatus(); ok {
		_spec.SetField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum, value)
	}
	if _u.mutation.ScheduleStatusCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldScheduleStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(repeatedscheduleresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DurationSeconds(); ok {
		_spec.SetField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedDurationSeconds(); ok {
		_spec.AddField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32, value)
	}
	if _u.mutation.DurationSecondsCleared() {
		_spec.ClearField(repeatedscheduleresource.FieldDurationSeconds, field.TypeUint32)
	}
	if value, ok := _u.mutation.CronMinutes(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMinutes, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronHours(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronHours, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronDayMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayMonth, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronMonth(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronMonth, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronDayWeek(); ok {
		_spec.SetField(repeatedscheduleresource.FieldCronDayWeek, field.TypeString, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(repeatedscheduleresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.TargetSiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetSiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetSiteTable,
			Columns: []string{repeatedscheduleresource.TargetSiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetHostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetHostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetHostTable,
			Columns: []string{repeatedscheduleresource.TargetHostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetWorkloadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetWorkloadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetWorkloadTable,
			Columns: []string{repeatedscheduleresource.TargetWorkloadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TargetRegionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetRegionTable,
			Columns: []string{repeatedscheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetRegionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   repeatedscheduleresource.TargetRegionTable,
			Columns: []string{repeatedscheduleresource.TargetRegionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(regionresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RepeatedScheduleResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{repeatedscheduleresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
