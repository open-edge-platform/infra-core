// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdaterunresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdateRunResourceDelete is the builder for deleting a OSUpdateRunResource entity.
type OSUpdateRunResourceDelete struct {
	config
	hooks    []Hook
	mutation *OSUpdateRunResourceMutation
}

// Where appends a list predicates to the OSUpdateRunResourceDelete builder.
func (ourrd *OSUpdateRunResourceDelete) Where(ps ...predicate.OSUpdateRunResource) *OSUpdateRunResourceDelete {
	ourrd.mutation.Where(ps...)
	return ourrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ourrd *OSUpdateRunResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ourrd.sqlExec, ourrd.mutation, ourrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ourrd *OSUpdateRunResourceDelete) ExecX(ctx context.Context) int {
	n, err := ourrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ourrd *OSUpdateRunResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(osupdaterunresource.Table, sqlgraph.NewFieldSpec(osupdaterunresource.FieldID, field.TypeInt))
	if ps := ourrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ourrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ourrd.mutation.done = true
	return affected, err
}

// OSUpdateRunResourceDeleteOne is the builder for deleting a single OSUpdateRunResource entity.
type OSUpdateRunResourceDeleteOne struct {
	ourrd *OSUpdateRunResourceDelete
}

// Where appends a list predicates to the OSUpdateRunResourceDelete builder.
func (ourrdo *OSUpdateRunResourceDeleteOne) Where(ps ...predicate.OSUpdateRunResource) *OSUpdateRunResourceDeleteOne {
	ourrdo.ourrd.mutation.Where(ps...)
	return ourrdo
}

// Exec executes the deletion query.
func (ourrdo *OSUpdateRunResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := ourrdo.ourrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{osupdaterunresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ourrdo *OSUpdateRunResourceDeleteOne) ExecX(ctx context.Context) {
	if err := ourrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
