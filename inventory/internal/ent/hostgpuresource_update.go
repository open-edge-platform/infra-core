// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostgpuresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// HostgpuResourceUpdate is the builder for updating HostgpuResource entities.
type HostgpuResourceUpdate struct {
	config
	hooks    []Hook
	mutation *HostgpuResourceMutation
}

// Where appends a list predicates to the HostgpuResourceUpdate builder.
func (_u *HostgpuResourceUpdate) Where(ps ...predicate.HostgpuResource) *HostgpuResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *HostgpuResourceUpdate) SetResourceID(v string) *HostgpuResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableResourceID(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetPciID sets the "pci_id" field.
func (_u *HostgpuResourceUpdate) SetPciID(v string) *HostgpuResourceUpdate {
	_u.mutation.SetPciID(v)
	return _u
}

// SetNillablePciID sets the "pci_id" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillablePciID(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetPciID(*v)
	}
	return _u
}

// ClearPciID clears the value of the "pci_id" field.
func (_u *HostgpuResourceUpdate) ClearPciID() *HostgpuResourceUpdate {
	_u.mutation.ClearPciID()
	return _u
}

// SetProduct sets the "product" field.
func (_u *HostgpuResourceUpdate) SetProduct(v string) *HostgpuResourceUpdate {
	_u.mutation.SetProduct(v)
	return _u
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableProduct(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetProduct(*v)
	}
	return _u
}

// ClearProduct clears the value of the "product" field.
func (_u *HostgpuResourceUpdate) ClearProduct() *HostgpuResourceUpdate {
	_u.mutation.ClearProduct()
	return _u
}

// SetVendor sets the "vendor" field.
func (_u *HostgpuResourceUpdate) SetVendor(v string) *HostgpuResourceUpdate {
	_u.mutation.SetVendor(v)
	return _u
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableVendor(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetVendor(*v)
	}
	return _u
}

// ClearVendor clears the value of the "vendor" field.
func (_u *HostgpuResourceUpdate) ClearVendor() *HostgpuResourceUpdate {
	_u.mutation.ClearVendor()
	return _u
}

// SetDescription sets the "description" field.
func (_u *HostgpuResourceUpdate) SetDescription(v string) *HostgpuResourceUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableDescription(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *HostgpuResourceUpdate) ClearDescription() *HostgpuResourceUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *HostgpuResourceUpdate) SetDeviceName(v string) *HostgpuResourceUpdate {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableDeviceName(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *HostgpuResourceUpdate) ClearDeviceName() *HostgpuResourceUpdate {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *HostgpuResourceUpdate) SetFeatures(v string) *HostgpuResourceUpdate {
	_u.mutation.SetFeatures(v)
	return _u
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableFeatures(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetFeatures(*v)
	}
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *HostgpuResourceUpdate) ClearFeatures() *HostgpuResourceUpdate {
	_u.mutation.ClearFeatures()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostgpuResourceUpdate) SetUpdatedAt(v string) *HostgpuResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostgpuResourceUpdate) SetNillableUpdatedAt(v *string) *HostgpuResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *HostgpuResourceUpdate) SetHostID(id int) *HostgpuResourceUpdate {
	_u.mutation.SetHostID(id)
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *HostgpuResourceUpdate) SetHost(v *HostResource) *HostgpuResourceUpdate {
	return _u.SetHostID(v.ID)
}

// Mutation returns the HostgpuResourceMutation object of the builder.
func (_u *HostgpuResourceUpdate) Mutation() *HostgpuResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *HostgpuResourceUpdate) ClearHost() *HostgpuResourceUpdate {
	_u.mutation.ClearHost()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HostgpuResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostgpuResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HostgpuResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostgpuResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostgpuResourceUpdate) check() error {
	if _u.mutation.HostCleared() && len(_u.mutation.HostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HostgpuResource.host"`)
	}
	return nil
}

func (_u *HostgpuResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostgpuresource.Table, hostgpuresource.Columns, sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostgpuresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.PciID(); ok {
		_spec.SetField(hostgpuresource.FieldPciID, field.TypeString, value)
	}
	if _u.mutation.PciIDCleared() {
		_spec.ClearField(hostgpuresource.FieldPciID, field.TypeString)
	}
	if value, ok := _u.mutation.Product(); ok {
		_spec.SetField(hostgpuresource.FieldProduct, field.TypeString, value)
	}
	if _u.mutation.ProductCleared() {
		_spec.ClearField(hostgpuresource.FieldProduct, field.TypeString)
	}
	if value, ok := _u.mutation.Vendor(); ok {
		_spec.SetField(hostgpuresource.FieldVendor, field.TypeString, value)
	}
	if _u.mutation.VendorCleared() {
		_spec.ClearField(hostgpuresource.FieldVendor, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(hostgpuresource.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(hostgpuresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(hostgpuresource.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(hostgpuresource.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(hostgpuresource.FieldFeatures, field.TypeString, value)
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(hostgpuresource.FieldFeatures, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostgpuresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgpuresource.HostTable,
			Columns: []string{hostgpuresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgpuresource.HostTable,
			Columns: []string{hostgpuresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostgpuresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HostgpuResourceUpdateOne is the builder for updating a single HostgpuResource entity.
type HostgpuResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostgpuResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *HostgpuResourceUpdateOne) SetResourceID(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableResourceID(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetPciID sets the "pci_id" field.
func (_u *HostgpuResourceUpdateOne) SetPciID(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetPciID(v)
	return _u
}

// SetNillablePciID sets the "pci_id" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillablePciID(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetPciID(*v)
	}
	return _u
}

// ClearPciID clears the value of the "pci_id" field.
func (_u *HostgpuResourceUpdateOne) ClearPciID() *HostgpuResourceUpdateOne {
	_u.mutation.ClearPciID()
	return _u
}

// SetProduct sets the "product" field.
func (_u *HostgpuResourceUpdateOne) SetProduct(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetProduct(v)
	return _u
}

// SetNillableProduct sets the "product" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableProduct(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetProduct(*v)
	}
	return _u
}

// ClearProduct clears the value of the "product" field.
func (_u *HostgpuResourceUpdateOne) ClearProduct() *HostgpuResourceUpdateOne {
	_u.mutation.ClearProduct()
	return _u
}

// SetVendor sets the "vendor" field.
func (_u *HostgpuResourceUpdateOne) SetVendor(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetVendor(v)
	return _u
}

// SetNillableVendor sets the "vendor" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableVendor(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetVendor(*v)
	}
	return _u
}

// ClearVendor clears the value of the "vendor" field.
func (_u *HostgpuResourceUpdateOne) ClearVendor() *HostgpuResourceUpdateOne {
	_u.mutation.ClearVendor()
	return _u
}

// SetDescription sets the "description" field.
func (_u *HostgpuResourceUpdateOne) SetDescription(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableDescription(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *HostgpuResourceUpdateOne) ClearDescription() *HostgpuResourceUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *HostgpuResourceUpdateOne) SetDeviceName(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableDeviceName(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *HostgpuResourceUpdateOne) ClearDeviceName() *HostgpuResourceUpdateOne {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *HostgpuResourceUpdateOne) SetFeatures(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetFeatures(v)
	return _u
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableFeatures(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetFeatures(*v)
	}
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *HostgpuResourceUpdateOne) ClearFeatures() *HostgpuResourceUpdateOne {
	_u.mutation.ClearFeatures()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostgpuResourceUpdateOne) SetUpdatedAt(v string) *HostgpuResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostgpuResourceUpdateOne) SetNillableUpdatedAt(v *string) *HostgpuResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *HostgpuResourceUpdateOne) SetHostID(id int) *HostgpuResourceUpdateOne {
	_u.mutation.SetHostID(id)
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *HostgpuResourceUpdateOne) SetHost(v *HostResource) *HostgpuResourceUpdateOne {
	return _u.SetHostID(v.ID)
}

// Mutation returns the HostgpuResourceMutation object of the builder.
func (_u *HostgpuResourceUpdateOne) Mutation() *HostgpuResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *HostgpuResourceUpdateOne) ClearHost() *HostgpuResourceUpdateOne {
	_u.mutation.ClearHost()
	return _u
}

// Where appends a list predicates to the HostgpuResourceUpdate builder.
func (_u *HostgpuResourceUpdateOne) Where(ps ...predicate.HostgpuResource) *HostgpuResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HostgpuResourceUpdateOne) Select(field string, fields ...string) *HostgpuResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated HostgpuResource entity.
func (_u *HostgpuResourceUpdateOne) Save(ctx context.Context) (*HostgpuResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostgpuResourceUpdateOne) SaveX(ctx context.Context) *HostgpuResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HostgpuResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostgpuResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostgpuResourceUpdateOne) check() error {
	if _u.mutation.HostCleared() && len(_u.mutation.HostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HostgpuResource.host"`)
	}
	return nil
}

func (_u *HostgpuResourceUpdateOne) sqlSave(ctx context.Context) (_node *HostgpuResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostgpuresource.Table, hostgpuresource.Columns, sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostgpuResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostgpuresource.FieldID)
		for _, f := range fields {
			if !hostgpuresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostgpuresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostgpuresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.PciID(); ok {
		_spec.SetField(hostgpuresource.FieldPciID, field.TypeString, value)
	}
	if _u.mutation.PciIDCleared() {
		_spec.ClearField(hostgpuresource.FieldPciID, field.TypeString)
	}
	if value, ok := _u.mutation.Product(); ok {
		_spec.SetField(hostgpuresource.FieldProduct, field.TypeString, value)
	}
	if _u.mutation.ProductCleared() {
		_spec.ClearField(hostgpuresource.FieldProduct, field.TypeString)
	}
	if value, ok := _u.mutation.Vendor(); ok {
		_spec.SetField(hostgpuresource.FieldVendor, field.TypeString, value)
	}
	if _u.mutation.VendorCleared() {
		_spec.ClearField(hostgpuresource.FieldVendor, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(hostgpuresource.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(hostgpuresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(hostgpuresource.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(hostgpuresource.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(hostgpuresource.FieldFeatures, field.TypeString, value)
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(hostgpuresource.FieldFeatures, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostgpuresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgpuresource.HostTable,
			Columns: []string{hostgpuresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostgpuresource.HostTable,
			Columns: []string{hostgpuresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostgpuResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostgpuresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
