// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/remoteaccessconfiguration"
)

// RemoteAccessConfigurationUpdate is the builder for updating RemoteAccessConfiguration entities.
type RemoteAccessConfigurationUpdate struct {
	config
	hooks    []Hook
	mutation *RemoteAccessConfigurationMutation
}

// Where appends a list predicates to the RemoteAccessConfigurationUpdate builder.
func (_u *RemoteAccessConfigurationUpdate) Where(ps ...predicate.RemoteAccessConfiguration) *RemoteAccessConfigurationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *RemoteAccessConfigurationUpdate) SetResourceID(v string) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableResourceID(v *string) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetLocalPort sets the "local_port" field.
func (_u *RemoteAccessConfigurationUpdate) SetLocalPort(v uint32) *RemoteAccessConfigurationUpdate {
	_u.mutation.ResetLocalPort()
	_u.mutation.SetLocalPort(v)
	return _u
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableLocalPort(v *uint32) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetLocalPort(*v)
	}
	return _u
}

// AddLocalPort adds value to the "local_port" field.
func (_u *RemoteAccessConfigurationUpdate) AddLocalPort(v int32) *RemoteAccessConfigurationUpdate {
	_u.mutation.AddLocalPort(v)
	return _u
}

// ClearLocalPort clears the value of the "local_port" field.
func (_u *RemoteAccessConfigurationUpdate) ClearLocalPort() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearLocalPort()
	return _u
}

// SetUser sets the "user" field.
func (_u *RemoteAccessConfigurationUpdate) SetUser(v string) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetUser(v)
	return _u
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableUser(v *string) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetUser(*v)
	}
	return _u
}

// ClearUser clears the value of the "user" field.
func (_u *RemoteAccessConfigurationUpdate) ClearUser() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearUser()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *RemoteAccessConfigurationUpdate) SetCurrentState(v remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableCurrentState(v *remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *RemoteAccessConfigurationUpdate) ClearCurrentState() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *RemoteAccessConfigurationUpdate) SetDesiredState(v remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableDesiredState(v *remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// SetConfigurationStatus sets the "configuration_status" field.
func (_u *RemoteAccessConfigurationUpdate) SetConfigurationStatus(v string) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetConfigurationStatus(v)
	return _u
}

// SetNillableConfigurationStatus sets the "configuration_status" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableConfigurationStatus(v *string) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetConfigurationStatus(*v)
	}
	return _u
}

// ClearConfigurationStatus clears the value of the "configuration_status" field.
func (_u *RemoteAccessConfigurationUpdate) ClearConfigurationStatus() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearConfigurationStatus()
	return _u
}

// SetConfigurationStatusIndicator sets the "configuration_status_indicator" field.
func (_u *RemoteAccessConfigurationUpdate) SetConfigurationStatusIndicator(v remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetConfigurationStatusIndicator(v)
	return _u
}

// SetNillableConfigurationStatusIndicator sets the "configuration_status_indicator" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableConfigurationStatusIndicator(v *remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetConfigurationStatusIndicator(*v)
	}
	return _u
}

// ClearConfigurationStatusIndicator clears the value of the "configuration_status_indicator" field.
func (_u *RemoteAccessConfigurationUpdate) ClearConfigurationStatusIndicator() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearConfigurationStatusIndicator()
	return _u
}

// SetConfigurationStatusTimestamp sets the "configuration_status_timestamp" field.
func (_u *RemoteAccessConfigurationUpdate) SetConfigurationStatusTimestamp(v uint64) *RemoteAccessConfigurationUpdate {
	_u.mutation.ResetConfigurationStatusTimestamp()
	_u.mutation.SetConfigurationStatusTimestamp(v)
	return _u
}

// SetNillableConfigurationStatusTimestamp sets the "configuration_status_timestamp" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableConfigurationStatusTimestamp(v *uint64) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetConfigurationStatusTimestamp(*v)
	}
	return _u
}

// AddConfigurationStatusTimestamp adds value to the "configuration_status_timestamp" field.
func (_u *RemoteAccessConfigurationUpdate) AddConfigurationStatusTimestamp(v int64) *RemoteAccessConfigurationUpdate {
	_u.mutation.AddConfigurationStatusTimestamp(v)
	return _u
}

// ClearConfigurationStatusTimestamp clears the value of the "configuration_status_timestamp" field.
func (_u *RemoteAccessConfigurationUpdate) ClearConfigurationStatusTimestamp() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearConfigurationStatusTimestamp()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RemoteAccessConfigurationUpdate) SetUpdatedAt(v string) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdate) SetNillableUpdatedAt(v *string) *RemoteAccessConfigurationUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (_u *RemoteAccessConfigurationUpdate) SetInstanceID(id int) *RemoteAccessConfigurationUpdate {
	_u.mutation.SetInstanceID(id)
	return _u
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (_u *RemoteAccessConfigurationUpdate) SetInstance(v *InstanceResource) *RemoteAccessConfigurationUpdate {
	return _u.SetInstanceID(v.ID)
}

// Mutation returns the RemoteAccessConfigurationMutation object of the builder.
func (_u *RemoteAccessConfigurationUpdate) Mutation() *RemoteAccessConfigurationMutation {
	return _u.mutation
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (_u *RemoteAccessConfigurationUpdate) ClearInstance() *RemoteAccessConfigurationUpdate {
	_u.mutation.ClearInstance()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RemoteAccessConfigurationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RemoteAccessConfigurationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RemoteAccessConfigurationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RemoteAccessConfigurationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RemoteAccessConfigurationUpdate) check() error {
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := remoteaccessconfiguration.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := remoteaccessconfiguration.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ConfigurationStatusIndicator(); ok {
		if err := remoteaccessconfiguration.ConfigurationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "configuration_status_indicator", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.configuration_status_indicator": %w`, err)}
		}
	}
	if _u.mutation.InstanceCleared() && len(_u.mutation.InstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RemoteAccessConfiguration.instance"`)
	}
	return nil
}

func (_u *RemoteAccessConfigurationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(remoteaccessconfiguration.Table, remoteaccessconfiguration.Columns, sqlgraph.NewFieldSpec(remoteaccessconfiguration.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.LocalPort(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedLocalPort(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if _u.mutation.LocalPortCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32)
	}
	if value, ok := _u.mutation.User(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUser, field.TypeString, value)
	}
	if _u.mutation.UserCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldUser, field.TypeString)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ConfigurationStatus(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString, value)
	}
	if _u.mutation.ConfigurationStatusCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString)
	}
	if value, ok := _u.mutation.ConfigurationStatusIndicator(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.ConfigurationStatusIndicatorCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.ConfigurationStatusTimestamp(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedConfigurationStatusTimestamp(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.ConfigurationStatusTimestampCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteaccessconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RemoteAccessConfigurationUpdateOne is the builder for updating a single RemoteAccessConfiguration entity.
type RemoteAccessConfigurationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RemoteAccessConfigurationMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetResourceID(v string) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableResourceID(v *string) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetLocalPort sets the "local_port" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetLocalPort(v uint32) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ResetLocalPort()
	_u.mutation.SetLocalPort(v)
	return _u
}

// SetNillableLocalPort sets the "local_port" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableLocalPort(v *uint32) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetLocalPort(*v)
	}
	return _u
}

// AddLocalPort adds value to the "local_port" field.
func (_u *RemoteAccessConfigurationUpdateOne) AddLocalPort(v int32) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.AddLocalPort(v)
	return _u
}

// ClearLocalPort clears the value of the "local_port" field.
func (_u *RemoteAccessConfigurationUpdateOne) ClearLocalPort() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearLocalPort()
	return _u
}

// SetUser sets the "user" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetUser(v string) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetUser(v)
	return _u
}

// SetNillableUser sets the "user" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableUser(v *string) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetUser(*v)
	}
	return _u
}

// ClearUser clears the value of the "user" field.
func (_u *RemoteAccessConfigurationUpdateOne) ClearUser() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetCurrentState(v remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableCurrentState(v *remoteaccessconfiguration.CurrentState) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *RemoteAccessConfigurationUpdateOne) ClearCurrentState() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetDesiredState(v remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableDesiredState(v *remoteaccessconfiguration.DesiredState) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// SetConfigurationStatus sets the "configuration_status" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetConfigurationStatus(v string) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetConfigurationStatus(v)
	return _u
}

// SetNillableConfigurationStatus sets the "configuration_status" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableConfigurationStatus(v *string) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetConfigurationStatus(*v)
	}
	return _u
}

// ClearConfigurationStatus clears the value of the "configuration_status" field.
func (_u *RemoteAccessConfigurationUpdateOne) ClearConfigurationStatus() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearConfigurationStatus()
	return _u
}

// SetConfigurationStatusIndicator sets the "configuration_status_indicator" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetConfigurationStatusIndicator(v remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetConfigurationStatusIndicator(v)
	return _u
}

// SetNillableConfigurationStatusIndicator sets the "configuration_status_indicator" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableConfigurationStatusIndicator(v *remoteaccessconfiguration.ConfigurationStatusIndicator) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetConfigurationStatusIndicator(*v)
	}
	return _u
}

// ClearConfigurationStatusIndicator clears the value of the "configuration_status_indicator" field.
func (_u *RemoteAccessConfigurationUpdateOne) ClearConfigurationStatusIndicator() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearConfigurationStatusIndicator()
	return _u
}

// SetConfigurationStatusTimestamp sets the "configuration_status_timestamp" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetConfigurationStatusTimestamp(v uint64) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ResetConfigurationStatusTimestamp()
	_u.mutation.SetConfigurationStatusTimestamp(v)
	return _u
}

// SetNillableConfigurationStatusTimestamp sets the "configuration_status_timestamp" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableConfigurationStatusTimestamp(v *uint64) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetConfigurationStatusTimestamp(*v)
	}
	return _u
}

// AddConfigurationStatusTimestamp adds value to the "configuration_status_timestamp" field.
func (_u *RemoteAccessConfigurationUpdateOne) AddConfigurationStatusTimestamp(v int64) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.AddConfigurationStatusTimestamp(v)
	return _u
}

// ClearConfigurationStatusTimestamp clears the value of the "configuration_status_timestamp" field.
func (_u *RemoteAccessConfigurationUpdateOne) ClearConfigurationStatusTimestamp() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearConfigurationStatusTimestamp()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RemoteAccessConfigurationUpdateOne) SetUpdatedAt(v string) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *RemoteAccessConfigurationUpdateOne) SetNillableUpdatedAt(v *string) *RemoteAccessConfigurationUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (_u *RemoteAccessConfigurationUpdateOne) SetInstanceID(id int) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.SetInstanceID(id)
	return _u
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (_u *RemoteAccessConfigurationUpdateOne) SetInstance(v *InstanceResource) *RemoteAccessConfigurationUpdateOne {
	return _u.SetInstanceID(v.ID)
}

// Mutation returns the RemoteAccessConfigurationMutation object of the builder.
func (_u *RemoteAccessConfigurationUpdateOne) Mutation() *RemoteAccessConfigurationMutation {
	return _u.mutation
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (_u *RemoteAccessConfigurationUpdateOne) ClearInstance() *RemoteAccessConfigurationUpdateOne {
	_u.mutation.ClearInstance()
	return _u
}

// Where appends a list predicates to the RemoteAccessConfigurationUpdate builder.
func (_u *RemoteAccessConfigurationUpdateOne) Where(ps ...predicate.RemoteAccessConfiguration) *RemoteAccessConfigurationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RemoteAccessConfigurationUpdateOne) Select(field string, fields ...string) *RemoteAccessConfigurationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RemoteAccessConfiguration entity.
func (_u *RemoteAccessConfigurationUpdateOne) Save(ctx context.Context) (*RemoteAccessConfiguration, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RemoteAccessConfigurationUpdateOne) SaveX(ctx context.Context) *RemoteAccessConfiguration {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RemoteAccessConfigurationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RemoteAccessConfigurationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RemoteAccessConfigurationUpdateOne) check() error {
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := remoteaccessconfiguration.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := remoteaccessconfiguration.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ConfigurationStatusIndicator(); ok {
		if err := remoteaccessconfiguration.ConfigurationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "configuration_status_indicator", err: fmt.Errorf(`ent: validator failed for field "RemoteAccessConfiguration.configuration_status_indicator": %w`, err)}
		}
	}
	if _u.mutation.InstanceCleared() && len(_u.mutation.InstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "RemoteAccessConfiguration.instance"`)
	}
	return nil
}

func (_u *RemoteAccessConfigurationUpdateOne) sqlSave(ctx context.Context) (_node *RemoteAccessConfiguration, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(remoteaccessconfiguration.Table, remoteaccessconfiguration.Columns, sqlgraph.NewFieldSpec(remoteaccessconfiguration.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RemoteAccessConfiguration.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, remoteaccessconfiguration.FieldID)
		for _, f := range fields {
			if !remoteaccessconfiguration.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != remoteaccessconfiguration.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.LocalPort(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedLocalPort(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32, value)
	}
	if _u.mutation.LocalPortCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldLocalPort, field.TypeUint32)
	}
	if value, ok := _u.mutation.User(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUser, field.TypeString, value)
	}
	if _u.mutation.UserCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldUser, field.TypeString)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldDesiredState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.ConfigurationStatus(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString, value)
	}
	if _u.mutation.ConfigurationStatusCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatus, field.TypeString)
	}
	if value, ok := _u.mutation.ConfigurationStatusIndicator(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.ConfigurationStatusIndicatorCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.ConfigurationStatusTimestamp(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedConfigurationStatusTimestamp(); ok {
		_spec.AddField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.ConfigurationStatusTimestampCleared() {
		_spec.ClearField(remoteaccessconfiguration.FieldConfigurationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(remoteaccessconfiguration.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   remoteaccessconfiguration.InstanceTable,
			Columns: []string{remoteaccessconfiguration.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &RemoteAccessConfiguration{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{remoteaccessconfiguration.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
