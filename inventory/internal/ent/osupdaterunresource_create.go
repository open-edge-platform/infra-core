// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdaterunresource"
)

// OSUpdateRunResourceCreate is the builder for creating a OSUpdateRunResource entity.
type OSUpdateRunResourceCreate struct {
	config
	mutation *OSUpdateRunResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (ourrc *OSUpdateRunResourceCreate) SetResourceID(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetResourceID(s)
	return ourrc
}

// SetName sets the "name" field.
func (ourrc *OSUpdateRunResourceCreate) SetName(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetName(s)
	return ourrc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ourrc *OSUpdateRunResourceCreate) SetNillableName(s *string) *OSUpdateRunResourceCreate {
	if s != nil {
		ourrc.SetName(*s)
	}
	return ourrc
}

// SetDescription sets the "description" field.
func (ourrc *OSUpdateRunResourceCreate) SetDescription(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetDescription(s)
	return ourrc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ourrc *OSUpdateRunResourceCreate) SetNillableDescription(s *string) *OSUpdateRunResourceCreate {
	if s != nil {
		ourrc.SetDescription(*s)
	}
	return ourrc
}

// SetStatusIndicator sets the "status_indicator" field.
func (ourrc *OSUpdateRunResourceCreate) SetStatusIndicator(oi osupdaterunresource.StatusIndicator) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetStatusIndicator(oi)
	return ourrc
}

// SetStatus sets the "status" field.
func (ourrc *OSUpdateRunResourceCreate) SetStatus(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetStatus(s)
	return ourrc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ourrc *OSUpdateRunResourceCreate) SetNillableStatus(s *string) *OSUpdateRunResourceCreate {
	if s != nil {
		ourrc.SetStatus(*s)
	}
	return ourrc
}

// SetStatusDetails sets the "status_details" field.
func (ourrc *OSUpdateRunResourceCreate) SetStatusDetails(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetStatusDetails(s)
	return ourrc
}

// SetNillableStatusDetails sets the "status_details" field if the given value is not nil.
func (ourrc *OSUpdateRunResourceCreate) SetNillableStatusDetails(s *string) *OSUpdateRunResourceCreate {
	if s != nil {
		ourrc.SetStatusDetails(*s)
	}
	return ourrc
}

// SetStatusTimestamp sets the "status_timestamp" field.
func (ourrc *OSUpdateRunResourceCreate) SetStatusTimestamp(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetStatusTimestamp(s)
	return ourrc
}

// SetStartTime sets the "start_time" field.
func (ourrc *OSUpdateRunResourceCreate) SetStartTime(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetStartTime(s)
	return ourrc
}

// SetEndTime sets the "end_time" field.
func (ourrc *OSUpdateRunResourceCreate) SetEndTime(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetEndTime(s)
	return ourrc
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (ourrc *OSUpdateRunResourceCreate) SetNillableEndTime(s *string) *OSUpdateRunResourceCreate {
	if s != nil {
		ourrc.SetEndTime(*s)
	}
	return ourrc
}

// SetTenantID sets the "tenant_id" field.
func (ourrc *OSUpdateRunResourceCreate) SetTenantID(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetTenantID(s)
	return ourrc
}

// SetCreatedAt sets the "created_at" field.
func (ourrc *OSUpdateRunResourceCreate) SetCreatedAt(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetCreatedAt(s)
	return ourrc
}

// SetUpdatedAt sets the "updated_at" field.
func (ourrc *OSUpdateRunResourceCreate) SetUpdatedAt(s string) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetUpdatedAt(s)
	return ourrc
}

// SetAppliedPolicyID sets the "applied_policy" edge to the OSUpdatePolicyResource entity by ID.
func (ourrc *OSUpdateRunResourceCreate) SetAppliedPolicyID(id int) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetAppliedPolicyID(id)
	return ourrc
}

// SetAppliedPolicy sets the "applied_policy" edge to the OSUpdatePolicyResource entity.
func (ourrc *OSUpdateRunResourceCreate) SetAppliedPolicy(o *OSUpdatePolicyResource) *OSUpdateRunResourceCreate {
	return ourrc.SetAppliedPolicyID(o.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (ourrc *OSUpdateRunResourceCreate) SetInstanceID(id int) *OSUpdateRunResourceCreate {
	ourrc.mutation.SetInstanceID(id)
	return ourrc
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (ourrc *OSUpdateRunResourceCreate) SetInstance(i *InstanceResource) *OSUpdateRunResourceCreate {
	return ourrc.SetInstanceID(i.ID)
}

// Mutation returns the OSUpdateRunResourceMutation object of the builder.
func (ourrc *OSUpdateRunResourceCreate) Mutation() *OSUpdateRunResourceMutation {
	return ourrc.mutation
}

// Save creates the OSUpdateRunResource in the database.
func (ourrc *OSUpdateRunResourceCreate) Save(ctx context.Context) (*OSUpdateRunResource, error) {
	return withHooks(ctx, ourrc.sqlSave, ourrc.mutation, ourrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ourrc *OSUpdateRunResourceCreate) SaveX(ctx context.Context) *OSUpdateRunResource {
	v, err := ourrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ourrc *OSUpdateRunResourceCreate) Exec(ctx context.Context) error {
	_, err := ourrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ourrc *OSUpdateRunResourceCreate) ExecX(ctx context.Context) {
	if err := ourrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ourrc *OSUpdateRunResourceCreate) check() error {
	if _, ok := ourrc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "OSUpdateRunResource.resource_id"`)}
	}
	if _, ok := ourrc.mutation.StatusIndicator(); !ok {
		return &ValidationError{Name: "status_indicator", err: errors.New(`ent: missing required field "OSUpdateRunResource.status_indicator"`)}
	}
	if v, ok := ourrc.mutation.StatusIndicator(); ok {
		if err := osupdaterunresource.StatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "status_indicator", err: fmt.Errorf(`ent: validator failed for field "OSUpdateRunResource.status_indicator": %w`, err)}
		}
	}
	if _, ok := ourrc.mutation.StatusTimestamp(); !ok {
		return &ValidationError{Name: "status_timestamp", err: errors.New(`ent: missing required field "OSUpdateRunResource.status_timestamp"`)}
	}
	if _, ok := ourrc.mutation.StartTime(); !ok {
		return &ValidationError{Name: "start_time", err: errors.New(`ent: missing required field "OSUpdateRunResource.start_time"`)}
	}
	if _, ok := ourrc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OSUpdateRunResource.tenant_id"`)}
	}
	if _, ok := ourrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OSUpdateRunResource.created_at"`)}
	}
	if _, ok := ourrc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OSUpdateRunResource.updated_at"`)}
	}
	if len(ourrc.mutation.AppliedPolicyIDs()) == 0 {
		return &ValidationError{Name: "applied_policy", err: errors.New(`ent: missing required edge "OSUpdateRunResource.applied_policy"`)}
	}
	if len(ourrc.mutation.InstanceIDs()) == 0 {
		return &ValidationError{Name: "instance", err: errors.New(`ent: missing required edge "OSUpdateRunResource.instance"`)}
	}
	return nil
}

func (ourrc *OSUpdateRunResourceCreate) sqlSave(ctx context.Context) (*OSUpdateRunResource, error) {
	if err := ourrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ourrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ourrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ourrc.mutation.id = &_node.ID
	ourrc.mutation.done = true
	return _node, nil
}

func (ourrc *OSUpdateRunResourceCreate) createSpec() (*OSUpdateRunResource, *sqlgraph.CreateSpec) {
	var (
		_node = &OSUpdateRunResource{config: ourrc.config}
		_spec = sqlgraph.NewCreateSpec(osupdaterunresource.Table, sqlgraph.NewFieldSpec(osupdaterunresource.FieldID, field.TypeInt))
	)
	if value, ok := ourrc.mutation.ResourceID(); ok {
		_spec.SetField(osupdaterunresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := ourrc.mutation.Name(); ok {
		_spec.SetField(osupdaterunresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ourrc.mutation.Description(); ok {
		_spec.SetField(osupdaterunresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ourrc.mutation.StatusIndicator(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusIndicator, field.TypeEnum, value)
		_node.StatusIndicator = value
	}
	if value, ok := ourrc.mutation.Status(); ok {
		_spec.SetField(osupdaterunresource.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ourrc.mutation.StatusDetails(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusDetails, field.TypeString, value)
		_node.StatusDetails = value
	}
	if value, ok := ourrc.mutation.StatusTimestamp(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusTimestamp, field.TypeString, value)
		_node.StatusTimestamp = value
	}
	if value, ok := ourrc.mutation.StartTime(); ok {
		_spec.SetField(osupdaterunresource.FieldStartTime, field.TypeString, value)
		_node.StartTime = value
	}
	if value, ok := ourrc.mutation.EndTime(); ok {
		_spec.SetField(osupdaterunresource.FieldEndTime, field.TypeString, value)
		_node.EndTime = value
	}
	if value, ok := ourrc.mutation.TenantID(); ok {
		_spec.SetField(osupdaterunresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := ourrc.mutation.CreatedAt(); ok {
		_spec.SetField(osupdaterunresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := ourrc.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdaterunresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := ourrc.mutation.AppliedPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.AppliedPolicyTable,
			Columns: []string{osupdaterunresource.AppliedPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.os_update_run_resource_applied_policy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ourrc.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.InstanceTable,
			Columns: []string{osupdaterunresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.os_update_run_resource_instance = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OSUpdateRunResourceCreateBulk is the builder for creating many OSUpdateRunResource entities in bulk.
type OSUpdateRunResourceCreateBulk struct {
	config
	err      error
	builders []*OSUpdateRunResourceCreate
}

// Save creates the OSUpdateRunResource entities in the database.
func (ourrcb *OSUpdateRunResourceCreateBulk) Save(ctx context.Context) ([]*OSUpdateRunResource, error) {
	if ourrcb.err != nil {
		return nil, ourrcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ourrcb.builders))
	nodes := make([]*OSUpdateRunResource, len(ourrcb.builders))
	mutators := make([]Mutator, len(ourrcb.builders))
	for i := range ourrcb.builders {
		func(i int, root context.Context) {
			builder := ourrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OSUpdateRunResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ourrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ourrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ourrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ourrcb *OSUpdateRunResourceCreateBulk) SaveX(ctx context.Context) []*OSUpdateRunResource {
	v, err := ourrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ourrcb *OSUpdateRunResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := ourrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ourrcb *OSUpdateRunResourceCreateBulk) ExecX(ctx context.Context) {
	if err := ourrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
