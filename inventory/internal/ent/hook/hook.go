// Code generated by ent, DO NOT EDIT.

package hook

import (
	"context"
	"fmt"

	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent"
)

// The EndpointResourceFunc type is an adapter to allow the use of ordinary
// function as EndpointResource mutator.
type EndpointResourceFunc func(context.Context, *ent.EndpointResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f EndpointResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.EndpointResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.EndpointResourceMutation", m)
}

// The HostResourceFunc type is an adapter to allow the use of ordinary
// function as HostResource mutator.
type HostResourceFunc func(context.Context, *ent.HostResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HostResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HostResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HostResourceMutation", m)
}

// The HostgpuResourceFunc type is an adapter to allow the use of ordinary
// function as HostgpuResource mutator.
type HostgpuResourceFunc func(context.Context, *ent.HostgpuResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HostgpuResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HostgpuResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HostgpuResourceMutation", m)
}

// The HostnicResourceFunc type is an adapter to allow the use of ordinary
// function as HostnicResource mutator.
type HostnicResourceFunc func(context.Context, *ent.HostnicResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HostnicResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HostnicResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HostnicResourceMutation", m)
}

// The HoststorageResourceFunc type is an adapter to allow the use of ordinary
// function as HoststorageResource mutator.
type HoststorageResourceFunc func(context.Context, *ent.HoststorageResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HoststorageResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HoststorageResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HoststorageResourceMutation", m)
}

// The HostusbResourceFunc type is an adapter to allow the use of ordinary
// function as HostusbResource mutator.
type HostusbResourceFunc func(context.Context, *ent.HostusbResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f HostusbResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.HostusbResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.HostusbResourceMutation", m)
}

// The IPAddressResourceFunc type is an adapter to allow the use of ordinary
// function as IPAddressResource mutator.
type IPAddressResourceFunc func(context.Context, *ent.IPAddressResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f IPAddressResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.IPAddressResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.IPAddressResourceMutation", m)
}

// The InstanceResourceFunc type is an adapter to allow the use of ordinary
// function as InstanceResource mutator.
type InstanceResourceFunc func(context.Context, *ent.InstanceResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f InstanceResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.InstanceResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.InstanceResourceMutation", m)
}

// The LocalAccountResourceFunc type is an adapter to allow the use of ordinary
// function as LocalAccountResource mutator.
type LocalAccountResourceFunc func(context.Context, *ent.LocalAccountResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f LocalAccountResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.LocalAccountResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.LocalAccountResourceMutation", m)
}

// The NetlinkResourceFunc type is an adapter to allow the use of ordinary
// function as NetlinkResource mutator.
type NetlinkResourceFunc func(context.Context, *ent.NetlinkResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NetlinkResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.NetlinkResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NetlinkResourceMutation", m)
}

// The NetworkSegmentFunc type is an adapter to allow the use of ordinary
// function as NetworkSegment mutator.
type NetworkSegmentFunc func(context.Context, *ent.NetworkSegmentMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f NetworkSegmentFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.NetworkSegmentMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.NetworkSegmentMutation", m)
}

// The OSUpdatePolicyFunc type is an adapter to allow the use of ordinary
// function as OSUpdatePolicy mutator.
type OSUpdatePolicyFunc func(context.Context, *ent.OSUpdatePolicyMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OSUpdatePolicyFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OSUpdatePolicyMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OSUpdatePolicyMutation", m)
}

// The OSUpdatePolicyResourceFunc type is an adapter to allow the use of ordinary
// function as OSUpdatePolicyResource mutator.
type OSUpdatePolicyResourceFunc func(context.Context, *ent.OSUpdatePolicyResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OSUpdatePolicyResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OSUpdatePolicyResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OSUpdatePolicyResourceMutation", m)
}

// The OperatingSystemResourceFunc type is an adapter to allow the use of ordinary
// function as OperatingSystemResource mutator.
type OperatingSystemResourceFunc func(context.Context, *ent.OperatingSystemResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OperatingSystemResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OperatingSystemResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OperatingSystemResourceMutation", m)
}

// The OuResourceFunc type is an adapter to allow the use of ordinary
// function as OuResource mutator.
type OuResourceFunc func(context.Context, *ent.OuResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f OuResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.OuResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.OuResourceMutation", m)
}

// The ProviderResourceFunc type is an adapter to allow the use of ordinary
// function as ProviderResource mutator.
type ProviderResourceFunc func(context.Context, *ent.ProviderResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f ProviderResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.ProviderResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.ProviderResourceMutation", m)
}

// The RegionResourceFunc type is an adapter to allow the use of ordinary
// function as RegionResource mutator.
type RegionResourceFunc func(context.Context, *ent.RegionResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RegionResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RegionResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RegionResourceMutation", m)
}

// The RemoteAccessConfigurationFunc type is an adapter to allow the use of ordinary
// function as RemoteAccessConfiguration mutator.
type RemoteAccessConfigurationFunc func(context.Context, *ent.RemoteAccessConfigurationMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RemoteAccessConfigurationFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RemoteAccessConfigurationMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RemoteAccessConfigurationMutation", m)
}

// The RepeatedScheduleResourceFunc type is an adapter to allow the use of ordinary
// function as RepeatedScheduleResource mutator.
type RepeatedScheduleResourceFunc func(context.Context, *ent.RepeatedScheduleResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f RepeatedScheduleResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.RepeatedScheduleResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.RepeatedScheduleResourceMutation", m)
}

// The SingleScheduleResourceFunc type is an adapter to allow the use of ordinary
// function as SingleScheduleResource mutator.
type SingleScheduleResourceFunc func(context.Context, *ent.SingleScheduleResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SingleScheduleResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SingleScheduleResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SingleScheduleResourceMutation", m)
}

// The SiteResourceFunc type is an adapter to allow the use of ordinary
// function as SiteResource mutator.
type SiteResourceFunc func(context.Context, *ent.SiteResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f SiteResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.SiteResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.SiteResourceMutation", m)
}

// The TelemetryGroupResourceFunc type is an adapter to allow the use of ordinary
// function as TelemetryGroupResource mutator.
type TelemetryGroupResourceFunc func(context.Context, *ent.TelemetryGroupResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TelemetryGroupResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TelemetryGroupResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TelemetryGroupResourceMutation", m)
}

// The TelemetryProfileFunc type is an adapter to allow the use of ordinary
// function as TelemetryProfile mutator.
type TelemetryProfileFunc func(context.Context, *ent.TelemetryProfileMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TelemetryProfileFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TelemetryProfileMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TelemetryProfileMutation", m)
}

// The TenantFunc type is an adapter to allow the use of ordinary
// function as Tenant mutator.
type TenantFunc func(context.Context, *ent.TenantMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f TenantFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.TenantMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.TenantMutation", m)
}

// The WorkloadMemberFunc type is an adapter to allow the use of ordinary
// function as WorkloadMember mutator.
type WorkloadMemberFunc func(context.Context, *ent.WorkloadMemberMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkloadMemberFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkloadMemberMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkloadMemberMutation", m)
}

// The WorkloadResourceFunc type is an adapter to allow the use of ordinary
// function as WorkloadResource mutator.
type WorkloadResourceFunc func(context.Context, *ent.WorkloadResourceMutation) (ent.Value, error)

// Mutate calls f(ctx, m).
func (f WorkloadResourceFunc) Mutate(ctx context.Context, m ent.Mutation) (ent.Value, error) {
	if mv, ok := m.(*ent.WorkloadResourceMutation); ok {
		return f(ctx, mv)
	}
	return nil, fmt.Errorf("unexpected mutation type %T. expect *ent.WorkloadResourceMutation", m)
}

// Condition is a hook condition function.
type Condition func(context.Context, ent.Mutation) bool

// And groups conditions with the AND operator.
func And(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if !first(ctx, m) || !second(ctx, m) {
			return false
		}
		for _, cond := range rest {
			if !cond(ctx, m) {
				return false
			}
		}
		return true
	}
}

// Or groups conditions with the OR operator.
func Or(first, second Condition, rest ...Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		if first(ctx, m) || second(ctx, m) {
			return true
		}
		for _, cond := range rest {
			if cond(ctx, m) {
				return true
			}
		}
		return false
	}
}

// Not negates a given condition.
func Not(cond Condition) Condition {
	return func(ctx context.Context, m ent.Mutation) bool {
		return !cond(ctx, m)
	}
}

// HasOp is a condition testing mutation operation.
func HasOp(op ent.Op) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		return m.Op().Is(op)
	}
}

// HasAddedFields is a condition validating `.AddedField` on fields.
func HasAddedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.AddedField(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.AddedField(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasClearedFields is a condition validating `.FieldCleared` on fields.
func HasClearedFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if exists := m.FieldCleared(field); !exists {
			return false
		}
		for _, field := range fields {
			if exists := m.FieldCleared(field); !exists {
				return false
			}
		}
		return true
	}
}

// HasFields is a condition validating `.Field` on fields.
func HasFields(field string, fields ...string) Condition {
	return func(_ context.Context, m ent.Mutation) bool {
		if _, exists := m.Field(field); !exists {
			return false
		}
		for _, field := range fields {
			if _, exists := m.Field(field); !exists {
				return false
			}
		}
		return true
	}
}

// If executes the given hook under condition.
//
//	hook.If(ComputeAverage, And(HasFields(...), HasAddedFields(...)))
func If(hk ent.Hook, cond Condition) ent.Hook {
	return func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if cond(ctx, m) {
				return hk(next).Mutate(ctx, m)
			}
			return next.Mutate(ctx, m)
		})
	}
}

// On executes the given hook only for the given operation.
//
//	hook.On(Log, ent.Delete|ent.Create)
func On(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, HasOp(op))
}

// Unless skips the given hook only for the given operation.
//
//	hook.Unless(Log, ent.Update|ent.UpdateOne)
func Unless(hk ent.Hook, op ent.Op) ent.Hook {
	return If(hk, Not(HasOp(op)))
}

// FixedError is a hook returning a fixed error.
func FixedError(err error) ent.Hook {
	return func(ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(context.Context, ent.Mutation) (ent.Value, error) {
			return nil, err
		})
	}
}

// Reject returns a hook that rejects all operations that match op.
//
//	func (T) Hooks() []ent.Hook {
//		return []ent.Hook{
//			Reject(ent.Delete|ent.Update),
//		}
//	}
func Reject(op ent.Op) ent.Hook {
	hk := FixedError(fmt.Errorf("%s operation is not allowed", op))
	return On(hk, op)
}

// Chain acts as a list of hooks and is effectively immutable.
// Once created, it will always hold the same set of hooks in the same order.
type Chain struct {
	hooks []ent.Hook
}

// NewChain creates a new chain of hooks.
func NewChain(hooks ...ent.Hook) Chain {
	return Chain{append([]ent.Hook(nil), hooks...)}
}

// Hook chains the list of hooks and returns the final hook.
func (c Chain) Hook() ent.Hook {
	return func(mutator ent.Mutator) ent.Mutator {
		for i := len(c.hooks) - 1; i >= 0; i-- {
			mutator = c.hooks[i](mutator)
		}
		return mutator
	}
}

// Append extends a chain, adding the specified hook
// as the last ones in the mutation flow.
func (c Chain) Append(hooks ...ent.Hook) Chain {
	newHooks := make([]ent.Hook, 0, len(c.hooks)+len(hooks))
	newHooks = append(newHooks, c.hooks...)
	newHooks = append(newHooks, hooks...)
	return Chain{newHooks}
}

// Extend extends a chain, adding the specified chain
// as the last ones in the mutation flow.
func (c Chain) Extend(chain Chain) Chain {
	return c.Append(chain.hooks...)
}
