// Code generated by ent, DO NOT EDIT.

package operatingsystemresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the operatingsystemresource type in the database.
	Label = "operating_system_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldArchitecture holds the string denoting the architecture field in the database.
	FieldArchitecture = "architecture"
	// FieldImageURL holds the string denoting the image_url field in the database.
	FieldImageURL = "image_url"
	// FieldImageID holds the string denoting the image_id field in the database.
	FieldImageID = "image_id"
	// FieldSha256 holds the string denoting the sha256 field in the database.
	FieldSha256 = "sha256"
	// FieldProfileName holds the string denoting the profile_name field in the database.
	FieldProfileName = "profile_name"
	// FieldProfileVersion holds the string denoting the profile_version field in the database.
	FieldProfileVersion = "profile_version"
	// FieldInstalledPackages holds the string denoting the installed_packages field in the database.
	FieldInstalledPackages = "installed_packages"
	// FieldInstalledPackagesURL holds the string denoting the installed_packages_url field in the database.
	FieldInstalledPackagesURL = "installed_packages_url"
	// FieldSecurityFeature holds the string denoting the security_feature field in the database.
	FieldSecurityFeature = "security_feature"
	// FieldOsType holds the string denoting the os_type field in the database.
	FieldOsType = "os_type"
	// FieldOsProvider holds the string denoting the os_provider field in the database.
	FieldOsProvider = "os_provider"
	// FieldPlatformBundle holds the string denoting the platform_bundle field in the database.
	FieldPlatformBundle = "platform_bundle"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldExistingCvesURL holds the string denoting the existing_cves_url field in the database.
	FieldExistingCvesURL = "existing_cves_url"
	// FieldExistingCves holds the string denoting the existing_cves field in the database.
	FieldExistingCves = "existing_cves"
	// FieldFixedCvesURL holds the string denoting the fixed_cves_url field in the database.
	FieldFixedCvesURL = "fixed_cves_url"
	// FieldFixedCves holds the string denoting the fixed_cves field in the database.
	FieldFixedCves = "fixed_cves"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the operatingsystemresource in the database.
	Table = "operating_system_resources"
)

// Columns holds all SQL columns for operatingsystemresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldName,
	FieldArchitecture,
	FieldImageURL,
	FieldImageID,
	FieldSha256,
	FieldProfileName,
	FieldProfileVersion,
	FieldInstalledPackages,
	FieldInstalledPackagesURL,
	FieldSecurityFeature,
	FieldOsType,
	FieldOsProvider,
	FieldPlatformBundle,
	FieldDescription,
	FieldMetadata,
	FieldExistingCvesURL,
	FieldExistingCves,
	FieldFixedCvesURL,
	FieldFixedCves,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// SecurityFeature defines the type for the "security_feature" enum field.
type SecurityFeature string

// SecurityFeature values.
const (
	SecurityFeatureSECURITY_FEATURE_UNSPECIFIED                          SecurityFeature = "SECURITY_FEATURE_UNSPECIFIED"
	SecurityFeatureSECURITY_FEATURE_NONE                                 SecurityFeature = "SECURITY_FEATURE_NONE"
	SecurityFeatureSECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION SecurityFeature = "SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION"
)

func (sf SecurityFeature) String() string {
	return string(sf)
}

// SecurityFeatureValidator is a validator for the "security_feature" field enum values. It is called by the builders before save.
func SecurityFeatureValidator(sf SecurityFeature) error {
	switch sf {
	case SecurityFeatureSECURITY_FEATURE_UNSPECIFIED, SecurityFeatureSECURITY_FEATURE_NONE, SecurityFeatureSECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION:
		return nil
	default:
		return fmt.Errorf("operatingsystemresource: invalid enum value for security_feature field: %q", sf)
	}
}

// OsType defines the type for the "os_type" enum field.
type OsType string

// OsType values.
const (
	OsTypeOS_TYPE_UNSPECIFIED OsType = "OS_TYPE_UNSPECIFIED"
	OsTypeOS_TYPE_MUTABLE     OsType = "OS_TYPE_MUTABLE"
	OsTypeOS_TYPE_IMMUTABLE   OsType = "OS_TYPE_IMMUTABLE"
)

func (ot OsType) String() string {
	return string(ot)
}

// OsTypeValidator is a validator for the "os_type" field enum values. It is called by the builders before save.
func OsTypeValidator(ot OsType) error {
	switch ot {
	case OsTypeOS_TYPE_UNSPECIFIED, OsTypeOS_TYPE_MUTABLE, OsTypeOS_TYPE_IMMUTABLE:
		return nil
	default:
		return fmt.Errorf("operatingsystemresource: invalid enum value for os_type field: %q", ot)
	}
}

// OsProvider defines the type for the "os_provider" enum field.
type OsProvider string

// OsProvider values.
const (
	OsProviderOS_PROVIDER_KIND_UNSPECIFIED OsProvider = "OS_PROVIDER_KIND_UNSPECIFIED"
	OsProviderOS_PROVIDER_KIND_INFRA       OsProvider = "OS_PROVIDER_KIND_INFRA"
	OsProviderOS_PROVIDER_KIND_LENOVO      OsProvider = "OS_PROVIDER_KIND_LENOVO"
)

func (op OsProvider) String() string {
	return string(op)
}

// OsProviderValidator is a validator for the "os_provider" field enum values. It is called by the builders before save.
func OsProviderValidator(op OsProvider) error {
	switch op {
	case OsProviderOS_PROVIDER_KIND_UNSPECIFIED, OsProviderOS_PROVIDER_KIND_INFRA, OsProviderOS_PROVIDER_KIND_LENOVO:
		return nil
	default:
		return fmt.Errorf("operatingsystemresource: invalid enum value for os_provider field: %q", op)
	}
}

// OrderOption defines the ordering options for the OperatingSystemResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByArchitecture orders the results by the architecture field.
func ByArchitecture(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArchitecture, opts...).ToFunc()
}

// ByImageURL orders the results by the image_url field.
func ByImageURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageURL, opts...).ToFunc()
}

// ByImageID orders the results by the image_id field.
func ByImageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImageID, opts...).ToFunc()
}

// BySha256 orders the results by the sha256 field.
func BySha256(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSha256, opts...).ToFunc()
}

// ByProfileName orders the results by the profile_name field.
func ByProfileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileName, opts...).ToFunc()
}

// ByProfileVersion orders the results by the profile_version field.
func ByProfileVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProfileVersion, opts...).ToFunc()
}

// ByInstalledPackages orders the results by the installed_packages field.
func ByInstalledPackages(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstalledPackages, opts...).ToFunc()
}

// ByInstalledPackagesURL orders the results by the installed_packages_url field.
func ByInstalledPackagesURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstalledPackagesURL, opts...).ToFunc()
}

// BySecurityFeature orders the results by the security_feature field.
func BySecurityFeature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityFeature, opts...).ToFunc()
}

// ByOsType orders the results by the os_type field.
func ByOsType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsType, opts...).ToFunc()
}

// ByOsProvider orders the results by the os_provider field.
func ByOsProvider(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOsProvider, opts...).ToFunc()
}

// ByPlatformBundle orders the results by the platform_bundle field.
func ByPlatformBundle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlatformBundle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByMetadata orders the results by the metadata field.
func ByMetadata(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMetadata, opts...).ToFunc()
}

// ByExistingCvesURL orders the results by the existing_cves_url field.
func ByExistingCvesURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExistingCvesURL, opts...).ToFunc()
}

// ByExistingCves orders the results by the existing_cves field.
func ByExistingCves(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExistingCves, opts...).ToFunc()
}

// ByFixedCvesURL orders the results by the fixed_cves_url field.
func ByFixedCvesURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedCvesURL, opts...).ToFunc()
}

// ByFixedCves orders the results by the fixed_cves field.
func ByFixedCves(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedCves, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
