// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// CustomConfigResourceUpdate is the builder for updating CustomConfigResource entities.
type CustomConfigResourceUpdate struct {
	config
	hooks    []Hook
	mutation *CustomConfigResourceMutation
}

// Where appends a list predicates to the CustomConfigResourceUpdate builder.
func (_u *CustomConfigResourceUpdate) Where(ps ...predicate.CustomConfigResource) *CustomConfigResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *CustomConfigResourceUpdate) SetResourceID(v string) *CustomConfigResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *CustomConfigResourceUpdate) SetNillableResourceID(v *string) *CustomConfigResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CustomConfigResourceUpdate) SetDescription(v string) *CustomConfigResourceUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CustomConfigResourceUpdate) SetNillableDescription(v *string) *CustomConfigResourceUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CustomConfigResourceUpdate) ClearDescription() *CustomConfigResourceUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomConfigResourceUpdate) SetUpdatedAt(v string) *CustomConfigResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *CustomConfigResourceUpdate) SetNillableUpdatedAt(v *string) *CustomConfigResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// AddInstanceIDs adds the "instances" edge to the InstanceResource entity by IDs.
func (_u *CustomConfigResourceUpdate) AddInstanceIDs(ids ...int) *CustomConfigResourceUpdate {
	_u.mutation.AddInstanceIDs(ids...)
	return _u
}

// AddInstances adds the "instances" edges to the InstanceResource entity.
func (_u *CustomConfigResourceUpdate) AddInstances(v ...*InstanceResource) *CustomConfigResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInstanceIDs(ids...)
}

// Mutation returns the CustomConfigResourceMutation object of the builder.
func (_u *CustomConfigResourceUpdate) Mutation() *CustomConfigResourceMutation {
	return _u.mutation
}

// ClearInstances clears all "instances" edges to the InstanceResource entity.
func (_u *CustomConfigResourceUpdate) ClearInstances() *CustomConfigResourceUpdate {
	_u.mutation.ClearInstances()
	return _u
}

// RemoveInstanceIDs removes the "instances" edge to InstanceResource entities by IDs.
func (_u *CustomConfigResourceUpdate) RemoveInstanceIDs(ids ...int) *CustomConfigResourceUpdate {
	_u.mutation.RemoveInstanceIDs(ids...)
	return _u
}

// RemoveInstances removes "instances" edges to InstanceResource entities.
func (_u *CustomConfigResourceUpdate) RemoveInstances(v ...*InstanceResource) *CustomConfigResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInstanceIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *CustomConfigResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomConfigResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *CustomConfigResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomConfigResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CustomConfigResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customconfigresource.Table, customconfigresource.Columns, sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(customconfigresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(customconfigresource.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(customconfigresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customconfigresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customconfigresource.InstancesTable,
			Columns: customconfigresource.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !_u.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customconfigresource.InstancesTable,
			Columns: customconfigresource.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customconfigresource.InstancesTable,
			Columns: customconfigresource.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customconfigresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// CustomConfigResourceUpdateOne is the builder for updating a single CustomConfigResource entity.
type CustomConfigResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomConfigResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *CustomConfigResourceUpdateOne) SetResourceID(v string) *CustomConfigResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *CustomConfigResourceUpdateOne) SetNillableResourceID(v *string) *CustomConfigResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *CustomConfigResourceUpdateOne) SetDescription(v string) *CustomConfigResourceUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *CustomConfigResourceUpdateOne) SetNillableDescription(v *string) *CustomConfigResourceUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *CustomConfigResourceUpdateOne) ClearDescription() *CustomConfigResourceUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *CustomConfigResourceUpdateOne) SetUpdatedAt(v string) *CustomConfigResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *CustomConfigResourceUpdateOne) SetNillableUpdatedAt(v *string) *CustomConfigResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// AddInstanceIDs adds the "instances" edge to the InstanceResource entity by IDs.
func (_u *CustomConfigResourceUpdateOne) AddInstanceIDs(ids ...int) *CustomConfigResourceUpdateOne {
	_u.mutation.AddInstanceIDs(ids...)
	return _u
}

// AddInstances adds the "instances" edges to the InstanceResource entity.
func (_u *CustomConfigResourceUpdateOne) AddInstances(v ...*InstanceResource) *CustomConfigResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddInstanceIDs(ids...)
}

// Mutation returns the CustomConfigResourceMutation object of the builder.
func (_u *CustomConfigResourceUpdateOne) Mutation() *CustomConfigResourceMutation {
	return _u.mutation
}

// ClearInstances clears all "instances" edges to the InstanceResource entity.
func (_u *CustomConfigResourceUpdateOne) ClearInstances() *CustomConfigResourceUpdateOne {
	_u.mutation.ClearInstances()
	return _u
}

// RemoveInstanceIDs removes the "instances" edge to InstanceResource entities by IDs.
func (_u *CustomConfigResourceUpdateOne) RemoveInstanceIDs(ids ...int) *CustomConfigResourceUpdateOne {
	_u.mutation.RemoveInstanceIDs(ids...)
	return _u
}

// RemoveInstances removes "instances" edges to InstanceResource entities.
func (_u *CustomConfigResourceUpdateOne) RemoveInstances(v ...*InstanceResource) *CustomConfigResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveInstanceIDs(ids...)
}

// Where appends a list predicates to the CustomConfigResourceUpdate builder.
func (_u *CustomConfigResourceUpdateOne) Where(ps ...predicate.CustomConfigResource) *CustomConfigResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *CustomConfigResourceUpdateOne) Select(field string, fields ...string) *CustomConfigResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated CustomConfigResource entity.
func (_u *CustomConfigResourceUpdateOne) Save(ctx context.Context) (*CustomConfigResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *CustomConfigResourceUpdateOne) SaveX(ctx context.Context) *CustomConfigResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *CustomConfigResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *CustomConfigResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *CustomConfigResourceUpdateOne) sqlSave(ctx context.Context) (_node *CustomConfigResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(customconfigresource.Table, customconfigresource.Columns, sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomConfigResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customconfigresource.FieldID)
		for _, f := range fields {
			if !customconfigresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customconfigresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(customconfigresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(customconfigresource.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(customconfigresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(customconfigresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customconfigresource.InstancesTable,
			Columns: customconfigresource.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedInstancesIDs(); len(nodes) > 0 && !_u.mutation.InstancesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customconfigresource.InstancesTable,
			Columns: customconfigresource.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstancesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   customconfigresource.InstancesTable,
			Columns: customconfigresource.InstancesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CustomConfigResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customconfigresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
