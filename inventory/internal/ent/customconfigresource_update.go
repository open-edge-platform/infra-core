// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// CustomConfigResourceUpdate is the builder for updating CustomConfigResource entities.
type CustomConfigResourceUpdate struct {
	config
	hooks    []Hook
	mutation *CustomConfigResourceMutation
}

// Where appends a list predicates to the CustomConfigResourceUpdate builder.
func (ccru *CustomConfigResourceUpdate) Where(ps ...predicate.CustomConfigResource) *CustomConfigResourceUpdate {
	ccru.mutation.Where(ps...)
	return ccru
}

// SetResourceID sets the "resource_id" field.
func (ccru *CustomConfigResourceUpdate) SetResourceID(s string) *CustomConfigResourceUpdate {
	ccru.mutation.SetResourceID(s)
	return ccru
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (ccru *CustomConfigResourceUpdate) SetNillableResourceID(s *string) *CustomConfigResourceUpdate {
	if s != nil {
		ccru.SetResourceID(*s)
	}
	return ccru
}

// SetConfigDescription sets the "config_description" field.
func (ccru *CustomConfigResourceUpdate) SetConfigDescription(s string) *CustomConfigResourceUpdate {
	ccru.mutation.SetConfigDescription(s)
	return ccru
}

// SetNillableConfigDescription sets the "config_description" field if the given value is not nil.
func (ccru *CustomConfigResourceUpdate) SetNillableConfigDescription(s *string) *CustomConfigResourceUpdate {
	if s != nil {
		ccru.SetConfigDescription(*s)
	}
	return ccru
}

// ClearConfigDescription clears the value of the "config_description" field.
func (ccru *CustomConfigResourceUpdate) ClearConfigDescription() *CustomConfigResourceUpdate {
	ccru.mutation.ClearConfigDescription()
	return ccru
}

// SetUpdatedAt sets the "updated_at" field.
func (ccru *CustomConfigResourceUpdate) SetUpdatedAt(s string) *CustomConfigResourceUpdate {
	ccru.mutation.SetUpdatedAt(s)
	return ccru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccru *CustomConfigResourceUpdate) SetNillableUpdatedAt(s *string) *CustomConfigResourceUpdate {
	if s != nil {
		ccru.SetUpdatedAt(*s)
	}
	return ccru
}

// Mutation returns the CustomConfigResourceMutation object of the builder.
func (ccru *CustomConfigResourceUpdate) Mutation() *CustomConfigResourceMutation {
	return ccru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ccru *CustomConfigResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ccru.sqlSave, ccru.mutation, ccru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccru *CustomConfigResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := ccru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ccru *CustomConfigResourceUpdate) Exec(ctx context.Context) error {
	_, err := ccru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccru *CustomConfigResourceUpdate) ExecX(ctx context.Context) {
	if err := ccru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccru *CustomConfigResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(customconfigresource.Table, customconfigresource.Columns, sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt))
	if ps := ccru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccru.mutation.ResourceID(); ok {
		_spec.SetField(customconfigresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := ccru.mutation.ConfigDescription(); ok {
		_spec.SetField(customconfigresource.FieldConfigDescription, field.TypeString, value)
	}
	if ccru.mutation.ConfigDescriptionCleared() {
		_spec.ClearField(customconfigresource.FieldConfigDescription, field.TypeString)
	}
	if value, ok := ccru.mutation.UpdatedAt(); ok {
		_spec.SetField(customconfigresource.FieldUpdatedAt, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ccru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customconfigresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ccru.mutation.done = true
	return n, nil
}

// CustomConfigResourceUpdateOne is the builder for updating a single CustomConfigResource entity.
type CustomConfigResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CustomConfigResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (ccruo *CustomConfigResourceUpdateOne) SetResourceID(s string) *CustomConfigResourceUpdateOne {
	ccruo.mutation.SetResourceID(s)
	return ccruo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (ccruo *CustomConfigResourceUpdateOne) SetNillableResourceID(s *string) *CustomConfigResourceUpdateOne {
	if s != nil {
		ccruo.SetResourceID(*s)
	}
	return ccruo
}

// SetConfigDescription sets the "config_description" field.
func (ccruo *CustomConfigResourceUpdateOne) SetConfigDescription(s string) *CustomConfigResourceUpdateOne {
	ccruo.mutation.SetConfigDescription(s)
	return ccruo
}

// SetNillableConfigDescription sets the "config_description" field if the given value is not nil.
func (ccruo *CustomConfigResourceUpdateOne) SetNillableConfigDescription(s *string) *CustomConfigResourceUpdateOne {
	if s != nil {
		ccruo.SetConfigDescription(*s)
	}
	return ccruo
}

// ClearConfigDescription clears the value of the "config_description" field.
func (ccruo *CustomConfigResourceUpdateOne) ClearConfigDescription() *CustomConfigResourceUpdateOne {
	ccruo.mutation.ClearConfigDescription()
	return ccruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ccruo *CustomConfigResourceUpdateOne) SetUpdatedAt(s string) *CustomConfigResourceUpdateOne {
	ccruo.mutation.SetUpdatedAt(s)
	return ccruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ccruo *CustomConfigResourceUpdateOne) SetNillableUpdatedAt(s *string) *CustomConfigResourceUpdateOne {
	if s != nil {
		ccruo.SetUpdatedAt(*s)
	}
	return ccruo
}

// Mutation returns the CustomConfigResourceMutation object of the builder.
func (ccruo *CustomConfigResourceUpdateOne) Mutation() *CustomConfigResourceMutation {
	return ccruo.mutation
}

// Where appends a list predicates to the CustomConfigResourceUpdate builder.
func (ccruo *CustomConfigResourceUpdateOne) Where(ps ...predicate.CustomConfigResource) *CustomConfigResourceUpdateOne {
	ccruo.mutation.Where(ps...)
	return ccruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ccruo *CustomConfigResourceUpdateOne) Select(field string, fields ...string) *CustomConfigResourceUpdateOne {
	ccruo.fields = append([]string{field}, fields...)
	return ccruo
}

// Save executes the query and returns the updated CustomConfigResource entity.
func (ccruo *CustomConfigResourceUpdateOne) Save(ctx context.Context) (*CustomConfigResource, error) {
	return withHooks(ctx, ccruo.sqlSave, ccruo.mutation, ccruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ccruo *CustomConfigResourceUpdateOne) SaveX(ctx context.Context) *CustomConfigResource {
	node, err := ccruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ccruo *CustomConfigResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := ccruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccruo *CustomConfigResourceUpdateOne) ExecX(ctx context.Context) {
	if err := ccruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ccruo *CustomConfigResourceUpdateOne) sqlSave(ctx context.Context) (_node *CustomConfigResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(customconfigresource.Table, customconfigresource.Columns, sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt))
	id, ok := ccruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CustomConfigResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ccruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, customconfigresource.FieldID)
		for _, f := range fields {
			if !customconfigresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != customconfigresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ccruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ccruo.mutation.ResourceID(); ok {
		_spec.SetField(customconfigresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := ccruo.mutation.ConfigDescription(); ok {
		_spec.SetField(customconfigresource.FieldConfigDescription, field.TypeString, value)
	}
	if ccruo.mutation.ConfigDescriptionCleared() {
		_spec.ClearField(customconfigresource.FieldConfigDescription, field.TypeString)
	}
	if value, ok := ccruo.mutation.UpdatedAt(); ok {
		_spec.SetField(customconfigresource.FieldUpdatedAt, field.TypeString, value)
	}
	_node = &CustomConfigResource{config: ccruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ccruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{customconfigresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ccruo.mutation.done = true
	return _node, nil
}
