// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ouresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OuResourceUpdate is the builder for updating OuResource entities.
type OuResourceUpdate struct {
	config
	hooks    []Hook
	mutation *OuResourceMutation
}

// Where appends a list predicates to the OuResourceUpdate builder.
func (_u *OuResourceUpdate) Where(ps ...predicate.OuResource) *OuResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *OuResourceUpdate) SetResourceID(v string) *OuResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OuResourceUpdate) SetNillableResourceID(v *string) *OuResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *OuResourceUpdate) SetName(v string) *OuResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OuResourceUpdate) SetNillableName(v *string) *OuResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OuResourceUpdate) ClearName() *OuResourceUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetOuKind sets the "ou_kind" field.
func (_u *OuResourceUpdate) SetOuKind(v string) *OuResourceUpdate {
	_u.mutation.SetOuKind(v)
	return _u
}

// SetNillableOuKind sets the "ou_kind" field if the given value is not nil.
func (_u *OuResourceUpdate) SetNillableOuKind(v *string) *OuResourceUpdate {
	if v != nil {
		_u.SetOuKind(*v)
	}
	return _u
}

// ClearOuKind clears the value of the "ou_kind" field.
func (_u *OuResourceUpdate) ClearOuKind() *OuResourceUpdate {
	_u.mutation.ClearOuKind()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *OuResourceUpdate) SetMetadata(v string) *OuResourceUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *OuResourceUpdate) SetNillableMetadata(v *string) *OuResourceUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *OuResourceUpdate) ClearMetadata() *OuResourceUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OuResourceUpdate) SetUpdatedAt(v string) *OuResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OuResourceUpdate) SetNillableUpdatedAt(v *string) *OuResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetParentOuID sets the "parent_ou" edge to the OuResource entity by ID.
func (_u *OuResourceUpdate) SetParentOuID(id int) *OuResourceUpdate {
	_u.mutation.SetParentOuID(id)
	return _u
}

// SetNillableParentOuID sets the "parent_ou" edge to the OuResource entity by ID if the given value is not nil.
func (_u *OuResourceUpdate) SetNillableParentOuID(id *int) *OuResourceUpdate {
	if id != nil {
		_u = _u.SetParentOuID(*id)
	}
	return _u
}

// SetParentOu sets the "parent_ou" edge to the OuResource entity.
func (_u *OuResourceUpdate) SetParentOu(v *OuResource) *OuResourceUpdate {
	return _u.SetParentOuID(v.ID)
}

// AddChildIDs adds the "children" edge to the OuResource entity by IDs.
func (_u *OuResourceUpdate) AddChildIDs(ids ...int) *OuResourceUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the OuResource entity.
func (_u *OuResourceUpdate) AddChildren(v ...*OuResource) *OuResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the OuResourceMutation object of the builder.
func (_u *OuResourceUpdate) Mutation() *OuResourceMutation {
	return _u.mutation
}

// ClearParentOu clears the "parent_ou" edge to the OuResource entity.
func (_u *OuResourceUpdate) ClearParentOu() *OuResourceUpdate {
	_u.mutation.ClearParentOu()
	return _u
}

// ClearChildren clears all "children" edges to the OuResource entity.
func (_u *OuResourceUpdate) ClearChildren() *OuResourceUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to OuResource entities by IDs.
func (_u *OuResourceUpdate) RemoveChildIDs(ids ...int) *OuResourceUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to OuResource entities.
func (_u *OuResourceUpdate) RemoveChildren(v ...*OuResource) *OuResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OuResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OuResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OuResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OuResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *OuResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(ouresource.Table, ouresource.Columns, sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(ouresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(ouresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(ouresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.OuKind(); ok {
		_spec.SetField(ouresource.FieldOuKind, field.TypeString, value)
	}
	if _u.mutation.OuKindCleared() {
		_spec.ClearField(ouresource.FieldOuKind, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(ouresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(ouresource.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ouresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.ParentOuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentOuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ouresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OuResourceUpdateOne is the builder for updating a single OuResource entity.
type OuResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OuResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *OuResourceUpdateOne) SetResourceID(v string) *OuResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OuResourceUpdateOne) SetNillableResourceID(v *string) *OuResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *OuResourceUpdateOne) SetName(v string) *OuResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OuResourceUpdateOne) SetNillableName(v *string) *OuResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *OuResourceUpdateOne) ClearName() *OuResourceUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetOuKind sets the "ou_kind" field.
func (_u *OuResourceUpdateOne) SetOuKind(v string) *OuResourceUpdateOne {
	_u.mutation.SetOuKind(v)
	return _u
}

// SetNillableOuKind sets the "ou_kind" field if the given value is not nil.
func (_u *OuResourceUpdateOne) SetNillableOuKind(v *string) *OuResourceUpdateOne {
	if v != nil {
		_u.SetOuKind(*v)
	}
	return _u
}

// ClearOuKind clears the value of the "ou_kind" field.
func (_u *OuResourceUpdateOne) ClearOuKind() *OuResourceUpdateOne {
	_u.mutation.ClearOuKind()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *OuResourceUpdateOne) SetMetadata(v string) *OuResourceUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *OuResourceUpdateOne) SetNillableMetadata(v *string) *OuResourceUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *OuResourceUpdateOne) ClearMetadata() *OuResourceUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OuResourceUpdateOne) SetUpdatedAt(v string) *OuResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OuResourceUpdateOne) SetNillableUpdatedAt(v *string) *OuResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetParentOuID sets the "parent_ou" edge to the OuResource entity by ID.
func (_u *OuResourceUpdateOne) SetParentOuID(id int) *OuResourceUpdateOne {
	_u.mutation.SetParentOuID(id)
	return _u
}

// SetNillableParentOuID sets the "parent_ou" edge to the OuResource entity by ID if the given value is not nil.
func (_u *OuResourceUpdateOne) SetNillableParentOuID(id *int) *OuResourceUpdateOne {
	if id != nil {
		_u = _u.SetParentOuID(*id)
	}
	return _u
}

// SetParentOu sets the "parent_ou" edge to the OuResource entity.
func (_u *OuResourceUpdateOne) SetParentOu(v *OuResource) *OuResourceUpdateOne {
	return _u.SetParentOuID(v.ID)
}

// AddChildIDs adds the "children" edge to the OuResource entity by IDs.
func (_u *OuResourceUpdateOne) AddChildIDs(ids ...int) *OuResourceUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the OuResource entity.
func (_u *OuResourceUpdateOne) AddChildren(v ...*OuResource) *OuResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the OuResourceMutation object of the builder.
func (_u *OuResourceUpdateOne) Mutation() *OuResourceMutation {
	return _u.mutation
}

// ClearParentOu clears the "parent_ou" edge to the OuResource entity.
func (_u *OuResourceUpdateOne) ClearParentOu() *OuResourceUpdateOne {
	_u.mutation.ClearParentOu()
	return _u
}

// ClearChildren clears all "children" edges to the OuResource entity.
func (_u *OuResourceUpdateOne) ClearChildren() *OuResourceUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to OuResource entities by IDs.
func (_u *OuResourceUpdateOne) RemoveChildIDs(ids ...int) *OuResourceUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to OuResource entities.
func (_u *OuResourceUpdateOne) RemoveChildren(v ...*OuResource) *OuResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the OuResourceUpdate builder.
func (_u *OuResourceUpdateOne) Where(ps ...predicate.OuResource) *OuResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OuResourceUpdateOne) Select(field string, fields ...string) *OuResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OuResource entity.
func (_u *OuResourceUpdateOne) Save(ctx context.Context) (*OuResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OuResourceUpdateOne) SaveX(ctx context.Context) *OuResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OuResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OuResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *OuResourceUpdateOne) sqlSave(ctx context.Context) (_node *OuResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(ouresource.Table, ouresource.Columns, sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OuResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ouresource.FieldID)
		for _, f := range fields {
			if !ouresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ouresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(ouresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(ouresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(ouresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.OuKind(); ok {
		_spec.SetField(ouresource.FieldOuKind, field.TypeString, value)
	}
	if _u.mutation.OuKindCleared() {
		_spec.ClearField(ouresource.FieldOuKind, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(ouresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(ouresource.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ouresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.ParentOuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentOuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ouresource.ParentOuTable,
			Columns: []string{ouresource.ParentOuColumn},
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   ouresource.ChildrenTable,
			Columns: []string{ouresource.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ouresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OuResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ouresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
