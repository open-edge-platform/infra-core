// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicy"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdatePolicyQuery is the builder for querying OSUpdatePolicy entities.
type OSUpdatePolicyQuery struct {
	config
	ctx          *QueryContext
	order        []osupdatepolicy.OrderOption
	inters       []Interceptor
	predicates   []predicate.OSUpdatePolicy
	withTargetOs *OperatingSystemResourceQuery
	withFKs      bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OSUpdatePolicyQuery builder.
func (oupq *OSUpdatePolicyQuery) Where(ps ...predicate.OSUpdatePolicy) *OSUpdatePolicyQuery {
	oupq.predicates = append(oupq.predicates, ps...)
	return oupq
}

// Limit the number of records to be returned by this query.
func (oupq *OSUpdatePolicyQuery) Limit(limit int) *OSUpdatePolicyQuery {
	oupq.ctx.Limit = &limit
	return oupq
}

// Offset to start from.
func (oupq *OSUpdatePolicyQuery) Offset(offset int) *OSUpdatePolicyQuery {
	oupq.ctx.Offset = &offset
	return oupq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oupq *OSUpdatePolicyQuery) Unique(unique bool) *OSUpdatePolicyQuery {
	oupq.ctx.Unique = &unique
	return oupq
}

// Order specifies how the records should be ordered.
func (oupq *OSUpdatePolicyQuery) Order(o ...osupdatepolicy.OrderOption) *OSUpdatePolicyQuery {
	oupq.order = append(oupq.order, o...)
	return oupq
}

// QueryTargetOs chains the current query on the "target_os" edge.
func (oupq *OSUpdatePolicyQuery) QueryTargetOs() *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: oupq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oupq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oupq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdatepolicy.Table, osupdatepolicy.FieldID, selector),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdatepolicy.TargetOsTable, osupdatepolicy.TargetOsColumn),
		)
		fromU = sqlgraph.SetNeighbors(oupq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OSUpdatePolicy entity from the query.
// Returns a *NotFoundError when no OSUpdatePolicy was found.
func (oupq *OSUpdatePolicyQuery) First(ctx context.Context) (*OSUpdatePolicy, error) {
	nodes, err := oupq.Limit(1).All(setContextOp(ctx, oupq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{osupdatepolicy.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) FirstX(ctx context.Context) *OSUpdatePolicy {
	node, err := oupq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OSUpdatePolicy ID from the query.
// Returns a *NotFoundError when no OSUpdatePolicy ID was found.
func (oupq *OSUpdatePolicyQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oupq.Limit(1).IDs(setContextOp(ctx, oupq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{osupdatepolicy.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) FirstIDX(ctx context.Context) int {
	id, err := oupq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OSUpdatePolicy entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OSUpdatePolicy entity is found.
// Returns a *NotFoundError when no OSUpdatePolicy entities are found.
func (oupq *OSUpdatePolicyQuery) Only(ctx context.Context) (*OSUpdatePolicy, error) {
	nodes, err := oupq.Limit(2).All(setContextOp(ctx, oupq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{osupdatepolicy.Label}
	default:
		return nil, &NotSingularError{osupdatepolicy.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) OnlyX(ctx context.Context) *OSUpdatePolicy {
	node, err := oupq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OSUpdatePolicy ID in the query.
// Returns a *NotSingularError when more than one OSUpdatePolicy ID is found.
// Returns a *NotFoundError when no entities are found.
func (oupq *OSUpdatePolicyQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = oupq.Limit(2).IDs(setContextOp(ctx, oupq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{osupdatepolicy.Label}
	default:
		err = &NotSingularError{osupdatepolicy.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) OnlyIDX(ctx context.Context) int {
	id, err := oupq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OSUpdatePolicies.
func (oupq *OSUpdatePolicyQuery) All(ctx context.Context) ([]*OSUpdatePolicy, error) {
	ctx = setContextOp(ctx, oupq.ctx, ent.OpQueryAll)
	if err := oupq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OSUpdatePolicy, *OSUpdatePolicyQuery]()
	return withInterceptors[[]*OSUpdatePolicy](ctx, oupq, qr, oupq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) AllX(ctx context.Context) []*OSUpdatePolicy {
	nodes, err := oupq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OSUpdatePolicy IDs.
func (oupq *OSUpdatePolicyQuery) IDs(ctx context.Context) (ids []int, err error) {
	if oupq.ctx.Unique == nil && oupq.path != nil {
		oupq.Unique(true)
	}
	ctx = setContextOp(ctx, oupq.ctx, ent.OpQueryIDs)
	if err = oupq.Select(osupdatepolicy.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) IDsX(ctx context.Context) []int {
	ids, err := oupq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oupq *OSUpdatePolicyQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oupq.ctx, ent.OpQueryCount)
	if err := oupq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oupq, querierCount[*OSUpdatePolicyQuery](), oupq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) CountX(ctx context.Context) int {
	count, err := oupq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oupq *OSUpdatePolicyQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oupq.ctx, ent.OpQueryExist)
	switch _, err := oupq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oupq *OSUpdatePolicyQuery) ExistX(ctx context.Context) bool {
	exist, err := oupq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OSUpdatePolicyQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oupq *OSUpdatePolicyQuery) Clone() *OSUpdatePolicyQuery {
	if oupq == nil {
		return nil
	}
	return &OSUpdatePolicyQuery{
		config:       oupq.config,
		ctx:          oupq.ctx.Clone(),
		order:        append([]osupdatepolicy.OrderOption{}, oupq.order...),
		inters:       append([]Interceptor{}, oupq.inters...),
		predicates:   append([]predicate.OSUpdatePolicy{}, oupq.predicates...),
		withTargetOs: oupq.withTargetOs.Clone(),
		// clone intermediate query.
		sql:  oupq.sql.Clone(),
		path: oupq.path,
	}
}

// WithTargetOs tells the query-builder to eager-load the nodes that are connected to
// the "target_os" edge. The optional arguments are used to configure the query builder of the edge.
func (oupq *OSUpdatePolicyQuery) WithTargetOs(opts ...func(*OperatingSystemResourceQuery)) *OSUpdatePolicyQuery {
	query := (&OperatingSystemResourceClient{config: oupq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oupq.withTargetOs = query
	return oupq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OSUpdatePolicy.Query().
//		GroupBy(osupdatepolicy.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (oupq *OSUpdatePolicyQuery) GroupBy(field string, fields ...string) *OSUpdatePolicyGroupBy {
	oupq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OSUpdatePolicyGroupBy{build: oupq}
	grbuild.flds = &oupq.ctx.Fields
	grbuild.label = osupdatepolicy.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.OSUpdatePolicy.Query().
//		Select(osupdatepolicy.FieldResourceID).
//		Scan(ctx, &v)
func (oupq *OSUpdatePolicyQuery) Select(fields ...string) *OSUpdatePolicySelect {
	oupq.ctx.Fields = append(oupq.ctx.Fields, fields...)
	sbuild := &OSUpdatePolicySelect{OSUpdatePolicyQuery: oupq}
	sbuild.label = osupdatepolicy.Label
	sbuild.flds, sbuild.scan = &oupq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OSUpdatePolicySelect configured with the given aggregations.
func (oupq *OSUpdatePolicyQuery) Aggregate(fns ...AggregateFunc) *OSUpdatePolicySelect {
	return oupq.Select().Aggregate(fns...)
}

func (oupq *OSUpdatePolicyQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oupq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oupq); err != nil {
				return err
			}
		}
	}
	for _, f := range oupq.ctx.Fields {
		if !osupdatepolicy.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if oupq.path != nil {
		prev, err := oupq.path(ctx)
		if err != nil {
			return err
		}
		oupq.sql = prev
	}
	return nil
}

func (oupq *OSUpdatePolicyQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OSUpdatePolicy, error) {
	var (
		nodes       = []*OSUpdatePolicy{}
		withFKs     = oupq.withFKs
		_spec       = oupq.querySpec()
		loadedTypes = [1]bool{
			oupq.withTargetOs != nil,
		}
	)
	if oupq.withTargetOs != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, osupdatepolicy.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OSUpdatePolicy).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OSUpdatePolicy{config: oupq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oupq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oupq.withTargetOs; query != nil {
		if err := oupq.loadTargetOs(ctx, query, nodes, nil,
			func(n *OSUpdatePolicy, e *OperatingSystemResource) { n.Edges.TargetOs = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oupq *OSUpdatePolicyQuery) loadTargetOs(ctx context.Context, query *OperatingSystemResourceQuery, nodes []*OSUpdatePolicy, init func(*OSUpdatePolicy), assign func(*OSUpdatePolicy, *OperatingSystemResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OSUpdatePolicy)
	for i := range nodes {
		if nodes[i].os_update_policy_target_os == nil {
			continue
		}
		fk := *nodes[i].os_update_policy_target_os
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operatingsystemresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "os_update_policy_target_os" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (oupq *OSUpdatePolicyQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oupq.querySpec()
	_spec.Node.Columns = oupq.ctx.Fields
	if len(oupq.ctx.Fields) > 0 {
		_spec.Unique = oupq.ctx.Unique != nil && *oupq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oupq.driver, _spec)
}

func (oupq *OSUpdatePolicyQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(osupdatepolicy.Table, osupdatepolicy.Columns, sqlgraph.NewFieldSpec(osupdatepolicy.FieldID, field.TypeInt))
	_spec.From = oupq.sql
	if unique := oupq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oupq.path != nil {
		_spec.Unique = true
	}
	if fields := oupq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osupdatepolicy.FieldID)
		for i := range fields {
			if fields[i] != osupdatepolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := oupq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oupq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oupq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oupq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oupq *OSUpdatePolicyQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oupq.driver.Dialect())
	t1 := builder.Table(osupdatepolicy.Table)
	columns := oupq.ctx.Fields
	if len(columns) == 0 {
		columns = osupdatepolicy.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oupq.sql != nil {
		selector = oupq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oupq.ctx.Unique != nil && *oupq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range oupq.predicates {
		p(selector)
	}
	for _, p := range oupq.order {
		p(selector)
	}
	if offset := oupq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oupq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OSUpdatePolicyGroupBy is the group-by builder for OSUpdatePolicy entities.
type OSUpdatePolicyGroupBy struct {
	selector
	build *OSUpdatePolicyQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (oupgb *OSUpdatePolicyGroupBy) Aggregate(fns ...AggregateFunc) *OSUpdatePolicyGroupBy {
	oupgb.fns = append(oupgb.fns, fns...)
	return oupgb
}

// Scan applies the selector query and scans the result into the given value.
func (oupgb *OSUpdatePolicyGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oupgb.build.ctx, ent.OpQueryGroupBy)
	if err := oupgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OSUpdatePolicyQuery, *OSUpdatePolicyGroupBy](ctx, oupgb.build, oupgb, oupgb.build.inters, v)
}

func (oupgb *OSUpdatePolicyGroupBy) sqlScan(ctx context.Context, root *OSUpdatePolicyQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(oupgb.fns))
	for _, fn := range oupgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*oupgb.flds)+len(oupgb.fns))
		for _, f := range *oupgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*oupgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oupgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OSUpdatePolicySelect is the builder for selecting fields of OSUpdatePolicy entities.
type OSUpdatePolicySelect struct {
	*OSUpdatePolicyQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (oups *OSUpdatePolicySelect) Aggregate(fns ...AggregateFunc) *OSUpdatePolicySelect {
	oups.fns = append(oups.fns, fns...)
	return oups
}

// Scan applies the selector query and scans the result into the given value.
func (oups *OSUpdatePolicySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, oups.ctx, ent.OpQuerySelect)
	if err := oups.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OSUpdatePolicyQuery, *OSUpdatePolicySelect](ctx, oups.OSUpdatePolicyQuery, oups, oups.inters, v)
}

func (oups *OSUpdatePolicySelect) sqlScan(ctx context.Context, root *OSUpdatePolicyQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(oups.fns))
	for _, fn := range oups.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*oups.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := oups.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
