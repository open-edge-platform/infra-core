// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
)

// InstanceResourceQuery is the builder for querying InstanceResource entities.
type InstanceResourceQuery struct {
	config
	ctx                 *QueryContext
	order               []instanceresource.OrderOption
	inters              []Interceptor
	predicates          []predicate.InstanceResource
	withHost            *HostResourceQuery
	withOs              *OperatingSystemResourceQuery
	withWorkloadMembers *WorkloadMemberQuery
	withProvider        *ProviderResourceQuery
	withLocalaccount    *LocalAccountResourceQuery
	withOsUpdatePolicy  *OSUpdatePolicyResourceQuery
	withCustomConfig    *CustomConfigResourceQuery
	withFKs             bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the InstanceResourceQuery builder.
func (_q *InstanceResourceQuery) Where(ps ...predicate.InstanceResource) *InstanceResourceQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *InstanceResourceQuery) Limit(limit int) *InstanceResourceQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *InstanceResourceQuery) Offset(offset int) *InstanceResourceQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *InstanceResourceQuery) Unique(unique bool) *InstanceResourceQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *InstanceResourceQuery) Order(o ...instanceresource.OrderOption) *InstanceResourceQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QueryHost chains the current query on the "host" edge.
func (_q *InstanceResourceQuery) QueryHost() *HostResourceQuery {
	query := (&HostResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, instanceresource.HostTable, instanceresource.HostColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOs chains the current query on the "os" edge.
func (_q *InstanceResourceQuery) QueryOs() *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.OsTable, instanceresource.OsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkloadMembers chains the current query on the "workload_members" edge.
func (_q *InstanceResourceQuery) QueryWorkloadMembers() *WorkloadMemberQuery {
	query := (&WorkloadMemberClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(workloadmember.Table, workloadmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, instanceresource.WorkloadMembersTable, instanceresource.WorkloadMembersColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvider chains the current query on the "provider" edge.
func (_q *InstanceResourceQuery) QueryProvider() *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.ProviderTable, instanceresource.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLocalaccount chains the current query on the "localaccount" edge.
func (_q *InstanceResourceQuery) QueryLocalaccount() *LocalAccountResourceQuery {
	query := (&LocalAccountResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(localaccountresource.Table, localaccountresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.LocalaccountTable, instanceresource.LocalaccountColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOsUpdatePolicy chains the current query on the "os_update_policy" edge.
func (_q *InstanceResourceQuery) QueryOsUpdatePolicy() *OSUpdatePolicyResourceQuery {
	query := (&OSUpdatePolicyResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(osupdatepolicyresource.Table, osupdatepolicyresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.OsUpdatePolicyTable, instanceresource.OsUpdatePolicyColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryCustomConfig chains the current query on the "custom_config" edge.
func (_q *InstanceResourceQuery) QueryCustomConfig() *CustomConfigResourceQuery {
	query := (&CustomConfigResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, selector),
			sqlgraph.To(customconfigresource.Table, customconfigresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, instanceresource.CustomConfigTable, instanceresource.CustomConfigPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first InstanceResource entity from the query.
// Returns a *NotFoundError when no InstanceResource was found.
func (_q *InstanceResourceQuery) First(ctx context.Context) (*InstanceResource, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{instanceresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *InstanceResourceQuery) FirstX(ctx context.Context) *InstanceResource {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first InstanceResource ID from the query.
// Returns a *NotFoundError when no InstanceResource ID was found.
func (_q *InstanceResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{instanceresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *InstanceResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single InstanceResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one InstanceResource entity is found.
// Returns a *NotFoundError when no InstanceResource entities are found.
func (_q *InstanceResourceQuery) Only(ctx context.Context) (*InstanceResource, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{instanceresource.Label}
	default:
		return nil, &NotSingularError{instanceresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *InstanceResourceQuery) OnlyX(ctx context.Context) *InstanceResource {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only InstanceResource ID in the query.
// Returns a *NotSingularError when more than one InstanceResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *InstanceResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{instanceresource.Label}
	default:
		err = &NotSingularError{instanceresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *InstanceResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of InstanceResources.
func (_q *InstanceResourceQuery) All(ctx context.Context) ([]*InstanceResource, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*InstanceResource, *InstanceResourceQuery]()
	return withInterceptors[[]*InstanceResource](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *InstanceResourceQuery) AllX(ctx context.Context) []*InstanceResource {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of InstanceResource IDs.
func (_q *InstanceResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(instanceresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *InstanceResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *InstanceResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*InstanceResourceQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *InstanceResourceQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *InstanceResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *InstanceResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the InstanceResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *InstanceResourceQuery) Clone() *InstanceResourceQuery {
	if _q == nil {
		return nil
	}
	return &InstanceResourceQuery{
		config:              _q.config,
		ctx:                 _q.ctx.Clone(),
		order:               append([]instanceresource.OrderOption{}, _q.order...),
		inters:              append([]Interceptor{}, _q.inters...),
		predicates:          append([]predicate.InstanceResource{}, _q.predicates...),
		withHost:            _q.withHost.Clone(),
		withOs:              _q.withOs.Clone(),
		withWorkloadMembers: _q.withWorkloadMembers.Clone(),
		withProvider:        _q.withProvider.Clone(),
		withLocalaccount:    _q.withLocalaccount.Clone(),
		withOsUpdatePolicy:  _q.withOsUpdatePolicy.Clone(),
		withCustomConfig:    _q.withCustomConfig.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithHost tells the query-builder to eager-load the nodes that are connected to
// the "host" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithHost(opts ...func(*HostResourceQuery)) *InstanceResourceQuery {
	query := (&HostResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withHost = query
	return _q
}

// WithOs tells the query-builder to eager-load the nodes that are connected to
// the "os" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithOs(opts ...func(*OperatingSystemResourceQuery)) *InstanceResourceQuery {
	query := (&OperatingSystemResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOs = query
	return _q
}

// WithWorkloadMembers tells the query-builder to eager-load the nodes that are connected to
// the "workload_members" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithWorkloadMembers(opts ...func(*WorkloadMemberQuery)) *InstanceResourceQuery {
	query := (&WorkloadMemberClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withWorkloadMembers = query
	return _q
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithProvider(opts ...func(*ProviderResourceQuery)) *InstanceResourceQuery {
	query := (&ProviderResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProvider = query
	return _q
}

// WithLocalaccount tells the query-builder to eager-load the nodes that are connected to
// the "localaccount" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithLocalaccount(opts ...func(*LocalAccountResourceQuery)) *InstanceResourceQuery {
	query := (&LocalAccountResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withLocalaccount = query
	return _q
}

// WithOsUpdatePolicy tells the query-builder to eager-load the nodes that are connected to
// the "os_update_policy" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithOsUpdatePolicy(opts ...func(*OSUpdatePolicyResourceQuery)) *InstanceResourceQuery {
	query := (&OSUpdatePolicyResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withOsUpdatePolicy = query
	return _q
}

// WithCustomConfig tells the query-builder to eager-load the nodes that are connected to
// the "custom_config" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *InstanceResourceQuery) WithCustomConfig(opts ...func(*CustomConfigResourceQuery)) *InstanceResourceQuery {
	query := (&CustomConfigResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withCustomConfig = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.InstanceResource.Query().
//		GroupBy(instanceresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *InstanceResourceQuery) GroupBy(field string, fields ...string) *InstanceResourceGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &InstanceResourceGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = instanceresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.InstanceResource.Query().
//		Select(instanceresource.FieldResourceID).
//		Scan(ctx, &v)
func (_q *InstanceResourceQuery) Select(fields ...string) *InstanceResourceSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &InstanceResourceSelect{InstanceResourceQuery: _q}
	sbuild.label = instanceresource.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a InstanceResourceSelect configured with the given aggregations.
func (_q *InstanceResourceQuery) Aggregate(fns ...AggregateFunc) *InstanceResourceSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *InstanceResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !instanceresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *InstanceResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*InstanceResource, error) {
	var (
		nodes       = []*InstanceResource{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [7]bool{
			_q.withHost != nil,
			_q.withOs != nil,
			_q.withWorkloadMembers != nil,
			_q.withProvider != nil,
			_q.withLocalaccount != nil,
			_q.withOsUpdatePolicy != nil,
			_q.withCustomConfig != nil,
		}
	)
	if _q.withOs != nil || _q.withProvider != nil || _q.withLocalaccount != nil || _q.withOsUpdatePolicy != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*InstanceResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &InstanceResource{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withHost; query != nil {
		if err := _q.loadHost(ctx, query, nodes, nil,
			func(n *InstanceResource, e *HostResource) { n.Edges.Host = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOs; query != nil {
		if err := _q.loadOs(ctx, query, nodes, nil,
			func(n *InstanceResource, e *OperatingSystemResource) { n.Edges.Os = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withWorkloadMembers; query != nil {
		if err := _q.loadWorkloadMembers(ctx, query, nodes,
			func(n *InstanceResource) { n.Edges.WorkloadMembers = []*WorkloadMember{} },
			func(n *InstanceResource, e *WorkloadMember) {
				n.Edges.WorkloadMembers = append(n.Edges.WorkloadMembers, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := _q.withProvider; query != nil {
		if err := _q.loadProvider(ctx, query, nodes, nil,
			func(n *InstanceResource, e *ProviderResource) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withLocalaccount; query != nil {
		if err := _q.loadLocalaccount(ctx, query, nodes, nil,
			func(n *InstanceResource, e *LocalAccountResource) { n.Edges.Localaccount = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withOsUpdatePolicy; query != nil {
		if err := _q.loadOsUpdatePolicy(ctx, query, nodes, nil,
			func(n *InstanceResource, e *OSUpdatePolicyResource) { n.Edges.OsUpdatePolicy = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withCustomConfig; query != nil {
		if err := _q.loadCustomConfig(ctx, query, nodes,
			func(n *InstanceResource) { n.Edges.CustomConfig = []*CustomConfigResource{} },
			func(n *InstanceResource, e *CustomConfigResource) {
				n.Edges.CustomConfig = append(n.Edges.CustomConfig, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *InstanceResourceQuery) loadHost(ctx context.Context, query *HostResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *HostResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InstanceResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.HostResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(instanceresource.HostColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.instance_resource_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "instance_resource_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "instance_resource_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *InstanceResourceQuery) loadOs(ctx context.Context, query *OperatingSystemResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *OperatingSystemResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_os == nil {
			continue
		}
		fk := *nodes[i].instance_resource_os
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(operatingsystemresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_os" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InstanceResourceQuery) loadWorkloadMembers(ctx context.Context, query *WorkloadMemberQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *WorkloadMember)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*InstanceResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WorkloadMember(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(instanceresource.WorkloadMembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.workload_member_instance
		if fk == nil {
			return fmt.Errorf(`foreign-key "workload_member_instance" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "workload_member_instance" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *InstanceResourceQuery) loadProvider(ctx context.Context, query *ProviderResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *ProviderResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_provider == nil {
			continue
		}
		fk := *nodes[i].instance_resource_provider
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(providerresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_provider" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InstanceResourceQuery) loadLocalaccount(ctx context.Context, query *LocalAccountResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *LocalAccountResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_localaccount == nil {
			continue
		}
		fk := *nodes[i].instance_resource_localaccount
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(localaccountresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_localaccount" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InstanceResourceQuery) loadOsUpdatePolicy(ctx context.Context, query *OSUpdatePolicyResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *OSUpdatePolicyResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*InstanceResource)
	for i := range nodes {
		if nodes[i].instance_resource_os_update_policy == nil {
			continue
		}
		fk := *nodes[i].instance_resource_os_update_policy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(osupdatepolicyresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_os_update_policy" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *InstanceResourceQuery) loadCustomConfig(ctx context.Context, query *CustomConfigResourceQuery, nodes []*InstanceResource, init func(*InstanceResource), assign func(*InstanceResource, *CustomConfigResource)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*InstanceResource)
	nids := make(map[int]map[*InstanceResource]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(instanceresource.CustomConfigTable)
		s.Join(joinT).On(s.C(customconfigresource.FieldID), joinT.C(instanceresource.CustomConfigPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(instanceresource.CustomConfigPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(instanceresource.CustomConfigPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*InstanceResource]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*CustomConfigResource](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "custom_config" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (_q *InstanceResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *InstanceResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(instanceresource.Table, instanceresource.Columns, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, instanceresource.FieldID)
		for i := range fields {
			if fields[i] != instanceresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *InstanceResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(instanceresource.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = instanceresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// InstanceResourceGroupBy is the group-by builder for InstanceResource entities.
type InstanceResourceGroupBy struct {
	selector
	build *InstanceResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *InstanceResourceGroupBy) Aggregate(fns ...AggregateFunc) *InstanceResourceGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *InstanceResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstanceResourceQuery, *InstanceResourceGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *InstanceResourceGroupBy) sqlScan(ctx context.Context, root *InstanceResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// InstanceResourceSelect is the builder for selecting fields of InstanceResource entities.
type InstanceResourceSelect struct {
	*InstanceResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *InstanceResourceSelect) Aggregate(fns ...AggregateFunc) *InstanceResourceSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *InstanceResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*InstanceResourceQuery, *InstanceResourceSelect](ctx, _s.InstanceResourceQuery, _s, _s.inters, v)
}

func (_s *InstanceResourceSelect) sqlScan(ctx context.Context, root *InstanceResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
