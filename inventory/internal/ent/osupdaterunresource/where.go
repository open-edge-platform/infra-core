// Code generated by ent, DO NOT EDIT.

package osupdaterunresource

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldID, id))
}

// ResourceID applies equality check predicate on the "resource_id" field. It's identical to ResourceIDEQ.
func ResourceID(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldResourceID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldDescription, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatus, v))
}

// StatusDetails applies equality check predicate on the "status_details" field. It's identical to StatusDetailsEQ.
func StatusDetails(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatusDetails, v))
}

// StatusTimestamp applies equality check predicate on the "status_timestamp" field. It's identical to StatusTimestampEQ.
func StatusTimestamp(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatusTimestamp, v))
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldEndTime, v))
}

// TenantID applies equality check predicate on the "tenant_id" field. It's identical to TenantIDEQ.
func TenantID(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldTenantID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldUpdatedAt, v))
}

// ResourceIDEQ applies the EQ predicate on the "resource_id" field.
func ResourceIDEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldResourceID, v))
}

// ResourceIDNEQ applies the NEQ predicate on the "resource_id" field.
func ResourceIDNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldResourceID, v))
}

// ResourceIDIn applies the In predicate on the "resource_id" field.
func ResourceIDIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldResourceID, vs...))
}

// ResourceIDNotIn applies the NotIn predicate on the "resource_id" field.
func ResourceIDNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldResourceID, vs...))
}

// ResourceIDGT applies the GT predicate on the "resource_id" field.
func ResourceIDGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldResourceID, v))
}

// ResourceIDGTE applies the GTE predicate on the "resource_id" field.
func ResourceIDGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldResourceID, v))
}

// ResourceIDLT applies the LT predicate on the "resource_id" field.
func ResourceIDLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldResourceID, v))
}

// ResourceIDLTE applies the LTE predicate on the "resource_id" field.
func ResourceIDLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldResourceID, v))
}

// ResourceIDContains applies the Contains predicate on the "resource_id" field.
func ResourceIDContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldResourceID, v))
}

// ResourceIDHasPrefix applies the HasPrefix predicate on the "resource_id" field.
func ResourceIDHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldResourceID, v))
}

// ResourceIDHasSuffix applies the HasSuffix predicate on the "resource_id" field.
func ResourceIDHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldResourceID, v))
}

// ResourceIDEqualFold applies the EqualFold predicate on the "resource_id" field.
func ResourceIDEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldResourceID, v))
}

// ResourceIDContainsFold applies the ContainsFold predicate on the "resource_id" field.
func ResourceIDContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldResourceID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldDescription, v))
}

// StatusIndicatorEQ applies the EQ predicate on the "status_indicator" field.
func StatusIndicatorEQ(v StatusIndicator) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatusIndicator, v))
}

// StatusIndicatorNEQ applies the NEQ predicate on the "status_indicator" field.
func StatusIndicatorNEQ(v StatusIndicator) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldStatusIndicator, v))
}

// StatusIndicatorIn applies the In predicate on the "status_indicator" field.
func StatusIndicatorIn(vs ...StatusIndicator) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldStatusIndicator, vs...))
}

// StatusIndicatorNotIn applies the NotIn predicate on the "status_indicator" field.
func StatusIndicatorNotIn(vs ...StatusIndicator) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldStatusIndicator, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldStatus, v))
}

// StatusDetailsEQ applies the EQ predicate on the "status_details" field.
func StatusDetailsEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatusDetails, v))
}

// StatusDetailsNEQ applies the NEQ predicate on the "status_details" field.
func StatusDetailsNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldStatusDetails, v))
}

// StatusDetailsIn applies the In predicate on the "status_details" field.
func StatusDetailsIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldStatusDetails, vs...))
}

// StatusDetailsNotIn applies the NotIn predicate on the "status_details" field.
func StatusDetailsNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldStatusDetails, vs...))
}

// StatusDetailsGT applies the GT predicate on the "status_details" field.
func StatusDetailsGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldStatusDetails, v))
}

// StatusDetailsGTE applies the GTE predicate on the "status_details" field.
func StatusDetailsGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldStatusDetails, v))
}

// StatusDetailsLT applies the LT predicate on the "status_details" field.
func StatusDetailsLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldStatusDetails, v))
}

// StatusDetailsLTE applies the LTE predicate on the "status_details" field.
func StatusDetailsLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldStatusDetails, v))
}

// StatusDetailsContains applies the Contains predicate on the "status_details" field.
func StatusDetailsContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldStatusDetails, v))
}

// StatusDetailsHasPrefix applies the HasPrefix predicate on the "status_details" field.
func StatusDetailsHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldStatusDetails, v))
}

// StatusDetailsHasSuffix applies the HasSuffix predicate on the "status_details" field.
func StatusDetailsHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldStatusDetails, v))
}

// StatusDetailsEqualFold applies the EqualFold predicate on the "status_details" field.
func StatusDetailsEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldStatusDetails, v))
}

// StatusDetailsContainsFold applies the ContainsFold predicate on the "status_details" field.
func StatusDetailsContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldStatusDetails, v))
}

// StatusTimestampEQ applies the EQ predicate on the "status_timestamp" field.
func StatusTimestampEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStatusTimestamp, v))
}

// StatusTimestampNEQ applies the NEQ predicate on the "status_timestamp" field.
func StatusTimestampNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldStatusTimestamp, v))
}

// StatusTimestampIn applies the In predicate on the "status_timestamp" field.
func StatusTimestampIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldStatusTimestamp, vs...))
}

// StatusTimestampNotIn applies the NotIn predicate on the "status_timestamp" field.
func StatusTimestampNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldStatusTimestamp, vs...))
}

// StatusTimestampGT applies the GT predicate on the "status_timestamp" field.
func StatusTimestampGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldStatusTimestamp, v))
}

// StatusTimestampGTE applies the GTE predicate on the "status_timestamp" field.
func StatusTimestampGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldStatusTimestamp, v))
}

// StatusTimestampLT applies the LT predicate on the "status_timestamp" field.
func StatusTimestampLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldStatusTimestamp, v))
}

// StatusTimestampLTE applies the LTE predicate on the "status_timestamp" field.
func StatusTimestampLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldStatusTimestamp, v))
}

// StatusTimestampContains applies the Contains predicate on the "status_timestamp" field.
func StatusTimestampContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldStatusTimestamp, v))
}

// StatusTimestampHasPrefix applies the HasPrefix predicate on the "status_timestamp" field.
func StatusTimestampHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldStatusTimestamp, v))
}

// StatusTimestampHasSuffix applies the HasSuffix predicate on the "status_timestamp" field.
func StatusTimestampHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldStatusTimestamp, v))
}

// StatusTimestampEqualFold applies the EqualFold predicate on the "status_timestamp" field.
func StatusTimestampEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldStatusTimestamp, v))
}

// StatusTimestampContainsFold applies the ContainsFold predicate on the "status_timestamp" field.
func StatusTimestampContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldStatusTimestamp, v))
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldStartTime, v))
}

// StartTimeContains applies the Contains predicate on the "start_time" field.
func StartTimeContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldStartTime, v))
}

// StartTimeHasPrefix applies the HasPrefix predicate on the "start_time" field.
func StartTimeHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldStartTime, v))
}

// StartTimeHasSuffix applies the HasSuffix predicate on the "start_time" field.
func StartTimeHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldStartTime, v))
}

// StartTimeEqualFold applies the EqualFold predicate on the "start_time" field.
func StartTimeEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldStartTime, v))
}

// StartTimeContainsFold applies the ContainsFold predicate on the "start_time" field.
func StartTimeContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldEndTime, v))
}

// EndTimeContains applies the Contains predicate on the "end_time" field.
func EndTimeContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldEndTime, v))
}

// EndTimeHasPrefix applies the HasPrefix predicate on the "end_time" field.
func EndTimeHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldEndTime, v))
}

// EndTimeHasSuffix applies the HasSuffix predicate on the "end_time" field.
func EndTimeHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldEndTime, v))
}

// EndTimeEqualFold applies the EqualFold predicate on the "end_time" field.
func EndTimeEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldEndTime, v))
}

// EndTimeContainsFold applies the ContainsFold predicate on the "end_time" field.
func EndTimeContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldEndTime, v))
}

// TenantIDEQ applies the EQ predicate on the "tenant_id" field.
func TenantIDEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldTenantID, v))
}

// TenantIDNEQ applies the NEQ predicate on the "tenant_id" field.
func TenantIDNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldTenantID, v))
}

// TenantIDIn applies the In predicate on the "tenant_id" field.
func TenantIDIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldTenantID, vs...))
}

// TenantIDNotIn applies the NotIn predicate on the "tenant_id" field.
func TenantIDNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldTenantID, vs...))
}

// TenantIDGT applies the GT predicate on the "tenant_id" field.
func TenantIDGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldTenantID, v))
}

// TenantIDGTE applies the GTE predicate on the "tenant_id" field.
func TenantIDGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldTenantID, v))
}

// TenantIDLT applies the LT predicate on the "tenant_id" field.
func TenantIDLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldTenantID, v))
}

// TenantIDLTE applies the LTE predicate on the "tenant_id" field.
func TenantIDLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldTenantID, v))
}

// TenantIDContains applies the Contains predicate on the "tenant_id" field.
func TenantIDContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldTenantID, v))
}

// TenantIDHasPrefix applies the HasPrefix predicate on the "tenant_id" field.
func TenantIDHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldTenantID, v))
}

// TenantIDHasSuffix applies the HasSuffix predicate on the "tenant_id" field.
func TenantIDHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldTenantID, v))
}

// TenantIDEqualFold applies the EqualFold predicate on the "tenant_id" field.
func TenantIDEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldTenantID, v))
}

// TenantIDContainsFold applies the ContainsFold predicate on the "tenant_id" field.
func TenantIDContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldTenantID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtContains applies the Contains predicate on the "created_at" field.
func CreatedAtContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldCreatedAt, v))
}

// CreatedAtHasPrefix applies the HasPrefix predicate on the "created_at" field.
func CreatedAtHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldCreatedAt, v))
}

// CreatedAtHasSuffix applies the HasSuffix predicate on the "created_at" field.
func CreatedAtHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldCreatedAt, v))
}

// CreatedAtEqualFold applies the EqualFold predicate on the "created_at" field.
func CreatedAtEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldCreatedAt, v))
}

// CreatedAtContainsFold applies the ContainsFold predicate on the "created_at" field.
func CreatedAtContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtContains applies the Contains predicate on the "updated_at" field.
func UpdatedAtContains(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContains(FieldUpdatedAt, v))
}

// UpdatedAtHasPrefix applies the HasPrefix predicate on the "updated_at" field.
func UpdatedAtHasPrefix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasPrefix(FieldUpdatedAt, v))
}

// UpdatedAtHasSuffix applies the HasSuffix predicate on the "updated_at" field.
func UpdatedAtHasSuffix(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldHasSuffix(FieldUpdatedAt, v))
}

// UpdatedAtEqualFold applies the EqualFold predicate on the "updated_at" field.
func UpdatedAtEqualFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldEqualFold(FieldUpdatedAt, v))
}

// UpdatedAtContainsFold applies the ContainsFold predicate on the "updated_at" field.
func UpdatedAtContainsFold(v string) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.FieldContainsFold(FieldUpdatedAt, v))
}

// HasAppliedPolicy applies the HasEdge predicate on the "applied_policy" edge.
func HasAppliedPolicy() predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppliedPolicyTable, AppliedPolicyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppliedPolicyWith applies the HasEdge predicate on the "applied_policy" edge with a given conditions (other predicates).
func HasAppliedPolicyWith(preds ...predicate.OSUpdatePolicyResource) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(func(s *sql.Selector) {
		step := newAppliedPolicyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInstance applies the HasEdge predicate on the "instance" edge.
func HasInstance() predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstanceWith applies the HasEdge predicate on the "instance" edge with a given conditions (other predicates).
func HasInstanceWith(preds ...predicate.InstanceResource) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(func(s *sql.Selector) {
		step := newInstanceStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OSUpdateRunResource) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OSUpdateRunResource) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OSUpdateRunResource) predicate.OSUpdateRunResource {
	return predicate.OSUpdateRunResource(sql.NotPredicates(p))
}
