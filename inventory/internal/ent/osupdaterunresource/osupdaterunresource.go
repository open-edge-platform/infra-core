// Code generated by ent, DO NOT EDIT.

package osupdaterunresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the osupdaterunresource type in the database.
	Label = "os_update_run_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldStatusIndicator holds the string denoting the status_indicator field in the database.
	FieldStatusIndicator = "status_indicator"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStatusDetails holds the string denoting the status_details field in the database.
	FieldStatusDetails = "status_details"
	// FieldStatusTimestamp holds the string denoting the status_timestamp field in the database.
	FieldStatusTimestamp = "status_timestamp"
	// FieldStartTime holds the string denoting the start_time field in the database.
	FieldStartTime = "start_time"
	// FieldEndTime holds the string denoting the end_time field in the database.
	FieldEndTime = "end_time"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeAppliedPolicy holds the string denoting the applied_policy edge name in mutations.
	EdgeAppliedPolicy = "applied_policy"
	// EdgeInstance holds the string denoting the instance edge name in mutations.
	EdgeInstance = "instance"
	// Table holds the table name of the osupdaterunresource in the database.
	Table = "os_update_run_resources"
	// AppliedPolicyTable is the table that holds the applied_policy relation/edge.
	AppliedPolicyTable = "os_update_run_resources"
	// AppliedPolicyInverseTable is the table name for the OSUpdatePolicyResource entity.
	// It exists in this package in order to avoid circular dependency with the "osupdatepolicyresource" package.
	AppliedPolicyInverseTable = "os_update_policy_resources"
	// AppliedPolicyColumn is the table column denoting the applied_policy relation/edge.
	AppliedPolicyColumn = "os_update_run_resource_applied_policy"
	// InstanceTable is the table that holds the instance relation/edge.
	InstanceTable = "os_update_run_resources"
	// InstanceInverseTable is the table name for the InstanceResource entity.
	// It exists in this package in order to avoid circular dependency with the "instanceresource" package.
	InstanceInverseTable = "instance_resources"
	// InstanceColumn is the table column denoting the instance relation/edge.
	InstanceColumn = "os_update_run_resource_instance"
)

// Columns holds all SQL columns for osupdaterunresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldName,
	FieldDescription,
	FieldStatusIndicator,
	FieldStatus,
	FieldStatusDetails,
	FieldStatusTimestamp,
	FieldStartTime,
	FieldEndTime,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "os_update_run_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"os_update_run_resource_applied_policy",
	"os_update_run_resource_instance",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// StatusIndicator defines the type for the "status_indicator" enum field.
type StatusIndicator string

// StatusIndicator values.
const (
	StatusIndicatorSTATUS_INDICATION_UNSPECIFIED StatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
	StatusIndicatorSTATUS_INDICATION_ERROR       StatusIndicator = "STATUS_INDICATION_ERROR"
	StatusIndicatorSTATUS_INDICATION_IN_PROGRESS StatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	StatusIndicatorSTATUS_INDICATION_IDLE        StatusIndicator = "STATUS_INDICATION_IDLE"
)

func (si StatusIndicator) String() string {
	return string(si)
}

// StatusIndicatorValidator is a validator for the "status_indicator" field enum values. It is called by the builders before save.
func StatusIndicatorValidator(si StatusIndicator) error {
	switch si {
	case StatusIndicatorSTATUS_INDICATION_UNSPECIFIED, StatusIndicatorSTATUS_INDICATION_ERROR, StatusIndicatorSTATUS_INDICATION_IN_PROGRESS, StatusIndicatorSTATUS_INDICATION_IDLE:
		return nil
	default:
		return fmt.Errorf("osupdaterunresource: invalid enum value for status_indicator field: %q", si)
	}
}

// OrderOption defines the ordering options for the OSUpdateRunResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByStatusIndicator orders the results by the status_indicator field.
func ByStatusIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusIndicator, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStatusDetails orders the results by the status_details field.
func ByStatusDetails(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusDetails, opts...).ToFunc()
}

// ByStatusTimestamp orders the results by the status_timestamp field.
func ByStatusTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusTimestamp, opts...).ToFunc()
}

// ByStartTime orders the results by the start_time field.
func ByStartTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartTime, opts...).ToFunc()
}

// ByEndTime orders the results by the end_time field.
func ByEndTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndTime, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAppliedPolicyField orders the results by applied_policy field.
func ByAppliedPolicyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppliedPolicyStep(), sql.OrderByField(field, opts...))
	}
}

// ByInstanceField orders the results by instance field.
func ByInstanceField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInstanceStep(), sql.OrderByField(field, opts...))
	}
}
func newAppliedPolicyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppliedPolicyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AppliedPolicyTable, AppliedPolicyColumn),
	)
}
func newInstanceStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InstanceInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, InstanceTable, InstanceColumn),
	)
}
