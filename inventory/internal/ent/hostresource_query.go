// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostgpuresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hoststorageresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostusbresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
)

// HostResourceQuery is the builder for querying HostResource entities.
type HostResourceQuery struct {
	config
	ctx              *QueryContext
	order            []hostresource.OrderOption
	inters           []Interceptor
	predicates       []predicate.HostResource
	withSite         *SiteResourceQuery
	withProvider     *ProviderResourceQuery
	withHostStorages *HoststorageResourceQuery
	withHostNics     *HostnicResourceQuery
	withHostUsbs     *HostusbResourceQuery
	withHostGpus     *HostgpuResourceQuery
	withInstance     *InstanceResourceQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the HostResourceQuery builder.
func (_q *HostResourceQuery) Where(ps ...predicate.HostResource) *HostResourceQuery {
	_q.predicates = append(_q.predicates, ps...)
	return _q
}

// Limit the number of records to be returned by this query.
func (_q *HostResourceQuery) Limit(limit int) *HostResourceQuery {
	_q.ctx.Limit = &limit
	return _q
}

// Offset to start from.
func (_q *HostResourceQuery) Offset(offset int) *HostResourceQuery {
	_q.ctx.Offset = &offset
	return _q
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (_q *HostResourceQuery) Unique(unique bool) *HostResourceQuery {
	_q.ctx.Unique = &unique
	return _q
}

// Order specifies how the records should be ordered.
func (_q *HostResourceQuery) Order(o ...hostresource.OrderOption) *HostResourceQuery {
	_q.order = append(_q.order, o...)
	return _q
}

// QuerySite chains the current query on the "site" edge.
func (_q *HostResourceQuery) QuerySite() *SiteResourceQuery {
	query := (&SiteResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.SiteTable, hostresource.SiteColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryProvider chains the current query on the "provider" edge.
func (_q *HostResourceQuery) QueryProvider() *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.ProviderTable, hostresource.ProviderColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostStorages chains the current query on the "host_storages" edge.
func (_q *HostResourceQuery) QueryHostStorages() *HoststorageResourceQuery {
	query := (&HoststorageResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(hoststorageresource.Table, hoststorageresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostStoragesTable, hostresource.HostStoragesColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostNics chains the current query on the "host_nics" edge.
func (_q *HostResourceQuery) QueryHostNics() *HostnicResourceQuery {
	query := (&HostnicResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(hostnicresource.Table, hostnicresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostNicsTable, hostresource.HostNicsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostUsbs chains the current query on the "host_usbs" edge.
func (_q *HostResourceQuery) QueryHostUsbs() *HostusbResourceQuery {
	query := (&HostusbResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(hostusbresource.Table, hostusbresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostUsbsTable, hostresource.HostUsbsColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryHostGpus chains the current query on the "host_gpus" edge.
func (_q *HostResourceQuery) QueryHostGpus() *HostgpuResourceQuery {
	query := (&HostgpuResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(hostgpuresource.Table, hostgpuresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostGpusTable, hostresource.HostGpusColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstance chains the current query on the "instance" edge.
func (_q *HostResourceQuery) QueryInstance() *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: _q.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := _q.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := _q.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, selector),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hostresource.InstanceTable, hostresource.InstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(_q.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first HostResource entity from the query.
// Returns a *NotFoundError when no HostResource was found.
func (_q *HostResourceQuery) First(ctx context.Context) (*HostResource, error) {
	nodes, err := _q.Limit(1).All(setContextOp(ctx, _q.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{hostresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (_q *HostResourceQuery) FirstX(ctx context.Context) *HostResource {
	node, err := _q.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first HostResource ID from the query.
// Returns a *NotFoundError when no HostResource ID was found.
func (_q *HostResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(1).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{hostresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (_q *HostResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := _q.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single HostResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one HostResource entity is found.
// Returns a *NotFoundError when no HostResource entities are found.
func (_q *HostResourceQuery) Only(ctx context.Context) (*HostResource, error) {
	nodes, err := _q.Limit(2).All(setContextOp(ctx, _q.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{hostresource.Label}
	default:
		return nil, &NotSingularError{hostresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (_q *HostResourceQuery) OnlyX(ctx context.Context) *HostResource {
	node, err := _q.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only HostResource ID in the query.
// Returns a *NotSingularError when more than one HostResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (_q *HostResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = _q.Limit(2).IDs(setContextOp(ctx, _q.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{hostresource.Label}
	default:
		err = &NotSingularError{hostresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (_q *HostResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := _q.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of HostResources.
func (_q *HostResourceQuery) All(ctx context.Context) ([]*HostResource, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryAll)
	if err := _q.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*HostResource, *HostResourceQuery]()
	return withInterceptors[[]*HostResource](ctx, _q, qr, _q.inters)
}

// AllX is like All, but panics if an error occurs.
func (_q *HostResourceQuery) AllX(ctx context.Context) []*HostResource {
	nodes, err := _q.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of HostResource IDs.
func (_q *HostResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if _q.ctx.Unique == nil && _q.path != nil {
		_q.Unique(true)
	}
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryIDs)
	if err = _q.Select(hostresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (_q *HostResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := _q.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (_q *HostResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryCount)
	if err := _q.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, _q, querierCount[*HostResourceQuery](), _q.inters)
}

// CountX is like Count, but panics if an error occurs.
func (_q *HostResourceQuery) CountX(ctx context.Context) int {
	count, err := _q.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (_q *HostResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, _q.ctx, ent.OpQueryExist)
	switch _, err := _q.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (_q *HostResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := _q.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the HostResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (_q *HostResourceQuery) Clone() *HostResourceQuery {
	if _q == nil {
		return nil
	}
	return &HostResourceQuery{
		config:           _q.config,
		ctx:              _q.ctx.Clone(),
		order:            append([]hostresource.OrderOption{}, _q.order...),
		inters:           append([]Interceptor{}, _q.inters...),
		predicates:       append([]predicate.HostResource{}, _q.predicates...),
		withSite:         _q.withSite.Clone(),
		withProvider:     _q.withProvider.Clone(),
		withHostStorages: _q.withHostStorages.Clone(),
		withHostNics:     _q.withHostNics.Clone(),
		withHostUsbs:     _q.withHostUsbs.Clone(),
		withHostGpus:     _q.withHostGpus.Clone(),
		withInstance:     _q.withInstance.Clone(),
		// clone intermediate query.
		sql:  _q.sql.Clone(),
		path: _q.path,
	}
}

// WithSite tells the query-builder to eager-load the nodes that are connected to
// the "site" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithSite(opts ...func(*SiteResourceQuery)) *HostResourceQuery {
	query := (&SiteResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withSite = query
	return _q
}

// WithProvider tells the query-builder to eager-load the nodes that are connected to
// the "provider" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithProvider(opts ...func(*ProviderResourceQuery)) *HostResourceQuery {
	query := (&ProviderResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withProvider = query
	return _q
}

// WithHostStorages tells the query-builder to eager-load the nodes that are connected to
// the "host_storages" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithHostStorages(opts ...func(*HoststorageResourceQuery)) *HostResourceQuery {
	query := (&HoststorageResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withHostStorages = query
	return _q
}

// WithHostNics tells the query-builder to eager-load the nodes that are connected to
// the "host_nics" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithHostNics(opts ...func(*HostnicResourceQuery)) *HostResourceQuery {
	query := (&HostnicResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withHostNics = query
	return _q
}

// WithHostUsbs tells the query-builder to eager-load the nodes that are connected to
// the "host_usbs" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithHostUsbs(opts ...func(*HostusbResourceQuery)) *HostResourceQuery {
	query := (&HostusbResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withHostUsbs = query
	return _q
}

// WithHostGpus tells the query-builder to eager-load the nodes that are connected to
// the "host_gpus" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithHostGpus(opts ...func(*HostgpuResourceQuery)) *HostResourceQuery {
	query := (&HostgpuResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withHostGpus = query
	return _q
}

// WithInstance tells the query-builder to eager-load the nodes that are connected to
// the "instance" edge. The optional arguments are used to configure the query builder of the edge.
func (_q *HostResourceQuery) WithInstance(opts ...func(*InstanceResourceQuery)) *HostResourceQuery {
	query := (&InstanceResourceClient{config: _q.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	_q.withInstance = query
	return _q
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.HostResource.Query().
//		GroupBy(hostresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (_q *HostResourceQuery) GroupBy(field string, fields ...string) *HostResourceGroupBy {
	_q.ctx.Fields = append([]string{field}, fields...)
	grbuild := &HostResourceGroupBy{build: _q}
	grbuild.flds = &_q.ctx.Fields
	grbuild.label = hostresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.HostResource.Query().
//		Select(hostresource.FieldResourceID).
//		Scan(ctx, &v)
func (_q *HostResourceQuery) Select(fields ...string) *HostResourceSelect {
	_q.ctx.Fields = append(_q.ctx.Fields, fields...)
	sbuild := &HostResourceSelect{HostResourceQuery: _q}
	sbuild.label = hostresource.Label
	sbuild.flds, sbuild.scan = &_q.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a HostResourceSelect configured with the given aggregations.
func (_q *HostResourceQuery) Aggregate(fns ...AggregateFunc) *HostResourceSelect {
	return _q.Select().Aggregate(fns...)
}

func (_q *HostResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range _q.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, _q); err != nil {
				return err
			}
		}
	}
	for _, f := range _q.ctx.Fields {
		if !hostresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if _q.path != nil {
		prev, err := _q.path(ctx)
		if err != nil {
			return err
		}
		_q.sql = prev
	}
	return nil
}

func (_q *HostResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*HostResource, error) {
	var (
		nodes       = []*HostResource{}
		withFKs     = _q.withFKs
		_spec       = _q.querySpec()
		loadedTypes = [7]bool{
			_q.withSite != nil,
			_q.withProvider != nil,
			_q.withHostStorages != nil,
			_q.withHostNics != nil,
			_q.withHostUsbs != nil,
			_q.withHostGpus != nil,
			_q.withInstance != nil,
		}
	)
	if _q.withSite != nil || _q.withProvider != nil || _q.withInstance != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, hostresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*HostResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &HostResource{config: _q.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, _q.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := _q.withSite; query != nil {
		if err := _q.loadSite(ctx, query, nodes, nil,
			func(n *HostResource, e *SiteResource) { n.Edges.Site = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withProvider; query != nil {
		if err := _q.loadProvider(ctx, query, nodes, nil,
			func(n *HostResource, e *ProviderResource) { n.Edges.Provider = e }); err != nil {
			return nil, err
		}
	}
	if query := _q.withHostStorages; query != nil {
		if err := _q.loadHostStorages(ctx, query, nodes,
			func(n *HostResource) { n.Edges.HostStorages = []*HoststorageResource{} },
			func(n *HostResource, e *HoststorageResource) { n.Edges.HostStorages = append(n.Edges.HostStorages, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withHostNics; query != nil {
		if err := _q.loadHostNics(ctx, query, nodes,
			func(n *HostResource) { n.Edges.HostNics = []*HostnicResource{} },
			func(n *HostResource, e *HostnicResource) { n.Edges.HostNics = append(n.Edges.HostNics, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withHostUsbs; query != nil {
		if err := _q.loadHostUsbs(ctx, query, nodes,
			func(n *HostResource) { n.Edges.HostUsbs = []*HostusbResource{} },
			func(n *HostResource, e *HostusbResource) { n.Edges.HostUsbs = append(n.Edges.HostUsbs, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withHostGpus; query != nil {
		if err := _q.loadHostGpus(ctx, query, nodes,
			func(n *HostResource) { n.Edges.HostGpus = []*HostgpuResource{} },
			func(n *HostResource, e *HostgpuResource) { n.Edges.HostGpus = append(n.Edges.HostGpus, e) }); err != nil {
			return nil, err
		}
	}
	if query := _q.withInstance; query != nil {
		if err := _q.loadInstance(ctx, query, nodes, nil,
			func(n *HostResource, e *InstanceResource) { n.Edges.Instance = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (_q *HostResourceQuery) loadSite(ctx context.Context, query *SiteResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *SiteResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HostResource)
	for i := range nodes {
		if nodes[i].host_resource_site == nil {
			continue
		}
		fk := *nodes[i].host_resource_site
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(siteresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_resource_site" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *HostResourceQuery) loadProvider(ctx context.Context, query *ProviderResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *ProviderResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HostResource)
	for i := range nodes {
		if nodes[i].host_resource_provider == nil {
			continue
		}
		fk := *nodes[i].host_resource_provider
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(providerresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "host_resource_provider" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (_q *HostResourceQuery) loadHostStorages(ctx context.Context, query *HoststorageResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *HoststorageResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HostResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HoststorageResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hostresource.HostStoragesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hoststorage_resource_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "hoststorage_resource_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hoststorage_resource_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *HostResourceQuery) loadHostNics(ctx context.Context, query *HostnicResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *HostnicResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HostResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HostnicResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hostresource.HostNicsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hostnic_resource_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "hostnic_resource_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hostnic_resource_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *HostResourceQuery) loadHostUsbs(ctx context.Context, query *HostusbResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *HostusbResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HostResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HostusbResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hostresource.HostUsbsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hostusb_resource_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "hostusb_resource_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hostusb_resource_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *HostResourceQuery) loadHostGpus(ctx context.Context, query *HostgpuResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *HostgpuResource)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*HostResource)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.HostgpuResource(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(hostresource.HostGpusColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.hostgpu_resource_host
		if fk == nil {
			return fmt.Errorf(`foreign-key "hostgpu_resource_host" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "hostgpu_resource_host" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (_q *HostResourceQuery) loadInstance(ctx context.Context, query *InstanceResourceQuery, nodes []*HostResource, init func(*HostResource), assign func(*HostResource, *InstanceResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*HostResource)
	for i := range nodes {
		if nodes[i].instance_resource_host == nil {
			continue
		}
		fk := *nodes[i].instance_resource_host
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(instanceresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "instance_resource_host" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (_q *HostResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := _q.querySpec()
	_spec.Node.Columns = _q.ctx.Fields
	if len(_q.ctx.Fields) > 0 {
		_spec.Unique = _q.ctx.Unique != nil && *_q.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, _q.driver, _spec)
}

func (_q *HostResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(hostresource.Table, hostresource.Columns, sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt))
	_spec.From = _q.sql
	if unique := _q.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if _q.path != nil {
		_spec.Unique = true
	}
	if fields := _q.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostresource.FieldID)
		for i := range fields {
			if fields[i] != hostresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := _q.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := _q.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := _q.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := _q.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (_q *HostResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(_q.driver.Dialect())
	t1 := builder.Table(hostresource.Table)
	columns := _q.ctx.Fields
	if len(columns) == 0 {
		columns = hostresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if _q.sql != nil {
		selector = _q.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if _q.ctx.Unique != nil && *_q.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range _q.predicates {
		p(selector)
	}
	for _, p := range _q.order {
		p(selector)
	}
	if offset := _q.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := _q.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// HostResourceGroupBy is the group-by builder for HostResource entities.
type HostResourceGroupBy struct {
	selector
	build *HostResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (_g *HostResourceGroupBy) Aggregate(fns ...AggregateFunc) *HostResourceGroupBy {
	_g.fns = append(_g.fns, fns...)
	return _g
}

// Scan applies the selector query and scans the result into the given value.
func (_g *HostResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _g.build.ctx, ent.OpQueryGroupBy)
	if err := _g.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HostResourceQuery, *HostResourceGroupBy](ctx, _g.build, _g, _g.build.inters, v)
}

func (_g *HostResourceGroupBy) sqlScan(ctx context.Context, root *HostResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(_g.fns))
	for _, fn := range _g.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*_g.flds)+len(_g.fns))
		for _, f := range *_g.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*_g.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _g.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// HostResourceSelect is the builder for selecting fields of HostResource entities.
type HostResourceSelect struct {
	*HostResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (_s *HostResourceSelect) Aggregate(fns ...AggregateFunc) *HostResourceSelect {
	_s.fns = append(_s.fns, fns...)
	return _s
}

// Scan applies the selector query and scans the result into the given value.
func (_s *HostResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, _s.ctx, ent.OpQuerySelect)
	if err := _s.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*HostResourceQuery, *HostResourceSelect](ctx, _s.HostResourceQuery, _s, _s.inters, v)
}

func (_s *HostResourceSelect) sqlScan(ctx context.Context, root *HostResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(_s.fns))
	for _, fn := range _s.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*_s.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := _s.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
