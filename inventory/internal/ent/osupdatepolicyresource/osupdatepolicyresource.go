// Code generated by ent, DO NOT EDIT.

package osupdatepolicyresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the osupdatepolicyresource type in the database.
	Label = "os_update_policy_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldUpdateSources holds the string denoting the update_sources field in the database.
	FieldUpdateSources = "update_sources"
	// FieldUpdatePackages holds the string denoting the update_packages field in the database.
	FieldUpdatePackages = "update_packages"
	// FieldUpdateKernelCommand holds the string denoting the update_kernel_command field in the database.
	FieldUpdateKernelCommand = "update_kernel_command"
	// FieldUpdatePolicy holds the string denoting the update_policy field in the database.
	FieldUpdatePolicy = "update_policy"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTargetOs holds the string denoting the target_os edge name in mutations.
	EdgeTargetOs = "target_os"
	// Table holds the table name of the osupdatepolicyresource in the database.
	Table = "os_update_policy_resources"
	// TargetOsTable is the table that holds the target_os relation/edge.
	TargetOsTable = "os_update_policy_resources"
	// TargetOsInverseTable is the table name for the OperatingSystemResource entity.
	// It exists in this package in order to avoid circular dependency with the "operatingsystemresource" package.
	TargetOsInverseTable = "operating_system_resources"
	// TargetOsColumn is the table column denoting the target_os relation/edge.
	TargetOsColumn = "os_update_policy_resource_target_os"
)

// Columns holds all SQL columns for osupdatepolicyresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldName,
	FieldDescription,
	FieldUpdateSources,
	FieldUpdatePackages,
	FieldUpdateKernelCommand,
	FieldUpdatePolicy,
	FieldTenantID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "os_update_policy_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"os_update_policy_resource_target_os",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// UpdatePolicy defines the type for the "update_policy" enum field.
type UpdatePolicy string

// UpdatePolicy values.
const (
	UpdatePolicyUPDATE_POLICY_UNSPECIFIED UpdatePolicy = "UPDATE_POLICY_UNSPECIFIED"
	UpdatePolicyUPDATE_POLICY_LATEST      UpdatePolicy = "UPDATE_POLICY_LATEST"
	UpdatePolicyUPDATE_POLICY_TARGET      UpdatePolicy = "UPDATE_POLICY_TARGET"
)

func (up UpdatePolicy) String() string {
	return string(up)
}

// UpdatePolicyValidator is a validator for the "update_policy" field enum values. It is called by the builders before save.
func UpdatePolicyValidator(up UpdatePolicy) error {
	switch up {
	case UpdatePolicyUPDATE_POLICY_UNSPECIFIED, UpdatePolicyUPDATE_POLICY_LATEST, UpdatePolicyUPDATE_POLICY_TARGET:
		return nil
	default:
		return fmt.Errorf("osupdatepolicyresource: invalid enum value for update_policy field: %q", up)
	}
}

// OrderOption defines the ordering options for the OSUpdatePolicyResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByUpdateSources orders the results by the update_sources field.
func ByUpdateSources(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateSources, opts...).ToFunc()
}

// ByUpdatePackages orders the results by the update_packages field.
func ByUpdatePackages(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatePackages, opts...).ToFunc()
}

// ByUpdateKernelCommand orders the results by the update_kernel_command field.
func ByUpdateKernelCommand(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateKernelCommand, opts...).ToFunc()
}

// ByUpdatePolicy orders the results by the update_policy field.
func ByUpdatePolicy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatePolicy, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByTargetOsField orders the results by target_os field.
func ByTargetOsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTargetOsStep(), sql.OrderByField(field, opts...))
	}
}
func newTargetOsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TargetOsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TargetOsTable, TargetOsColumn),
	)
}
