// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdaterunresource"
)

// OSUpdateRunResource is the model entity for the OSUpdateRunResource schema.
type OSUpdateRunResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// StatusIndicator holds the value of the "status_indicator" field.
	StatusIndicator osupdaterunresource.StatusIndicator `json:"status_indicator,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// StatusDetails holds the value of the "status_details" field.
	StatusDetails string `json:"status_details,omitempty"`
	// StatusTimestamp holds the value of the "status_timestamp" field.
	StatusTimestamp string `json:"status_timestamp,omitempty"`
	// StartTime holds the value of the "start_time" field.
	StartTime string `json:"start_time,omitempty"`
	// EndTime holds the value of the "end_time" field.
	EndTime string `json:"end_time,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OSUpdateRunResourceQuery when eager-loading is set.
	Edges                                 OSUpdateRunResourceEdges `json:"edges"`
	os_update_run_resource_applied_policy *int
	os_update_run_resource_instance       *int
	selectValues                          sql.SelectValues
}

// OSUpdateRunResourceEdges holds the relations/edges for other nodes in the graph.
type OSUpdateRunResourceEdges struct {
	// AppliedPolicy holds the value of the applied_policy edge.
	AppliedPolicy *OSUpdatePolicyResource `json:"applied_policy,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *InstanceResource `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AppliedPolicyOrErr returns the AppliedPolicy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OSUpdateRunResourceEdges) AppliedPolicyOrErr() (*OSUpdatePolicyResource, error) {
	if e.AppliedPolicy != nil {
		return e.AppliedPolicy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: osupdatepolicyresource.Label}
	}
	return nil, &NotLoadedError{edge: "applied_policy"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OSUpdateRunResourceEdges) InstanceOrErr() (*InstanceResource, error) {
	if e.Instance != nil {
		return e.Instance, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: instanceresource.Label}
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OSUpdateRunResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case osupdaterunresource.FieldID:
			values[i] = new(sql.NullInt64)
		case osupdaterunresource.FieldResourceID, osupdaterunresource.FieldName, osupdaterunresource.FieldDescription, osupdaterunresource.FieldStatusIndicator, osupdaterunresource.FieldStatus, osupdaterunresource.FieldStatusDetails, osupdaterunresource.FieldStatusTimestamp, osupdaterunresource.FieldStartTime, osupdaterunresource.FieldEndTime, osupdaterunresource.FieldTenantID, osupdaterunresource.FieldCreatedAt, osupdaterunresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case osupdaterunresource.ForeignKeys[0]: // os_update_run_resource_applied_policy
			values[i] = new(sql.NullInt64)
		case osupdaterunresource.ForeignKeys[1]: // os_update_run_resource_instance
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OSUpdateRunResource fields.
func (ourr *OSUpdateRunResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case osupdaterunresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ourr.ID = int(value.Int64)
		case osupdaterunresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ourr.ResourceID = value.String
			}
		case osupdaterunresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ourr.Name = value.String
			}
		case osupdaterunresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ourr.Description = value.String
			}
		case osupdaterunresource.FieldStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_indicator", values[i])
			} else if value.Valid {
				ourr.StatusIndicator = osupdaterunresource.StatusIndicator(value.String)
			}
		case osupdaterunresource.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ourr.Status = value.String
			}
		case osupdaterunresource.FieldStatusDetails:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_details", values[i])
			} else if value.Valid {
				ourr.StatusDetails = value.String
			}
		case osupdaterunresource.FieldStatusTimestamp:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_timestamp", values[i])
			} else if value.Valid {
				ourr.StatusTimestamp = value.String
			}
		case osupdaterunresource.FieldStartTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_time", values[i])
			} else if value.Valid {
				ourr.StartTime = value.String
			}
		case osupdaterunresource.FieldEndTime:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field end_time", values[i])
			} else if value.Valid {
				ourr.EndTime = value.String
			}
		case osupdaterunresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ourr.TenantID = value.String
			}
		case osupdaterunresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ourr.CreatedAt = value.String
			}
		case osupdaterunresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ourr.UpdatedAt = value.String
			}
		case osupdaterunresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field os_update_run_resource_applied_policy", value)
			} else if value.Valid {
				ourr.os_update_run_resource_applied_policy = new(int)
				*ourr.os_update_run_resource_applied_policy = int(value.Int64)
			}
		case osupdaterunresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field os_update_run_resource_instance", value)
			} else if value.Valid {
				ourr.os_update_run_resource_instance = new(int)
				*ourr.os_update_run_resource_instance = int(value.Int64)
			}
		default:
			ourr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OSUpdateRunResource.
// This includes values selected through modifiers, order, etc.
func (ourr *OSUpdateRunResource) Value(name string) (ent.Value, error) {
	return ourr.selectValues.Get(name)
}

// QueryAppliedPolicy queries the "applied_policy" edge of the OSUpdateRunResource entity.
func (ourr *OSUpdateRunResource) QueryAppliedPolicy() *OSUpdatePolicyResourceQuery {
	return NewOSUpdateRunResourceClient(ourr.config).QueryAppliedPolicy(ourr)
}

// QueryInstance queries the "instance" edge of the OSUpdateRunResource entity.
func (ourr *OSUpdateRunResource) QueryInstance() *InstanceResourceQuery {
	return NewOSUpdateRunResourceClient(ourr.config).QueryInstance(ourr)
}

// Update returns a builder for updating this OSUpdateRunResource.
// Note that you need to call OSUpdateRunResource.Unwrap() before calling this method if this OSUpdateRunResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ourr *OSUpdateRunResource) Update() *OSUpdateRunResourceUpdateOne {
	return NewOSUpdateRunResourceClient(ourr.config).UpdateOne(ourr)
}

// Unwrap unwraps the OSUpdateRunResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ourr *OSUpdateRunResource) Unwrap() *OSUpdateRunResource {
	_tx, ok := ourr.config.driver.(*txDriver)
	if !ok {
		panic("ent: OSUpdateRunResource is not a transactional entity")
	}
	ourr.config.driver = _tx.drv
	return ourr
}

// String implements the fmt.Stringer.
func (ourr *OSUpdateRunResource) String() string {
	var builder strings.Builder
	builder.WriteString("OSUpdateRunResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ourr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(ourr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ourr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ourr.Description)
	builder.WriteString(", ")
	builder.WriteString("status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", ourr.StatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(ourr.Status)
	builder.WriteString(", ")
	builder.WriteString("status_details=")
	builder.WriteString(ourr.StatusDetails)
	builder.WriteString(", ")
	builder.WriteString("status_timestamp=")
	builder.WriteString(ourr.StatusTimestamp)
	builder.WriteString(", ")
	builder.WriteString("start_time=")
	builder.WriteString(ourr.StartTime)
	builder.WriteString(", ")
	builder.WriteString("end_time=")
	builder.WriteString(ourr.EndTime)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(ourr.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ourr.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ourr.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// OSUpdateRunResources is a parsable slice of OSUpdateRunResource.
type OSUpdateRunResources []*OSUpdateRunResource
