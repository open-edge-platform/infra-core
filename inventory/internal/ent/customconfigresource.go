// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
)

// CustomConfigResource is the model entity for the CustomConfigResource schema.
type CustomConfigResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Config holds the value of the "config" field.
	Config string `json:"config,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CustomConfigResourceQuery when eager-loading is set.
	Edges        CustomConfigResourceEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CustomConfigResourceEdges holds the relations/edges for other nodes in the graph.
type CustomConfigResourceEdges struct {
	// Instances holds the value of the instances edge.
	Instances []*InstanceResource `json:"instances,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstancesOrErr returns the Instances value or an error if the edge
// was not loaded in eager-loading.
func (e CustomConfigResourceEdges) InstancesOrErr() ([]*InstanceResource, error) {
	if e.loadedTypes[0] {
		return e.Instances, nil
	}
	return nil, &NotLoadedError{edge: "instances"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CustomConfigResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case customconfigresource.FieldID:
			values[i] = new(sql.NullInt64)
		case customconfigresource.FieldResourceID, customconfigresource.FieldName, customconfigresource.FieldConfig, customconfigresource.FieldTenantID, customconfigresource.FieldCreatedAt, customconfigresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CustomConfigResource fields.
func (ccr *CustomConfigResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case customconfigresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ccr.ID = int(value.Int64)
		case customconfigresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				ccr.ResourceID = value.String
			}
		case customconfigresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ccr.Name = value.String
			}
		case customconfigresource.FieldConfig:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[i])
			} else if value.Valid {
				ccr.Config = value.String
			}
		case customconfigresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				ccr.TenantID = value.String
			}
		case customconfigresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ccr.CreatedAt = value.String
			}
		case customconfigresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ccr.UpdatedAt = value.String
			}
		default:
			ccr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CustomConfigResource.
// This includes values selected through modifiers, order, etc.
func (ccr *CustomConfigResource) Value(name string) (ent.Value, error) {
	return ccr.selectValues.Get(name)
}

// QueryInstances queries the "instances" edge of the CustomConfigResource entity.
func (ccr *CustomConfigResource) QueryInstances() *InstanceResourceQuery {
	return NewCustomConfigResourceClient(ccr.config).QueryInstances(ccr)
}

// Update returns a builder for updating this CustomConfigResource.
// Note that you need to call CustomConfigResource.Unwrap() before calling this method if this CustomConfigResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (ccr *CustomConfigResource) Update() *CustomConfigResourceUpdateOne {
	return NewCustomConfigResourceClient(ccr.config).UpdateOne(ccr)
}

// Unwrap unwraps the CustomConfigResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ccr *CustomConfigResource) Unwrap() *CustomConfigResource {
	_tx, ok := ccr.config.driver.(*txDriver)
	if !ok {
		panic("ent: CustomConfigResource is not a transactional entity")
	}
	ccr.config.driver = _tx.drv
	return ccr
}

// String implements the fmt.Stringer.
func (ccr *CustomConfigResource) String() string {
	var builder strings.Builder
	builder.WriteString("CustomConfigResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ccr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(ccr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ccr.Name)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(ccr.Config)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(ccr.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ccr.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ccr.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// CustomConfigResources is a parsable slice of CustomConfigResource.
type CustomConfigResources []*CustomConfigResource
