// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdaterunresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdateRunResourceQuery is the builder for querying OSUpdateRunResource entities.
type OSUpdateRunResourceQuery struct {
	config
	ctx               *QueryContext
	order             []osupdaterunresource.OrderOption
	inters            []Interceptor
	predicates        []predicate.OSUpdateRunResource
	withAppliedPolicy *OSUpdatePolicyResourceQuery
	withInstance      *InstanceResourceQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OSUpdateRunResourceQuery builder.
func (ourrq *OSUpdateRunResourceQuery) Where(ps ...predicate.OSUpdateRunResource) *OSUpdateRunResourceQuery {
	ourrq.predicates = append(ourrq.predicates, ps...)
	return ourrq
}

// Limit the number of records to be returned by this query.
func (ourrq *OSUpdateRunResourceQuery) Limit(limit int) *OSUpdateRunResourceQuery {
	ourrq.ctx.Limit = &limit
	return ourrq
}

// Offset to start from.
func (ourrq *OSUpdateRunResourceQuery) Offset(offset int) *OSUpdateRunResourceQuery {
	ourrq.ctx.Offset = &offset
	return ourrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ourrq *OSUpdateRunResourceQuery) Unique(unique bool) *OSUpdateRunResourceQuery {
	ourrq.ctx.Unique = &unique
	return ourrq
}

// Order specifies how the records should be ordered.
func (ourrq *OSUpdateRunResourceQuery) Order(o ...osupdaterunresource.OrderOption) *OSUpdateRunResourceQuery {
	ourrq.order = append(ourrq.order, o...)
	return ourrq
}

// QueryAppliedPolicy chains the current query on the "applied_policy" edge.
func (ourrq *OSUpdateRunResourceQuery) QueryAppliedPolicy() *OSUpdatePolicyResourceQuery {
	query := (&OSUpdatePolicyResourceClient{config: ourrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ourrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ourrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdaterunresource.Table, osupdaterunresource.FieldID, selector),
			sqlgraph.To(osupdatepolicyresource.Table, osupdatepolicyresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdaterunresource.AppliedPolicyTable, osupdaterunresource.AppliedPolicyColumn),
		)
		fromU = sqlgraph.SetNeighbors(ourrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInstance chains the current query on the "instance" edge.
func (ourrq *OSUpdateRunResourceQuery) QueryInstance() *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: ourrq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ourrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ourrq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdaterunresource.Table, osupdaterunresource.FieldID, selector),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdaterunresource.InstanceTable, osupdaterunresource.InstanceColumn),
		)
		fromU = sqlgraph.SetNeighbors(ourrq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OSUpdateRunResource entity from the query.
// Returns a *NotFoundError when no OSUpdateRunResource was found.
func (ourrq *OSUpdateRunResourceQuery) First(ctx context.Context) (*OSUpdateRunResource, error) {
	nodes, err := ourrq.Limit(1).All(setContextOp(ctx, ourrq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{osupdaterunresource.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) FirstX(ctx context.Context) *OSUpdateRunResource {
	node, err := ourrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OSUpdateRunResource ID from the query.
// Returns a *NotFoundError when no OSUpdateRunResource ID was found.
func (ourrq *OSUpdateRunResourceQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ourrq.Limit(1).IDs(setContextOp(ctx, ourrq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{osupdaterunresource.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) FirstIDX(ctx context.Context) int {
	id, err := ourrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OSUpdateRunResource entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OSUpdateRunResource entity is found.
// Returns a *NotFoundError when no OSUpdateRunResource entities are found.
func (ourrq *OSUpdateRunResourceQuery) Only(ctx context.Context) (*OSUpdateRunResource, error) {
	nodes, err := ourrq.Limit(2).All(setContextOp(ctx, ourrq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{osupdaterunresource.Label}
	default:
		return nil, &NotSingularError{osupdaterunresource.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) OnlyX(ctx context.Context) *OSUpdateRunResource {
	node, err := ourrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OSUpdateRunResource ID in the query.
// Returns a *NotSingularError when more than one OSUpdateRunResource ID is found.
// Returns a *NotFoundError when no entities are found.
func (ourrq *OSUpdateRunResourceQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ourrq.Limit(2).IDs(setContextOp(ctx, ourrq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{osupdaterunresource.Label}
	default:
		err = &NotSingularError{osupdaterunresource.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) OnlyIDX(ctx context.Context) int {
	id, err := ourrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OSUpdateRunResources.
func (ourrq *OSUpdateRunResourceQuery) All(ctx context.Context) ([]*OSUpdateRunResource, error) {
	ctx = setContextOp(ctx, ourrq.ctx, ent.OpQueryAll)
	if err := ourrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OSUpdateRunResource, *OSUpdateRunResourceQuery]()
	return withInterceptors[[]*OSUpdateRunResource](ctx, ourrq, qr, ourrq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) AllX(ctx context.Context) []*OSUpdateRunResource {
	nodes, err := ourrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OSUpdateRunResource IDs.
func (ourrq *OSUpdateRunResourceQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ourrq.ctx.Unique == nil && ourrq.path != nil {
		ourrq.Unique(true)
	}
	ctx = setContextOp(ctx, ourrq.ctx, ent.OpQueryIDs)
	if err = ourrq.Select(osupdaterunresource.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) IDsX(ctx context.Context) []int {
	ids, err := ourrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ourrq *OSUpdateRunResourceQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ourrq.ctx, ent.OpQueryCount)
	if err := ourrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ourrq, querierCount[*OSUpdateRunResourceQuery](), ourrq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) CountX(ctx context.Context) int {
	count, err := ourrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ourrq *OSUpdateRunResourceQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ourrq.ctx, ent.OpQueryExist)
	switch _, err := ourrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ourrq *OSUpdateRunResourceQuery) ExistX(ctx context.Context) bool {
	exist, err := ourrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OSUpdateRunResourceQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ourrq *OSUpdateRunResourceQuery) Clone() *OSUpdateRunResourceQuery {
	if ourrq == nil {
		return nil
	}
	return &OSUpdateRunResourceQuery{
		config:            ourrq.config,
		ctx:               ourrq.ctx.Clone(),
		order:             append([]osupdaterunresource.OrderOption{}, ourrq.order...),
		inters:            append([]Interceptor{}, ourrq.inters...),
		predicates:        append([]predicate.OSUpdateRunResource{}, ourrq.predicates...),
		withAppliedPolicy: ourrq.withAppliedPolicy.Clone(),
		withInstance:      ourrq.withInstance.Clone(),
		// clone intermediate query.
		sql:  ourrq.sql.Clone(),
		path: ourrq.path,
	}
}

// WithAppliedPolicy tells the query-builder to eager-load the nodes that are connected to
// the "applied_policy" edge. The optional arguments are used to configure the query builder of the edge.
func (ourrq *OSUpdateRunResourceQuery) WithAppliedPolicy(opts ...func(*OSUpdatePolicyResourceQuery)) *OSUpdateRunResourceQuery {
	query := (&OSUpdatePolicyResourceClient{config: ourrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ourrq.withAppliedPolicy = query
	return ourrq
}

// WithInstance tells the query-builder to eager-load the nodes that are connected to
// the "instance" edge. The optional arguments are used to configure the query builder of the edge.
func (ourrq *OSUpdateRunResourceQuery) WithInstance(opts ...func(*InstanceResourceQuery)) *OSUpdateRunResourceQuery {
	query := (&InstanceResourceClient{config: ourrq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ourrq.withInstance = query
	return ourrq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OSUpdateRunResource.Query().
//		GroupBy(osupdaterunresource.FieldResourceID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ourrq *OSUpdateRunResourceQuery) GroupBy(field string, fields ...string) *OSUpdateRunResourceGroupBy {
	ourrq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OSUpdateRunResourceGroupBy{build: ourrq}
	grbuild.flds = &ourrq.ctx.Fields
	grbuild.label = osupdaterunresource.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ResourceID string `json:"resource_id,omitempty"`
//	}
//
//	client.OSUpdateRunResource.Query().
//		Select(osupdaterunresource.FieldResourceID).
//		Scan(ctx, &v)
func (ourrq *OSUpdateRunResourceQuery) Select(fields ...string) *OSUpdateRunResourceSelect {
	ourrq.ctx.Fields = append(ourrq.ctx.Fields, fields...)
	sbuild := &OSUpdateRunResourceSelect{OSUpdateRunResourceQuery: ourrq}
	sbuild.label = osupdaterunresource.Label
	sbuild.flds, sbuild.scan = &ourrq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OSUpdateRunResourceSelect configured with the given aggregations.
func (ourrq *OSUpdateRunResourceQuery) Aggregate(fns ...AggregateFunc) *OSUpdateRunResourceSelect {
	return ourrq.Select().Aggregate(fns...)
}

func (ourrq *OSUpdateRunResourceQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ourrq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ourrq); err != nil {
				return err
			}
		}
	}
	for _, f := range ourrq.ctx.Fields {
		if !osupdaterunresource.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ourrq.path != nil {
		prev, err := ourrq.path(ctx)
		if err != nil {
			return err
		}
		ourrq.sql = prev
	}
	return nil
}

func (ourrq *OSUpdateRunResourceQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OSUpdateRunResource, error) {
	var (
		nodes       = []*OSUpdateRunResource{}
		withFKs     = ourrq.withFKs
		_spec       = ourrq.querySpec()
		loadedTypes = [2]bool{
			ourrq.withAppliedPolicy != nil,
			ourrq.withInstance != nil,
		}
	)
	if ourrq.withAppliedPolicy != nil || ourrq.withInstance != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, osupdaterunresource.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OSUpdateRunResource).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OSUpdateRunResource{config: ourrq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ourrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ourrq.withAppliedPolicy; query != nil {
		if err := ourrq.loadAppliedPolicy(ctx, query, nodes, nil,
			func(n *OSUpdateRunResource, e *OSUpdatePolicyResource) { n.Edges.AppliedPolicy = e }); err != nil {
			return nil, err
		}
	}
	if query := ourrq.withInstance; query != nil {
		if err := ourrq.loadInstance(ctx, query, nodes, nil,
			func(n *OSUpdateRunResource, e *InstanceResource) { n.Edges.Instance = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ourrq *OSUpdateRunResourceQuery) loadAppliedPolicy(ctx context.Context, query *OSUpdatePolicyResourceQuery, nodes []*OSUpdateRunResource, init func(*OSUpdateRunResource), assign func(*OSUpdateRunResource, *OSUpdatePolicyResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OSUpdateRunResource)
	for i := range nodes {
		if nodes[i].os_update_run_resource_applied_policy == nil {
			continue
		}
		fk := *nodes[i].os_update_run_resource_applied_policy
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(osupdatepolicyresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "os_update_run_resource_applied_policy" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ourrq *OSUpdateRunResourceQuery) loadInstance(ctx context.Context, query *InstanceResourceQuery, nodes []*OSUpdateRunResource, init func(*OSUpdateRunResource), assign func(*OSUpdateRunResource, *InstanceResource)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*OSUpdateRunResource)
	for i := range nodes {
		if nodes[i].os_update_run_resource_instance == nil {
			continue
		}
		fk := *nodes[i].os_update_run_resource_instance
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(instanceresource.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "os_update_run_resource_instance" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ourrq *OSUpdateRunResourceQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ourrq.querySpec()
	_spec.Node.Columns = ourrq.ctx.Fields
	if len(ourrq.ctx.Fields) > 0 {
		_spec.Unique = ourrq.ctx.Unique != nil && *ourrq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ourrq.driver, _spec)
}

func (ourrq *OSUpdateRunResourceQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(osupdaterunresource.Table, osupdaterunresource.Columns, sqlgraph.NewFieldSpec(osupdaterunresource.FieldID, field.TypeInt))
	_spec.From = ourrq.sql
	if unique := ourrq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ourrq.path != nil {
		_spec.Unique = true
	}
	if fields := ourrq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osupdaterunresource.FieldID)
		for i := range fields {
			if fields[i] != osupdaterunresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ourrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ourrq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ourrq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ourrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ourrq *OSUpdateRunResourceQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ourrq.driver.Dialect())
	t1 := builder.Table(osupdaterunresource.Table)
	columns := ourrq.ctx.Fields
	if len(columns) == 0 {
		columns = osupdaterunresource.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ourrq.sql != nil {
		selector = ourrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ourrq.ctx.Unique != nil && *ourrq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ourrq.predicates {
		p(selector)
	}
	for _, p := range ourrq.order {
		p(selector)
	}
	if offset := ourrq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ourrq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OSUpdateRunResourceGroupBy is the group-by builder for OSUpdateRunResource entities.
type OSUpdateRunResourceGroupBy struct {
	selector
	build *OSUpdateRunResourceQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ourrgb *OSUpdateRunResourceGroupBy) Aggregate(fns ...AggregateFunc) *OSUpdateRunResourceGroupBy {
	ourrgb.fns = append(ourrgb.fns, fns...)
	return ourrgb
}

// Scan applies the selector query and scans the result into the given value.
func (ourrgb *OSUpdateRunResourceGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ourrgb.build.ctx, ent.OpQueryGroupBy)
	if err := ourrgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OSUpdateRunResourceQuery, *OSUpdateRunResourceGroupBy](ctx, ourrgb.build, ourrgb, ourrgb.build.inters, v)
}

func (ourrgb *OSUpdateRunResourceGroupBy) sqlScan(ctx context.Context, root *OSUpdateRunResourceQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ourrgb.fns))
	for _, fn := range ourrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ourrgb.flds)+len(ourrgb.fns))
		for _, f := range *ourrgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ourrgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ourrgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OSUpdateRunResourceSelect is the builder for selecting fields of OSUpdateRunResource entities.
type OSUpdateRunResourceSelect struct {
	*OSUpdateRunResourceQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ourrs *OSUpdateRunResourceSelect) Aggregate(fns ...AggregateFunc) *OSUpdateRunResourceSelect {
	ourrs.fns = append(ourrs.fns, fns...)
	return ourrs
}

// Scan applies the selector query and scans the result into the given value.
func (ourrs *OSUpdateRunResourceSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ourrs.ctx, ent.OpQuerySelect)
	if err := ourrs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OSUpdateRunResourceQuery, *OSUpdateRunResourceSelect](ctx, ourrs.OSUpdateRunResourceQuery, ourrs, ourrs.inters, v)
}

func (ourrs *OSUpdateRunResourceSelect) sqlScan(ctx context.Context, root *OSUpdateRunResourceQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ourrs.fns))
	for _, fn := range ourrs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ourrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ourrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
