// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/networksegment"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
)

// NetworkSegmentCreate is the builder for creating a NetworkSegment entity.
type NetworkSegmentCreate struct {
	config
	mutation *NetworkSegmentMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (_c *NetworkSegmentCreate) SetResourceID(v string) *NetworkSegmentCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetName sets the "name" field.
func (_c *NetworkSegmentCreate) SetName(v string) *NetworkSegmentCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *NetworkSegmentCreate) SetNillableName(v *string) *NetworkSegmentCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetVlanID sets the "vlan_id" field.
func (_c *NetworkSegmentCreate) SetVlanID(v int32) *NetworkSegmentCreate {
	_c.mutation.SetVlanID(v)
	return _c
}

// SetNillableVlanID sets the "vlan_id" field if the given value is not nil.
func (_c *NetworkSegmentCreate) SetNillableVlanID(v *int32) *NetworkSegmentCreate {
	if v != nil {
		_c.SetVlanID(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *NetworkSegmentCreate) SetTenantID(v string) *NetworkSegmentCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *NetworkSegmentCreate) SetCreatedAt(v string) *NetworkSegmentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *NetworkSegmentCreate) SetUpdatedAt(v string) *NetworkSegmentCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (_c *NetworkSegmentCreate) SetSiteID(id int) *NetworkSegmentCreate {
	_c.mutation.SetSiteID(id)
	return _c
}

// SetSite sets the "site" edge to the SiteResource entity.
func (_c *NetworkSegmentCreate) SetSite(v *SiteResource) *NetworkSegmentCreate {
	return _c.SetSiteID(v.ID)
}

// Mutation returns the NetworkSegmentMutation object of the builder.
func (_c *NetworkSegmentCreate) Mutation() *NetworkSegmentMutation {
	return _c.mutation
}

// Save creates the NetworkSegment in the database.
func (_c *NetworkSegmentCreate) Save(ctx context.Context) (*NetworkSegment, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *NetworkSegmentCreate) SaveX(ctx context.Context) *NetworkSegment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NetworkSegmentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NetworkSegmentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *NetworkSegmentCreate) check() error {
	if _, ok := _c.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "NetworkSegment.resource_id"`)}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "NetworkSegment.tenant_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NetworkSegment.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NetworkSegment.updated_at"`)}
	}
	if len(_c.mutation.SiteIDs()) == 0 {
		return &ValidationError{Name: "site", err: errors.New(`ent: missing required edge "NetworkSegment.site"`)}
	}
	return nil
}

func (_c *NetworkSegmentCreate) sqlSave(ctx context.Context) (*NetworkSegment, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *NetworkSegmentCreate) createSpec() (*NetworkSegment, *sqlgraph.CreateSpec) {
	var (
		_node = &NetworkSegment{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(networksegment.Table, sqlgraph.NewFieldSpec(networksegment.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(networksegment.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(networksegment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.VlanID(); ok {
		_spec.SetField(networksegment.FieldVlanID, field.TypeInt32, value)
		_node.VlanID = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(networksegment.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(networksegment.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(networksegment.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   networksegment.SiteTable,
			Columns: []string{networksegment.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.network_segment_site = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NetworkSegmentCreateBulk is the builder for creating many NetworkSegment entities in bulk.
type NetworkSegmentCreateBulk struct {
	config
	err      error
	builders []*NetworkSegmentCreate
}

// Save creates the NetworkSegment entities in the database.
func (_c *NetworkSegmentCreateBulk) Save(ctx context.Context) ([]*NetworkSegment, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*NetworkSegment, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NetworkSegmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *NetworkSegmentCreateBulk) SaveX(ctx context.Context) []*NetworkSegment {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *NetworkSegmentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *NetworkSegmentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
