// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/singlescheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// SingleScheduleResource is the model entity for the SingleScheduleResource schema.
type SingleScheduleResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// ScheduleStatus holds the value of the "schedule_status" field.
	ScheduleStatus singlescheduleresource.ScheduleStatus `json:"schedule_status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// StartSeconds holds the value of the "start_seconds" field.
	StartSeconds uint64 `json:"start_seconds,omitempty"`
	// EndSeconds holds the value of the "end_seconds" field.
	EndSeconds uint64 `json:"end_seconds,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SingleScheduleResourceQuery when eager-loading is set.
	Edges                                    SingleScheduleResourceEdges `json:"edges"`
	single_schedule_resource_target_site     *int
	single_schedule_resource_target_host     *int
	single_schedule_resource_target_workload *int
	single_schedule_resource_target_region   *int
	selectValues                             sql.SelectValues
}

// SingleScheduleResourceEdges holds the relations/edges for other nodes in the graph.
type SingleScheduleResourceEdges struct {
	// TargetSite holds the value of the target_site edge.
	TargetSite *SiteResource `json:"target_site,omitempty"`
	// TargetHost holds the value of the target_host edge.
	TargetHost *HostResource `json:"target_host,omitempty"`
	// TargetWorkload holds the value of the target_workload edge.
	TargetWorkload *WorkloadResource `json:"target_workload,omitempty"`
	// TargetRegion holds the value of the target_region edge.
	TargetRegion *RegionResource `json:"target_region,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TargetSiteOrErr returns the TargetSite value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SingleScheduleResourceEdges) TargetSiteOrErr() (*SiteResource, error) {
	if e.TargetSite != nil {
		return e.TargetSite, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: siteresource.Label}
	}
	return nil, &NotLoadedError{edge: "target_site"}
}

// TargetHostOrErr returns the TargetHost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SingleScheduleResourceEdges) TargetHostOrErr() (*HostResource, error) {
	if e.TargetHost != nil {
		return e.TargetHost, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: hostresource.Label}
	}
	return nil, &NotLoadedError{edge: "target_host"}
}

// TargetWorkloadOrErr returns the TargetWorkload value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SingleScheduleResourceEdges) TargetWorkloadOrErr() (*WorkloadResource, error) {
	if e.TargetWorkload != nil {
		return e.TargetWorkload, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: workloadresource.Label}
	}
	return nil, &NotLoadedError{edge: "target_workload"}
}

// TargetRegionOrErr returns the TargetRegion value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SingleScheduleResourceEdges) TargetRegionOrErr() (*RegionResource, error) {
	if e.TargetRegion != nil {
		return e.TargetRegion, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: regionresource.Label}
	}
	return nil, &NotLoadedError{edge: "target_region"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SingleScheduleResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case singlescheduleresource.FieldID, singlescheduleresource.FieldStartSeconds, singlescheduleresource.FieldEndSeconds:
			values[i] = new(sql.NullInt64)
		case singlescheduleresource.FieldResourceID, singlescheduleresource.FieldScheduleStatus, singlescheduleresource.FieldName, singlescheduleresource.FieldTenantID, singlescheduleresource.FieldCreatedAt, singlescheduleresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case singlescheduleresource.ForeignKeys[0]: // single_schedule_resource_target_site
			values[i] = new(sql.NullInt64)
		case singlescheduleresource.ForeignKeys[1]: // single_schedule_resource_target_host
			values[i] = new(sql.NullInt64)
		case singlescheduleresource.ForeignKeys[2]: // single_schedule_resource_target_workload
			values[i] = new(sql.NullInt64)
		case singlescheduleresource.ForeignKeys[3]: // single_schedule_resource_target_region
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SingleScheduleResource fields.
func (_m *SingleScheduleResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case singlescheduleresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case singlescheduleresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case singlescheduleresource.FieldScheduleStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_status", values[i])
			} else if value.Valid {
				_m.ScheduleStatus = singlescheduleresource.ScheduleStatus(value.String)
			}
		case singlescheduleresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case singlescheduleresource.FieldStartSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field start_seconds", values[i])
			} else if value.Valid {
				_m.StartSeconds = uint64(value.Int64)
			}
		case singlescheduleresource.FieldEndSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field end_seconds", values[i])
			} else if value.Valid {
				_m.EndSeconds = uint64(value.Int64)
			}
		case singlescheduleresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case singlescheduleresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case singlescheduleresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		case singlescheduleresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field single_schedule_resource_target_site", value)
			} else if value.Valid {
				_m.single_schedule_resource_target_site = new(int)
				*_m.single_schedule_resource_target_site = int(value.Int64)
			}
		case singlescheduleresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field single_schedule_resource_target_host", value)
			} else if value.Valid {
				_m.single_schedule_resource_target_host = new(int)
				*_m.single_schedule_resource_target_host = int(value.Int64)
			}
		case singlescheduleresource.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field single_schedule_resource_target_workload", value)
			} else if value.Valid {
				_m.single_schedule_resource_target_workload = new(int)
				*_m.single_schedule_resource_target_workload = int(value.Int64)
			}
		case singlescheduleresource.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field single_schedule_resource_target_region", value)
			} else if value.Valid {
				_m.single_schedule_resource_target_region = new(int)
				*_m.single_schedule_resource_target_region = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SingleScheduleResource.
// This includes values selected through modifiers, order, etc.
func (_m *SingleScheduleResource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTargetSite queries the "target_site" edge of the SingleScheduleResource entity.
func (_m *SingleScheduleResource) QueryTargetSite() *SiteResourceQuery {
	return NewSingleScheduleResourceClient(_m.config).QueryTargetSite(_m)
}

// QueryTargetHost queries the "target_host" edge of the SingleScheduleResource entity.
func (_m *SingleScheduleResource) QueryTargetHost() *HostResourceQuery {
	return NewSingleScheduleResourceClient(_m.config).QueryTargetHost(_m)
}

// QueryTargetWorkload queries the "target_workload" edge of the SingleScheduleResource entity.
func (_m *SingleScheduleResource) QueryTargetWorkload() *WorkloadResourceQuery {
	return NewSingleScheduleResourceClient(_m.config).QueryTargetWorkload(_m)
}

// QueryTargetRegion queries the "target_region" edge of the SingleScheduleResource entity.
func (_m *SingleScheduleResource) QueryTargetRegion() *RegionResourceQuery {
	return NewSingleScheduleResourceClient(_m.config).QueryTargetRegion(_m)
}

// Update returns a builder for updating this SingleScheduleResource.
// Note that you need to call SingleScheduleResource.Unwrap() before calling this method if this SingleScheduleResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SingleScheduleResource) Update() *SingleScheduleResourceUpdateOne {
	return NewSingleScheduleResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SingleScheduleResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SingleScheduleResource) Unwrap() *SingleScheduleResource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SingleScheduleResource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SingleScheduleResource) String() string {
	var builder strings.Builder
	builder.WriteString("SingleScheduleResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("schedule_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.ScheduleStatus))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("start_seconds=")
	builder.WriteString(fmt.Sprintf("%v", _m.StartSeconds))
	builder.WriteString(", ")
	builder.WriteString("end_seconds=")
	builder.WriteString(fmt.Sprintf("%v", _m.EndSeconds))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// SingleScheduleResources is a parsable slice of SingleScheduleResource.
type SingleScheduleResources []*SingleScheduleResource
