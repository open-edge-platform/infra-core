// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
)

// OSUpdatePolicyResource is the model entity for the OSUpdatePolicyResource schema.
type OSUpdatePolicyResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// InstallPackages holds the value of the "install_packages" field.
	InstallPackages string `json:"install_packages,omitempty"`
	// UpdateSources holds the value of the "update_sources" field.
	UpdateSources string `json:"update_sources,omitempty"`
	// KernelCommand holds the value of the "kernel_command" field.
	KernelCommand string `json:"kernel_command,omitempty"`
	// UpdatePolicy holds the value of the "update_policy" field.
	UpdatePolicy osupdatepolicyresource.UpdatePolicy `json:"update_policy,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OSUpdatePolicyResourceQuery when eager-loading is set.
	Edges                               OSUpdatePolicyResourceEdges `json:"edges"`
	os_update_policy_resource_target_os *int
	selectValues                        sql.SelectValues
}

// OSUpdatePolicyResourceEdges holds the relations/edges for other nodes in the graph.
type OSUpdatePolicyResourceEdges struct {
	// TargetOs holds the value of the target_os edge.
	TargetOs *OperatingSystemResource `json:"target_os,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TargetOsOrErr returns the TargetOs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e OSUpdatePolicyResourceEdges) TargetOsOrErr() (*OperatingSystemResource, error) {
	if e.TargetOs != nil {
		return e.TargetOs, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: operatingsystemresource.Label}
	}
	return nil, &NotLoadedError{edge: "target_os"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OSUpdatePolicyResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case osupdatepolicyresource.FieldID:
			values[i] = new(sql.NullInt64)
		case osupdatepolicyresource.FieldResourceID, osupdatepolicyresource.FieldName, osupdatepolicyresource.FieldDescription, osupdatepolicyresource.FieldInstallPackages, osupdatepolicyresource.FieldUpdateSources, osupdatepolicyresource.FieldKernelCommand, osupdatepolicyresource.FieldUpdatePolicy, osupdatepolicyresource.FieldTenantID, osupdatepolicyresource.FieldCreatedAt, osupdatepolicyresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case osupdatepolicyresource.ForeignKeys[0]: // os_update_policy_resource_target_os
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OSUpdatePolicyResource fields.
func (oupr *OSUpdatePolicyResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case osupdatepolicyresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			oupr.ID = int(value.Int64)
		case osupdatepolicyresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				oupr.ResourceID = value.String
			}
		case osupdatepolicyresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oupr.Name = value.String
			}
		case osupdatepolicyresource.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				oupr.Description = value.String
			}
		case osupdatepolicyresource.FieldInstallPackages:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field install_packages", values[i])
			} else if value.Valid {
				oupr.InstallPackages = value.String
			}
		case osupdatepolicyresource.FieldUpdateSources:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_sources", values[i])
			} else if value.Valid {
				oupr.UpdateSources = value.String
			}
		case osupdatepolicyresource.FieldKernelCommand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kernel_command", values[i])
			} else if value.Valid {
				oupr.KernelCommand = value.String
			}
		case osupdatepolicyresource.FieldUpdatePolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_policy", values[i])
			} else if value.Valid {
				oupr.UpdatePolicy = osupdatepolicyresource.UpdatePolicy(value.String)
			}
		case osupdatepolicyresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				oupr.TenantID = value.String
			}
		case osupdatepolicyresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oupr.CreatedAt = value.String
			}
		case osupdatepolicyresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oupr.UpdatedAt = value.String
			}
		case osupdatepolicyresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field os_update_policy_resource_target_os", value)
			} else if value.Valid {
				oupr.os_update_policy_resource_target_os = new(int)
				*oupr.os_update_policy_resource_target_os = int(value.Int64)
			}
		default:
			oupr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OSUpdatePolicyResource.
// This includes values selected through modifiers, order, etc.
func (oupr *OSUpdatePolicyResource) Value(name string) (ent.Value, error) {
	return oupr.selectValues.Get(name)
}

// QueryTargetOs queries the "target_os" edge of the OSUpdatePolicyResource entity.
func (oupr *OSUpdatePolicyResource) QueryTargetOs() *OperatingSystemResourceQuery {
	return NewOSUpdatePolicyResourceClient(oupr.config).QueryTargetOs(oupr)
}

// Update returns a builder for updating this OSUpdatePolicyResource.
// Note that you need to call OSUpdatePolicyResource.Unwrap() before calling this method if this OSUpdatePolicyResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (oupr *OSUpdatePolicyResource) Update() *OSUpdatePolicyResourceUpdateOne {
	return NewOSUpdatePolicyResourceClient(oupr.config).UpdateOne(oupr)
}

// Unwrap unwraps the OSUpdatePolicyResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oupr *OSUpdatePolicyResource) Unwrap() *OSUpdatePolicyResource {
	_tx, ok := oupr.config.driver.(*txDriver)
	if !ok {
		panic("ent: OSUpdatePolicyResource is not a transactional entity")
	}
	oupr.config.driver = _tx.drv
	return oupr
}

// String implements the fmt.Stringer.
func (oupr *OSUpdatePolicyResource) String() string {
	var builder strings.Builder
	builder.WriteString("OSUpdatePolicyResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oupr.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(oupr.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oupr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(oupr.Description)
	builder.WriteString(", ")
	builder.WriteString("install_packages=")
	builder.WriteString(oupr.InstallPackages)
	builder.WriteString(", ")
	builder.WriteString("update_sources=")
	builder.WriteString(oupr.UpdateSources)
	builder.WriteString(", ")
	builder.WriteString("kernel_command=")
	builder.WriteString(oupr.KernelCommand)
	builder.WriteString(", ")
	builder.WriteString("update_policy=")
	builder.WriteString(fmt.Sprintf("%v", oupr.UpdatePolicy))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(oupr.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(oupr.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oupr.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// OSUpdatePolicyResources is a parsable slice of OSUpdatePolicyResource.
type OSUpdatePolicyResources []*OSUpdatePolicyResource
