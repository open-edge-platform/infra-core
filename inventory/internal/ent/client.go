// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/endpointresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostgpuresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hoststorageresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostusbresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ipaddressresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/netlinkresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/networksegment"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicy"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdaterunresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ouresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/remoteaccessconfiguration"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/repeatedscheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/singlescheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/telemetrygroupresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/telemetryprofile"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/tenant"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"

	stdsql "database/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CustomConfigResource is the client for interacting with the CustomConfigResource builders.
	CustomConfigResource *CustomConfigResourceClient
	// EndpointResource is the client for interacting with the EndpointResource builders.
	EndpointResource *EndpointResourceClient
	// HostResource is the client for interacting with the HostResource builders.
	HostResource *HostResourceClient
	// HostgpuResource is the client for interacting with the HostgpuResource builders.
	HostgpuResource *HostgpuResourceClient
	// HostnicResource is the client for interacting with the HostnicResource builders.
	HostnicResource *HostnicResourceClient
	// HoststorageResource is the client for interacting with the HoststorageResource builders.
	HoststorageResource *HoststorageResourceClient
	// HostusbResource is the client for interacting with the HostusbResource builders.
	HostusbResource *HostusbResourceClient
	// IPAddressResource is the client for interacting with the IPAddressResource builders.
	IPAddressResource *IPAddressResourceClient
	// InstanceResource is the client for interacting with the InstanceResource builders.
	InstanceResource *InstanceResourceClient
	// LocalAccountResource is the client for interacting with the LocalAccountResource builders.
	LocalAccountResource *LocalAccountResourceClient
	// NetlinkResource is the client for interacting with the NetlinkResource builders.
	NetlinkResource *NetlinkResourceClient
	// NetworkSegment is the client for interacting with the NetworkSegment builders.
	NetworkSegment *NetworkSegmentClient
	// OSUpdatePolicy is the client for interacting with the OSUpdatePolicy builders.
	OSUpdatePolicy *OSUpdatePolicyClient
	// OSUpdatePolicyResource is the client for interacting with the OSUpdatePolicyResource builders.
	OSUpdatePolicyResource *OSUpdatePolicyResourceClient
	// OSUpdateRunResource is the client for interacting with the OSUpdateRunResource builders.
	OSUpdateRunResource *OSUpdateRunResourceClient
	// OperatingSystemResource is the client for interacting with the OperatingSystemResource builders.
	OperatingSystemResource *OperatingSystemResourceClient
	// OuResource is the client for interacting with the OuResource builders.
	OuResource *OuResourceClient
	// ProviderResource is the client for interacting with the ProviderResource builders.
	ProviderResource *ProviderResourceClient
	// RegionResource is the client for interacting with the RegionResource builders.
	RegionResource *RegionResourceClient
	// RemoteAccessConfiguration is the client for interacting with the RemoteAccessConfiguration builders.
	RemoteAccessConfiguration *RemoteAccessConfigurationClient
	// RepeatedScheduleResource is the client for interacting with the RepeatedScheduleResource builders.
	RepeatedScheduleResource *RepeatedScheduleResourceClient
	// SingleScheduleResource is the client for interacting with the SingleScheduleResource builders.
	SingleScheduleResource *SingleScheduleResourceClient
	// SiteResource is the client for interacting with the SiteResource builders.
	SiteResource *SiteResourceClient
	// TelemetryGroupResource is the client for interacting with the TelemetryGroupResource builders.
	TelemetryGroupResource *TelemetryGroupResourceClient
	// TelemetryProfile is the client for interacting with the TelemetryProfile builders.
	TelemetryProfile *TelemetryProfileClient
	// Tenant is the client for interacting with the Tenant builders.
	Tenant *TenantClient
	// WorkloadMember is the client for interacting with the WorkloadMember builders.
	WorkloadMember *WorkloadMemberClient
	// WorkloadResource is the client for interacting with the WorkloadResource builders.
	WorkloadResource *WorkloadResourceClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CustomConfigResource = NewCustomConfigResourceClient(c.config)
	c.EndpointResource = NewEndpointResourceClient(c.config)
	c.HostResource = NewHostResourceClient(c.config)
	c.HostgpuResource = NewHostgpuResourceClient(c.config)
	c.HostnicResource = NewHostnicResourceClient(c.config)
	c.HoststorageResource = NewHoststorageResourceClient(c.config)
	c.HostusbResource = NewHostusbResourceClient(c.config)
	c.IPAddressResource = NewIPAddressResourceClient(c.config)
	c.InstanceResource = NewInstanceResourceClient(c.config)
	c.LocalAccountResource = NewLocalAccountResourceClient(c.config)
	c.NetlinkResource = NewNetlinkResourceClient(c.config)
	c.NetworkSegment = NewNetworkSegmentClient(c.config)
	c.OSUpdatePolicy = NewOSUpdatePolicyClient(c.config)
	c.OSUpdatePolicyResource = NewOSUpdatePolicyResourceClient(c.config)
	c.OSUpdateRunResource = NewOSUpdateRunResourceClient(c.config)
	c.OperatingSystemResource = NewOperatingSystemResourceClient(c.config)
	c.OuResource = NewOuResourceClient(c.config)
	c.ProviderResource = NewProviderResourceClient(c.config)
	c.RegionResource = NewRegionResourceClient(c.config)
	c.RemoteAccessConfiguration = NewRemoteAccessConfigurationClient(c.config)
	c.RepeatedScheduleResource = NewRepeatedScheduleResourceClient(c.config)
	c.SingleScheduleResource = NewSingleScheduleResourceClient(c.config)
	c.SiteResource = NewSiteResourceClient(c.config)
	c.TelemetryGroupResource = NewTelemetryGroupResourceClient(c.config)
	c.TelemetryProfile = NewTelemetryProfileClient(c.config)
	c.Tenant = NewTenantClient(c.config)
	c.WorkloadMember = NewWorkloadMemberClient(c.config)
	c.WorkloadResource = NewWorkloadResourceClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		CustomConfigResource:      NewCustomConfigResourceClient(cfg),
		EndpointResource:          NewEndpointResourceClient(cfg),
		HostResource:              NewHostResourceClient(cfg),
		HostgpuResource:           NewHostgpuResourceClient(cfg),
		HostnicResource:           NewHostnicResourceClient(cfg),
		HoststorageResource:       NewHoststorageResourceClient(cfg),
		HostusbResource:           NewHostusbResourceClient(cfg),
		IPAddressResource:         NewIPAddressResourceClient(cfg),
		InstanceResource:          NewInstanceResourceClient(cfg),
		LocalAccountResource:      NewLocalAccountResourceClient(cfg),
		NetlinkResource:           NewNetlinkResourceClient(cfg),
		NetworkSegment:            NewNetworkSegmentClient(cfg),
		OSUpdatePolicy:            NewOSUpdatePolicyClient(cfg),
		OSUpdatePolicyResource:    NewOSUpdatePolicyResourceClient(cfg),
		OSUpdateRunResource:       NewOSUpdateRunResourceClient(cfg),
		OperatingSystemResource:   NewOperatingSystemResourceClient(cfg),
		OuResource:                NewOuResourceClient(cfg),
		ProviderResource:          NewProviderResourceClient(cfg),
		RegionResource:            NewRegionResourceClient(cfg),
		RemoteAccessConfiguration: NewRemoteAccessConfigurationClient(cfg),
		RepeatedScheduleResource:  NewRepeatedScheduleResourceClient(cfg),
		SingleScheduleResource:    NewSingleScheduleResourceClient(cfg),
		SiteResource:              NewSiteResourceClient(cfg),
		TelemetryGroupResource:    NewTelemetryGroupResourceClient(cfg),
		TelemetryProfile:          NewTelemetryProfileClient(cfg),
		Tenant:                    NewTenantClient(cfg),
		WorkloadMember:            NewWorkloadMemberClient(cfg),
		WorkloadResource:          NewWorkloadResourceClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                       ctx,
		config:                    cfg,
		CustomConfigResource:      NewCustomConfigResourceClient(cfg),
		EndpointResource:          NewEndpointResourceClient(cfg),
		HostResource:              NewHostResourceClient(cfg),
		HostgpuResource:           NewHostgpuResourceClient(cfg),
		HostnicResource:           NewHostnicResourceClient(cfg),
		HoststorageResource:       NewHoststorageResourceClient(cfg),
		HostusbResource:           NewHostusbResourceClient(cfg),
		IPAddressResource:         NewIPAddressResourceClient(cfg),
		InstanceResource:          NewInstanceResourceClient(cfg),
		LocalAccountResource:      NewLocalAccountResourceClient(cfg),
		NetlinkResource:           NewNetlinkResourceClient(cfg),
		NetworkSegment:            NewNetworkSegmentClient(cfg),
		OSUpdatePolicy:            NewOSUpdatePolicyClient(cfg),
		OSUpdatePolicyResource:    NewOSUpdatePolicyResourceClient(cfg),
		OSUpdateRunResource:       NewOSUpdateRunResourceClient(cfg),
		OperatingSystemResource:   NewOperatingSystemResourceClient(cfg),
		OuResource:                NewOuResourceClient(cfg),
		ProviderResource:          NewProviderResourceClient(cfg),
		RegionResource:            NewRegionResourceClient(cfg),
		RemoteAccessConfiguration: NewRemoteAccessConfigurationClient(cfg),
		RepeatedScheduleResource:  NewRepeatedScheduleResourceClient(cfg),
		SingleScheduleResource:    NewSingleScheduleResourceClient(cfg),
		SiteResource:              NewSiteResourceClient(cfg),
		TelemetryGroupResource:    NewTelemetryGroupResourceClient(cfg),
		TelemetryProfile:          NewTelemetryProfileClient(cfg),
		Tenant:                    NewTenantClient(cfg),
		WorkloadMember:            NewWorkloadMemberClient(cfg),
		WorkloadResource:          NewWorkloadResourceClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CustomConfigResource.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.CustomConfigResource, c.EndpointResource, c.HostResource, c.HostgpuResource,
		c.HostnicResource, c.HoststorageResource, c.HostusbResource,
		c.IPAddressResource, c.InstanceResource, c.LocalAccountResource,
		c.NetlinkResource, c.NetworkSegment, c.OSUpdatePolicy,
		c.OSUpdatePolicyResource, c.OSUpdateRunResource, c.OperatingSystemResource,
		c.OuResource, c.ProviderResource, c.RegionResource,
		c.RemoteAccessConfiguration, c.RepeatedScheduleResource,
		c.SingleScheduleResource, c.SiteResource, c.TelemetryGroupResource,
		c.TelemetryProfile, c.Tenant, c.WorkloadMember, c.WorkloadResource,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.CustomConfigResource, c.EndpointResource, c.HostResource, c.HostgpuResource,
		c.HostnicResource, c.HoststorageResource, c.HostusbResource,
		c.IPAddressResource, c.InstanceResource, c.LocalAccountResource,
		c.NetlinkResource, c.NetworkSegment, c.OSUpdatePolicy,
		c.OSUpdatePolicyResource, c.OSUpdateRunResource, c.OperatingSystemResource,
		c.OuResource, c.ProviderResource, c.RegionResource,
		c.RemoteAccessConfiguration, c.RepeatedScheduleResource,
		c.SingleScheduleResource, c.SiteResource, c.TelemetryGroupResource,
		c.TelemetryProfile, c.Tenant, c.WorkloadMember, c.WorkloadResource,
	} {
	case *HostResourceMutation:
		return c.HostResource.mutate(ctx, m)
	case *HostgpuResourceMutation:
		return c.HostgpuResource.mutate(ctx, m)
	case *HostnicResourceMutation:
		return c.HostnicResource.mutate(ctx, m)
	case *HoststorageResourceMutation:
		return c.HoststorageResource.mutate(ctx, m)
	case *HostusbResourceMutation:
		return c.HostusbResource.mutate(ctx, m)
	case *IPAddressResourceMutation:
		return c.IPAddressResource.mutate(ctx, m)
	case *InstanceResourceMutation:
		return c.InstanceResource.mutate(ctx, m)
	case *LocalAccountResourceMutation:
		return c.LocalAccountResource.mutate(ctx, m)
	case *NetlinkResourceMutation:
		return c.NetlinkResource.mutate(ctx, m)
	case *NetworkSegmentMutation:
		return c.NetworkSegment.mutate(ctx, m)
	case *OSUpdatePolicyMutation:
		return c.OSUpdatePolicy.mutate(ctx, m)
	case *OSUpdatePolicyResourceMutation:
		return c.OSUpdatePolicyResource.mutate(ctx, m)
	case *OSUpdateRunResourceMutation:
		return c.OSUpdateRunResource.mutate(ctx, m)
	case *OperatingSystemResourceMutation:
		return c.OperatingSystemResource.mutate(ctx, m)
	case *OuResourceMutation:
		return c.OuResource.mutate(ctx, m)
	case *ProviderResourceMutation:
		return c.ProviderResource.mutate(ctx, m)
	case *RegionResourceMutation:
		return c.RegionResource.mutate(ctx, m)
	case *RemoteAccessConfigurationMutation:
		return c.RemoteAccessConfiguration.mutate(ctx, m)
	case *RepeatedScheduleResourceMutation:
		return c.RepeatedScheduleResource.mutate(ctx, m)
	case *SingleScheduleResourceMutation:
		return c.SingleScheduleResource.mutate(ctx, m)
	case *SiteResourceMutation:
		return c.SiteResource.mutate(ctx, m)
	case *TelemetryGroupResourceMutation:
		return c.TelemetryGroupResource.mutate(ctx, m)
	case *TelemetryProfileMutation:
		return c.TelemetryProfile.mutate(ctx, m)
	case *TenantMutation:
		return c.Tenant.mutate(ctx, m)
	case *WorkloadMemberMutation:
		return c.WorkloadMember.mutate(ctx, m)
	case *WorkloadResourceMutation:
		return c.WorkloadResource.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// CustomConfigResourceClient is a client for the CustomConfigResource schema.
type CustomConfigResourceClient struct {
	config
}

// NewCustomConfigResourceClient returns a client for the CustomConfigResource from the given config.
func NewCustomConfigResourceClient(c config) *CustomConfigResourceClient {
	return &CustomConfigResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `customconfigresource.Hooks(f(g(h())))`.
func (c *CustomConfigResourceClient) Use(hooks ...Hook) {
	c.hooks.CustomConfigResource = append(c.hooks.CustomConfigResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `customconfigresource.Intercept(f(g(h())))`.
func (c *CustomConfigResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.CustomConfigResource = append(c.inters.CustomConfigResource, interceptors...)
}

// Create returns a builder for creating a CustomConfigResource entity.
func (c *CustomConfigResourceClient) Create() *CustomConfigResourceCreate {
	mutation := newCustomConfigResourceMutation(c.config, OpCreate)
	return &CustomConfigResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CustomConfigResource entities.
func (c *CustomConfigResourceClient) CreateBulk(builders ...*CustomConfigResourceCreate) *CustomConfigResourceCreateBulk {
	return &CustomConfigResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CustomConfigResourceClient) MapCreateBulk(slice any, setFunc func(*CustomConfigResourceCreate, int)) *CustomConfigResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CustomConfigResourceCreateBulk{err: fmt.Errorf("calling to CustomConfigResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CustomConfigResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CustomConfigResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CustomConfigResource.
func (c *CustomConfigResourceClient) Update() *CustomConfigResourceUpdate {
	mutation := newCustomConfigResourceMutation(c.config, OpUpdate)
	return &CustomConfigResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CustomConfigResourceClient) UpdateOne(ccr *CustomConfigResource) *CustomConfigResourceUpdateOne {
	mutation := newCustomConfigResourceMutation(c.config, OpUpdateOne, withCustomConfigResource(ccr))
	return &CustomConfigResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CustomConfigResourceClient) UpdateOneID(id int) *CustomConfigResourceUpdateOne {
	mutation := newCustomConfigResourceMutation(c.config, OpUpdateOne, withCustomConfigResourceID(id))
	return &CustomConfigResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CustomConfigResource.
func (c *CustomConfigResourceClient) Delete() *CustomConfigResourceDelete {
	mutation := newCustomConfigResourceMutation(c.config, OpDelete)
	return &CustomConfigResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CustomConfigResourceClient) DeleteOne(ccr *CustomConfigResource) *CustomConfigResourceDeleteOne {
	return c.DeleteOneID(ccr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CustomConfigResourceClient) DeleteOneID(id int) *CustomConfigResourceDeleteOne {
	builder := c.Delete().Where(customconfigresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CustomConfigResourceDeleteOne{builder}
}

// Query returns a query builder for CustomConfigResource.
func (c *CustomConfigResourceClient) Query() *CustomConfigResourceQuery {
	return &CustomConfigResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCustomConfigResource},
		inters: c.Interceptors(),
	}
}

// Get returns a CustomConfigResource entity by its id.
func (c *CustomConfigResourceClient) Get(ctx context.Context, id int) (*CustomConfigResource, error) {
	return c.Query().Where(customconfigresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CustomConfigResourceClient) GetX(ctx context.Context, id int) *CustomConfigResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstances queries the instances edge of a CustomConfigResource.
func (c *CustomConfigResourceClient) QueryInstances(ccr *CustomConfigResource) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ccr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(customconfigresource.Table, customconfigresource.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, customconfigresource.InstancesTable, customconfigresource.InstancesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ccr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CustomConfigResourceClient) Hooks() []Hook {
	return c.hooks.CustomConfigResource
}

// Interceptors returns the client interceptors.
func (c *CustomConfigResourceClient) Interceptors() []Interceptor {
	return c.inters.CustomConfigResource
}

func (c *CustomConfigResourceClient) mutate(ctx context.Context, m *CustomConfigResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CustomConfigResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CustomConfigResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CustomConfigResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CustomConfigResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CustomConfigResource mutation op: %q", m.Op())
	}
}

// EndpointResourceClient is a client for the EndpointResource schema.
type EndpointResourceClient struct {
	config
}

// NewEndpointResourceClient returns a client for the EndpointResource from the given config.
func NewEndpointResourceClient(c config) *EndpointResourceClient {
	return &EndpointResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `endpointresource.Hooks(f(g(h())))`.
func (c *EndpointResourceClient) Use(hooks ...Hook) {
	c.hooks.EndpointResource = append(c.hooks.EndpointResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `endpointresource.Intercept(f(g(h())))`.
func (c *EndpointResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.EndpointResource = append(c.inters.EndpointResource, interceptors...)
}

// Create returns a builder for creating a EndpointResource entity.
func (c *EndpointResourceClient) Create() *EndpointResourceCreate {
	mutation := newEndpointResourceMutation(c.config, OpCreate)
	return &EndpointResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EndpointResource entities.
func (c *EndpointResourceClient) CreateBulk(builders ...*EndpointResourceCreate) *EndpointResourceCreateBulk {
	return &EndpointResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EndpointResourceClient) MapCreateBulk(slice any, setFunc func(*EndpointResourceCreate, int)) *EndpointResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EndpointResourceCreateBulk{err: fmt.Errorf("calling to EndpointResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EndpointResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EndpointResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EndpointResource.
func (c *EndpointResourceClient) Update() *EndpointResourceUpdate {
	mutation := newEndpointResourceMutation(c.config, OpUpdate)
	return &EndpointResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EndpointResourceClient) UpdateOne(er *EndpointResource) *EndpointResourceUpdateOne {
	mutation := newEndpointResourceMutation(c.config, OpUpdateOne, withEndpointResource(er))
	return &EndpointResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EndpointResourceClient) UpdateOneID(id int) *EndpointResourceUpdateOne {
	mutation := newEndpointResourceMutation(c.config, OpUpdateOne, withEndpointResourceID(id))
	return &EndpointResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EndpointResource.
func (c *EndpointResourceClient) Delete() *EndpointResourceDelete {
	mutation := newEndpointResourceMutation(c.config, OpDelete)
	return &EndpointResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EndpointResourceClient) DeleteOne(er *EndpointResource) *EndpointResourceDeleteOne {
	return c.DeleteOneID(er.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EndpointResourceClient) DeleteOneID(id int) *EndpointResourceDeleteOne {
	builder := c.Delete().Where(endpointresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EndpointResourceDeleteOne{builder}
}

// Query returns a query builder for EndpointResource.
func (c *EndpointResourceClient) Query() *EndpointResourceQuery {
	return &EndpointResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEndpointResource},
		inters: c.Interceptors(),
	}
}

// Get returns a EndpointResource entity by its id.
func (c *EndpointResourceClient) Get(ctx context.Context, id int) (*EndpointResource, error) {
	return c.Query().Where(endpointresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EndpointResourceClient) GetX(ctx context.Context, id int) *EndpointResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a EndpointResource.
func (c *EndpointResourceClient) QueryHost(er *EndpointResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := er.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(endpointresource.Table, endpointresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, endpointresource.HostTable, endpointresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(er.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EndpointResourceClient) Hooks() []Hook {
	return c.hooks.EndpointResource
}

// Interceptors returns the client interceptors.
func (c *EndpointResourceClient) Interceptors() []Interceptor {
	return c.inters.EndpointResource
}

func (c *EndpointResourceClient) mutate(ctx context.Context, m *EndpointResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EndpointResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EndpointResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EndpointResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EndpointResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown EndpointResource mutation op: %q", m.Op())
	}
}

// HostResourceClient is a client for the HostResource schema.
type HostResourceClient struct {
	config
}

// NewHostResourceClient returns a client for the HostResource from the given config.
func NewHostResourceClient(c config) *HostResourceClient {
	return &HostResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostresource.Hooks(f(g(h())))`.
func (c *HostResourceClient) Use(hooks ...Hook) {
	c.hooks.HostResource = append(c.hooks.HostResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostresource.Intercept(f(g(h())))`.
func (c *HostResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostResource = append(c.inters.HostResource, interceptors...)
}

// Create returns a builder for creating a HostResource entity.
func (c *HostResourceClient) Create() *HostResourceCreate {
	mutation := newHostResourceMutation(c.config, OpCreate)
	return &HostResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostResource entities.
func (c *HostResourceClient) CreateBulk(builders ...*HostResourceCreate) *HostResourceCreateBulk {
	return &HostResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostResourceClient) MapCreateBulk(slice any, setFunc func(*HostResourceCreate, int)) *HostResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostResourceCreateBulk{err: fmt.Errorf("calling to HostResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostResource.
func (c *HostResourceClient) Update() *HostResourceUpdate {
	mutation := newHostResourceMutation(c.config, OpUpdate)
	return &HostResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostResourceClient) UpdateOne(hr *HostResource) *HostResourceUpdateOne {
	mutation := newHostResourceMutation(c.config, OpUpdateOne, withHostResource(hr))
	return &HostResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostResourceClient) UpdateOneID(id int) *HostResourceUpdateOne {
	mutation := newHostResourceMutation(c.config, OpUpdateOne, withHostResourceID(id))
	return &HostResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostResource.
func (c *HostResourceClient) Delete() *HostResourceDelete {
	mutation := newHostResourceMutation(c.config, OpDelete)
	return &HostResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostResourceClient) DeleteOne(hr *HostResource) *HostResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostResourceClient) DeleteOneID(id int) *HostResourceDeleteOne {
	builder := c.Delete().Where(hostresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostResourceDeleteOne{builder}
}

// Query returns a query builder for HostResource.
func (c *HostResourceClient) Query() *HostResourceQuery {
	return &HostResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostResource entity by its id.
func (c *HostResourceClient) Get(ctx context.Context, id int) (*HostResource, error) {
	return c.Query().Where(hostresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostResourceClient) GetX(ctx context.Context, id int) *HostResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a HostResource.
func (c *HostResourceClient) QuerySite(hr *HostResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.SiteTable, hostresource.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a HostResource.
func (c *HostResourceClient) QueryProvider(hr *HostResource) *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostresource.ProviderTable, hostresource.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostStorages queries the host_storages edge of a HostResource.
func (c *HostResourceClient) QueryHostStorages(hr *HostResource) *HoststorageResourceQuery {
	query := (&HoststorageResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hoststorageresource.Table, hoststorageresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostStoragesTable, hostresource.HostStoragesColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostNics queries the host_nics edge of a HostResource.
func (c *HostResourceClient) QueryHostNics(hr *HostResource) *HostnicResourceQuery {
	query := (&HostnicResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hostnicresource.Table, hostnicresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostNicsTable, hostresource.HostNicsColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostUsbs queries the host_usbs edge of a HostResource.
func (c *HostResourceClient) QueryHostUsbs(hr *HostResource) *HostusbResourceQuery {
	query := (&HostusbResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hostusbresource.Table, hostusbresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostUsbsTable, hostresource.HostUsbsColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHostGpus queries the host_gpus edge of a HostResource.
func (c *HostResourceClient) QueryHostGpus(hr *HostResource) *HostgpuResourceQuery {
	query := (&HostgpuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(hostgpuresource.Table, hostgpuresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, hostresource.HostGpusTable, hostresource.HostGpusColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a HostResource.
func (c *HostResourceClient) QueryInstance(hr *HostResource) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostresource.Table, hostresource.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, hostresource.InstanceTable, hostresource.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostResourceClient) Hooks() []Hook {
	return c.hooks.HostResource
}

// Interceptors returns the client interceptors.
func (c *HostResourceClient) Interceptors() []Interceptor {
	return c.inters.HostResource
}

func (c *HostResourceClient) mutate(ctx context.Context, m *HostResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostResource mutation op: %q", m.Op())
	}
}

// HostgpuResourceClient is a client for the HostgpuResource schema.
type HostgpuResourceClient struct {
	config
}

// NewHostgpuResourceClient returns a client for the HostgpuResource from the given config.
func NewHostgpuResourceClient(c config) *HostgpuResourceClient {
	return &HostgpuResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostgpuresource.Hooks(f(g(h())))`.
func (c *HostgpuResourceClient) Use(hooks ...Hook) {
	c.hooks.HostgpuResource = append(c.hooks.HostgpuResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostgpuresource.Intercept(f(g(h())))`.
func (c *HostgpuResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostgpuResource = append(c.inters.HostgpuResource, interceptors...)
}

// Create returns a builder for creating a HostgpuResource entity.
func (c *HostgpuResourceClient) Create() *HostgpuResourceCreate {
	mutation := newHostgpuResourceMutation(c.config, OpCreate)
	return &HostgpuResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostgpuResource entities.
func (c *HostgpuResourceClient) CreateBulk(builders ...*HostgpuResourceCreate) *HostgpuResourceCreateBulk {
	return &HostgpuResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostgpuResourceClient) MapCreateBulk(slice any, setFunc func(*HostgpuResourceCreate, int)) *HostgpuResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostgpuResourceCreateBulk{err: fmt.Errorf("calling to HostgpuResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostgpuResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostgpuResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostgpuResource.
func (c *HostgpuResourceClient) Update() *HostgpuResourceUpdate {
	mutation := newHostgpuResourceMutation(c.config, OpUpdate)
	return &HostgpuResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostgpuResourceClient) UpdateOne(hr *HostgpuResource) *HostgpuResourceUpdateOne {
	mutation := newHostgpuResourceMutation(c.config, OpUpdateOne, withHostgpuResource(hr))
	return &HostgpuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostgpuResourceClient) UpdateOneID(id int) *HostgpuResourceUpdateOne {
	mutation := newHostgpuResourceMutation(c.config, OpUpdateOne, withHostgpuResourceID(id))
	return &HostgpuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostgpuResource.
func (c *HostgpuResourceClient) Delete() *HostgpuResourceDelete {
	mutation := newHostgpuResourceMutation(c.config, OpDelete)
	return &HostgpuResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostgpuResourceClient) DeleteOne(hr *HostgpuResource) *HostgpuResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostgpuResourceClient) DeleteOneID(id int) *HostgpuResourceDeleteOne {
	builder := c.Delete().Where(hostgpuresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostgpuResourceDeleteOne{builder}
}

// Query returns a query builder for HostgpuResource.
func (c *HostgpuResourceClient) Query() *HostgpuResourceQuery {
	return &HostgpuResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostgpuResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostgpuResource entity by its id.
func (c *HostgpuResourceClient) Get(ctx context.Context, id int) (*HostgpuResource, error) {
	return c.Query().Where(hostgpuresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostgpuResourceClient) GetX(ctx context.Context, id int) *HostgpuResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostgpuResource.
func (c *HostgpuResourceClient) QueryHost(hr *HostgpuResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostgpuresource.Table, hostgpuresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostgpuresource.HostTable, hostgpuresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostgpuResourceClient) Hooks() []Hook {
	return c.hooks.HostgpuResource
}

// Interceptors returns the client interceptors.
func (c *HostgpuResourceClient) Interceptors() []Interceptor {
	return c.inters.HostgpuResource
}

func (c *HostgpuResourceClient) mutate(ctx context.Context, m *HostgpuResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostgpuResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostgpuResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostgpuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostgpuResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostgpuResource mutation op: %q", m.Op())
	}
}

// HostnicResourceClient is a client for the HostnicResource schema.
type HostnicResourceClient struct {
	config
}

// NewHostnicResourceClient returns a client for the HostnicResource from the given config.
func NewHostnicResourceClient(c config) *HostnicResourceClient {
	return &HostnicResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostnicresource.Hooks(f(g(h())))`.
func (c *HostnicResourceClient) Use(hooks ...Hook) {
	c.hooks.HostnicResource = append(c.hooks.HostnicResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostnicresource.Intercept(f(g(h())))`.
func (c *HostnicResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostnicResource = append(c.inters.HostnicResource, interceptors...)
}

// Create returns a builder for creating a HostnicResource entity.
func (c *HostnicResourceClient) Create() *HostnicResourceCreate {
	mutation := newHostnicResourceMutation(c.config, OpCreate)
	return &HostnicResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostnicResource entities.
func (c *HostnicResourceClient) CreateBulk(builders ...*HostnicResourceCreate) *HostnicResourceCreateBulk {
	return &HostnicResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostnicResourceClient) MapCreateBulk(slice any, setFunc func(*HostnicResourceCreate, int)) *HostnicResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostnicResourceCreateBulk{err: fmt.Errorf("calling to HostnicResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostnicResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostnicResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostnicResource.
func (c *HostnicResourceClient) Update() *HostnicResourceUpdate {
	mutation := newHostnicResourceMutation(c.config, OpUpdate)
	return &HostnicResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostnicResourceClient) UpdateOne(hr *HostnicResource) *HostnicResourceUpdateOne {
	mutation := newHostnicResourceMutation(c.config, OpUpdateOne, withHostnicResource(hr))
	return &HostnicResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostnicResourceClient) UpdateOneID(id int) *HostnicResourceUpdateOne {
	mutation := newHostnicResourceMutation(c.config, OpUpdateOne, withHostnicResourceID(id))
	return &HostnicResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostnicResource.
func (c *HostnicResourceClient) Delete() *HostnicResourceDelete {
	mutation := newHostnicResourceMutation(c.config, OpDelete)
	return &HostnicResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostnicResourceClient) DeleteOne(hr *HostnicResource) *HostnicResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostnicResourceClient) DeleteOneID(id int) *HostnicResourceDeleteOne {
	builder := c.Delete().Where(hostnicresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostnicResourceDeleteOne{builder}
}

// Query returns a query builder for HostnicResource.
func (c *HostnicResourceClient) Query() *HostnicResourceQuery {
	return &HostnicResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostnicResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostnicResource entity by its id.
func (c *HostnicResourceClient) Get(ctx context.Context, id int) (*HostnicResource, error) {
	return c.Query().Where(hostnicresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostnicResourceClient) GetX(ctx context.Context, id int) *HostnicResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostnicResource.
func (c *HostnicResourceClient) QueryHost(hr *HostnicResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostnicresource.Table, hostnicresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostnicresource.HostTable, hostnicresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostnicResourceClient) Hooks() []Hook {
	return c.hooks.HostnicResource
}

// Interceptors returns the client interceptors.
func (c *HostnicResourceClient) Interceptors() []Interceptor {
	return c.inters.HostnicResource
}

func (c *HostnicResourceClient) mutate(ctx context.Context, m *HostnicResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostnicResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostnicResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostnicResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostnicResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostnicResource mutation op: %q", m.Op())
	}
}

// HoststorageResourceClient is a client for the HoststorageResource schema.
type HoststorageResourceClient struct {
	config
}

// NewHoststorageResourceClient returns a client for the HoststorageResource from the given config.
func NewHoststorageResourceClient(c config) *HoststorageResourceClient {
	return &HoststorageResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hoststorageresource.Hooks(f(g(h())))`.
func (c *HoststorageResourceClient) Use(hooks ...Hook) {
	c.hooks.HoststorageResource = append(c.hooks.HoststorageResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hoststorageresource.Intercept(f(g(h())))`.
func (c *HoststorageResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HoststorageResource = append(c.inters.HoststorageResource, interceptors...)
}

// Create returns a builder for creating a HoststorageResource entity.
func (c *HoststorageResourceClient) Create() *HoststorageResourceCreate {
	mutation := newHoststorageResourceMutation(c.config, OpCreate)
	return &HoststorageResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HoststorageResource entities.
func (c *HoststorageResourceClient) CreateBulk(builders ...*HoststorageResourceCreate) *HoststorageResourceCreateBulk {
	return &HoststorageResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HoststorageResourceClient) MapCreateBulk(slice any, setFunc func(*HoststorageResourceCreate, int)) *HoststorageResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HoststorageResourceCreateBulk{err: fmt.Errorf("calling to HoststorageResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HoststorageResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HoststorageResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HoststorageResource.
func (c *HoststorageResourceClient) Update() *HoststorageResourceUpdate {
	mutation := newHoststorageResourceMutation(c.config, OpUpdate)
	return &HoststorageResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HoststorageResourceClient) UpdateOne(hr *HoststorageResource) *HoststorageResourceUpdateOne {
	mutation := newHoststorageResourceMutation(c.config, OpUpdateOne, withHoststorageResource(hr))
	return &HoststorageResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HoststorageResourceClient) UpdateOneID(id int) *HoststorageResourceUpdateOne {
	mutation := newHoststorageResourceMutation(c.config, OpUpdateOne, withHoststorageResourceID(id))
	return &HoststorageResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HoststorageResource.
func (c *HoststorageResourceClient) Delete() *HoststorageResourceDelete {
	mutation := newHoststorageResourceMutation(c.config, OpDelete)
	return &HoststorageResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HoststorageResourceClient) DeleteOne(hr *HoststorageResource) *HoststorageResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HoststorageResourceClient) DeleteOneID(id int) *HoststorageResourceDeleteOne {
	builder := c.Delete().Where(hoststorageresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HoststorageResourceDeleteOne{builder}
}

// Query returns a query builder for HoststorageResource.
func (c *HoststorageResourceClient) Query() *HoststorageResourceQuery {
	return &HoststorageResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHoststorageResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HoststorageResource entity by its id.
func (c *HoststorageResourceClient) Get(ctx context.Context, id int) (*HoststorageResource, error) {
	return c.Query().Where(hoststorageresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HoststorageResourceClient) GetX(ctx context.Context, id int) *HoststorageResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HoststorageResource.
func (c *HoststorageResourceClient) QueryHost(hr *HoststorageResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hoststorageresource.Table, hoststorageresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hoststorageresource.HostTable, hoststorageresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HoststorageResourceClient) Hooks() []Hook {
	return c.hooks.HoststorageResource
}

// Interceptors returns the client interceptors.
func (c *HoststorageResourceClient) Interceptors() []Interceptor {
	return c.inters.HoststorageResource
}

func (c *HoststorageResourceClient) mutate(ctx context.Context, m *HoststorageResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HoststorageResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HoststorageResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HoststorageResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HoststorageResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HoststorageResource mutation op: %q", m.Op())
	}
}

// HostusbResourceClient is a client for the HostusbResource schema.
type HostusbResourceClient struct {
	config
}

// NewHostusbResourceClient returns a client for the HostusbResource from the given config.
func NewHostusbResourceClient(c config) *HostusbResourceClient {
	return &HostusbResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hostusbresource.Hooks(f(g(h())))`.
func (c *HostusbResourceClient) Use(hooks ...Hook) {
	c.hooks.HostusbResource = append(c.hooks.HostusbResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `hostusbresource.Intercept(f(g(h())))`.
func (c *HostusbResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.HostusbResource = append(c.inters.HostusbResource, interceptors...)
}

// Create returns a builder for creating a HostusbResource entity.
func (c *HostusbResourceClient) Create() *HostusbResourceCreate {
	mutation := newHostusbResourceMutation(c.config, OpCreate)
	return &HostusbResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of HostusbResource entities.
func (c *HostusbResourceClient) CreateBulk(builders ...*HostusbResourceCreate) *HostusbResourceCreateBulk {
	return &HostusbResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *HostusbResourceClient) MapCreateBulk(slice any, setFunc func(*HostusbResourceCreate, int)) *HostusbResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &HostusbResourceCreateBulk{err: fmt.Errorf("calling to HostusbResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*HostusbResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &HostusbResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for HostusbResource.
func (c *HostusbResourceClient) Update() *HostusbResourceUpdate {
	mutation := newHostusbResourceMutation(c.config, OpUpdate)
	return &HostusbResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HostusbResourceClient) UpdateOne(hr *HostusbResource) *HostusbResourceUpdateOne {
	mutation := newHostusbResourceMutation(c.config, OpUpdateOne, withHostusbResource(hr))
	return &HostusbResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HostusbResourceClient) UpdateOneID(id int) *HostusbResourceUpdateOne {
	mutation := newHostusbResourceMutation(c.config, OpUpdateOne, withHostusbResourceID(id))
	return &HostusbResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for HostusbResource.
func (c *HostusbResourceClient) Delete() *HostusbResourceDelete {
	mutation := newHostusbResourceMutation(c.config, OpDelete)
	return &HostusbResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *HostusbResourceClient) DeleteOne(hr *HostusbResource) *HostusbResourceDeleteOne {
	return c.DeleteOneID(hr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *HostusbResourceClient) DeleteOneID(id int) *HostusbResourceDeleteOne {
	builder := c.Delete().Where(hostusbresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HostusbResourceDeleteOne{builder}
}

// Query returns a query builder for HostusbResource.
func (c *HostusbResourceClient) Query() *HostusbResourceQuery {
	return &HostusbResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeHostusbResource},
		inters: c.Interceptors(),
	}
}

// Get returns a HostusbResource entity by its id.
func (c *HostusbResourceClient) Get(ctx context.Context, id int) (*HostusbResource, error) {
	return c.Query().Where(hostusbresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HostusbResourceClient) GetX(ctx context.Context, id int) *HostusbResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a HostusbResource.
func (c *HostusbResourceClient) QueryHost(hr *HostusbResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := hr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hostusbresource.Table, hostusbresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, hostusbresource.HostTable, hostusbresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(hr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HostusbResourceClient) Hooks() []Hook {
	return c.hooks.HostusbResource
}

// Interceptors returns the client interceptors.
func (c *HostusbResourceClient) Interceptors() []Interceptor {
	return c.inters.HostusbResource
}

func (c *HostusbResourceClient) mutate(ctx context.Context, m *HostusbResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&HostusbResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&HostusbResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&HostusbResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&HostusbResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown HostusbResource mutation op: %q", m.Op())
	}
}

// IPAddressResourceClient is a client for the IPAddressResource schema.
type IPAddressResourceClient struct {
	config
}

// NewIPAddressResourceClient returns a client for the IPAddressResource from the given config.
func NewIPAddressResourceClient(c config) *IPAddressResourceClient {
	return &IPAddressResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ipaddressresource.Hooks(f(g(h())))`.
func (c *IPAddressResourceClient) Use(hooks ...Hook) {
	c.hooks.IPAddressResource = append(c.hooks.IPAddressResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ipaddressresource.Intercept(f(g(h())))`.
func (c *IPAddressResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.IPAddressResource = append(c.inters.IPAddressResource, interceptors...)
}

// Create returns a builder for creating a IPAddressResource entity.
func (c *IPAddressResourceClient) Create() *IPAddressResourceCreate {
	mutation := newIPAddressResourceMutation(c.config, OpCreate)
	return &IPAddressResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IPAddressResource entities.
func (c *IPAddressResourceClient) CreateBulk(builders ...*IPAddressResourceCreate) *IPAddressResourceCreateBulk {
	return &IPAddressResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IPAddressResourceClient) MapCreateBulk(slice any, setFunc func(*IPAddressResourceCreate, int)) *IPAddressResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IPAddressResourceCreateBulk{err: fmt.Errorf("calling to IPAddressResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IPAddressResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IPAddressResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IPAddressResource.
func (c *IPAddressResourceClient) Update() *IPAddressResourceUpdate {
	mutation := newIPAddressResourceMutation(c.config, OpUpdate)
	return &IPAddressResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IPAddressResourceClient) UpdateOne(iar *IPAddressResource) *IPAddressResourceUpdateOne {
	mutation := newIPAddressResourceMutation(c.config, OpUpdateOne, withIPAddressResource(iar))
	return &IPAddressResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IPAddressResourceClient) UpdateOneID(id int) *IPAddressResourceUpdateOne {
	mutation := newIPAddressResourceMutation(c.config, OpUpdateOne, withIPAddressResourceID(id))
	return &IPAddressResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IPAddressResource.
func (c *IPAddressResourceClient) Delete() *IPAddressResourceDelete {
	mutation := newIPAddressResourceMutation(c.config, OpDelete)
	return &IPAddressResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IPAddressResourceClient) DeleteOne(iar *IPAddressResource) *IPAddressResourceDeleteOne {
	return c.DeleteOneID(iar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IPAddressResourceClient) DeleteOneID(id int) *IPAddressResourceDeleteOne {
	builder := c.Delete().Where(ipaddressresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IPAddressResourceDeleteOne{builder}
}

// Query returns a query builder for IPAddressResource.
func (c *IPAddressResourceClient) Query() *IPAddressResourceQuery {
	return &IPAddressResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIPAddressResource},
		inters: c.Interceptors(),
	}
}

// Get returns a IPAddressResource entity by its id.
func (c *IPAddressResourceClient) Get(ctx context.Context, id int) (*IPAddressResource, error) {
	return c.Query().Where(ipaddressresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IPAddressResourceClient) GetX(ctx context.Context, id int) *IPAddressResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNic queries the nic edge of a IPAddressResource.
func (c *IPAddressResourceClient) QueryNic(iar *IPAddressResource) *HostnicResourceQuery {
	query := (&HostnicResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := iar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ipaddressresource.Table, ipaddressresource.FieldID, id),
			sqlgraph.To(hostnicresource.Table, hostnicresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ipaddressresource.NicTable, ipaddressresource.NicColumn),
		)
		fromV = sqlgraph.Neighbors(iar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IPAddressResourceClient) Hooks() []Hook {
	return c.hooks.IPAddressResource
}

// Interceptors returns the client interceptors.
func (c *IPAddressResourceClient) Interceptors() []Interceptor {
	return c.inters.IPAddressResource
}

func (c *IPAddressResourceClient) mutate(ctx context.Context, m *IPAddressResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IPAddressResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IPAddressResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IPAddressResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IPAddressResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown IPAddressResource mutation op: %q", m.Op())
	}
}

// InstanceResourceClient is a client for the InstanceResource schema.
type InstanceResourceClient struct {
	config
}

// NewInstanceResourceClient returns a client for the InstanceResource from the given config.
func NewInstanceResourceClient(c config) *InstanceResourceClient {
	return &InstanceResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `instanceresource.Hooks(f(g(h())))`.
func (c *InstanceResourceClient) Use(hooks ...Hook) {
	c.hooks.InstanceResource = append(c.hooks.InstanceResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `instanceresource.Intercept(f(g(h())))`.
func (c *InstanceResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.InstanceResource = append(c.inters.InstanceResource, interceptors...)
}

// Create returns a builder for creating a InstanceResource entity.
func (c *InstanceResourceClient) Create() *InstanceResourceCreate {
	mutation := newInstanceResourceMutation(c.config, OpCreate)
	return &InstanceResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InstanceResource entities.
func (c *InstanceResourceClient) CreateBulk(builders ...*InstanceResourceCreate) *InstanceResourceCreateBulk {
	return &InstanceResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InstanceResourceClient) MapCreateBulk(slice any, setFunc func(*InstanceResourceCreate, int)) *InstanceResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InstanceResourceCreateBulk{err: fmt.Errorf("calling to InstanceResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InstanceResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InstanceResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InstanceResource.
func (c *InstanceResourceClient) Update() *InstanceResourceUpdate {
	mutation := newInstanceResourceMutation(c.config, OpUpdate)
	return &InstanceResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InstanceResourceClient) UpdateOne(ir *InstanceResource) *InstanceResourceUpdateOne {
	mutation := newInstanceResourceMutation(c.config, OpUpdateOne, withInstanceResource(ir))
	return &InstanceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InstanceResourceClient) UpdateOneID(id int) *InstanceResourceUpdateOne {
	mutation := newInstanceResourceMutation(c.config, OpUpdateOne, withInstanceResourceID(id))
	return &InstanceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InstanceResource.
func (c *InstanceResourceClient) Delete() *InstanceResourceDelete {
	mutation := newInstanceResourceMutation(c.config, OpDelete)
	return &InstanceResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InstanceResourceClient) DeleteOne(ir *InstanceResource) *InstanceResourceDeleteOne {
	return c.DeleteOneID(ir.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InstanceResourceClient) DeleteOneID(id int) *InstanceResourceDeleteOne {
	builder := c.Delete().Where(instanceresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InstanceResourceDeleteOne{builder}
}

// Query returns a query builder for InstanceResource.
func (c *InstanceResourceClient) Query() *InstanceResourceQuery {
	return &InstanceResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInstanceResource},
		inters: c.Interceptors(),
	}
}

// Get returns a InstanceResource entity by its id.
func (c *InstanceResourceClient) Get(ctx context.Context, id int) (*InstanceResource, error) {
	return c.Query().Where(instanceresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InstanceResourceClient) GetX(ctx context.Context, id int) *InstanceResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHost queries the host edge of a InstanceResource.
func (c *InstanceResourceClient) QueryHost(ir *InstanceResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, instanceresource.HostTable, instanceresource.HostColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDesiredOs queries the desired_os edge of a InstanceResource.
func (c *InstanceResourceClient) QueryDesiredOs(ir *InstanceResource) *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.DesiredOsTable, instanceresource.DesiredOsColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCurrentOs queries the current_os edge of a InstanceResource.
func (c *InstanceResourceClient) QueryCurrentOs(ir *InstanceResource) *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.CurrentOsTable, instanceresource.CurrentOsColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOs queries the os edge of a InstanceResource.
func (c *InstanceResourceClient) QueryOs(ir *InstanceResource) *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.OsTable, instanceresource.OsColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkloadMembers queries the workload_members edge of a InstanceResource.
func (c *InstanceResourceClient) QueryWorkloadMembers(ir *InstanceResource) *WorkloadMemberQuery {
	query := (&WorkloadMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(workloadmember.Table, workloadmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, instanceresource.WorkloadMembersTable, instanceresource.WorkloadMembersColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a InstanceResource.
func (c *InstanceResourceClient) QueryProvider(ir *InstanceResource) *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.ProviderTable, instanceresource.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLocalaccount queries the localaccount edge of a InstanceResource.
func (c *InstanceResourceClient) QueryLocalaccount(ir *InstanceResource) *LocalAccountResourceQuery {
	query := (&LocalAccountResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(localaccountresource.Table, localaccountresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.LocalaccountTable, instanceresource.LocalaccountColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOsUpdatePolicy queries the os_update_policy edge of a InstanceResource.
func (c *InstanceResourceClient) QueryOsUpdatePolicy(ir *InstanceResource) *OSUpdatePolicyResourceQuery {
	query := (&OSUpdatePolicyResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(osupdatepolicyresource.Table, osupdatepolicyresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, instanceresource.OsUpdatePolicyTable, instanceresource.OsUpdatePolicyColumn),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryCustomConfig queries the custom_config edge of a InstanceResource.
func (c *InstanceResourceClient) QueryCustomConfig(ir *InstanceResource) *CustomConfigResourceQuery {
	query := (&CustomConfigResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ir.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(instanceresource.Table, instanceresource.FieldID, id),
			sqlgraph.To(customconfigresource.Table, customconfigresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, instanceresource.CustomConfigTable, instanceresource.CustomConfigPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(ir.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InstanceResourceClient) Hooks() []Hook {
	return c.hooks.InstanceResource
}

// Interceptors returns the client interceptors.
func (c *InstanceResourceClient) Interceptors() []Interceptor {
	return c.inters.InstanceResource
}

func (c *InstanceResourceClient) mutate(ctx context.Context, m *InstanceResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InstanceResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InstanceResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InstanceResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InstanceResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InstanceResource mutation op: %q", m.Op())
	}
}

// LocalAccountResourceClient is a client for the LocalAccountResource schema.
type LocalAccountResourceClient struct {
	config
}

// NewLocalAccountResourceClient returns a client for the LocalAccountResource from the given config.
func NewLocalAccountResourceClient(c config) *LocalAccountResourceClient {
	return &LocalAccountResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `localaccountresource.Hooks(f(g(h())))`.
func (c *LocalAccountResourceClient) Use(hooks ...Hook) {
	c.hooks.LocalAccountResource = append(c.hooks.LocalAccountResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `localaccountresource.Intercept(f(g(h())))`.
func (c *LocalAccountResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.LocalAccountResource = append(c.inters.LocalAccountResource, interceptors...)
}

// Create returns a builder for creating a LocalAccountResource entity.
func (c *LocalAccountResourceClient) Create() *LocalAccountResourceCreate {
	mutation := newLocalAccountResourceMutation(c.config, OpCreate)
	return &LocalAccountResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of LocalAccountResource entities.
func (c *LocalAccountResourceClient) CreateBulk(builders ...*LocalAccountResourceCreate) *LocalAccountResourceCreateBulk {
	return &LocalAccountResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *LocalAccountResourceClient) MapCreateBulk(slice any, setFunc func(*LocalAccountResourceCreate, int)) *LocalAccountResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &LocalAccountResourceCreateBulk{err: fmt.Errorf("calling to LocalAccountResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*LocalAccountResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &LocalAccountResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for LocalAccountResource.
func (c *LocalAccountResourceClient) Update() *LocalAccountResourceUpdate {
	mutation := newLocalAccountResourceMutation(c.config, OpUpdate)
	return &LocalAccountResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LocalAccountResourceClient) UpdateOne(lar *LocalAccountResource) *LocalAccountResourceUpdateOne {
	mutation := newLocalAccountResourceMutation(c.config, OpUpdateOne, withLocalAccountResource(lar))
	return &LocalAccountResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LocalAccountResourceClient) UpdateOneID(id int) *LocalAccountResourceUpdateOne {
	mutation := newLocalAccountResourceMutation(c.config, OpUpdateOne, withLocalAccountResourceID(id))
	return &LocalAccountResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for LocalAccountResource.
func (c *LocalAccountResourceClient) Delete() *LocalAccountResourceDelete {
	mutation := newLocalAccountResourceMutation(c.config, OpDelete)
	return &LocalAccountResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *LocalAccountResourceClient) DeleteOne(lar *LocalAccountResource) *LocalAccountResourceDeleteOne {
	return c.DeleteOneID(lar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *LocalAccountResourceClient) DeleteOneID(id int) *LocalAccountResourceDeleteOne {
	builder := c.Delete().Where(localaccountresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LocalAccountResourceDeleteOne{builder}
}

// Query returns a query builder for LocalAccountResource.
func (c *LocalAccountResourceClient) Query() *LocalAccountResourceQuery {
	return &LocalAccountResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeLocalAccountResource},
		inters: c.Interceptors(),
	}
}

// Get returns a LocalAccountResource entity by its id.
func (c *LocalAccountResourceClient) Get(ctx context.Context, id int) (*LocalAccountResource, error) {
	return c.Query().Where(localaccountresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LocalAccountResourceClient) GetX(ctx context.Context, id int) *LocalAccountResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *LocalAccountResourceClient) Hooks() []Hook {
	return c.hooks.LocalAccountResource
}

// Interceptors returns the client interceptors.
func (c *LocalAccountResourceClient) Interceptors() []Interceptor {
	return c.inters.LocalAccountResource
}

func (c *LocalAccountResourceClient) mutate(ctx context.Context, m *LocalAccountResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&LocalAccountResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&LocalAccountResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&LocalAccountResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&LocalAccountResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown LocalAccountResource mutation op: %q", m.Op())
	}
}

// NetlinkResourceClient is a client for the NetlinkResource schema.
type NetlinkResourceClient struct {
	config
}

// NewNetlinkResourceClient returns a client for the NetlinkResource from the given config.
func NewNetlinkResourceClient(c config) *NetlinkResourceClient {
	return &NetlinkResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `netlinkresource.Hooks(f(g(h())))`.
func (c *NetlinkResourceClient) Use(hooks ...Hook) {
	c.hooks.NetlinkResource = append(c.hooks.NetlinkResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `netlinkresource.Intercept(f(g(h())))`.
func (c *NetlinkResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetlinkResource = append(c.inters.NetlinkResource, interceptors...)
}

// Create returns a builder for creating a NetlinkResource entity.
func (c *NetlinkResourceClient) Create() *NetlinkResourceCreate {
	mutation := newNetlinkResourceMutation(c.config, OpCreate)
	return &NetlinkResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetlinkResource entities.
func (c *NetlinkResourceClient) CreateBulk(builders ...*NetlinkResourceCreate) *NetlinkResourceCreateBulk {
	return &NetlinkResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NetlinkResourceClient) MapCreateBulk(slice any, setFunc func(*NetlinkResourceCreate, int)) *NetlinkResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NetlinkResourceCreateBulk{err: fmt.Errorf("calling to NetlinkResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NetlinkResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NetlinkResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetlinkResource.
func (c *NetlinkResourceClient) Update() *NetlinkResourceUpdate {
	mutation := newNetlinkResourceMutation(c.config, OpUpdate)
	return &NetlinkResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetlinkResourceClient) UpdateOne(nr *NetlinkResource) *NetlinkResourceUpdateOne {
	mutation := newNetlinkResourceMutation(c.config, OpUpdateOne, withNetlinkResource(nr))
	return &NetlinkResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetlinkResourceClient) UpdateOneID(id int) *NetlinkResourceUpdateOne {
	mutation := newNetlinkResourceMutation(c.config, OpUpdateOne, withNetlinkResourceID(id))
	return &NetlinkResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetlinkResource.
func (c *NetlinkResourceClient) Delete() *NetlinkResourceDelete {
	mutation := newNetlinkResourceMutation(c.config, OpDelete)
	return &NetlinkResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetlinkResourceClient) DeleteOne(nr *NetlinkResource) *NetlinkResourceDeleteOne {
	return c.DeleteOneID(nr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetlinkResourceClient) DeleteOneID(id int) *NetlinkResourceDeleteOne {
	builder := c.Delete().Where(netlinkresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetlinkResourceDeleteOne{builder}
}

// Query returns a query builder for NetlinkResource.
func (c *NetlinkResourceClient) Query() *NetlinkResourceQuery {
	return &NetlinkResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetlinkResource},
		inters: c.Interceptors(),
	}
}

// Get returns a NetlinkResource entity by its id.
func (c *NetlinkResourceClient) Get(ctx context.Context, id int) (*NetlinkResource, error) {
	return c.Query().Where(netlinkresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetlinkResourceClient) GetX(ctx context.Context, id int) *NetlinkResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySrc queries the src edge of a NetlinkResource.
func (c *NetlinkResourceClient) QuerySrc(nr *NetlinkResource) *EndpointResourceQuery {
	query := (&EndpointResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(netlinkresource.Table, netlinkresource.FieldID, id),
			sqlgraph.To(endpointresource.Table, endpointresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, netlinkresource.SrcTable, netlinkresource.SrcColumn),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDst queries the dst edge of a NetlinkResource.
func (c *NetlinkResourceClient) QueryDst(nr *NetlinkResource) *EndpointResourceQuery {
	query := (&EndpointResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := nr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(netlinkresource.Table, netlinkresource.FieldID, id),
			sqlgraph.To(endpointresource.Table, endpointresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, netlinkresource.DstTable, netlinkresource.DstColumn),
		)
		fromV = sqlgraph.Neighbors(nr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetlinkResourceClient) Hooks() []Hook {
	return c.hooks.NetlinkResource
}

// Interceptors returns the client interceptors.
func (c *NetlinkResourceClient) Interceptors() []Interceptor {
	return c.inters.NetlinkResource
}

func (c *NetlinkResourceClient) mutate(ctx context.Context, m *NetlinkResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetlinkResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetlinkResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetlinkResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetlinkResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetlinkResource mutation op: %q", m.Op())
	}
}

// NetworkSegmentClient is a client for the NetworkSegment schema.
type NetworkSegmentClient struct {
	config
}

// NewNetworkSegmentClient returns a client for the NetworkSegment from the given config.
func NewNetworkSegmentClient(c config) *NetworkSegmentClient {
	return &NetworkSegmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networksegment.Hooks(f(g(h())))`.
func (c *NetworkSegmentClient) Use(hooks ...Hook) {
	c.hooks.NetworkSegment = append(c.hooks.NetworkSegment, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `networksegment.Intercept(f(g(h())))`.
func (c *NetworkSegmentClient) Intercept(interceptors ...Interceptor) {
	c.inters.NetworkSegment = append(c.inters.NetworkSegment, interceptors...)
}

// Create returns a builder for creating a NetworkSegment entity.
func (c *NetworkSegmentClient) Create() *NetworkSegmentCreate {
	mutation := newNetworkSegmentMutation(c.config, OpCreate)
	return &NetworkSegmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NetworkSegment entities.
func (c *NetworkSegmentClient) CreateBulk(builders ...*NetworkSegmentCreate) *NetworkSegmentCreateBulk {
	return &NetworkSegmentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NetworkSegmentClient) MapCreateBulk(slice any, setFunc func(*NetworkSegmentCreate, int)) *NetworkSegmentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NetworkSegmentCreateBulk{err: fmt.Errorf("calling to NetworkSegmentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NetworkSegmentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NetworkSegmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NetworkSegment.
func (c *NetworkSegmentClient) Update() *NetworkSegmentUpdate {
	mutation := newNetworkSegmentMutation(c.config, OpUpdate)
	return &NetworkSegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworkSegmentClient) UpdateOne(ns *NetworkSegment) *NetworkSegmentUpdateOne {
	mutation := newNetworkSegmentMutation(c.config, OpUpdateOne, withNetworkSegment(ns))
	return &NetworkSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworkSegmentClient) UpdateOneID(id int) *NetworkSegmentUpdateOne {
	mutation := newNetworkSegmentMutation(c.config, OpUpdateOne, withNetworkSegmentID(id))
	return &NetworkSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NetworkSegment.
func (c *NetworkSegmentClient) Delete() *NetworkSegmentDelete {
	mutation := newNetworkSegmentMutation(c.config, OpDelete)
	return &NetworkSegmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NetworkSegmentClient) DeleteOne(ns *NetworkSegment) *NetworkSegmentDeleteOne {
	return c.DeleteOneID(ns.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NetworkSegmentClient) DeleteOneID(id int) *NetworkSegmentDeleteOne {
	builder := c.Delete().Where(networksegment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworkSegmentDeleteOne{builder}
}

// Query returns a query builder for NetworkSegment.
func (c *NetworkSegmentClient) Query() *NetworkSegmentQuery {
	return &NetworkSegmentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNetworkSegment},
		inters: c.Interceptors(),
	}
}

// Get returns a NetworkSegment entity by its id.
func (c *NetworkSegmentClient) Get(ctx context.Context, id int) (*NetworkSegment, error) {
	return c.Query().Where(networksegment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworkSegmentClient) GetX(ctx context.Context, id int) *NetworkSegment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySite queries the site edge of a NetworkSegment.
func (c *NetworkSegmentClient) QuerySite(ns *NetworkSegment) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ns.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networksegment.Table, networksegment.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, networksegment.SiteTable, networksegment.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(ns.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworkSegmentClient) Hooks() []Hook {
	return c.hooks.NetworkSegment
}

// Interceptors returns the client interceptors.
func (c *NetworkSegmentClient) Interceptors() []Interceptor {
	return c.inters.NetworkSegment
}

func (c *NetworkSegmentClient) mutate(ctx context.Context, m *NetworkSegmentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NetworkSegmentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NetworkSegmentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NetworkSegmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NetworkSegmentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NetworkSegment mutation op: %q", m.Op())
	}
}

// OSUpdatePolicyClient is a client for the OSUpdatePolicy schema.
type OSUpdatePolicyClient struct {
	config
}

// NewOSUpdatePolicyClient returns a client for the OSUpdatePolicy from the given config.
func NewOSUpdatePolicyClient(c config) *OSUpdatePolicyClient {
	return &OSUpdatePolicyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `osupdatepolicy.Hooks(f(g(h())))`.
func (c *OSUpdatePolicyClient) Use(hooks ...Hook) {
	c.hooks.OSUpdatePolicy = append(c.hooks.OSUpdatePolicy, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `osupdatepolicy.Intercept(f(g(h())))`.
func (c *OSUpdatePolicyClient) Intercept(interceptors ...Interceptor) {
	c.inters.OSUpdatePolicy = append(c.inters.OSUpdatePolicy, interceptors...)
}

// Create returns a builder for creating a OSUpdatePolicy entity.
func (c *OSUpdatePolicyClient) Create() *OSUpdatePolicyCreate {
	mutation := newOSUpdatePolicyMutation(c.config, OpCreate)
	return &OSUpdatePolicyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OSUpdatePolicy entities.
func (c *OSUpdatePolicyClient) CreateBulk(builders ...*OSUpdatePolicyCreate) *OSUpdatePolicyCreateBulk {
	return &OSUpdatePolicyCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OSUpdatePolicyClient) MapCreateBulk(slice any, setFunc func(*OSUpdatePolicyCreate, int)) *OSUpdatePolicyCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OSUpdatePolicyCreateBulk{err: fmt.Errorf("calling to OSUpdatePolicyClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OSUpdatePolicyCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OSUpdatePolicyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OSUpdatePolicy.
func (c *OSUpdatePolicyClient) Update() *OSUpdatePolicyUpdate {
	mutation := newOSUpdatePolicyMutation(c.config, OpUpdate)
	return &OSUpdatePolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OSUpdatePolicyClient) UpdateOne(oup *OSUpdatePolicy) *OSUpdatePolicyUpdateOne {
	mutation := newOSUpdatePolicyMutation(c.config, OpUpdateOne, withOSUpdatePolicy(oup))
	return &OSUpdatePolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OSUpdatePolicyClient) UpdateOneID(id int) *OSUpdatePolicyUpdateOne {
	mutation := newOSUpdatePolicyMutation(c.config, OpUpdateOne, withOSUpdatePolicyID(id))
	return &OSUpdatePolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OSUpdatePolicy.
func (c *OSUpdatePolicyClient) Delete() *OSUpdatePolicyDelete {
	mutation := newOSUpdatePolicyMutation(c.config, OpDelete)
	return &OSUpdatePolicyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OSUpdatePolicyClient) DeleteOne(oup *OSUpdatePolicy) *OSUpdatePolicyDeleteOne {
	return c.DeleteOneID(oup.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OSUpdatePolicyClient) DeleteOneID(id int) *OSUpdatePolicyDeleteOne {
	builder := c.Delete().Where(osupdatepolicy.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OSUpdatePolicyDeleteOne{builder}
}

// Query returns a query builder for OSUpdatePolicy.
func (c *OSUpdatePolicyClient) Query() *OSUpdatePolicyQuery {
	return &OSUpdatePolicyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOSUpdatePolicy},
		inters: c.Interceptors(),
	}
}

// Get returns a OSUpdatePolicy entity by its id.
func (c *OSUpdatePolicyClient) Get(ctx context.Context, id int) (*OSUpdatePolicy, error) {
	return c.Query().Where(osupdatepolicy.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OSUpdatePolicyClient) GetX(ctx context.Context, id int) *OSUpdatePolicy {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargetOs queries the target_os edge of a OSUpdatePolicy.
func (c *OSUpdatePolicyClient) QueryTargetOs(oup *OSUpdatePolicy) *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oup.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdatepolicy.Table, osupdatepolicy.FieldID, id),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdatepolicy.TargetOsTable, osupdatepolicy.TargetOsColumn),
		)
		fromV = sqlgraph.Neighbors(oup.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OSUpdatePolicyClient) Hooks() []Hook {
	return c.hooks.OSUpdatePolicy
}

// Interceptors returns the client interceptors.
func (c *OSUpdatePolicyClient) Interceptors() []Interceptor {
	return c.inters.OSUpdatePolicy
}

func (c *OSUpdatePolicyClient) mutate(ctx context.Context, m *OSUpdatePolicyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OSUpdatePolicyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OSUpdatePolicyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OSUpdatePolicyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OSUpdatePolicyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OSUpdatePolicy mutation op: %q", m.Op())
	}
}

// OSUpdatePolicyResourceClient is a client for the OSUpdatePolicyResource schema.
type OSUpdatePolicyResourceClient struct {
	config
}

// NewOSUpdatePolicyResourceClient returns a client for the OSUpdatePolicyResource from the given config.
func NewOSUpdatePolicyResourceClient(c config) *OSUpdatePolicyResourceClient {
	return &OSUpdatePolicyResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `osupdatepolicyresource.Hooks(f(g(h())))`.
func (c *OSUpdatePolicyResourceClient) Use(hooks ...Hook) {
	c.hooks.OSUpdatePolicyResource = append(c.hooks.OSUpdatePolicyResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `osupdatepolicyresource.Intercept(f(g(h())))`.
func (c *OSUpdatePolicyResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.OSUpdatePolicyResource = append(c.inters.OSUpdatePolicyResource, interceptors...)
}

// Create returns a builder for creating a OSUpdatePolicyResource entity.
func (c *OSUpdatePolicyResourceClient) Create() *OSUpdatePolicyResourceCreate {
	mutation := newOSUpdatePolicyResourceMutation(c.config, OpCreate)
	return &OSUpdatePolicyResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OSUpdatePolicyResource entities.
func (c *OSUpdatePolicyResourceClient) CreateBulk(builders ...*OSUpdatePolicyResourceCreate) *OSUpdatePolicyResourceCreateBulk {
	return &OSUpdatePolicyResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OSUpdatePolicyResourceClient) MapCreateBulk(slice any, setFunc func(*OSUpdatePolicyResourceCreate, int)) *OSUpdatePolicyResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OSUpdatePolicyResourceCreateBulk{err: fmt.Errorf("calling to OSUpdatePolicyResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OSUpdatePolicyResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OSUpdatePolicyResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OSUpdatePolicyResource.
func (c *OSUpdatePolicyResourceClient) Update() *OSUpdatePolicyResourceUpdate {
	mutation := newOSUpdatePolicyResourceMutation(c.config, OpUpdate)
	return &OSUpdatePolicyResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OSUpdatePolicyResourceClient) UpdateOne(oupr *OSUpdatePolicyResource) *OSUpdatePolicyResourceUpdateOne {
	mutation := newOSUpdatePolicyResourceMutation(c.config, OpUpdateOne, withOSUpdatePolicyResource(oupr))
	return &OSUpdatePolicyResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OSUpdatePolicyResourceClient) UpdateOneID(id int) *OSUpdatePolicyResourceUpdateOne {
	mutation := newOSUpdatePolicyResourceMutation(c.config, OpUpdateOne, withOSUpdatePolicyResourceID(id))
	return &OSUpdatePolicyResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OSUpdatePolicyResource.
func (c *OSUpdatePolicyResourceClient) Delete() *OSUpdatePolicyResourceDelete {
	mutation := newOSUpdatePolicyResourceMutation(c.config, OpDelete)
	return &OSUpdatePolicyResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OSUpdatePolicyResourceClient) DeleteOne(oupr *OSUpdatePolicyResource) *OSUpdatePolicyResourceDeleteOne {
	return c.DeleteOneID(oupr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OSUpdatePolicyResourceClient) DeleteOneID(id int) *OSUpdatePolicyResourceDeleteOne {
	builder := c.Delete().Where(osupdatepolicyresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OSUpdatePolicyResourceDeleteOne{builder}
}

// Query returns a query builder for OSUpdatePolicyResource.
func (c *OSUpdatePolicyResourceClient) Query() *OSUpdatePolicyResourceQuery {
	return &OSUpdatePolicyResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOSUpdatePolicyResource},
		inters: c.Interceptors(),
	}
}

// Get returns a OSUpdatePolicyResource entity by its id.
func (c *OSUpdatePolicyResourceClient) Get(ctx context.Context, id int) (*OSUpdatePolicyResource, error) {
	return c.Query().Where(osupdatepolicyresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OSUpdatePolicyResourceClient) GetX(ctx context.Context, id int) *OSUpdatePolicyResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargetOs queries the target_os edge of a OSUpdatePolicyResource.
func (c *OSUpdatePolicyResourceClient) QueryTargetOs(oupr *OSUpdatePolicyResource) *OperatingSystemResourceQuery {
	query := (&OperatingSystemResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := oupr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdatepolicyresource.Table, osupdatepolicyresource.FieldID, id),
			sqlgraph.To(operatingsystemresource.Table, operatingsystemresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdatepolicyresource.TargetOsTable, osupdatepolicyresource.TargetOsColumn),
		)
		fromV = sqlgraph.Neighbors(oupr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OSUpdatePolicyResourceClient) Hooks() []Hook {
	return c.hooks.OSUpdatePolicyResource
}

// Interceptors returns the client interceptors.
func (c *OSUpdatePolicyResourceClient) Interceptors() []Interceptor {
	return c.inters.OSUpdatePolicyResource
}

func (c *OSUpdatePolicyResourceClient) mutate(ctx context.Context, m *OSUpdatePolicyResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OSUpdatePolicyResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OSUpdatePolicyResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OSUpdatePolicyResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OSUpdatePolicyResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OSUpdatePolicyResource mutation op: %q", m.Op())
	}
}

// OSUpdateRunResourceClient is a client for the OSUpdateRunResource schema.
type OSUpdateRunResourceClient struct {
	config
}

// NewOSUpdateRunResourceClient returns a client for the OSUpdateRunResource from the given config.
func NewOSUpdateRunResourceClient(c config) *OSUpdateRunResourceClient {
	return &OSUpdateRunResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `osupdaterunresource.Hooks(f(g(h())))`.
func (c *OSUpdateRunResourceClient) Use(hooks ...Hook) {
	c.hooks.OSUpdateRunResource = append(c.hooks.OSUpdateRunResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `osupdaterunresource.Intercept(f(g(h())))`.
func (c *OSUpdateRunResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.OSUpdateRunResource = append(c.inters.OSUpdateRunResource, interceptors...)
}

// Create returns a builder for creating a OSUpdateRunResource entity.
func (c *OSUpdateRunResourceClient) Create() *OSUpdateRunResourceCreate {
	mutation := newOSUpdateRunResourceMutation(c.config, OpCreate)
	return &OSUpdateRunResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OSUpdateRunResource entities.
func (c *OSUpdateRunResourceClient) CreateBulk(builders ...*OSUpdateRunResourceCreate) *OSUpdateRunResourceCreateBulk {
	return &OSUpdateRunResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OSUpdateRunResourceClient) MapCreateBulk(slice any, setFunc func(*OSUpdateRunResourceCreate, int)) *OSUpdateRunResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OSUpdateRunResourceCreateBulk{err: fmt.Errorf("calling to OSUpdateRunResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OSUpdateRunResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OSUpdateRunResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OSUpdateRunResource.
func (c *OSUpdateRunResourceClient) Update() *OSUpdateRunResourceUpdate {
	mutation := newOSUpdateRunResourceMutation(c.config, OpUpdate)
	return &OSUpdateRunResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OSUpdateRunResourceClient) UpdateOne(ourr *OSUpdateRunResource) *OSUpdateRunResourceUpdateOne {
	mutation := newOSUpdateRunResourceMutation(c.config, OpUpdateOne, withOSUpdateRunResource(ourr))
	return &OSUpdateRunResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OSUpdateRunResourceClient) UpdateOneID(id int) *OSUpdateRunResourceUpdateOne {
	mutation := newOSUpdateRunResourceMutation(c.config, OpUpdateOne, withOSUpdateRunResourceID(id))
	return &OSUpdateRunResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OSUpdateRunResource.
func (c *OSUpdateRunResourceClient) Delete() *OSUpdateRunResourceDelete {
	mutation := newOSUpdateRunResourceMutation(c.config, OpDelete)
	return &OSUpdateRunResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OSUpdateRunResourceClient) DeleteOne(ourr *OSUpdateRunResource) *OSUpdateRunResourceDeleteOne {
	return c.DeleteOneID(ourr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OSUpdateRunResourceClient) DeleteOneID(id int) *OSUpdateRunResourceDeleteOne {
	builder := c.Delete().Where(osupdaterunresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OSUpdateRunResourceDeleteOne{builder}
}

// Query returns a query builder for OSUpdateRunResource.
func (c *OSUpdateRunResourceClient) Query() *OSUpdateRunResourceQuery {
	return &OSUpdateRunResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOSUpdateRunResource},
		inters: c.Interceptors(),
	}
}

// Get returns a OSUpdateRunResource entity by its id.
func (c *OSUpdateRunResourceClient) Get(ctx context.Context, id int) (*OSUpdateRunResource, error) {
	return c.Query().Where(osupdaterunresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OSUpdateRunResourceClient) GetX(ctx context.Context, id int) *OSUpdateRunResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppliedPolicy queries the applied_policy edge of a OSUpdateRunResource.
func (c *OSUpdateRunResourceClient) QueryAppliedPolicy(ourr *OSUpdateRunResource) *OSUpdatePolicyResourceQuery {
	query := (&OSUpdatePolicyResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ourr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdaterunresource.Table, osupdaterunresource.FieldID, id),
			sqlgraph.To(osupdatepolicyresource.Table, osupdatepolicyresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdaterunresource.AppliedPolicyTable, osupdaterunresource.AppliedPolicyColumn),
		)
		fromV = sqlgraph.Neighbors(ourr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a OSUpdateRunResource.
func (c *OSUpdateRunResourceClient) QueryInstance(ourr *OSUpdateRunResource) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ourr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(osupdaterunresource.Table, osupdaterunresource.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, osupdaterunresource.InstanceTable, osupdaterunresource.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(ourr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OSUpdateRunResourceClient) Hooks() []Hook {
	return c.hooks.OSUpdateRunResource
}

// Interceptors returns the client interceptors.
func (c *OSUpdateRunResourceClient) Interceptors() []Interceptor {
	return c.inters.OSUpdateRunResource
}

func (c *OSUpdateRunResourceClient) mutate(ctx context.Context, m *OSUpdateRunResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OSUpdateRunResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OSUpdateRunResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OSUpdateRunResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OSUpdateRunResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OSUpdateRunResource mutation op: %q", m.Op())
	}
}

// OperatingSystemResourceClient is a client for the OperatingSystemResource schema.
type OperatingSystemResourceClient struct {
	config
}

// NewOperatingSystemResourceClient returns a client for the OperatingSystemResource from the given config.
func NewOperatingSystemResourceClient(c config) *OperatingSystemResourceClient {
	return &OperatingSystemResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operatingsystemresource.Hooks(f(g(h())))`.
func (c *OperatingSystemResourceClient) Use(hooks ...Hook) {
	c.hooks.OperatingSystemResource = append(c.hooks.OperatingSystemResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `operatingsystemresource.Intercept(f(g(h())))`.
func (c *OperatingSystemResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.OperatingSystemResource = append(c.inters.OperatingSystemResource, interceptors...)
}

// Create returns a builder for creating a OperatingSystemResource entity.
func (c *OperatingSystemResourceClient) Create() *OperatingSystemResourceCreate {
	mutation := newOperatingSystemResourceMutation(c.config, OpCreate)
	return &OperatingSystemResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OperatingSystemResource entities.
func (c *OperatingSystemResourceClient) CreateBulk(builders ...*OperatingSystemResourceCreate) *OperatingSystemResourceCreateBulk {
	return &OperatingSystemResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OperatingSystemResourceClient) MapCreateBulk(slice any, setFunc func(*OperatingSystemResourceCreate, int)) *OperatingSystemResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OperatingSystemResourceCreateBulk{err: fmt.Errorf("calling to OperatingSystemResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OperatingSystemResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OperatingSystemResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OperatingSystemResource.
func (c *OperatingSystemResourceClient) Update() *OperatingSystemResourceUpdate {
	mutation := newOperatingSystemResourceMutation(c.config, OpUpdate)
	return &OperatingSystemResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperatingSystemResourceClient) UpdateOne(osr *OperatingSystemResource) *OperatingSystemResourceUpdateOne {
	mutation := newOperatingSystemResourceMutation(c.config, OpUpdateOne, withOperatingSystemResource(osr))
	return &OperatingSystemResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperatingSystemResourceClient) UpdateOneID(id int) *OperatingSystemResourceUpdateOne {
	mutation := newOperatingSystemResourceMutation(c.config, OpUpdateOne, withOperatingSystemResourceID(id))
	return &OperatingSystemResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OperatingSystemResource.
func (c *OperatingSystemResourceClient) Delete() *OperatingSystemResourceDelete {
	mutation := newOperatingSystemResourceMutation(c.config, OpDelete)
	return &OperatingSystemResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OperatingSystemResourceClient) DeleteOne(osr *OperatingSystemResource) *OperatingSystemResourceDeleteOne {
	return c.DeleteOneID(osr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OperatingSystemResourceClient) DeleteOneID(id int) *OperatingSystemResourceDeleteOne {
	builder := c.Delete().Where(operatingsystemresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperatingSystemResourceDeleteOne{builder}
}

// Query returns a query builder for OperatingSystemResource.
func (c *OperatingSystemResourceClient) Query() *OperatingSystemResourceQuery {
	return &OperatingSystemResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOperatingSystemResource},
		inters: c.Interceptors(),
	}
}

// Get returns a OperatingSystemResource entity by its id.
func (c *OperatingSystemResourceClient) Get(ctx context.Context, id int) (*OperatingSystemResource, error) {
	return c.Query().Where(operatingsystemresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperatingSystemResourceClient) GetX(ctx context.Context, id int) *OperatingSystemResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OperatingSystemResourceClient) Hooks() []Hook {
	return c.hooks.OperatingSystemResource
}

// Interceptors returns the client interceptors.
func (c *OperatingSystemResourceClient) Interceptors() []Interceptor {
	return c.inters.OperatingSystemResource
}

func (c *OperatingSystemResourceClient) mutate(ctx context.Context, m *OperatingSystemResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OperatingSystemResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OperatingSystemResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OperatingSystemResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OperatingSystemResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OperatingSystemResource mutation op: %q", m.Op())
	}
}

// OuResourceClient is a client for the OuResource schema.
type OuResourceClient struct {
	config
}

// NewOuResourceClient returns a client for the OuResource from the given config.
func NewOuResourceClient(c config) *OuResourceClient {
	return &OuResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ouresource.Hooks(f(g(h())))`.
func (c *OuResourceClient) Use(hooks ...Hook) {
	c.hooks.OuResource = append(c.hooks.OuResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ouresource.Intercept(f(g(h())))`.
func (c *OuResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.OuResource = append(c.inters.OuResource, interceptors...)
}

// Create returns a builder for creating a OuResource entity.
func (c *OuResourceClient) Create() *OuResourceCreate {
	mutation := newOuResourceMutation(c.config, OpCreate)
	return &OuResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OuResource entities.
func (c *OuResourceClient) CreateBulk(builders ...*OuResourceCreate) *OuResourceCreateBulk {
	return &OuResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OuResourceClient) MapCreateBulk(slice any, setFunc func(*OuResourceCreate, int)) *OuResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OuResourceCreateBulk{err: fmt.Errorf("calling to OuResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OuResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OuResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OuResource.
func (c *OuResourceClient) Update() *OuResourceUpdate {
	mutation := newOuResourceMutation(c.config, OpUpdate)
	return &OuResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OuResourceClient) UpdateOne(or *OuResource) *OuResourceUpdateOne {
	mutation := newOuResourceMutation(c.config, OpUpdateOne, withOuResource(or))
	return &OuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OuResourceClient) UpdateOneID(id int) *OuResourceUpdateOne {
	mutation := newOuResourceMutation(c.config, OpUpdateOne, withOuResourceID(id))
	return &OuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OuResource.
func (c *OuResourceClient) Delete() *OuResourceDelete {
	mutation := newOuResourceMutation(c.config, OpDelete)
	return &OuResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OuResourceClient) DeleteOne(or *OuResource) *OuResourceDeleteOne {
	return c.DeleteOneID(or.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OuResourceClient) DeleteOneID(id int) *OuResourceDeleteOne {
	builder := c.Delete().Where(ouresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OuResourceDeleteOne{builder}
}

// Query returns a query builder for OuResource.
func (c *OuResourceClient) Query() *OuResourceQuery {
	return &OuResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOuResource},
		inters: c.Interceptors(),
	}
}

// Get returns a OuResource entity by its id.
func (c *OuResourceClient) Get(ctx context.Context, id int) (*OuResource, error) {
	return c.Query().Where(ouresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OuResourceClient) GetX(ctx context.Context, id int) *OuResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentOu queries the parent_ou edge of a OuResource.
func (c *OuResourceClient) QueryParentOu(or *OuResource) *OuResourceQuery {
	query := (&OuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ouresource.Table, ouresource.FieldID, id),
			sqlgraph.To(ouresource.Table, ouresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ouresource.ParentOuTable, ouresource.ParentOuColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a OuResource.
func (c *OuResourceClient) QueryChildren(or *OuResource) *OuResourceQuery {
	query := (&OuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := or.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(ouresource.Table, ouresource.FieldID, id),
			sqlgraph.To(ouresource.Table, ouresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, ouresource.ChildrenTable, ouresource.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(or.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OuResourceClient) Hooks() []Hook {
	return c.hooks.OuResource
}

// Interceptors returns the client interceptors.
func (c *OuResourceClient) Interceptors() []Interceptor {
	return c.inters.OuResource
}

func (c *OuResourceClient) mutate(ctx context.Context, m *OuResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OuResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OuResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OuResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OuResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown OuResource mutation op: %q", m.Op())
	}
}

// ProviderResourceClient is a client for the ProviderResource schema.
type ProviderResourceClient struct {
	config
}

// NewProviderResourceClient returns a client for the ProviderResource from the given config.
func NewProviderResourceClient(c config) *ProviderResourceClient {
	return &ProviderResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `providerresource.Hooks(f(g(h())))`.
func (c *ProviderResourceClient) Use(hooks ...Hook) {
	c.hooks.ProviderResource = append(c.hooks.ProviderResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `providerresource.Intercept(f(g(h())))`.
func (c *ProviderResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProviderResource = append(c.inters.ProviderResource, interceptors...)
}

// Create returns a builder for creating a ProviderResource entity.
func (c *ProviderResourceClient) Create() *ProviderResourceCreate {
	mutation := newProviderResourceMutation(c.config, OpCreate)
	return &ProviderResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProviderResource entities.
func (c *ProviderResourceClient) CreateBulk(builders ...*ProviderResourceCreate) *ProviderResourceCreateBulk {
	return &ProviderResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProviderResourceClient) MapCreateBulk(slice any, setFunc func(*ProviderResourceCreate, int)) *ProviderResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProviderResourceCreateBulk{err: fmt.Errorf("calling to ProviderResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProviderResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProviderResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProviderResource.
func (c *ProviderResourceClient) Update() *ProviderResourceUpdate {
	mutation := newProviderResourceMutation(c.config, OpUpdate)
	return &ProviderResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProviderResourceClient) UpdateOne(pr *ProviderResource) *ProviderResourceUpdateOne {
	mutation := newProviderResourceMutation(c.config, OpUpdateOne, withProviderResource(pr))
	return &ProviderResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProviderResourceClient) UpdateOneID(id int) *ProviderResourceUpdateOne {
	mutation := newProviderResourceMutation(c.config, OpUpdateOne, withProviderResourceID(id))
	return &ProviderResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProviderResource.
func (c *ProviderResourceClient) Delete() *ProviderResourceDelete {
	mutation := newProviderResourceMutation(c.config, OpDelete)
	return &ProviderResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProviderResourceClient) DeleteOne(pr *ProviderResource) *ProviderResourceDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProviderResourceClient) DeleteOneID(id int) *ProviderResourceDeleteOne {
	builder := c.Delete().Where(providerresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProviderResourceDeleteOne{builder}
}

// Query returns a query builder for ProviderResource.
func (c *ProviderResourceClient) Query() *ProviderResourceQuery {
	return &ProviderResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProviderResource},
		inters: c.Interceptors(),
	}
}

// Get returns a ProviderResource entity by its id.
func (c *ProviderResourceClient) Get(ctx context.Context, id int) (*ProviderResource, error) {
	return c.Query().Where(providerresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProviderResourceClient) GetX(ctx context.Context, id int) *ProviderResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProviderResourceClient) Hooks() []Hook {
	return c.hooks.ProviderResource
}

// Interceptors returns the client interceptors.
func (c *ProviderResourceClient) Interceptors() []Interceptor {
	return c.inters.ProviderResource
}

func (c *ProviderResourceClient) mutate(ctx context.Context, m *ProviderResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProviderResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProviderResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProviderResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProviderResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProviderResource mutation op: %q", m.Op())
	}
}

// RegionResourceClient is a client for the RegionResource schema.
type RegionResourceClient struct {
	config
}

// NewRegionResourceClient returns a client for the RegionResource from the given config.
func NewRegionResourceClient(c config) *RegionResourceClient {
	return &RegionResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `regionresource.Hooks(f(g(h())))`.
func (c *RegionResourceClient) Use(hooks ...Hook) {
	c.hooks.RegionResource = append(c.hooks.RegionResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `regionresource.Intercept(f(g(h())))`.
func (c *RegionResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.RegionResource = append(c.inters.RegionResource, interceptors...)
}

// Create returns a builder for creating a RegionResource entity.
func (c *RegionResourceClient) Create() *RegionResourceCreate {
	mutation := newRegionResourceMutation(c.config, OpCreate)
	return &RegionResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RegionResource entities.
func (c *RegionResourceClient) CreateBulk(builders ...*RegionResourceCreate) *RegionResourceCreateBulk {
	return &RegionResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RegionResourceClient) MapCreateBulk(slice any, setFunc func(*RegionResourceCreate, int)) *RegionResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RegionResourceCreateBulk{err: fmt.Errorf("calling to RegionResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RegionResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RegionResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RegionResource.
func (c *RegionResourceClient) Update() *RegionResourceUpdate {
	mutation := newRegionResourceMutation(c.config, OpUpdate)
	return &RegionResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegionResourceClient) UpdateOne(rr *RegionResource) *RegionResourceUpdateOne {
	mutation := newRegionResourceMutation(c.config, OpUpdateOne, withRegionResource(rr))
	return &RegionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegionResourceClient) UpdateOneID(id int) *RegionResourceUpdateOne {
	mutation := newRegionResourceMutation(c.config, OpUpdateOne, withRegionResourceID(id))
	return &RegionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RegionResource.
func (c *RegionResourceClient) Delete() *RegionResourceDelete {
	mutation := newRegionResourceMutation(c.config, OpDelete)
	return &RegionResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RegionResourceClient) DeleteOne(rr *RegionResource) *RegionResourceDeleteOne {
	return c.DeleteOneID(rr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RegionResourceClient) DeleteOneID(id int) *RegionResourceDeleteOne {
	builder := c.Delete().Where(regionresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegionResourceDeleteOne{builder}
}

// Query returns a query builder for RegionResource.
func (c *RegionResourceClient) Query() *RegionResourceQuery {
	return &RegionResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRegionResource},
		inters: c.Interceptors(),
	}
}

// Get returns a RegionResource entity by its id.
func (c *RegionResourceClient) Get(ctx context.Context, id int) (*RegionResource, error) {
	return c.Query().Where(regionresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegionResourceClient) GetX(ctx context.Context, id int) *RegionResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParentRegion queries the parent_region edge of a RegionResource.
func (c *RegionResourceClient) QueryParentRegion(rr *RegionResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionresource.Table, regionresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, regionresource.ParentRegionTable, regionresource.ParentRegionColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a RegionResource.
func (c *RegionResourceClient) QueryChildren(rr *RegionResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(regionresource.Table, regionresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, regionresource.ChildrenTable, regionresource.ChildrenColumn),
		)
		fromV = sqlgraph.Neighbors(rr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegionResourceClient) Hooks() []Hook {
	return c.hooks.RegionResource
}

// Interceptors returns the client interceptors.
func (c *RegionResourceClient) Interceptors() []Interceptor {
	return c.inters.RegionResource
}

func (c *RegionResourceClient) mutate(ctx context.Context, m *RegionResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RegionResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RegionResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RegionResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RegionResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RegionResource mutation op: %q", m.Op())
	}
}

// RemoteAccessConfigurationClient is a client for the RemoteAccessConfiguration schema.
type RemoteAccessConfigurationClient struct {
	config
}

// NewRemoteAccessConfigurationClient returns a client for the RemoteAccessConfiguration from the given config.
func NewRemoteAccessConfigurationClient(c config) *RemoteAccessConfigurationClient {
	return &RemoteAccessConfigurationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `remoteaccessconfiguration.Hooks(f(g(h())))`.
func (c *RemoteAccessConfigurationClient) Use(hooks ...Hook) {
	c.hooks.RemoteAccessConfiguration = append(c.hooks.RemoteAccessConfiguration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `remoteaccessconfiguration.Intercept(f(g(h())))`.
func (c *RemoteAccessConfigurationClient) Intercept(interceptors ...Interceptor) {
	c.inters.RemoteAccessConfiguration = append(c.inters.RemoteAccessConfiguration, interceptors...)
}

// Create returns a builder for creating a RemoteAccessConfiguration entity.
func (c *RemoteAccessConfigurationClient) Create() *RemoteAccessConfigurationCreate {
	mutation := newRemoteAccessConfigurationMutation(c.config, OpCreate)
	return &RemoteAccessConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RemoteAccessConfiguration entities.
func (c *RemoteAccessConfigurationClient) CreateBulk(builders ...*RemoteAccessConfigurationCreate) *RemoteAccessConfigurationCreateBulk {
	return &RemoteAccessConfigurationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RemoteAccessConfigurationClient) MapCreateBulk(slice any, setFunc func(*RemoteAccessConfigurationCreate, int)) *RemoteAccessConfigurationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RemoteAccessConfigurationCreateBulk{err: fmt.Errorf("calling to RemoteAccessConfigurationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RemoteAccessConfigurationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RemoteAccessConfigurationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RemoteAccessConfiguration.
func (c *RemoteAccessConfigurationClient) Update() *RemoteAccessConfigurationUpdate {
	mutation := newRemoteAccessConfigurationMutation(c.config, OpUpdate)
	return &RemoteAccessConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RemoteAccessConfigurationClient) UpdateOne(rac *RemoteAccessConfiguration) *RemoteAccessConfigurationUpdateOne {
	mutation := newRemoteAccessConfigurationMutation(c.config, OpUpdateOne, withRemoteAccessConfiguration(rac))
	return &RemoteAccessConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RemoteAccessConfigurationClient) UpdateOneID(id int) *RemoteAccessConfigurationUpdateOne {
	mutation := newRemoteAccessConfigurationMutation(c.config, OpUpdateOne, withRemoteAccessConfigurationID(id))
	return &RemoteAccessConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RemoteAccessConfiguration.
func (c *RemoteAccessConfigurationClient) Delete() *RemoteAccessConfigurationDelete {
	mutation := newRemoteAccessConfigurationMutation(c.config, OpDelete)
	return &RemoteAccessConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RemoteAccessConfigurationClient) DeleteOne(rac *RemoteAccessConfiguration) *RemoteAccessConfigurationDeleteOne {
	return c.DeleteOneID(rac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RemoteAccessConfigurationClient) DeleteOneID(id int) *RemoteAccessConfigurationDeleteOne {
	builder := c.Delete().Where(remoteaccessconfiguration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RemoteAccessConfigurationDeleteOne{builder}
}

// Query returns a query builder for RemoteAccessConfiguration.
func (c *RemoteAccessConfigurationClient) Query() *RemoteAccessConfigurationQuery {
	return &RemoteAccessConfigurationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRemoteAccessConfiguration},
		inters: c.Interceptors(),
	}
}

// Get returns a RemoteAccessConfiguration entity by its id.
func (c *RemoteAccessConfigurationClient) Get(ctx context.Context, id int) (*RemoteAccessConfiguration, error) {
	return c.Query().Where(remoteaccessconfiguration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RemoteAccessConfigurationClient) GetX(ctx context.Context, id int) *RemoteAccessConfiguration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInstance queries the instance edge of a RemoteAccessConfiguration.
func (c *RemoteAccessConfigurationClient) QueryInstance(rac *RemoteAccessConfiguration) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rac.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(remoteaccessconfiguration.Table, remoteaccessconfiguration.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, remoteaccessconfiguration.InstanceTable, remoteaccessconfiguration.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(rac.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RemoteAccessConfigurationClient) Hooks() []Hook {
	return c.hooks.RemoteAccessConfiguration
}

// Interceptors returns the client interceptors.
func (c *RemoteAccessConfigurationClient) Interceptors() []Interceptor {
	return c.inters.RemoteAccessConfiguration
}

func (c *RemoteAccessConfigurationClient) mutate(ctx context.Context, m *RemoteAccessConfigurationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RemoteAccessConfigurationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RemoteAccessConfigurationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RemoteAccessConfigurationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RemoteAccessConfigurationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RemoteAccessConfiguration mutation op: %q", m.Op())
	}
}

// RepeatedScheduleResourceClient is a client for the RepeatedScheduleResource schema.
type RepeatedScheduleResourceClient struct {
	config
}

// NewRepeatedScheduleResourceClient returns a client for the RepeatedScheduleResource from the given config.
func NewRepeatedScheduleResourceClient(c config) *RepeatedScheduleResourceClient {
	return &RepeatedScheduleResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `repeatedscheduleresource.Hooks(f(g(h())))`.
func (c *RepeatedScheduleResourceClient) Use(hooks ...Hook) {
	c.hooks.RepeatedScheduleResource = append(c.hooks.RepeatedScheduleResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `repeatedscheduleresource.Intercept(f(g(h())))`.
func (c *RepeatedScheduleResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.RepeatedScheduleResource = append(c.inters.RepeatedScheduleResource, interceptors...)
}

// Create returns a builder for creating a RepeatedScheduleResource entity.
func (c *RepeatedScheduleResourceClient) Create() *RepeatedScheduleResourceCreate {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpCreate)
	return &RepeatedScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RepeatedScheduleResource entities.
func (c *RepeatedScheduleResourceClient) CreateBulk(builders ...*RepeatedScheduleResourceCreate) *RepeatedScheduleResourceCreateBulk {
	return &RepeatedScheduleResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *RepeatedScheduleResourceClient) MapCreateBulk(slice any, setFunc func(*RepeatedScheduleResourceCreate, int)) *RepeatedScheduleResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &RepeatedScheduleResourceCreateBulk{err: fmt.Errorf("calling to RepeatedScheduleResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*RepeatedScheduleResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &RepeatedScheduleResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) Update() *RepeatedScheduleResourceUpdate {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpUpdate)
	return &RepeatedScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RepeatedScheduleResourceClient) UpdateOne(rsr *RepeatedScheduleResource) *RepeatedScheduleResourceUpdateOne {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpUpdateOne, withRepeatedScheduleResource(rsr))
	return &RepeatedScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RepeatedScheduleResourceClient) UpdateOneID(id int) *RepeatedScheduleResourceUpdateOne {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpUpdateOne, withRepeatedScheduleResourceID(id))
	return &RepeatedScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) Delete() *RepeatedScheduleResourceDelete {
	mutation := newRepeatedScheduleResourceMutation(c.config, OpDelete)
	return &RepeatedScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RepeatedScheduleResourceClient) DeleteOne(rsr *RepeatedScheduleResource) *RepeatedScheduleResourceDeleteOne {
	return c.DeleteOneID(rsr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RepeatedScheduleResourceClient) DeleteOneID(id int) *RepeatedScheduleResourceDeleteOne {
	builder := c.Delete().Where(repeatedscheduleresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RepeatedScheduleResourceDeleteOne{builder}
}

// Query returns a query builder for RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) Query() *RepeatedScheduleResourceQuery {
	return &RepeatedScheduleResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeRepeatedScheduleResource},
		inters: c.Interceptors(),
	}
}

// Get returns a RepeatedScheduleResource entity by its id.
func (c *RepeatedScheduleResourceClient) Get(ctx context.Context, id int) (*RepeatedScheduleResource, error) {
	return c.Query().Where(repeatedscheduleresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RepeatedScheduleResourceClient) GetX(ctx context.Context, id int) *RepeatedScheduleResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargetSite queries the target_site edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetSite(rsr *RepeatedScheduleResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetSiteTable, repeatedscheduleresource.TargetSiteColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetHost queries the target_host edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetHost(rsr *RepeatedScheduleResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetHostTable, repeatedscheduleresource.TargetHostColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetWorkload queries the target_workload edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetWorkload(rsr *RepeatedScheduleResource) *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetWorkloadTable, repeatedscheduleresource.TargetWorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetRegion queries the target_region edge of a RepeatedScheduleResource.
func (c *RepeatedScheduleResourceClient) QueryTargetRegion(rsr *RepeatedScheduleResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := rsr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(repeatedscheduleresource.Table, repeatedscheduleresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, repeatedscheduleresource.TargetRegionTable, repeatedscheduleresource.TargetRegionColumn),
		)
		fromV = sqlgraph.Neighbors(rsr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RepeatedScheduleResourceClient) Hooks() []Hook {
	return c.hooks.RepeatedScheduleResource
}

// Interceptors returns the client interceptors.
func (c *RepeatedScheduleResourceClient) Interceptors() []Interceptor {
	return c.inters.RepeatedScheduleResource
}

func (c *RepeatedScheduleResourceClient) mutate(ctx context.Context, m *RepeatedScheduleResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&RepeatedScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&RepeatedScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&RepeatedScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&RepeatedScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown RepeatedScheduleResource mutation op: %q", m.Op())
	}
}

// SingleScheduleResourceClient is a client for the SingleScheduleResource schema.
type SingleScheduleResourceClient struct {
	config
}

// NewSingleScheduleResourceClient returns a client for the SingleScheduleResource from the given config.
func NewSingleScheduleResourceClient(c config) *SingleScheduleResourceClient {
	return &SingleScheduleResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `singlescheduleresource.Hooks(f(g(h())))`.
func (c *SingleScheduleResourceClient) Use(hooks ...Hook) {
	c.hooks.SingleScheduleResource = append(c.hooks.SingleScheduleResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `singlescheduleresource.Intercept(f(g(h())))`.
func (c *SingleScheduleResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.SingleScheduleResource = append(c.inters.SingleScheduleResource, interceptors...)
}

// Create returns a builder for creating a SingleScheduleResource entity.
func (c *SingleScheduleResourceClient) Create() *SingleScheduleResourceCreate {
	mutation := newSingleScheduleResourceMutation(c.config, OpCreate)
	return &SingleScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SingleScheduleResource entities.
func (c *SingleScheduleResourceClient) CreateBulk(builders ...*SingleScheduleResourceCreate) *SingleScheduleResourceCreateBulk {
	return &SingleScheduleResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SingleScheduleResourceClient) MapCreateBulk(slice any, setFunc func(*SingleScheduleResourceCreate, int)) *SingleScheduleResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SingleScheduleResourceCreateBulk{err: fmt.Errorf("calling to SingleScheduleResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SingleScheduleResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SingleScheduleResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SingleScheduleResource.
func (c *SingleScheduleResourceClient) Update() *SingleScheduleResourceUpdate {
	mutation := newSingleScheduleResourceMutation(c.config, OpUpdate)
	return &SingleScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SingleScheduleResourceClient) UpdateOne(ssr *SingleScheduleResource) *SingleScheduleResourceUpdateOne {
	mutation := newSingleScheduleResourceMutation(c.config, OpUpdateOne, withSingleScheduleResource(ssr))
	return &SingleScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SingleScheduleResourceClient) UpdateOneID(id int) *SingleScheduleResourceUpdateOne {
	mutation := newSingleScheduleResourceMutation(c.config, OpUpdateOne, withSingleScheduleResourceID(id))
	return &SingleScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SingleScheduleResource.
func (c *SingleScheduleResourceClient) Delete() *SingleScheduleResourceDelete {
	mutation := newSingleScheduleResourceMutation(c.config, OpDelete)
	return &SingleScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SingleScheduleResourceClient) DeleteOne(ssr *SingleScheduleResource) *SingleScheduleResourceDeleteOne {
	return c.DeleteOneID(ssr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SingleScheduleResourceClient) DeleteOneID(id int) *SingleScheduleResourceDeleteOne {
	builder := c.Delete().Where(singlescheduleresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SingleScheduleResourceDeleteOne{builder}
}

// Query returns a query builder for SingleScheduleResource.
func (c *SingleScheduleResourceClient) Query() *SingleScheduleResourceQuery {
	return &SingleScheduleResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSingleScheduleResource},
		inters: c.Interceptors(),
	}
}

// Get returns a SingleScheduleResource entity by its id.
func (c *SingleScheduleResourceClient) Get(ctx context.Context, id int) (*SingleScheduleResource, error) {
	return c.Query().Where(singlescheduleresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SingleScheduleResourceClient) GetX(ctx context.Context, id int) *SingleScheduleResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTargetSite queries the target_site edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetSite(ssr *SingleScheduleResource) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetSiteTable, singlescheduleresource.TargetSiteColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetHost queries the target_host edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetHost(ssr *SingleScheduleResource) *HostResourceQuery {
	query := (&HostResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(hostresource.Table, hostresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetHostTable, singlescheduleresource.TargetHostColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetWorkload queries the target_workload edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetWorkload(ssr *SingleScheduleResource) *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetWorkloadTable, singlescheduleresource.TargetWorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTargetRegion queries the target_region edge of a SingleScheduleResource.
func (c *SingleScheduleResourceClient) QueryTargetRegion(ssr *SingleScheduleResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ssr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(singlescheduleresource.Table, singlescheduleresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, singlescheduleresource.TargetRegionTable, singlescheduleresource.TargetRegionColumn),
		)
		fromV = sqlgraph.Neighbors(ssr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SingleScheduleResourceClient) Hooks() []Hook {
	return c.hooks.SingleScheduleResource
}

// Interceptors returns the client interceptors.
func (c *SingleScheduleResourceClient) Interceptors() []Interceptor {
	return c.inters.SingleScheduleResource
}

func (c *SingleScheduleResourceClient) mutate(ctx context.Context, m *SingleScheduleResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SingleScheduleResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SingleScheduleResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SingleScheduleResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SingleScheduleResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SingleScheduleResource mutation op: %q", m.Op())
	}
}

// SiteResourceClient is a client for the SiteResource schema.
type SiteResourceClient struct {
	config
}

// NewSiteResourceClient returns a client for the SiteResource from the given config.
func NewSiteResourceClient(c config) *SiteResourceClient {
	return &SiteResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `siteresource.Hooks(f(g(h())))`.
func (c *SiteResourceClient) Use(hooks ...Hook) {
	c.hooks.SiteResource = append(c.hooks.SiteResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `siteresource.Intercept(f(g(h())))`.
func (c *SiteResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.SiteResource = append(c.inters.SiteResource, interceptors...)
}

// Create returns a builder for creating a SiteResource entity.
func (c *SiteResourceClient) Create() *SiteResourceCreate {
	mutation := newSiteResourceMutation(c.config, OpCreate)
	return &SiteResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SiteResource entities.
func (c *SiteResourceClient) CreateBulk(builders ...*SiteResourceCreate) *SiteResourceCreateBulk {
	return &SiteResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SiteResourceClient) MapCreateBulk(slice any, setFunc func(*SiteResourceCreate, int)) *SiteResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SiteResourceCreateBulk{err: fmt.Errorf("calling to SiteResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SiteResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SiteResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SiteResource.
func (c *SiteResourceClient) Update() *SiteResourceUpdate {
	mutation := newSiteResourceMutation(c.config, OpUpdate)
	return &SiteResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SiteResourceClient) UpdateOne(sr *SiteResource) *SiteResourceUpdateOne {
	mutation := newSiteResourceMutation(c.config, OpUpdateOne, withSiteResource(sr))
	return &SiteResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SiteResourceClient) UpdateOneID(id int) *SiteResourceUpdateOne {
	mutation := newSiteResourceMutation(c.config, OpUpdateOne, withSiteResourceID(id))
	return &SiteResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SiteResource.
func (c *SiteResourceClient) Delete() *SiteResourceDelete {
	mutation := newSiteResourceMutation(c.config, OpDelete)
	return &SiteResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SiteResourceClient) DeleteOne(sr *SiteResource) *SiteResourceDeleteOne {
	return c.DeleteOneID(sr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SiteResourceClient) DeleteOneID(id int) *SiteResourceDeleteOne {
	builder := c.Delete().Where(siteresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SiteResourceDeleteOne{builder}
}

// Query returns a query builder for SiteResource.
func (c *SiteResourceClient) Query() *SiteResourceQuery {
	return &SiteResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSiteResource},
		inters: c.Interceptors(),
	}
}

// Get returns a SiteResource entity by its id.
func (c *SiteResourceClient) Get(ctx context.Context, id int) (*SiteResource, error) {
	return c.Query().Where(siteresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SiteResourceClient) GetX(ctx context.Context, id int) *SiteResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegion queries the region edge of a SiteResource.
func (c *SiteResourceClient) QueryRegion(sr *SiteResource) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(siteresource.Table, siteresource.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, siteresource.RegionTable, siteresource.RegionColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOu queries the ou edge of a SiteResource.
func (c *SiteResourceClient) QueryOu(sr *SiteResource) *OuResourceQuery {
	query := (&OuResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(siteresource.Table, siteresource.FieldID, id),
			sqlgraph.To(ouresource.Table, ouresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, siteresource.OuTable, siteresource.OuColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProvider queries the provider edge of a SiteResource.
func (c *SiteResourceClient) QueryProvider(sr *SiteResource) *ProviderResourceQuery {
	query := (&ProviderResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(siteresource.Table, siteresource.FieldID, id),
			sqlgraph.To(providerresource.Table, providerresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, siteresource.ProviderTable, siteresource.ProviderColumn),
		)
		fromV = sqlgraph.Neighbors(sr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SiteResourceClient) Hooks() []Hook {
	return c.hooks.SiteResource
}

// Interceptors returns the client interceptors.
func (c *SiteResourceClient) Interceptors() []Interceptor {
	return c.inters.SiteResource
}

func (c *SiteResourceClient) mutate(ctx context.Context, m *SiteResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SiteResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SiteResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SiteResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SiteResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SiteResource mutation op: %q", m.Op())
	}
}

// TelemetryGroupResourceClient is a client for the TelemetryGroupResource schema.
type TelemetryGroupResourceClient struct {
	config
}

// NewTelemetryGroupResourceClient returns a client for the TelemetryGroupResource from the given config.
func NewTelemetryGroupResourceClient(c config) *TelemetryGroupResourceClient {
	return &TelemetryGroupResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telemetrygroupresource.Hooks(f(g(h())))`.
func (c *TelemetryGroupResourceClient) Use(hooks ...Hook) {
	c.hooks.TelemetryGroupResource = append(c.hooks.TelemetryGroupResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telemetrygroupresource.Intercept(f(g(h())))`.
func (c *TelemetryGroupResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelemetryGroupResource = append(c.inters.TelemetryGroupResource, interceptors...)
}

// Create returns a builder for creating a TelemetryGroupResource entity.
func (c *TelemetryGroupResourceClient) Create() *TelemetryGroupResourceCreate {
	mutation := newTelemetryGroupResourceMutation(c.config, OpCreate)
	return &TelemetryGroupResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelemetryGroupResource entities.
func (c *TelemetryGroupResourceClient) CreateBulk(builders ...*TelemetryGroupResourceCreate) *TelemetryGroupResourceCreateBulk {
	return &TelemetryGroupResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TelemetryGroupResourceClient) MapCreateBulk(slice any, setFunc func(*TelemetryGroupResourceCreate, int)) *TelemetryGroupResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TelemetryGroupResourceCreateBulk{err: fmt.Errorf("calling to TelemetryGroupResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TelemetryGroupResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TelemetryGroupResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelemetryGroupResource.
func (c *TelemetryGroupResourceClient) Update() *TelemetryGroupResourceUpdate {
	mutation := newTelemetryGroupResourceMutation(c.config, OpUpdate)
	return &TelemetryGroupResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelemetryGroupResourceClient) UpdateOne(tgr *TelemetryGroupResource) *TelemetryGroupResourceUpdateOne {
	mutation := newTelemetryGroupResourceMutation(c.config, OpUpdateOne, withTelemetryGroupResource(tgr))
	return &TelemetryGroupResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelemetryGroupResourceClient) UpdateOneID(id int) *TelemetryGroupResourceUpdateOne {
	mutation := newTelemetryGroupResourceMutation(c.config, OpUpdateOne, withTelemetryGroupResourceID(id))
	return &TelemetryGroupResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelemetryGroupResource.
func (c *TelemetryGroupResourceClient) Delete() *TelemetryGroupResourceDelete {
	mutation := newTelemetryGroupResourceMutation(c.config, OpDelete)
	return &TelemetryGroupResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelemetryGroupResourceClient) DeleteOne(tgr *TelemetryGroupResource) *TelemetryGroupResourceDeleteOne {
	return c.DeleteOneID(tgr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelemetryGroupResourceClient) DeleteOneID(id int) *TelemetryGroupResourceDeleteOne {
	builder := c.Delete().Where(telemetrygroupresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelemetryGroupResourceDeleteOne{builder}
}

// Query returns a query builder for TelemetryGroupResource.
func (c *TelemetryGroupResourceClient) Query() *TelemetryGroupResourceQuery {
	return &TelemetryGroupResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelemetryGroupResource},
		inters: c.Interceptors(),
	}
}

// Get returns a TelemetryGroupResource entity by its id.
func (c *TelemetryGroupResourceClient) Get(ctx context.Context, id int) (*TelemetryGroupResource, error) {
	return c.Query().Where(telemetrygroupresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelemetryGroupResourceClient) GetX(ctx context.Context, id int) *TelemetryGroupResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProfiles queries the profiles edge of a TelemetryGroupResource.
func (c *TelemetryGroupResourceClient) QueryProfiles(tgr *TelemetryGroupResource) *TelemetryProfileQuery {
	query := (&TelemetryProfileClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tgr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telemetrygroupresource.Table, telemetrygroupresource.FieldID, id),
			sqlgraph.To(telemetryprofile.Table, telemetryprofile.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, telemetrygroupresource.ProfilesTable, telemetrygroupresource.ProfilesColumn),
		)
		fromV = sqlgraph.Neighbors(tgr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TelemetryGroupResourceClient) Hooks() []Hook {
	return c.hooks.TelemetryGroupResource
}

// Interceptors returns the client interceptors.
func (c *TelemetryGroupResourceClient) Interceptors() []Interceptor {
	return c.inters.TelemetryGroupResource
}

func (c *TelemetryGroupResourceClient) mutate(ctx context.Context, m *TelemetryGroupResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelemetryGroupResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelemetryGroupResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelemetryGroupResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelemetryGroupResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelemetryGroupResource mutation op: %q", m.Op())
	}
}

// TelemetryProfileClient is a client for the TelemetryProfile schema.
type TelemetryProfileClient struct {
	config
}

// NewTelemetryProfileClient returns a client for the TelemetryProfile from the given config.
func NewTelemetryProfileClient(c config) *TelemetryProfileClient {
	return &TelemetryProfileClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `telemetryprofile.Hooks(f(g(h())))`.
func (c *TelemetryProfileClient) Use(hooks ...Hook) {
	c.hooks.TelemetryProfile = append(c.hooks.TelemetryProfile, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `telemetryprofile.Intercept(f(g(h())))`.
func (c *TelemetryProfileClient) Intercept(interceptors ...Interceptor) {
	c.inters.TelemetryProfile = append(c.inters.TelemetryProfile, interceptors...)
}

// Create returns a builder for creating a TelemetryProfile entity.
func (c *TelemetryProfileClient) Create() *TelemetryProfileCreate {
	mutation := newTelemetryProfileMutation(c.config, OpCreate)
	return &TelemetryProfileCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TelemetryProfile entities.
func (c *TelemetryProfileClient) CreateBulk(builders ...*TelemetryProfileCreate) *TelemetryProfileCreateBulk {
	return &TelemetryProfileCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TelemetryProfileClient) MapCreateBulk(slice any, setFunc func(*TelemetryProfileCreate, int)) *TelemetryProfileCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TelemetryProfileCreateBulk{err: fmt.Errorf("calling to TelemetryProfileClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TelemetryProfileCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TelemetryProfileCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TelemetryProfile.
func (c *TelemetryProfileClient) Update() *TelemetryProfileUpdate {
	mutation := newTelemetryProfileMutation(c.config, OpUpdate)
	return &TelemetryProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TelemetryProfileClient) UpdateOne(tp *TelemetryProfile) *TelemetryProfileUpdateOne {
	mutation := newTelemetryProfileMutation(c.config, OpUpdateOne, withTelemetryProfile(tp))
	return &TelemetryProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TelemetryProfileClient) UpdateOneID(id int) *TelemetryProfileUpdateOne {
	mutation := newTelemetryProfileMutation(c.config, OpUpdateOne, withTelemetryProfileID(id))
	return &TelemetryProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TelemetryProfile.
func (c *TelemetryProfileClient) Delete() *TelemetryProfileDelete {
	mutation := newTelemetryProfileMutation(c.config, OpDelete)
	return &TelemetryProfileDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TelemetryProfileClient) DeleteOne(tp *TelemetryProfile) *TelemetryProfileDeleteOne {
	return c.DeleteOneID(tp.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TelemetryProfileClient) DeleteOneID(id int) *TelemetryProfileDeleteOne {
	builder := c.Delete().Where(telemetryprofile.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TelemetryProfileDeleteOne{builder}
}

// Query returns a query builder for TelemetryProfile.
func (c *TelemetryProfileClient) Query() *TelemetryProfileQuery {
	return &TelemetryProfileQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTelemetryProfile},
		inters: c.Interceptors(),
	}
}

// Get returns a TelemetryProfile entity by its id.
func (c *TelemetryProfileClient) Get(ctx context.Context, id int) (*TelemetryProfile, error) {
	return c.Query().Where(telemetryprofile.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TelemetryProfileClient) GetX(ctx context.Context, id int) *TelemetryProfile {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegion queries the region edge of a TelemetryProfile.
func (c *TelemetryProfileClient) QueryRegion(tp *TelemetryProfile) *RegionResourceQuery {
	query := (&RegionResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telemetryprofile.Table, telemetryprofile.FieldID, id),
			sqlgraph.To(regionresource.Table, regionresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, telemetryprofile.RegionTable, telemetryprofile.RegionColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySite queries the site edge of a TelemetryProfile.
func (c *TelemetryProfileClient) QuerySite(tp *TelemetryProfile) *SiteResourceQuery {
	query := (&SiteResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telemetryprofile.Table, telemetryprofile.FieldID, id),
			sqlgraph.To(siteresource.Table, siteresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, telemetryprofile.SiteTable, telemetryprofile.SiteColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a TelemetryProfile.
func (c *TelemetryProfileClient) QueryInstance(tp *TelemetryProfile) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telemetryprofile.Table, telemetryprofile.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, telemetryprofile.InstanceTable, telemetryprofile.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroup queries the group edge of a TelemetryProfile.
func (c *TelemetryProfileClient) QueryGroup(tp *TelemetryProfile) *TelemetryGroupResourceQuery {
	query := (&TelemetryGroupResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := tp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(telemetryprofile.Table, telemetryprofile.FieldID, id),
			sqlgraph.To(telemetrygroupresource.Table, telemetrygroupresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, telemetryprofile.GroupTable, telemetryprofile.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(tp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TelemetryProfileClient) Hooks() []Hook {
	return c.hooks.TelemetryProfile
}

// Interceptors returns the client interceptors.
func (c *TelemetryProfileClient) Interceptors() []Interceptor {
	return c.inters.TelemetryProfile
}

func (c *TelemetryProfileClient) mutate(ctx context.Context, m *TelemetryProfileMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TelemetryProfileCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TelemetryProfileUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TelemetryProfileUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TelemetryProfileDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TelemetryProfile mutation op: %q", m.Op())
	}
}

// TenantClient is a client for the Tenant schema.
type TenantClient struct {
	config
}

// NewTenantClient returns a client for the Tenant from the given config.
func NewTenantClient(c config) *TenantClient {
	return &TenantClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tenant.Hooks(f(g(h())))`.
func (c *TenantClient) Use(hooks ...Hook) {
	c.hooks.Tenant = append(c.hooks.Tenant, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `tenant.Intercept(f(g(h())))`.
func (c *TenantClient) Intercept(interceptors ...Interceptor) {
	c.inters.Tenant = append(c.inters.Tenant, interceptors...)
}

// Create returns a builder for creating a Tenant entity.
func (c *TenantClient) Create() *TenantCreate {
	mutation := newTenantMutation(c.config, OpCreate)
	return &TenantCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tenant entities.
func (c *TenantClient) CreateBulk(builders ...*TenantCreate) *TenantCreateBulk {
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TenantClient) MapCreateBulk(slice any, setFunc func(*TenantCreate, int)) *TenantCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TenantCreateBulk{err: fmt.Errorf("calling to TenantClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TenantCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TenantCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tenant.
func (c *TenantClient) Update() *TenantUpdate {
	mutation := newTenantMutation(c.config, OpUpdate)
	return &TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TenantClient) UpdateOne(t *Tenant) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenant(t))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TenantClient) UpdateOneID(id int) *TenantUpdateOne {
	mutation := newTenantMutation(c.config, OpUpdateOne, withTenantID(id))
	return &TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tenant.
func (c *TenantClient) Delete() *TenantDelete {
	mutation := newTenantMutation(c.config, OpDelete)
	return &TenantDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TenantClient) DeleteOne(t *Tenant) *TenantDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TenantClient) DeleteOneID(id int) *TenantDeleteOne {
	builder := c.Delete().Where(tenant.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TenantDeleteOne{builder}
}

// Query returns a query builder for Tenant.
func (c *TenantClient) Query() *TenantQuery {
	return &TenantQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTenant},
		inters: c.Interceptors(),
	}
}

// Get returns a Tenant entity by its id.
func (c *TenantClient) Get(ctx context.Context, id int) (*Tenant, error) {
	return c.Query().Where(tenant.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TenantClient) GetX(ctx context.Context, id int) *Tenant {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TenantClient) Hooks() []Hook {
	return c.hooks.Tenant
}

// Interceptors returns the client interceptors.
func (c *TenantClient) Interceptors() []Interceptor {
	return c.inters.Tenant
}

func (c *TenantClient) mutate(ctx context.Context, m *TenantMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TenantCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TenantUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TenantUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TenantDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Tenant mutation op: %q", m.Op())
	}
}

// WorkloadMemberClient is a client for the WorkloadMember schema.
type WorkloadMemberClient struct {
	config
}

// NewWorkloadMemberClient returns a client for the WorkloadMember from the given config.
func NewWorkloadMemberClient(c config) *WorkloadMemberClient {
	return &WorkloadMemberClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadmember.Hooks(f(g(h())))`.
func (c *WorkloadMemberClient) Use(hooks ...Hook) {
	c.hooks.WorkloadMember = append(c.hooks.WorkloadMember, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workloadmember.Intercept(f(g(h())))`.
func (c *WorkloadMemberClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkloadMember = append(c.inters.WorkloadMember, interceptors...)
}

// Create returns a builder for creating a WorkloadMember entity.
func (c *WorkloadMemberClient) Create() *WorkloadMemberCreate {
	mutation := newWorkloadMemberMutation(c.config, OpCreate)
	return &WorkloadMemberCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadMember entities.
func (c *WorkloadMemberClient) CreateBulk(builders ...*WorkloadMemberCreate) *WorkloadMemberCreateBulk {
	return &WorkloadMemberCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkloadMemberClient) MapCreateBulk(slice any, setFunc func(*WorkloadMemberCreate, int)) *WorkloadMemberCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkloadMemberCreateBulk{err: fmt.Errorf("calling to WorkloadMemberClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkloadMemberCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkloadMemberCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadMember.
func (c *WorkloadMemberClient) Update() *WorkloadMemberUpdate {
	mutation := newWorkloadMemberMutation(c.config, OpUpdate)
	return &WorkloadMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadMemberClient) UpdateOne(wm *WorkloadMember) *WorkloadMemberUpdateOne {
	mutation := newWorkloadMemberMutation(c.config, OpUpdateOne, withWorkloadMember(wm))
	return &WorkloadMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadMemberClient) UpdateOneID(id int) *WorkloadMemberUpdateOne {
	mutation := newWorkloadMemberMutation(c.config, OpUpdateOne, withWorkloadMemberID(id))
	return &WorkloadMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadMember.
func (c *WorkloadMemberClient) Delete() *WorkloadMemberDelete {
	mutation := newWorkloadMemberMutation(c.config, OpDelete)
	return &WorkloadMemberDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkloadMemberClient) DeleteOne(wm *WorkloadMember) *WorkloadMemberDeleteOne {
	return c.DeleteOneID(wm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkloadMemberClient) DeleteOneID(id int) *WorkloadMemberDeleteOne {
	builder := c.Delete().Where(workloadmember.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadMemberDeleteOne{builder}
}

// Query returns a query builder for WorkloadMember.
func (c *WorkloadMemberClient) Query() *WorkloadMemberQuery {
	return &WorkloadMemberQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkloadMember},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkloadMember entity by its id.
func (c *WorkloadMemberClient) Get(ctx context.Context, id int) (*WorkloadMember, error) {
	return c.Query().Where(workloadmember.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadMemberClient) GetX(ctx context.Context, id int) *WorkloadMember {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkload queries the workload edge of a WorkloadMember.
func (c *WorkloadMemberClient) QueryWorkload(wm *WorkloadMember) *WorkloadResourceQuery {
	query := (&WorkloadResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadmember.Table, workloadmember.FieldID, id),
			sqlgraph.To(workloadresource.Table, workloadresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workloadmember.WorkloadTable, workloadmember.WorkloadColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInstance queries the instance edge of a WorkloadMember.
func (c *WorkloadMemberClient) QueryInstance(wm *WorkloadMember) *InstanceResourceQuery {
	query := (&InstanceResourceClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadmember.Table, workloadmember.FieldID, id),
			sqlgraph.To(instanceresource.Table, instanceresource.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, workloadmember.InstanceTable, workloadmember.InstanceColumn),
		)
		fromV = sqlgraph.Neighbors(wm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadMemberClient) Hooks() []Hook {
	return c.hooks.WorkloadMember
}

// Interceptors returns the client interceptors.
func (c *WorkloadMemberClient) Interceptors() []Interceptor {
	return c.inters.WorkloadMember
}

func (c *WorkloadMemberClient) mutate(ctx context.Context, m *WorkloadMemberMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkloadMemberCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkloadMemberUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkloadMemberUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkloadMemberDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkloadMember mutation op: %q", m.Op())
	}
}

// WorkloadResourceClient is a client for the WorkloadResource schema.
type WorkloadResourceClient struct {
	config
}

// NewWorkloadResourceClient returns a client for the WorkloadResource from the given config.
func NewWorkloadResourceClient(c config) *WorkloadResourceClient {
	return &WorkloadResourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workloadresource.Hooks(f(g(h())))`.
func (c *WorkloadResourceClient) Use(hooks ...Hook) {
	c.hooks.WorkloadResource = append(c.hooks.WorkloadResource, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workloadresource.Intercept(f(g(h())))`.
func (c *WorkloadResourceClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkloadResource = append(c.inters.WorkloadResource, interceptors...)
}

// Create returns a builder for creating a WorkloadResource entity.
func (c *WorkloadResourceClient) Create() *WorkloadResourceCreate {
	mutation := newWorkloadResourceMutation(c.config, OpCreate)
	return &WorkloadResourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkloadResource entities.
func (c *WorkloadResourceClient) CreateBulk(builders ...*WorkloadResourceCreate) *WorkloadResourceCreateBulk {
	return &WorkloadResourceCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkloadResourceClient) MapCreateBulk(slice any, setFunc func(*WorkloadResourceCreate, int)) *WorkloadResourceCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkloadResourceCreateBulk{err: fmt.Errorf("calling to WorkloadResourceClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkloadResourceCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkloadResourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkloadResource.
func (c *WorkloadResourceClient) Update() *WorkloadResourceUpdate {
	mutation := newWorkloadResourceMutation(c.config, OpUpdate)
	return &WorkloadResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkloadResourceClient) UpdateOne(wr *WorkloadResource) *WorkloadResourceUpdateOne {
	mutation := newWorkloadResourceMutation(c.config, OpUpdateOne, withWorkloadResource(wr))
	return &WorkloadResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkloadResourceClient) UpdateOneID(id int) *WorkloadResourceUpdateOne {
	mutation := newWorkloadResourceMutation(c.config, OpUpdateOne, withWorkloadResourceID(id))
	return &WorkloadResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkloadResource.
func (c *WorkloadResourceClient) Delete() *WorkloadResourceDelete {
	mutation := newWorkloadResourceMutation(c.config, OpDelete)
	return &WorkloadResourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkloadResourceClient) DeleteOne(wr *WorkloadResource) *WorkloadResourceDeleteOne {
	return c.DeleteOneID(wr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkloadResourceClient) DeleteOneID(id int) *WorkloadResourceDeleteOne {
	builder := c.Delete().Where(workloadresource.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkloadResourceDeleteOne{builder}
}

// Query returns a query builder for WorkloadResource.
func (c *WorkloadResourceClient) Query() *WorkloadResourceQuery {
	return &WorkloadResourceQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkloadResource},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkloadResource entity by its id.
func (c *WorkloadResourceClient) Get(ctx context.Context, id int) (*WorkloadResource, error) {
	return c.Query().Where(workloadresource.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkloadResourceClient) GetX(ctx context.Context, id int) *WorkloadResource {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a WorkloadResource.
func (c *WorkloadResourceClient) QueryMembers(wr *WorkloadResource) *WorkloadMemberQuery {
	query := (&WorkloadMemberClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workloadresource.Table, workloadresource.FieldID, id),
			sqlgraph.To(workloadmember.Table, workloadmember.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, workloadresource.MembersTable, workloadresource.MembersColumn),
		)
		fromV = sqlgraph.Neighbors(wr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkloadResourceClient) Hooks() []Hook {
	return c.hooks.WorkloadResource
}

// Interceptors returns the client interceptors.
func (c *WorkloadResourceClient) Interceptors() []Interceptor {
	return c.inters.WorkloadResource
}

func (c *WorkloadResourceClient) mutate(ctx context.Context, m *WorkloadResourceMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkloadResourceCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkloadResourceUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkloadResourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkloadResourceDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkloadResource mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		CustomConfigResource, EndpointResource, HostResource, HostgpuResource,
		HostnicResource, HoststorageResource, HostusbResource, IPAddressResource,
		InstanceResource, LocalAccountResource, NetlinkResource, NetworkSegment,
		OSUpdatePolicy, OSUpdatePolicyResource, OSUpdateRunResource,
		OperatingSystemResource, OuResource, ProviderResource, RegionResource,
		RemoteAccessConfiguration, RepeatedScheduleResource, SingleScheduleResource,
		SiteResource, TelemetryGroupResource, TelemetryProfile, Tenant, WorkloadMember,
		WorkloadResource []ent.Hook
	}
	inters struct {
		CustomConfigResource, EndpointResource, HostResource, HostgpuResource,
		HostnicResource, HoststorageResource, HostusbResource, IPAddressResource,
		InstanceResource, LocalAccountResource, NetlinkResource, NetworkSegment,
		OSUpdatePolicy, OSUpdatePolicyResource, OSUpdateRunResource,
		OperatingSystemResource, OuResource, ProviderResource, RegionResource,
		RemoteAccessConfiguration, RepeatedScheduleResource, SingleScheduleResource,
		SiteResource, TelemetryGroupResource, TelemetryProfile, Tenant, WorkloadMember,
		WorkloadResource []ent.Interceptor
	}
)

// ExecContext allows calling the underlying ExecContext method of the driver if it is supported by it.
// See, database/sql#DB.ExecContext for more information.
func (c *config) ExecContext(ctx context.Context, query string, args ...any) (stdsql.Result, error) {
	ex, ok := c.driver.(interface {
		ExecContext(context.Context, string, ...any) (stdsql.Result, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.ExecContext is not supported")
	}
	return ex.ExecContext(ctx, query, args...)
}

// QueryContext allows calling the underlying QueryContext method of the driver if it is supported by it.
// See, database/sql#DB.QueryContext for more information.
func (c *config) QueryContext(ctx context.Context, query string, args ...any) (*stdsql.Rows, error) {
	q, ok := c.driver.(interface {
		QueryContext(context.Context, string, ...any) (*stdsql.Rows, error)
	})
	if !ok {
		return nil, fmt.Errorf("Driver.QueryContext is not supported")
	}
	return q.QueryContext(ctx, query, args...)
}
