// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
)

// InstanceResourceCreate is the builder for creating a InstanceResource entity.
type InstanceResourceCreate struct {
	config
	mutation *InstanceResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (_c *InstanceResourceCreate) SetResourceID(v string) *InstanceResourceCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetKind sets the "kind" field.
func (_c *InstanceResourceCreate) SetKind(v instanceresource.Kind) *InstanceResourceCreate {
	_c.mutation.SetKind(v)
	return _c
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableKind(v *instanceresource.Kind) *InstanceResourceCreate {
	if v != nil {
		_c.SetKind(*v)
	}
	return _c
}

// SetName sets the "name" field.
func (_c *InstanceResourceCreate) SetName(v string) *InstanceResourceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableName(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDesiredState sets the "desired_state" field.
func (_c *InstanceResourceCreate) SetDesiredState(v instanceresource.DesiredState) *InstanceResourceCreate {
	_c.mutation.SetDesiredState(v)
	return _c
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableDesiredState(v *instanceresource.DesiredState) *InstanceResourceCreate {
	if v != nil {
		_c.SetDesiredState(*v)
	}
	return _c
}

// SetCurrentState sets the "current_state" field.
func (_c *InstanceResourceCreate) SetCurrentState(v instanceresource.CurrentState) *InstanceResourceCreate {
	_c.mutation.SetCurrentState(v)
	return _c
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableCurrentState(v *instanceresource.CurrentState) *InstanceResourceCreate {
	if v != nil {
		_c.SetCurrentState(*v)
	}
	return _c
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (_c *InstanceResourceCreate) SetVMMemoryBytes(v uint64) *InstanceResourceCreate {
	_c.mutation.SetVMMemoryBytes(v)
	return _c
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableVMMemoryBytes(v *uint64) *InstanceResourceCreate {
	if v != nil {
		_c.SetVMMemoryBytes(*v)
	}
	return _c
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (_c *InstanceResourceCreate) SetVMCPUCores(v uint32) *InstanceResourceCreate {
	_c.mutation.SetVMCPUCores(v)
	return _c
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableVMCPUCores(v *uint32) *InstanceResourceCreate {
	if v != nil {
		_c.SetVMCPUCores(*v)
	}
	return _c
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (_c *InstanceResourceCreate) SetVMStorageBytes(v uint64) *InstanceResourceCreate {
	_c.mutation.SetVMStorageBytes(v)
	return _c
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableVMStorageBytes(v *uint64) *InstanceResourceCreate {
	if v != nil {
		_c.SetVMStorageBytes(*v)
	}
	return _c
}

// SetSecurityFeature sets the "security_feature" field.
func (_c *InstanceResourceCreate) SetSecurityFeature(v instanceresource.SecurityFeature) *InstanceResourceCreate {
	_c.mutation.SetSecurityFeature(v)
	return _c
}

// SetNillableSecurityFeature sets the "security_feature" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableSecurityFeature(v *instanceresource.SecurityFeature) *InstanceResourceCreate {
	if v != nil {
		_c.SetSecurityFeature(*v)
	}
	return _c
}

// SetInstanceStatus sets the "instance_status" field.
func (_c *InstanceResourceCreate) SetInstanceStatus(v string) *InstanceResourceCreate {
	_c.mutation.SetInstanceStatus(v)
	return _c
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableInstanceStatus(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetInstanceStatus(*v)
	}
	return _c
}

// SetInstanceStatusIndicator sets the "instance_status_indicator" field.
func (_c *InstanceResourceCreate) SetInstanceStatusIndicator(v instanceresource.InstanceStatusIndicator) *InstanceResourceCreate {
	_c.mutation.SetInstanceStatusIndicator(v)
	return _c
}

// SetNillableInstanceStatusIndicator sets the "instance_status_indicator" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableInstanceStatusIndicator(v *instanceresource.InstanceStatusIndicator) *InstanceResourceCreate {
	if v != nil {
		_c.SetInstanceStatusIndicator(*v)
	}
	return _c
}

// SetInstanceStatusTimestamp sets the "instance_status_timestamp" field.
func (_c *InstanceResourceCreate) SetInstanceStatusTimestamp(v uint64) *InstanceResourceCreate {
	_c.mutation.SetInstanceStatusTimestamp(v)
	return _c
}

// SetNillableInstanceStatusTimestamp sets the "instance_status_timestamp" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableInstanceStatusTimestamp(v *uint64) *InstanceResourceCreate {
	if v != nil {
		_c.SetInstanceStatusTimestamp(*v)
	}
	return _c
}

// SetProvisioningStatus sets the "provisioning_status" field.
func (_c *InstanceResourceCreate) SetProvisioningStatus(v string) *InstanceResourceCreate {
	_c.mutation.SetProvisioningStatus(v)
	return _c
}

// SetNillableProvisioningStatus sets the "provisioning_status" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableProvisioningStatus(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetProvisioningStatus(*v)
	}
	return _c
}

// SetProvisioningStatusIndicator sets the "provisioning_status_indicator" field.
func (_c *InstanceResourceCreate) SetProvisioningStatusIndicator(v instanceresource.ProvisioningStatusIndicator) *InstanceResourceCreate {
	_c.mutation.SetProvisioningStatusIndicator(v)
	return _c
}

// SetNillableProvisioningStatusIndicator sets the "provisioning_status_indicator" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableProvisioningStatusIndicator(v *instanceresource.ProvisioningStatusIndicator) *InstanceResourceCreate {
	if v != nil {
		_c.SetProvisioningStatusIndicator(*v)
	}
	return _c
}

// SetProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field.
func (_c *InstanceResourceCreate) SetProvisioningStatusTimestamp(v uint64) *InstanceResourceCreate {
	_c.mutation.SetProvisioningStatusTimestamp(v)
	return _c
}

// SetNillableProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableProvisioningStatusTimestamp(v *uint64) *InstanceResourceCreate {
	if v != nil {
		_c.SetProvisioningStatusTimestamp(*v)
	}
	return _c
}

// SetUpdateStatus sets the "update_status" field.
func (_c *InstanceResourceCreate) SetUpdateStatus(v string) *InstanceResourceCreate {
	_c.mutation.SetUpdateStatus(v)
	return _c
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableUpdateStatus(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetUpdateStatus(*v)
	}
	return _c
}

// SetUpdateStatusIndicator sets the "update_status_indicator" field.
func (_c *InstanceResourceCreate) SetUpdateStatusIndicator(v instanceresource.UpdateStatusIndicator) *InstanceResourceCreate {
	_c.mutation.SetUpdateStatusIndicator(v)
	return _c
}

// SetNillableUpdateStatusIndicator sets the "update_status_indicator" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableUpdateStatusIndicator(v *instanceresource.UpdateStatusIndicator) *InstanceResourceCreate {
	if v != nil {
		_c.SetUpdateStatusIndicator(*v)
	}
	return _c
}

// SetUpdateStatusTimestamp sets the "update_status_timestamp" field.
func (_c *InstanceResourceCreate) SetUpdateStatusTimestamp(v uint64) *InstanceResourceCreate {
	_c.mutation.SetUpdateStatusTimestamp(v)
	return _c
}

// SetNillableUpdateStatusTimestamp sets the "update_status_timestamp" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableUpdateStatusTimestamp(v *uint64) *InstanceResourceCreate {
	if v != nil {
		_c.SetUpdateStatusTimestamp(*v)
	}
	return _c
}

// SetUpdateStatusDetail sets the "update_status_detail" field.
func (_c *InstanceResourceCreate) SetUpdateStatusDetail(v string) *InstanceResourceCreate {
	_c.mutation.SetUpdateStatusDetail(v)
	return _c
}

// SetNillableUpdateStatusDetail sets the "update_status_detail" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableUpdateStatusDetail(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetUpdateStatusDetail(*v)
	}
	return _c
}

// SetTrustedAttestationStatus sets the "trusted_attestation_status" field.
func (_c *InstanceResourceCreate) SetTrustedAttestationStatus(v string) *InstanceResourceCreate {
	_c.mutation.SetTrustedAttestationStatus(v)
	return _c
}

// SetNillableTrustedAttestationStatus sets the "trusted_attestation_status" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableTrustedAttestationStatus(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetTrustedAttestationStatus(*v)
	}
	return _c
}

// SetTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field.
func (_c *InstanceResourceCreate) SetTrustedAttestationStatusIndicator(v instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceCreate {
	_c.mutation.SetTrustedAttestationStatusIndicator(v)
	return _c
}

// SetNillableTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableTrustedAttestationStatusIndicator(v *instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceCreate {
	if v != nil {
		_c.SetTrustedAttestationStatusIndicator(*v)
	}
	return _c
}

// SetTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field.
func (_c *InstanceResourceCreate) SetTrustedAttestationStatusTimestamp(v uint64) *InstanceResourceCreate {
	_c.mutation.SetTrustedAttestationStatusTimestamp(v)
	return _c
}

// SetNillableTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableTrustedAttestationStatusTimestamp(v *uint64) *InstanceResourceCreate {
	if v != nil {
		_c.SetTrustedAttestationStatusTimestamp(*v)
	}
	return _c
}

// SetExistingCves sets the "existing_cves" field.
func (_c *InstanceResourceCreate) SetExistingCves(v string) *InstanceResourceCreate {
	_c.mutation.SetExistingCves(v)
	return _c
}

// SetNillableExistingCves sets the "existing_cves" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableExistingCves(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetExistingCves(*v)
	}
	return _c
}

// SetRuntimePackages sets the "runtime_packages" field.
func (_c *InstanceResourceCreate) SetRuntimePackages(v string) *InstanceResourceCreate {
	_c.mutation.SetRuntimePackages(v)
	return _c
}

// SetNillableRuntimePackages sets the "runtime_packages" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableRuntimePackages(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetRuntimePackages(*v)
	}
	return _c
}

// SetOsUpdateAvailable sets the "os_update_available" field.
func (_c *InstanceResourceCreate) SetOsUpdateAvailable(v string) *InstanceResourceCreate {
	_c.mutation.SetOsUpdateAvailable(v)
	return _c
}

// SetNillableOsUpdateAvailable sets the "os_update_available" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableOsUpdateAvailable(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetOsUpdateAvailable(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *InstanceResourceCreate) SetTenantID(v string) *InstanceResourceCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetInstanceStatusDetail sets the "instance_status_detail" field.
func (_c *InstanceResourceCreate) SetInstanceStatusDetail(v string) *InstanceResourceCreate {
	_c.mutation.SetInstanceStatusDetail(v)
	return _c
}

// SetNillableInstanceStatusDetail sets the "instance_status_detail" field if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableInstanceStatusDetail(v *string) *InstanceResourceCreate {
	if v != nil {
		_c.SetInstanceStatusDetail(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *InstanceResourceCreate) SetCreatedAt(v string) *InstanceResourceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *InstanceResourceCreate) SetUpdatedAt(v string) *InstanceResourceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_c *InstanceResourceCreate) SetHostID(id int) *InstanceResourceCreate {
	_c.mutation.SetHostID(id)
	return _c
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableHostID(id *int) *InstanceResourceCreate {
	if id != nil {
		_c = _c.SetHostID(*id)
	}
	return _c
}

// SetHost sets the "host" edge to the HostResource entity.
func (_c *InstanceResourceCreate) SetHost(v *HostResource) *InstanceResourceCreate {
	return _c.SetHostID(v.ID)
}

// SetDesiredOsID sets the "desired_os" edge to the OperatingSystemResource entity by ID.
func (_c *InstanceResourceCreate) SetDesiredOsID(id int) *InstanceResourceCreate {
	_c.mutation.SetDesiredOsID(id)
	return _c
}

// SetDesiredOs sets the "desired_os" edge to the OperatingSystemResource entity.
func (_c *InstanceResourceCreate) SetDesiredOs(v *OperatingSystemResource) *InstanceResourceCreate {
	return _c.SetDesiredOsID(v.ID)
}

// SetCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID.
func (_c *InstanceResourceCreate) SetCurrentOsID(id int) *InstanceResourceCreate {
	_c.mutation.SetCurrentOsID(id)
	return _c
}

// SetNillableCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableCurrentOsID(id *int) *InstanceResourceCreate {
	if id != nil {
		_c = _c.SetCurrentOsID(*id)
	}
	return _c
}

// SetCurrentOs sets the "current_os" edge to the OperatingSystemResource entity.
func (_c *InstanceResourceCreate) SetCurrentOs(v *OperatingSystemResource) *InstanceResourceCreate {
	return _c.SetCurrentOsID(v.ID)
}

// SetOsID sets the "os" edge to the OperatingSystemResource entity by ID.
func (_c *InstanceResourceCreate) SetOsID(id int) *InstanceResourceCreate {
	_c.mutation.SetOsID(id)
	return _c
}

// SetNillableOsID sets the "os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableOsID(id *int) *InstanceResourceCreate {
	if id != nil {
		_c = _c.SetOsID(*id)
	}
	return _c
}

// SetOs sets the "os" edge to the OperatingSystemResource entity.
func (_c *InstanceResourceCreate) SetOs(v *OperatingSystemResource) *InstanceResourceCreate {
	return _c.SetOsID(v.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (_c *InstanceResourceCreate) AddWorkloadMemberIDs(ids ...int) *InstanceResourceCreate {
	_c.mutation.AddWorkloadMemberIDs(ids...)
	return _c
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (_c *InstanceResourceCreate) AddWorkloadMembers(v ...*WorkloadMember) *InstanceResourceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_c *InstanceResourceCreate) SetProviderID(id int) *InstanceResourceCreate {
	_c.mutation.SetProviderID(id)
	return _c
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableProviderID(id *int) *InstanceResourceCreate {
	if id != nil {
		_c = _c.SetProviderID(*id)
	}
	return _c
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_c *InstanceResourceCreate) SetProvider(v *ProviderResource) *InstanceResourceCreate {
	return _c.SetProviderID(v.ID)
}

// SetLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID.
func (_c *InstanceResourceCreate) SetLocalaccountID(id int) *InstanceResourceCreate {
	_c.mutation.SetLocalaccountID(id)
	return _c
}

// SetNillableLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableLocalaccountID(id *int) *InstanceResourceCreate {
	if id != nil {
		_c = _c.SetLocalaccountID(*id)
	}
	return _c
}

// SetLocalaccount sets the "localaccount" edge to the LocalAccountResource entity.
func (_c *InstanceResourceCreate) SetLocalaccount(v *LocalAccountResource) *InstanceResourceCreate {
	return _c.SetLocalaccountID(v.ID)
}

// SetOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID.
func (_c *InstanceResourceCreate) SetOsUpdatePolicyID(id int) *InstanceResourceCreate {
	_c.mutation.SetOsUpdatePolicyID(id)
	return _c
}

// SetNillableOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID if the given value is not nil.
func (_c *InstanceResourceCreate) SetNillableOsUpdatePolicyID(id *int) *InstanceResourceCreate {
	if id != nil {
		_c = _c.SetOsUpdatePolicyID(*id)
	}
	return _c
}

// SetOsUpdatePolicy sets the "os_update_policy" edge to the OSUpdatePolicyResource entity.
func (_c *InstanceResourceCreate) SetOsUpdatePolicy(v *OSUpdatePolicyResource) *InstanceResourceCreate {
	return _c.SetOsUpdatePolicyID(v.ID)
}

// AddCustomConfigIDs adds the "custom_config" edge to the CustomConfigResource entity by IDs.
func (_c *InstanceResourceCreate) AddCustomConfigIDs(ids ...int) *InstanceResourceCreate {
	_c.mutation.AddCustomConfigIDs(ids...)
	return _c
}

// AddCustomConfig adds the "custom_config" edges to the CustomConfigResource entity.
func (_c *InstanceResourceCreate) AddCustomConfig(v ...*CustomConfigResource) *InstanceResourceCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCustomConfigIDs(ids...)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (_c *InstanceResourceCreate) Mutation() *InstanceResourceMutation {
	return _c.mutation
}

// Save creates the InstanceResource in the database.
func (_c *InstanceResourceCreate) Save(ctx context.Context) (*InstanceResource, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *InstanceResourceCreate) SaveX(ctx context.Context) *InstanceResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InstanceResourceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InstanceResourceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *InstanceResourceCreate) check() error {
	if _, ok := _c.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "InstanceResource.resource_id"`)}
	}
	if v, ok := _c.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := _c.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _c.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := _c.mutation.SecurityFeature(); ok {
		if err := instanceresource.SecurityFeatureValidator(v); err != nil {
			return &ValidationError{Name: "security_feature", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.security_feature": %w`, err)}
		}
	}
	if v, ok := _c.mutation.InstanceStatusIndicator(); ok {
		if err := instanceresource.InstanceStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "instance_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.instance_status_indicator": %w`, err)}
		}
	}
	if v, ok := _c.mutation.ProvisioningStatusIndicator(); ok {
		if err := instanceresource.ProvisioningStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "provisioning_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.provisioning_status_indicator": %w`, err)}
		}
	}
	if v, ok := _c.mutation.UpdateStatusIndicator(); ok {
		if err := instanceresource.UpdateStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "update_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.update_status_indicator": %w`, err)}
		}
	}
	if v, ok := _c.mutation.TrustedAttestationStatusIndicator(); ok {
		if err := instanceresource.TrustedAttestationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "trusted_attestation_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.trusted_attestation_status_indicator": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "InstanceResource.tenant_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InstanceResource.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InstanceResource.updated_at"`)}
	}
	if len(_c.mutation.DesiredOsIDs()) == 0 {
		return &ValidationError{Name: "desired_os", err: errors.New(`ent: missing required edge "InstanceResource.desired_os"`)}
	}
	return nil
}

func (_c *InstanceResourceCreate) sqlSave(ctx context.Context) (*InstanceResource, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *InstanceResourceCreate) createSpec() (*InstanceResource, *sqlgraph.CreateSpec) {
	var (
		_node = &InstanceResource{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(instanceresource.Table, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := _c.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := _c.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
		_node.VMMemoryBytes = value
	}
	if value, ok := _c.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
		_node.VMCPUCores = value
	}
	if value, ok := _c.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
		_node.VMStorageBytes = value
	}
	if value, ok := _c.mutation.SecurityFeature(); ok {
		_spec.SetField(instanceresource.FieldSecurityFeature, field.TypeEnum, value)
		_node.SecurityFeature = value
	}
	if value, ok := _c.mutation.InstanceStatus(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatus, field.TypeString, value)
		_node.InstanceStatus = value
	}
	if value, ok := _c.mutation.InstanceStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum, value)
		_node.InstanceStatusIndicator = value
	}
	if value, ok := _c.mutation.InstanceStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
		_node.InstanceStatusTimestamp = value
	}
	if value, ok := _c.mutation.ProvisioningStatus(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatus, field.TypeString, value)
		_node.ProvisioningStatus = value
	}
	if value, ok := _c.mutation.ProvisioningStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum, value)
		_node.ProvisioningStatusIndicator = value
	}
	if value, ok := _c.mutation.ProvisioningStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
		_node.ProvisioningStatusTimestamp = value
	}
	if value, ok := _c.mutation.UpdateStatus(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatus, field.TypeString, value)
		_node.UpdateStatus = value
	}
	if value, ok := _c.mutation.UpdateStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum, value)
		_node.UpdateStatusIndicator = value
	}
	if value, ok := _c.mutation.UpdateStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
		_node.UpdateStatusTimestamp = value
	}
	if value, ok := _c.mutation.UpdateStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusDetail, field.TypeString, value)
		_node.UpdateStatusDetail = value
	}
	if value, ok := _c.mutation.TrustedAttestationStatus(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatus, field.TypeString, value)
		_node.TrustedAttestationStatus = value
	}
	if value, ok := _c.mutation.TrustedAttestationStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum, value)
		_node.TrustedAttestationStatusIndicator = value
	}
	if value, ok := _c.mutation.TrustedAttestationStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
		_node.TrustedAttestationStatusTimestamp = value
	}
	if value, ok := _c.mutation.ExistingCves(); ok {
		_spec.SetField(instanceresource.FieldExistingCves, field.TypeString, value)
		_node.ExistingCves = value
	}
	if value, ok := _c.mutation.RuntimePackages(); ok {
		_spec.SetField(instanceresource.FieldRuntimePackages, field.TypeString, value)
		_node.RuntimePackages = value
	}
	if value, ok := _c.mutation.OsUpdateAvailable(); ok {
		_spec.SetField(instanceresource.FieldOsUpdateAvailable, field.TypeString, value)
		_node.OsUpdateAvailable = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(instanceresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.InstanceStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusDetail, field.TypeString, value)
		_node.InstanceStatusDetail = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(instanceresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DesiredOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.DesiredOsTable,
			Columns: []string{instanceresource.DesiredOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_desired_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CurrentOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.CurrentOsTable,
			Columns: []string{instanceresource.CurrentOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_current_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsTable,
			Columns: []string{instanceresource.OsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_provider = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.LocalaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_localaccount = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.OsUpdatePolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsUpdatePolicyTable,
			Columns: []string{instanceresource.OsUpdatePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_os_update_policy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.CustomConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   instanceresource.CustomConfigTable,
			Columns: instanceresource.CustomConfigPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstanceResourceCreateBulk is the builder for creating many InstanceResource entities in bulk.
type InstanceResourceCreateBulk struct {
	config
	err      error
	builders []*InstanceResourceCreate
}

// Save creates the InstanceResource entities in the database.
func (_c *InstanceResourceCreateBulk) Save(ctx context.Context) ([]*InstanceResource, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*InstanceResource, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstanceResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *InstanceResourceCreateBulk) SaveX(ctx context.Context) []*InstanceResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *InstanceResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *InstanceResourceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
