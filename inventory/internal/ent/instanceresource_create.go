// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
)

// InstanceResourceCreate is the builder for creating a InstanceResource entity.
type InstanceResourceCreate struct {
	config
	mutation *InstanceResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (irc *InstanceResourceCreate) SetResourceID(s string) *InstanceResourceCreate {
	irc.mutation.SetResourceID(s)
	return irc
}

// SetKind sets the "kind" field.
func (irc *InstanceResourceCreate) SetKind(i instanceresource.Kind) *InstanceResourceCreate {
	irc.mutation.SetKind(i)
	return irc
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableKind(i *instanceresource.Kind) *InstanceResourceCreate {
	if i != nil {
		irc.SetKind(*i)
	}
	return irc
}

// SetName sets the "name" field.
func (irc *InstanceResourceCreate) SetName(s string) *InstanceResourceCreate {
	irc.mutation.SetName(s)
	return irc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableName(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetName(*s)
	}
	return irc
}

// SetDesiredState sets the "desired_state" field.
func (irc *InstanceResourceCreate) SetDesiredState(is instanceresource.DesiredState) *InstanceResourceCreate {
	irc.mutation.SetDesiredState(is)
	return irc
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableDesiredState(is *instanceresource.DesiredState) *InstanceResourceCreate {
	if is != nil {
		irc.SetDesiredState(*is)
	}
	return irc
}

// SetCurrentState sets the "current_state" field.
func (irc *InstanceResourceCreate) SetCurrentState(is instanceresource.CurrentState) *InstanceResourceCreate {
	irc.mutation.SetCurrentState(is)
	return irc
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableCurrentState(is *instanceresource.CurrentState) *InstanceResourceCreate {
	if is != nil {
		irc.SetCurrentState(*is)
	}
	return irc
}

// SetVMMemoryBytes sets the "vm_memory_bytes" field.
func (irc *InstanceResourceCreate) SetVMMemoryBytes(u uint64) *InstanceResourceCreate {
	irc.mutation.SetVMMemoryBytes(u)
	return irc
}

// SetNillableVMMemoryBytes sets the "vm_memory_bytes" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableVMMemoryBytes(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetVMMemoryBytes(*u)
	}
	return irc
}

// SetVMCPUCores sets the "vm_cpu_cores" field.
func (irc *InstanceResourceCreate) SetVMCPUCores(u uint32) *InstanceResourceCreate {
	irc.mutation.SetVMCPUCores(u)
	return irc
}

// SetNillableVMCPUCores sets the "vm_cpu_cores" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableVMCPUCores(u *uint32) *InstanceResourceCreate {
	if u != nil {
		irc.SetVMCPUCores(*u)
	}
	return irc
}

// SetVMStorageBytes sets the "vm_storage_bytes" field.
func (irc *InstanceResourceCreate) SetVMStorageBytes(u uint64) *InstanceResourceCreate {
	irc.mutation.SetVMStorageBytes(u)
	return irc
}

// SetNillableVMStorageBytes sets the "vm_storage_bytes" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableVMStorageBytes(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetVMStorageBytes(*u)
	}
	return irc
}

// SetSecurityFeature sets the "security_feature" field.
func (irc *InstanceResourceCreate) SetSecurityFeature(_if instanceresource.SecurityFeature) *InstanceResourceCreate {
	irc.mutation.SetSecurityFeature(_if)
	return irc
}

// SetNillableSecurityFeature sets the "security_feature" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableSecurityFeature(_if *instanceresource.SecurityFeature) *InstanceResourceCreate {
	if _if != nil {
		irc.SetSecurityFeature(*_if)
	}
	return irc
}

// SetInstanceStatus sets the "instance_status" field.
func (irc *InstanceResourceCreate) SetInstanceStatus(s string) *InstanceResourceCreate {
	irc.mutation.SetInstanceStatus(s)
	return irc
}

// SetNillableInstanceStatus sets the "instance_status" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableInstanceStatus(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetInstanceStatus(*s)
	}
	return irc
}

// SetInstanceStatusIndicator sets the "instance_status_indicator" field.
func (irc *InstanceResourceCreate) SetInstanceStatusIndicator(isi instanceresource.InstanceStatusIndicator) *InstanceResourceCreate {
	irc.mutation.SetInstanceStatusIndicator(isi)
	return irc
}

// SetNillableInstanceStatusIndicator sets the "instance_status_indicator" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableInstanceStatusIndicator(isi *instanceresource.InstanceStatusIndicator) *InstanceResourceCreate {
	if isi != nil {
		irc.SetInstanceStatusIndicator(*isi)
	}
	return irc
}

// SetInstanceStatusTimestamp sets the "instance_status_timestamp" field.
func (irc *InstanceResourceCreate) SetInstanceStatusTimestamp(u uint64) *InstanceResourceCreate {
	irc.mutation.SetInstanceStatusTimestamp(u)
	return irc
}

// SetNillableInstanceStatusTimestamp sets the "instance_status_timestamp" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableInstanceStatusTimestamp(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetInstanceStatusTimestamp(*u)
	}
	return irc
}

// SetProvisioningStatus sets the "provisioning_status" field.
func (irc *InstanceResourceCreate) SetProvisioningStatus(s string) *InstanceResourceCreate {
	irc.mutation.SetProvisioningStatus(s)
	return irc
}

// SetNillableProvisioningStatus sets the "provisioning_status" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableProvisioningStatus(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetProvisioningStatus(*s)
	}
	return irc
}

// SetProvisioningStatusIndicator sets the "provisioning_status_indicator" field.
func (irc *InstanceResourceCreate) SetProvisioningStatusIndicator(isi instanceresource.ProvisioningStatusIndicator) *InstanceResourceCreate {
	irc.mutation.SetProvisioningStatusIndicator(isi)
	return irc
}

// SetNillableProvisioningStatusIndicator sets the "provisioning_status_indicator" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableProvisioningStatusIndicator(isi *instanceresource.ProvisioningStatusIndicator) *InstanceResourceCreate {
	if isi != nil {
		irc.SetProvisioningStatusIndicator(*isi)
	}
	return irc
}

// SetProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field.
func (irc *InstanceResourceCreate) SetProvisioningStatusTimestamp(u uint64) *InstanceResourceCreate {
	irc.mutation.SetProvisioningStatusTimestamp(u)
	return irc
}

// SetNillableProvisioningStatusTimestamp sets the "provisioning_status_timestamp" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableProvisioningStatusTimestamp(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetProvisioningStatusTimestamp(*u)
	}
	return irc
}

// SetUpdateStatus sets the "update_status" field.
func (irc *InstanceResourceCreate) SetUpdateStatus(s string) *InstanceResourceCreate {
	irc.mutation.SetUpdateStatus(s)
	return irc
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableUpdateStatus(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetUpdateStatus(*s)
	}
	return irc
}

// SetUpdateStatusIndicator sets the "update_status_indicator" field.
func (irc *InstanceResourceCreate) SetUpdateStatusIndicator(isi instanceresource.UpdateStatusIndicator) *InstanceResourceCreate {
	irc.mutation.SetUpdateStatusIndicator(isi)
	return irc
}

// SetNillableUpdateStatusIndicator sets the "update_status_indicator" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableUpdateStatusIndicator(isi *instanceresource.UpdateStatusIndicator) *InstanceResourceCreate {
	if isi != nil {
		irc.SetUpdateStatusIndicator(*isi)
	}
	return irc
}

// SetUpdateStatusTimestamp sets the "update_status_timestamp" field.
func (irc *InstanceResourceCreate) SetUpdateStatusTimestamp(u uint64) *InstanceResourceCreate {
	irc.mutation.SetUpdateStatusTimestamp(u)
	return irc
}

// SetNillableUpdateStatusTimestamp sets the "update_status_timestamp" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableUpdateStatusTimestamp(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetUpdateStatusTimestamp(*u)
	}
	return irc
}

// SetUpdateStatusDetail sets the "update_status_detail" field.
func (irc *InstanceResourceCreate) SetUpdateStatusDetail(s string) *InstanceResourceCreate {
	irc.mutation.SetUpdateStatusDetail(s)
	return irc
}

// SetNillableUpdateStatusDetail sets the "update_status_detail" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableUpdateStatusDetail(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetUpdateStatusDetail(*s)
	}
	return irc
}

// SetTrustedAttestationStatus sets the "trusted_attestation_status" field.
func (irc *InstanceResourceCreate) SetTrustedAttestationStatus(s string) *InstanceResourceCreate {
	irc.mutation.SetTrustedAttestationStatus(s)
	return irc
}

// SetNillableTrustedAttestationStatus sets the "trusted_attestation_status" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableTrustedAttestationStatus(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetTrustedAttestationStatus(*s)
	}
	return irc
}

// SetTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field.
func (irc *InstanceResourceCreate) SetTrustedAttestationStatusIndicator(iasi instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceCreate {
	irc.mutation.SetTrustedAttestationStatusIndicator(iasi)
	return irc
}

// SetNillableTrustedAttestationStatusIndicator sets the "trusted_attestation_status_indicator" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableTrustedAttestationStatusIndicator(iasi *instanceresource.TrustedAttestationStatusIndicator) *InstanceResourceCreate {
	if iasi != nil {
		irc.SetTrustedAttestationStatusIndicator(*iasi)
	}
	return irc
}

// SetTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field.
func (irc *InstanceResourceCreate) SetTrustedAttestationStatusTimestamp(u uint64) *InstanceResourceCreate {
	irc.mutation.SetTrustedAttestationStatusTimestamp(u)
	return irc
}

// SetNillableTrustedAttestationStatusTimestamp sets the "trusted_attestation_status_timestamp" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableTrustedAttestationStatusTimestamp(u *uint64) *InstanceResourceCreate {
	if u != nil {
		irc.SetTrustedAttestationStatusTimestamp(*u)
	}
	return irc
}

// SetTenantID sets the "tenant_id" field.
func (irc *InstanceResourceCreate) SetTenantID(s string) *InstanceResourceCreate {
	irc.mutation.SetTenantID(s)
	return irc
}

// SetInstanceStatusDetail sets the "instance_status_detail" field.
func (irc *InstanceResourceCreate) SetInstanceStatusDetail(s string) *InstanceResourceCreate {
	irc.mutation.SetInstanceStatusDetail(s)
	return irc
}

// SetNillableInstanceStatusDetail sets the "instance_status_detail" field if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableInstanceStatusDetail(s *string) *InstanceResourceCreate {
	if s != nil {
		irc.SetInstanceStatusDetail(*s)
	}
	return irc
}

// SetCreatedAt sets the "created_at" field.
func (irc *InstanceResourceCreate) SetCreatedAt(s string) *InstanceResourceCreate {
	irc.mutation.SetCreatedAt(s)
	return irc
}

// SetUpdatedAt sets the "updated_at" field.
func (irc *InstanceResourceCreate) SetUpdatedAt(s string) *InstanceResourceCreate {
	irc.mutation.SetUpdatedAt(s)
	return irc
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (irc *InstanceResourceCreate) SetHostID(id int) *InstanceResourceCreate {
	irc.mutation.SetHostID(id)
	return irc
}

// SetNillableHostID sets the "host" edge to the HostResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableHostID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetHostID(*id)
	}
	return irc
}

// SetHost sets the "host" edge to the HostResource entity.
func (irc *InstanceResourceCreate) SetHost(h *HostResource) *InstanceResourceCreate {
	return irc.SetHostID(h.ID)
}

// SetDesiredOsID sets the "desired_os" edge to the OperatingSystemResource entity by ID.
func (irc *InstanceResourceCreate) SetDesiredOsID(id int) *InstanceResourceCreate {
	irc.mutation.SetDesiredOsID(id)
	return irc
}

// SetDesiredOs sets the "desired_os" edge to the OperatingSystemResource entity.
func (irc *InstanceResourceCreate) SetDesiredOs(o *OperatingSystemResource) *InstanceResourceCreate {
	return irc.SetDesiredOsID(o.ID)
}

// SetCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID.
func (irc *InstanceResourceCreate) SetCurrentOsID(id int) *InstanceResourceCreate {
	irc.mutation.SetCurrentOsID(id)
	return irc
}

// SetNillableCurrentOsID sets the "current_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableCurrentOsID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetCurrentOsID(*id)
	}
	return irc
}

// SetCurrentOs sets the "current_os" edge to the OperatingSystemResource entity.
func (irc *InstanceResourceCreate) SetCurrentOs(o *OperatingSystemResource) *InstanceResourceCreate {
	return irc.SetCurrentOsID(o.ID)
}

// AddWorkloadMemberIDs adds the "workload_members" edge to the WorkloadMember entity by IDs.
func (irc *InstanceResourceCreate) AddWorkloadMemberIDs(ids ...int) *InstanceResourceCreate {
	irc.mutation.AddWorkloadMemberIDs(ids...)
	return irc
}

// AddWorkloadMembers adds the "workload_members" edges to the WorkloadMember entity.
func (irc *InstanceResourceCreate) AddWorkloadMembers(w ...*WorkloadMember) *InstanceResourceCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return irc.AddWorkloadMemberIDs(ids...)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (irc *InstanceResourceCreate) SetProviderID(id int) *InstanceResourceCreate {
	irc.mutation.SetProviderID(id)
	return irc
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableProviderID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetProviderID(*id)
	}
	return irc
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (irc *InstanceResourceCreate) SetProvider(p *ProviderResource) *InstanceResourceCreate {
	return irc.SetProviderID(p.ID)
}

// SetLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID.
func (irc *InstanceResourceCreate) SetLocalaccountID(id int) *InstanceResourceCreate {
	irc.mutation.SetLocalaccountID(id)
	return irc
}

// SetNillableLocalaccountID sets the "localaccount" edge to the LocalAccountResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableLocalaccountID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetLocalaccountID(*id)
	}
	return irc
}

// SetLocalaccount sets the "localaccount" edge to the LocalAccountResource entity.
func (irc *InstanceResourceCreate) SetLocalaccount(l *LocalAccountResource) *InstanceResourceCreate {
	return irc.SetLocalaccountID(l.ID)
}

// SetOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID.
func (irc *InstanceResourceCreate) SetOsUpdatePolicyID(id int) *InstanceResourceCreate {
	irc.mutation.SetOsUpdatePolicyID(id)
	return irc
}

// SetNillableOsUpdatePolicyID sets the "os_update_policy" edge to the OSUpdatePolicyResource entity by ID if the given value is not nil.
func (irc *InstanceResourceCreate) SetNillableOsUpdatePolicyID(id *int) *InstanceResourceCreate {
	if id != nil {
		irc = irc.SetOsUpdatePolicyID(*id)
	}
	return irc
}

// SetOsUpdatePolicy sets the "os_update_policy" edge to the OSUpdatePolicyResource entity.
func (irc *InstanceResourceCreate) SetOsUpdatePolicy(o *OSUpdatePolicyResource) *InstanceResourceCreate {
	return irc.SetOsUpdatePolicyID(o.ID)
}

// Mutation returns the InstanceResourceMutation object of the builder.
func (irc *InstanceResourceCreate) Mutation() *InstanceResourceMutation {
	return irc.mutation
}

// Save creates the InstanceResource in the database.
func (irc *InstanceResourceCreate) Save(ctx context.Context) (*InstanceResource, error) {
	return withHooks(ctx, irc.sqlSave, irc.mutation, irc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (irc *InstanceResourceCreate) SaveX(ctx context.Context) *InstanceResource {
	v, err := irc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (irc *InstanceResourceCreate) Exec(ctx context.Context) error {
	_, err := irc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (irc *InstanceResourceCreate) ExecX(ctx context.Context) {
	if err := irc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (irc *InstanceResourceCreate) check() error {
	if _, ok := irc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "InstanceResource.resource_id"`)}
	}
	if v, ok := irc.mutation.Kind(); ok {
		if err := instanceresource.KindValidator(v); err != nil {
			return &ValidationError{Name: "kind", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.kind": %w`, err)}
		}
	}
	if v, ok := irc.mutation.DesiredState(); ok {
		if err := instanceresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.desired_state": %w`, err)}
		}
	}
	if v, ok := irc.mutation.CurrentState(); ok {
		if err := instanceresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.current_state": %w`, err)}
		}
	}
	if v, ok := irc.mutation.SecurityFeature(); ok {
		if err := instanceresource.SecurityFeatureValidator(v); err != nil {
			return &ValidationError{Name: "security_feature", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.security_feature": %w`, err)}
		}
	}
	if v, ok := irc.mutation.InstanceStatusIndicator(); ok {
		if err := instanceresource.InstanceStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "instance_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.instance_status_indicator": %w`, err)}
		}
	}
	if v, ok := irc.mutation.ProvisioningStatusIndicator(); ok {
		if err := instanceresource.ProvisioningStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "provisioning_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.provisioning_status_indicator": %w`, err)}
		}
	}
	if v, ok := irc.mutation.UpdateStatusIndicator(); ok {
		if err := instanceresource.UpdateStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "update_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.update_status_indicator": %w`, err)}
		}
	}
	if v, ok := irc.mutation.TrustedAttestationStatusIndicator(); ok {
		if err := instanceresource.TrustedAttestationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "trusted_attestation_status_indicator", err: fmt.Errorf(`ent: validator failed for field "InstanceResource.trusted_attestation_status_indicator": %w`, err)}
		}
	}
	if _, ok := irc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "InstanceResource.tenant_id"`)}
	}
	if _, ok := irc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InstanceResource.created_at"`)}
	}
	if _, ok := irc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "InstanceResource.updated_at"`)}
	}
	if len(irc.mutation.DesiredOsIDs()) == 0 {
		return &ValidationError{Name: "desired_os", err: errors.New(`ent: missing required edge "InstanceResource.desired_os"`)}
	}
	return nil
}

func (irc *InstanceResourceCreate) sqlSave(ctx context.Context) (*InstanceResource, error) {
	if err := irc.check(); err != nil {
		return nil, err
	}
	_node, _spec := irc.createSpec()
	if err := sqlgraph.CreateNode(ctx, irc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	irc.mutation.id = &_node.ID
	irc.mutation.done = true
	return _node, nil
}

func (irc *InstanceResourceCreate) createSpec() (*InstanceResource, *sqlgraph.CreateSpec) {
	var (
		_node = &InstanceResource{config: irc.config}
		_spec = sqlgraph.NewCreateSpec(instanceresource.Table, sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt))
	)
	if value, ok := irc.mutation.ResourceID(); ok {
		_spec.SetField(instanceresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := irc.mutation.Kind(); ok {
		_spec.SetField(instanceresource.FieldKind, field.TypeEnum, value)
		_node.Kind = value
	}
	if value, ok := irc.mutation.Name(); ok {
		_spec.SetField(instanceresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := irc.mutation.DesiredState(); ok {
		_spec.SetField(instanceresource.FieldDesiredState, field.TypeEnum, value)
		_node.DesiredState = value
	}
	if value, ok := irc.mutation.CurrentState(); ok {
		_spec.SetField(instanceresource.FieldCurrentState, field.TypeEnum, value)
		_node.CurrentState = value
	}
	if value, ok := irc.mutation.VMMemoryBytes(); ok {
		_spec.SetField(instanceresource.FieldVMMemoryBytes, field.TypeUint64, value)
		_node.VMMemoryBytes = value
	}
	if value, ok := irc.mutation.VMCPUCores(); ok {
		_spec.SetField(instanceresource.FieldVMCPUCores, field.TypeUint32, value)
		_node.VMCPUCores = value
	}
	if value, ok := irc.mutation.VMStorageBytes(); ok {
		_spec.SetField(instanceresource.FieldVMStorageBytes, field.TypeUint64, value)
		_node.VMStorageBytes = value
	}
	if value, ok := irc.mutation.SecurityFeature(); ok {
		_spec.SetField(instanceresource.FieldSecurityFeature, field.TypeEnum, value)
		_node.SecurityFeature = value
	}
	if value, ok := irc.mutation.InstanceStatus(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatus, field.TypeString, value)
		_node.InstanceStatus = value
	}
	if value, ok := irc.mutation.InstanceStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusIndicator, field.TypeEnum, value)
		_node.InstanceStatusIndicator = value
	}
	if value, ok := irc.mutation.InstanceStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusTimestamp, field.TypeUint64, value)
		_node.InstanceStatusTimestamp = value
	}
	if value, ok := irc.mutation.ProvisioningStatus(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatus, field.TypeString, value)
		_node.ProvisioningStatus = value
	}
	if value, ok := irc.mutation.ProvisioningStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusIndicator, field.TypeEnum, value)
		_node.ProvisioningStatusIndicator = value
	}
	if value, ok := irc.mutation.ProvisioningStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldProvisioningStatusTimestamp, field.TypeUint64, value)
		_node.ProvisioningStatusTimestamp = value
	}
	if value, ok := irc.mutation.UpdateStatus(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatus, field.TypeString, value)
		_node.UpdateStatus = value
	}
	if value, ok := irc.mutation.UpdateStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusIndicator, field.TypeEnum, value)
		_node.UpdateStatusIndicator = value
	}
	if value, ok := irc.mutation.UpdateStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusTimestamp, field.TypeUint64, value)
		_node.UpdateStatusTimestamp = value
	}
	if value, ok := irc.mutation.UpdateStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldUpdateStatusDetail, field.TypeString, value)
		_node.UpdateStatusDetail = value
	}
	if value, ok := irc.mutation.TrustedAttestationStatus(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatus, field.TypeString, value)
		_node.TrustedAttestationStatus = value
	}
	if value, ok := irc.mutation.TrustedAttestationStatusIndicator(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusIndicator, field.TypeEnum, value)
		_node.TrustedAttestationStatusIndicator = value
	}
	if value, ok := irc.mutation.TrustedAttestationStatusTimestamp(); ok {
		_spec.SetField(instanceresource.FieldTrustedAttestationStatusTimestamp, field.TypeUint64, value)
		_node.TrustedAttestationStatusTimestamp = value
	}
	if value, ok := irc.mutation.TenantID(); ok {
		_spec.SetField(instanceresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := irc.mutation.InstanceStatusDetail(); ok {
		_spec.SetField(instanceresource.FieldInstanceStatusDetail, field.TypeString, value)
		_node.InstanceStatusDetail = value
	}
	if value, ok := irc.mutation.CreatedAt(); ok {
		_spec.SetField(instanceresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := irc.mutation.UpdatedAt(); ok {
		_spec.SetField(instanceresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := irc.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   instanceresource.HostTable,
			Columns: []string{instanceresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.DesiredOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.DesiredOsTable,
			Columns: []string{instanceresource.DesiredOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_desired_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.CurrentOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.CurrentOsTable,
			Columns: []string{instanceresource.CurrentOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_current_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.WorkloadMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   instanceresource.WorkloadMembersTable,
			Columns: []string{instanceresource.WorkloadMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workloadmember.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.ProviderTable,
			Columns: []string{instanceresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_provider = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.LocalaccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.LocalaccountTable,
			Columns: []string{instanceresource.LocalaccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(localaccountresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_localaccount = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := irc.mutation.OsUpdatePolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   instanceresource.OsUpdatePolicyTable,
			Columns: []string{instanceresource.OsUpdatePolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.instance_resource_os_update_policy = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InstanceResourceCreateBulk is the builder for creating many InstanceResource entities in bulk.
type InstanceResourceCreateBulk struct {
	config
	err      error
	builders []*InstanceResourceCreate
}

// Save creates the InstanceResource entities in the database.
func (ircb *InstanceResourceCreateBulk) Save(ctx context.Context) ([]*InstanceResource, error) {
	if ircb.err != nil {
		return nil, ircb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ircb.builders))
	nodes := make([]*InstanceResource, len(ircb.builders))
	mutators := make([]Mutator, len(ircb.builders))
	for i := range ircb.builders {
		func(i int, root context.Context) {
			builder := ircb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InstanceResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ircb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ircb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ircb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ircb *InstanceResourceCreateBulk) SaveX(ctx context.Context) []*InstanceResource {
	v, err := ircb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ircb *InstanceResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := ircb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ircb *InstanceResourceCreateBulk) ExecX(ctx context.Context) {
	if err := ircb.Exec(ctx); err != nil {
		panic(err)
	}
}
