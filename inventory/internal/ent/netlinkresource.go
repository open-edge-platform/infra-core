// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/endpointresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/netlinkresource"
)

// NetlinkResource is the model entity for the NetlinkResource schema.
type NetlinkResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState netlinkresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState netlinkresource.CurrentState `json:"current_state,omitempty"`
	// ProviderStatus holds the value of the "provider_status" field.
	ProviderStatus string `json:"provider_status,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NetlinkResourceQuery when eager-loading is set.
	Edges                NetlinkResourceEdges `json:"edges"`
	netlink_resource_src *int
	netlink_resource_dst *int
	selectValues         sql.SelectValues
}

// NetlinkResourceEdges holds the relations/edges for other nodes in the graph.
type NetlinkResourceEdges struct {
	// Src holds the value of the src edge.
	Src *EndpointResource `json:"src,omitempty"`
	// Dst holds the value of the dst edge.
	Dst *EndpointResource `json:"dst,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// SrcOrErr returns the Src value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetlinkResourceEdges) SrcOrErr() (*EndpointResource, error) {
	if e.Src != nil {
		return e.Src, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: endpointresource.Label}
	}
	return nil, &NotLoadedError{edge: "src"}
}

// DstOrErr returns the Dst value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NetlinkResourceEdges) DstOrErr() (*EndpointResource, error) {
	if e.Dst != nil {
		return e.Dst, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: endpointresource.Label}
	}
	return nil, &NotLoadedError{edge: "dst"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NetlinkResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case netlinkresource.FieldID:
			values[i] = new(sql.NullInt64)
		case netlinkresource.FieldResourceID, netlinkresource.FieldKind, netlinkresource.FieldName, netlinkresource.FieldDesiredState, netlinkresource.FieldCurrentState, netlinkresource.FieldProviderStatus, netlinkresource.FieldTenantID, netlinkresource.FieldCreatedAt, netlinkresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case netlinkresource.ForeignKeys[0]: // netlink_resource_src
			values[i] = new(sql.NullInt64)
		case netlinkresource.ForeignKeys[1]: // netlink_resource_dst
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NetlinkResource fields.
func (_m *NetlinkResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case netlinkresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case netlinkresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case netlinkresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				_m.Kind = value.String
			}
		case netlinkresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case netlinkresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				_m.DesiredState = netlinkresource.DesiredState(value.String)
			}
		case netlinkresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				_m.CurrentState = netlinkresource.CurrentState(value.String)
			}
		case netlinkresource.FieldProviderStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider_status", values[i])
			} else if value.Valid {
				_m.ProviderStatus = value.String
			}
		case netlinkresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case netlinkresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case netlinkresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		case netlinkresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field netlink_resource_src", value)
			} else if value.Valid {
				_m.netlink_resource_src = new(int)
				*_m.netlink_resource_src = int(value.Int64)
			}
		case netlinkresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field netlink_resource_dst", value)
			} else if value.Valid {
				_m.netlink_resource_dst = new(int)
				*_m.netlink_resource_dst = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NetlinkResource.
// This includes values selected through modifiers, order, etc.
func (_m *NetlinkResource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySrc queries the "src" edge of the NetlinkResource entity.
func (_m *NetlinkResource) QuerySrc() *EndpointResourceQuery {
	return NewNetlinkResourceClient(_m.config).QuerySrc(_m)
}

// QueryDst queries the "dst" edge of the NetlinkResource entity.
func (_m *NetlinkResource) QueryDst() *EndpointResourceQuery {
	return NewNetlinkResourceClient(_m.config).QueryDst(_m)
}

// Update returns a builder for updating this NetlinkResource.
// Note that you need to call NetlinkResource.Unwrap() before calling this method if this NetlinkResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *NetlinkResource) Update() *NetlinkResourceUpdateOne {
	return NewNetlinkResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the NetlinkResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *NetlinkResource) Unwrap() *NetlinkResource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: NetlinkResource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *NetlinkResource) String() string {
	var builder strings.Builder
	builder.WriteString("NetlinkResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(_m.Kind)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("provider_status=")
	builder.WriteString(_m.ProviderStatus)
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// NetlinkResources is a parsable slice of NetlinkResource.
type NetlinkResources []*NetlinkResource
