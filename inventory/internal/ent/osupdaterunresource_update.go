// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdaterunresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdateRunResourceUpdate is the builder for updating OSUpdateRunResource entities.
type OSUpdateRunResourceUpdate struct {
	config
	hooks    []Hook
	mutation *OSUpdateRunResourceMutation
}

// Where appends a list predicates to the OSUpdateRunResourceUpdate builder.
func (_u *OSUpdateRunResourceUpdate) Where(ps ...predicate.OSUpdateRunResource) *OSUpdateRunResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *OSUpdateRunResourceUpdate) SetResourceID(v string) *OSUpdateRunResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableResourceID(v *string) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetStatusIndicator sets the "status_indicator" field.
func (_u *OSUpdateRunResourceUpdate) SetStatusIndicator(v osupdaterunresource.StatusIndicator) *OSUpdateRunResourceUpdate {
	_u.mutation.SetStatusIndicator(v)
	return _u
}

// SetNillableStatusIndicator sets the "status_indicator" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableStatusIndicator(v *osupdaterunresource.StatusIndicator) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetStatusIndicator(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *OSUpdateRunResourceUpdate) SetStatus(v string) *OSUpdateRunResourceUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableStatus(v *string) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OSUpdateRunResourceUpdate) ClearStatus() *OSUpdateRunResourceUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetStatusDetails sets the "status_details" field.
func (_u *OSUpdateRunResourceUpdate) SetStatusDetails(v string) *OSUpdateRunResourceUpdate {
	_u.mutation.SetStatusDetails(v)
	return _u
}

// SetNillableStatusDetails sets the "status_details" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableStatusDetails(v *string) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetStatusDetails(*v)
	}
	return _u
}

// ClearStatusDetails clears the value of the "status_details" field.
func (_u *OSUpdateRunResourceUpdate) ClearStatusDetails() *OSUpdateRunResourceUpdate {
	_u.mutation.ClearStatusDetails()
	return _u
}

// SetStatusTimestamp sets the "status_timestamp" field.
func (_u *OSUpdateRunResourceUpdate) SetStatusTimestamp(v uint64) *OSUpdateRunResourceUpdate {
	_u.mutation.ResetStatusTimestamp()
	_u.mutation.SetStatusTimestamp(v)
	return _u
}

// SetNillableStatusTimestamp sets the "status_timestamp" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableStatusTimestamp(v *uint64) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetStatusTimestamp(*v)
	}
	return _u
}

// AddStatusTimestamp adds value to the "status_timestamp" field.
func (_u *OSUpdateRunResourceUpdate) AddStatusTimestamp(v int64) *OSUpdateRunResourceUpdate {
	_u.mutation.AddStatusTimestamp(v)
	return _u
}

// SetEndTime sets the "end_time" field.
func (_u *OSUpdateRunResourceUpdate) SetEndTime(v uint64) *OSUpdateRunResourceUpdate {
	_u.mutation.ResetEndTime()
	_u.mutation.SetEndTime(v)
	return _u
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableEndTime(v *uint64) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetEndTime(*v)
	}
	return _u
}

// AddEndTime adds value to the "end_time" field.
func (_u *OSUpdateRunResourceUpdate) AddEndTime(v int64) *OSUpdateRunResourceUpdate {
	_u.mutation.AddEndTime(v)
	return _u
}

// ClearEndTime clears the value of the "end_time" field.
func (_u *OSUpdateRunResourceUpdate) ClearEndTime() *OSUpdateRunResourceUpdate {
	_u.mutation.ClearEndTime()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OSUpdateRunResourceUpdate) SetUpdatedAt(v string) *OSUpdateRunResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdate) SetNillableUpdatedAt(v *string) *OSUpdateRunResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetAppliedPolicyID sets the "applied_policy" edge to the OSUpdatePolicyResource entity by ID.
func (_u *OSUpdateRunResourceUpdate) SetAppliedPolicyID(id int) *OSUpdateRunResourceUpdate {
	_u.mutation.SetAppliedPolicyID(id)
	return _u
}

// SetAppliedPolicy sets the "applied_policy" edge to the OSUpdatePolicyResource entity.
func (_u *OSUpdateRunResourceUpdate) SetAppliedPolicy(v *OSUpdatePolicyResource) *OSUpdateRunResourceUpdate {
	return _u.SetAppliedPolicyID(v.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (_u *OSUpdateRunResourceUpdate) SetInstanceID(id int) *OSUpdateRunResourceUpdate {
	_u.mutation.SetInstanceID(id)
	return _u
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (_u *OSUpdateRunResourceUpdate) SetInstance(v *InstanceResource) *OSUpdateRunResourceUpdate {
	return _u.SetInstanceID(v.ID)
}

// Mutation returns the OSUpdateRunResourceMutation object of the builder.
func (_u *OSUpdateRunResourceUpdate) Mutation() *OSUpdateRunResourceMutation {
	return _u.mutation
}

// ClearAppliedPolicy clears the "applied_policy" edge to the OSUpdatePolicyResource entity.
func (_u *OSUpdateRunResourceUpdate) ClearAppliedPolicy() *OSUpdateRunResourceUpdate {
	_u.mutation.ClearAppliedPolicy()
	return _u
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (_u *OSUpdateRunResourceUpdate) ClearInstance() *OSUpdateRunResourceUpdate {
	_u.mutation.ClearInstance()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OSUpdateRunResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OSUpdateRunResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OSUpdateRunResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OSUpdateRunResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OSUpdateRunResourceUpdate) check() error {
	if v, ok := _u.mutation.StatusIndicator(); ok {
		if err := osupdaterunresource.StatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "status_indicator", err: fmt.Errorf(`ent: validator failed for field "OSUpdateRunResource.status_indicator": %w`, err)}
		}
	}
	if _u.mutation.AppliedPolicyCleared() && len(_u.mutation.AppliedPolicyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OSUpdateRunResource.applied_policy"`)
	}
	if _u.mutation.InstanceCleared() && len(_u.mutation.InstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OSUpdateRunResource.instance"`)
	}
	return nil
}

func (_u *OSUpdateRunResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(osupdaterunresource.Table, osupdaterunresource.Columns, sqlgraph.NewFieldSpec(osupdaterunresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(osupdaterunresource.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(osupdaterunresource.FieldName, field.TypeString)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(osupdaterunresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.StatusIndicator(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusIndicator, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(osupdaterunresource.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(osupdaterunresource.FieldStatus, field.TypeString)
	}
	if value, ok := _u.mutation.StatusDetails(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusDetails, field.TypeString, value)
	}
	if _u.mutation.StatusDetailsCleared() {
		_spec.ClearField(osupdaterunresource.FieldStatusDetails, field.TypeString)
	}
	if value, ok := _u.mutation.StatusTimestamp(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedStatusTimestamp(); ok {
		_spec.AddField(osupdaterunresource.FieldStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.EndTime(); ok {
		_spec.SetField(osupdaterunresource.FieldEndTime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedEndTime(); ok {
		_spec.AddField(osupdaterunresource.FieldEndTime, field.TypeUint64, value)
	}
	if _u.mutation.EndTimeCleared() {
		_spec.ClearField(osupdaterunresource.FieldEndTime, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdaterunresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.AppliedPolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.AppliedPolicyTable,
			Columns: []string{osupdaterunresource.AppliedPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AppliedPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.AppliedPolicyTable,
			Columns: []string{osupdaterunresource.AppliedPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.InstanceTable,
			Columns: []string{osupdaterunresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.InstanceTable,
			Columns: []string{osupdaterunresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osupdaterunresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OSUpdateRunResourceUpdateOne is the builder for updating a single OSUpdateRunResource entity.
type OSUpdateRunResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OSUpdateRunResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *OSUpdateRunResourceUpdateOne) SetResourceID(v string) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableResourceID(v *string) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetStatusIndicator sets the "status_indicator" field.
func (_u *OSUpdateRunResourceUpdateOne) SetStatusIndicator(v osupdaterunresource.StatusIndicator) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetStatusIndicator(v)
	return _u
}

// SetNillableStatusIndicator sets the "status_indicator" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableStatusIndicator(v *osupdaterunresource.StatusIndicator) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetStatusIndicator(*v)
	}
	return _u
}

// SetStatus sets the "status" field.
func (_u *OSUpdateRunResourceUpdateOne) SetStatus(v string) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableStatus(v *string) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *OSUpdateRunResourceUpdateOne) ClearStatus() *OSUpdateRunResourceUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetStatusDetails sets the "status_details" field.
func (_u *OSUpdateRunResourceUpdateOne) SetStatusDetails(v string) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetStatusDetails(v)
	return _u
}

// SetNillableStatusDetails sets the "status_details" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableStatusDetails(v *string) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetStatusDetails(*v)
	}
	return _u
}

// ClearStatusDetails clears the value of the "status_details" field.
func (_u *OSUpdateRunResourceUpdateOne) ClearStatusDetails() *OSUpdateRunResourceUpdateOne {
	_u.mutation.ClearStatusDetails()
	return _u
}

// SetStatusTimestamp sets the "status_timestamp" field.
func (_u *OSUpdateRunResourceUpdateOne) SetStatusTimestamp(v uint64) *OSUpdateRunResourceUpdateOne {
	_u.mutation.ResetStatusTimestamp()
	_u.mutation.SetStatusTimestamp(v)
	return _u
}

// SetNillableStatusTimestamp sets the "status_timestamp" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableStatusTimestamp(v *uint64) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetStatusTimestamp(*v)
	}
	return _u
}

// AddStatusTimestamp adds value to the "status_timestamp" field.
func (_u *OSUpdateRunResourceUpdateOne) AddStatusTimestamp(v int64) *OSUpdateRunResourceUpdateOne {
	_u.mutation.AddStatusTimestamp(v)
	return _u
}

// SetEndTime sets the "end_time" field.
func (_u *OSUpdateRunResourceUpdateOne) SetEndTime(v uint64) *OSUpdateRunResourceUpdateOne {
	_u.mutation.ResetEndTime()
	_u.mutation.SetEndTime(v)
	return _u
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableEndTime(v *uint64) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetEndTime(*v)
	}
	return _u
}

// AddEndTime adds value to the "end_time" field.
func (_u *OSUpdateRunResourceUpdateOne) AddEndTime(v int64) *OSUpdateRunResourceUpdateOne {
	_u.mutation.AddEndTime(v)
	return _u
}

// ClearEndTime clears the value of the "end_time" field.
func (_u *OSUpdateRunResourceUpdateOne) ClearEndTime() *OSUpdateRunResourceUpdateOne {
	_u.mutation.ClearEndTime()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OSUpdateRunResourceUpdateOne) SetUpdatedAt(v string) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OSUpdateRunResourceUpdateOne) SetNillableUpdatedAt(v *string) *OSUpdateRunResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetAppliedPolicyID sets the "applied_policy" edge to the OSUpdatePolicyResource entity by ID.
func (_u *OSUpdateRunResourceUpdateOne) SetAppliedPolicyID(id int) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetAppliedPolicyID(id)
	return _u
}

// SetAppliedPolicy sets the "applied_policy" edge to the OSUpdatePolicyResource entity.
func (_u *OSUpdateRunResourceUpdateOne) SetAppliedPolicy(v *OSUpdatePolicyResource) *OSUpdateRunResourceUpdateOne {
	return _u.SetAppliedPolicyID(v.ID)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (_u *OSUpdateRunResourceUpdateOne) SetInstanceID(id int) *OSUpdateRunResourceUpdateOne {
	_u.mutation.SetInstanceID(id)
	return _u
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (_u *OSUpdateRunResourceUpdateOne) SetInstance(v *InstanceResource) *OSUpdateRunResourceUpdateOne {
	return _u.SetInstanceID(v.ID)
}

// Mutation returns the OSUpdateRunResourceMutation object of the builder.
func (_u *OSUpdateRunResourceUpdateOne) Mutation() *OSUpdateRunResourceMutation {
	return _u.mutation
}

// ClearAppliedPolicy clears the "applied_policy" edge to the OSUpdatePolicyResource entity.
func (_u *OSUpdateRunResourceUpdateOne) ClearAppliedPolicy() *OSUpdateRunResourceUpdateOne {
	_u.mutation.ClearAppliedPolicy()
	return _u
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (_u *OSUpdateRunResourceUpdateOne) ClearInstance() *OSUpdateRunResourceUpdateOne {
	_u.mutation.ClearInstance()
	return _u
}

// Where appends a list predicates to the OSUpdateRunResourceUpdate builder.
func (_u *OSUpdateRunResourceUpdateOne) Where(ps ...predicate.OSUpdateRunResource) *OSUpdateRunResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OSUpdateRunResourceUpdateOne) Select(field string, fields ...string) *OSUpdateRunResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OSUpdateRunResource entity.
func (_u *OSUpdateRunResourceUpdateOne) Save(ctx context.Context) (*OSUpdateRunResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OSUpdateRunResourceUpdateOne) SaveX(ctx context.Context) *OSUpdateRunResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OSUpdateRunResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OSUpdateRunResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OSUpdateRunResourceUpdateOne) check() error {
	if v, ok := _u.mutation.StatusIndicator(); ok {
		if err := osupdaterunresource.StatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "status_indicator", err: fmt.Errorf(`ent: validator failed for field "OSUpdateRunResource.status_indicator": %w`, err)}
		}
	}
	if _u.mutation.AppliedPolicyCleared() && len(_u.mutation.AppliedPolicyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OSUpdateRunResource.applied_policy"`)
	}
	if _u.mutation.InstanceCleared() && len(_u.mutation.InstanceIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "OSUpdateRunResource.instance"`)
	}
	return nil
}

func (_u *OSUpdateRunResourceUpdateOne) sqlSave(ctx context.Context) (_node *OSUpdateRunResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(osupdaterunresource.Table, osupdaterunresource.Columns, sqlgraph.NewFieldSpec(osupdaterunresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OSUpdateRunResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osupdaterunresource.FieldID)
		for _, f := range fields {
			if !osupdaterunresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != osupdaterunresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(osupdaterunresource.FieldResourceID, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(osupdaterunresource.FieldName, field.TypeString)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(osupdaterunresource.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.StatusIndicator(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusIndicator, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(osupdaterunresource.FieldStatus, field.TypeString, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(osupdaterunresource.FieldStatus, field.TypeString)
	}
	if value, ok := _u.mutation.StatusDetails(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusDetails, field.TypeString, value)
	}
	if _u.mutation.StatusDetailsCleared() {
		_spec.ClearField(osupdaterunresource.FieldStatusDetails, field.TypeString)
	}
	if value, ok := _u.mutation.StatusTimestamp(); ok {
		_spec.SetField(osupdaterunresource.FieldStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedStatusTimestamp(); ok {
		_spec.AddField(osupdaterunresource.FieldStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.EndTime(); ok {
		_spec.SetField(osupdaterunresource.FieldEndTime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedEndTime(); ok {
		_spec.AddField(osupdaterunresource.FieldEndTime, field.TypeUint64, value)
	}
	if _u.mutation.EndTimeCleared() {
		_spec.ClearField(osupdaterunresource.FieldEndTime, field.TypeUint64)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdaterunresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.AppliedPolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.AppliedPolicyTable,
			Columns: []string{osupdaterunresource.AppliedPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.AppliedPolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.AppliedPolicyTable,
			Columns: []string{osupdaterunresource.AppliedPolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.InstanceTable,
			Columns: []string{osupdaterunresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdaterunresource.InstanceTable,
			Columns: []string{osupdaterunresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OSUpdateRunResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osupdaterunresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
