// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostgpuresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hoststorageresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostusbresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
)

// HostResourceUpdate is the builder for updating HostResource entities.
type HostResourceUpdate struct {
	config
	hooks    []Hook
	mutation *HostResourceMutation
}

// Where appends a list predicates to the HostResourceUpdate builder.
func (_u *HostResourceUpdate) Where(ps ...predicate.HostResource) *HostResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *HostResourceUpdate) SetResourceID(v string) *HostResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableResourceID(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *HostResourceUpdate) SetKind(v string) *HostResourceUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableKind(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *HostResourceUpdate) ClearKind() *HostResourceUpdate {
	_u.mutation.ClearKind()
	return _u
}

// SetName sets the "name" field.
func (_u *HostResourceUpdate) SetName(v string) *HostResourceUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableName(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *HostResourceUpdate) ClearName() *HostResourceUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *HostResourceUpdate) SetDesiredState(v hostresource.DesiredState) *HostResourceUpdate {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableDesiredState(v *hostresource.DesiredState) *HostResourceUpdate {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// ClearDesiredState clears the value of the "desired_state" field.
func (_u *HostResourceUpdate) ClearDesiredState() *HostResourceUpdate {
	_u.mutation.ClearDesiredState()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *HostResourceUpdate) SetCurrentState(v hostresource.CurrentState) *HostResourceUpdate {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCurrentState(v *hostresource.CurrentState) *HostResourceUpdate {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *HostResourceUpdate) ClearCurrentState() *HostResourceUpdate {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetNote sets the "note" field.
func (_u *HostResourceUpdate) SetNote(v string) *HostResourceUpdate {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableNote(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *HostResourceUpdate) ClearNote() *HostResourceUpdate {
	_u.mutation.ClearNote()
	return _u
}

// SetHardwareKind sets the "hardware_kind" field.
func (_u *HostResourceUpdate) SetHardwareKind(v string) *HostResourceUpdate {
	_u.mutation.SetHardwareKind(v)
	return _u
}

// SetNillableHardwareKind sets the "hardware_kind" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableHardwareKind(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetHardwareKind(*v)
	}
	return _u
}

// ClearHardwareKind clears the value of the "hardware_kind" field.
func (_u *HostResourceUpdate) ClearHardwareKind() *HostResourceUpdate {
	_u.mutation.ClearHardwareKind()
	return _u
}

// SetSerialNumber sets the "serial_number" field.
func (_u *HostResourceUpdate) SetSerialNumber(v string) *HostResourceUpdate {
	_u.mutation.SetSerialNumber(v)
	return _u
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableSerialNumber(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetSerialNumber(*v)
	}
	return _u
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (_u *HostResourceUpdate) ClearSerialNumber() *HostResourceUpdate {
	_u.mutation.ClearSerialNumber()
	return _u
}

// SetUUID sets the "uuid" field.
func (_u *HostResourceUpdate) SetUUID(v string) *HostResourceUpdate {
	_u.mutation.SetUUID(v)
	return _u
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableUUID(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetUUID(*v)
	}
	return _u
}

// ClearUUID clears the value of the "uuid" field.
func (_u *HostResourceUpdate) ClearUUID() *HostResourceUpdate {
	_u.mutation.ClearUUID()
	return _u
}

// SetMemoryBytes sets the "memory_bytes" field.
func (_u *HostResourceUpdate) SetMemoryBytes(v uint64) *HostResourceUpdate {
	_u.mutation.ResetMemoryBytes()
	_u.mutation.SetMemoryBytes(v)
	return _u
}

// SetNillableMemoryBytes sets the "memory_bytes" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableMemoryBytes(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetMemoryBytes(*v)
	}
	return _u
}

// AddMemoryBytes adds value to the "memory_bytes" field.
func (_u *HostResourceUpdate) AddMemoryBytes(v int64) *HostResourceUpdate {
	_u.mutation.AddMemoryBytes(v)
	return _u
}

// ClearMemoryBytes clears the value of the "memory_bytes" field.
func (_u *HostResourceUpdate) ClearMemoryBytes() *HostResourceUpdate {
	_u.mutation.ClearMemoryBytes()
	return _u
}

// SetCPUModel sets the "cpu_model" field.
func (_u *HostResourceUpdate) SetCPUModel(v string) *HostResourceUpdate {
	_u.mutation.SetCPUModel(v)
	return _u
}

// SetNillableCPUModel sets the "cpu_model" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUModel(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUModel(*v)
	}
	return _u
}

// ClearCPUModel clears the value of the "cpu_model" field.
func (_u *HostResourceUpdate) ClearCPUModel() *HostResourceUpdate {
	_u.mutation.ClearCPUModel()
	return _u
}

// SetCPUSockets sets the "cpu_sockets" field.
func (_u *HostResourceUpdate) SetCPUSockets(v uint32) *HostResourceUpdate {
	_u.mutation.ResetCPUSockets()
	_u.mutation.SetCPUSockets(v)
	return _u
}

// SetNillableCPUSockets sets the "cpu_sockets" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUSockets(v *uint32) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUSockets(*v)
	}
	return _u
}

// AddCPUSockets adds value to the "cpu_sockets" field.
func (_u *HostResourceUpdate) AddCPUSockets(v int32) *HostResourceUpdate {
	_u.mutation.AddCPUSockets(v)
	return _u
}

// ClearCPUSockets clears the value of the "cpu_sockets" field.
func (_u *HostResourceUpdate) ClearCPUSockets() *HostResourceUpdate {
	_u.mutation.ClearCPUSockets()
	return _u
}

// SetCPUCores sets the "cpu_cores" field.
func (_u *HostResourceUpdate) SetCPUCores(v uint32) *HostResourceUpdate {
	_u.mutation.ResetCPUCores()
	_u.mutation.SetCPUCores(v)
	return _u
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUCores(v *uint32) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUCores(*v)
	}
	return _u
}

// AddCPUCores adds value to the "cpu_cores" field.
func (_u *HostResourceUpdate) AddCPUCores(v int32) *HostResourceUpdate {
	_u.mutation.AddCPUCores(v)
	return _u
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (_u *HostResourceUpdate) ClearCPUCores() *HostResourceUpdate {
	_u.mutation.ClearCPUCores()
	return _u
}

// SetCPUCapabilities sets the "cpu_capabilities" field.
func (_u *HostResourceUpdate) SetCPUCapabilities(v string) *HostResourceUpdate {
	_u.mutation.SetCPUCapabilities(v)
	return _u
}

// SetNillableCPUCapabilities sets the "cpu_capabilities" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUCapabilities(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUCapabilities(*v)
	}
	return _u
}

// ClearCPUCapabilities clears the value of the "cpu_capabilities" field.
func (_u *HostResourceUpdate) ClearCPUCapabilities() *HostResourceUpdate {
	_u.mutation.ClearCPUCapabilities()
	return _u
}

// SetCPUArchitecture sets the "cpu_architecture" field.
func (_u *HostResourceUpdate) SetCPUArchitecture(v string) *HostResourceUpdate {
	_u.mutation.SetCPUArchitecture(v)
	return _u
}

// SetNillableCPUArchitecture sets the "cpu_architecture" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUArchitecture(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUArchitecture(*v)
	}
	return _u
}

// ClearCPUArchitecture clears the value of the "cpu_architecture" field.
func (_u *HostResourceUpdate) ClearCPUArchitecture() *HostResourceUpdate {
	_u.mutation.ClearCPUArchitecture()
	return _u
}

// SetCPUThreads sets the "cpu_threads" field.
func (_u *HostResourceUpdate) SetCPUThreads(v uint32) *HostResourceUpdate {
	_u.mutation.ResetCPUThreads()
	_u.mutation.SetCPUThreads(v)
	return _u
}

// SetNillableCPUThreads sets the "cpu_threads" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUThreads(v *uint32) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUThreads(*v)
	}
	return _u
}

// AddCPUThreads adds value to the "cpu_threads" field.
func (_u *HostResourceUpdate) AddCPUThreads(v int32) *HostResourceUpdate {
	_u.mutation.AddCPUThreads(v)
	return _u
}

// ClearCPUThreads clears the value of the "cpu_threads" field.
func (_u *HostResourceUpdate) ClearCPUThreads() *HostResourceUpdate {
	_u.mutation.ClearCPUThreads()
	return _u
}

// SetCPUTopology sets the "cpu_topology" field.
func (_u *HostResourceUpdate) SetCPUTopology(v string) *HostResourceUpdate {
	_u.mutation.SetCPUTopology(v)
	return _u
}

// SetNillableCPUTopology sets the "cpu_topology" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCPUTopology(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetCPUTopology(*v)
	}
	return _u
}

// ClearCPUTopology clears the value of the "cpu_topology" field.
func (_u *HostResourceUpdate) ClearCPUTopology() *HostResourceUpdate {
	_u.mutation.ClearCPUTopology()
	return _u
}

// SetMgmtIP sets the "mgmt_ip" field.
func (_u *HostResourceUpdate) SetMgmtIP(v string) *HostResourceUpdate {
	_u.mutation.SetMgmtIP(v)
	return _u
}

// SetNillableMgmtIP sets the "mgmt_ip" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableMgmtIP(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetMgmtIP(*v)
	}
	return _u
}

// ClearMgmtIP clears the value of the "mgmt_ip" field.
func (_u *HostResourceUpdate) ClearMgmtIP() *HostResourceUpdate {
	_u.mutation.ClearMgmtIP()
	return _u
}

// SetBmcKind sets the "bmc_kind" field.
func (_u *HostResourceUpdate) SetBmcKind(v hostresource.BmcKind) *HostResourceUpdate {
	_u.mutation.SetBmcKind(v)
	return _u
}

// SetNillableBmcKind sets the "bmc_kind" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBmcKind(v *hostresource.BmcKind) *HostResourceUpdate {
	if v != nil {
		_u.SetBmcKind(*v)
	}
	return _u
}

// ClearBmcKind clears the value of the "bmc_kind" field.
func (_u *HostResourceUpdate) ClearBmcKind() *HostResourceUpdate {
	_u.mutation.ClearBmcKind()
	return _u
}

// SetBmcIP sets the "bmc_ip" field.
func (_u *HostResourceUpdate) SetBmcIP(v string) *HostResourceUpdate {
	_u.mutation.SetBmcIP(v)
	return _u
}

// SetNillableBmcIP sets the "bmc_ip" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBmcIP(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetBmcIP(*v)
	}
	return _u
}

// ClearBmcIP clears the value of the "bmc_ip" field.
func (_u *HostResourceUpdate) ClearBmcIP() *HostResourceUpdate {
	_u.mutation.ClearBmcIP()
	return _u
}

// SetBmcUsername sets the "bmc_username" field.
func (_u *HostResourceUpdate) SetBmcUsername(v string) *HostResourceUpdate {
	_u.mutation.SetBmcUsername(v)
	return _u
}

// SetNillableBmcUsername sets the "bmc_username" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBmcUsername(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetBmcUsername(*v)
	}
	return _u
}

// ClearBmcUsername clears the value of the "bmc_username" field.
func (_u *HostResourceUpdate) ClearBmcUsername() *HostResourceUpdate {
	_u.mutation.ClearBmcUsername()
	return _u
}

// SetBmcPassword sets the "bmc_password" field.
func (_u *HostResourceUpdate) SetBmcPassword(v string) *HostResourceUpdate {
	_u.mutation.SetBmcPassword(v)
	return _u
}

// SetNillableBmcPassword sets the "bmc_password" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBmcPassword(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetBmcPassword(*v)
	}
	return _u
}

// ClearBmcPassword clears the value of the "bmc_password" field.
func (_u *HostResourceUpdate) ClearBmcPassword() *HostResourceUpdate {
	_u.mutation.ClearBmcPassword()
	return _u
}

// SetPxeMAC sets the "pxe_mac" field.
func (_u *HostResourceUpdate) SetPxeMAC(v string) *HostResourceUpdate {
	_u.mutation.SetPxeMAC(v)
	return _u
}

// SetNillablePxeMAC sets the "pxe_mac" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillablePxeMAC(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetPxeMAC(*v)
	}
	return _u
}

// ClearPxeMAC clears the value of the "pxe_mac" field.
func (_u *HostResourceUpdate) ClearPxeMAC() *HostResourceUpdate {
	_u.mutation.ClearPxeMAC()
	return _u
}

// SetHostname sets the "hostname" field.
func (_u *HostResourceUpdate) SetHostname(v string) *HostResourceUpdate {
	_u.mutation.SetHostname(v)
	return _u
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableHostname(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetHostname(*v)
	}
	return _u
}

// ClearHostname clears the value of the "hostname" field.
func (_u *HostResourceUpdate) ClearHostname() *HostResourceUpdate {
	_u.mutation.ClearHostname()
	return _u
}

// SetProductName sets the "product_name" field.
func (_u *HostResourceUpdate) SetProductName(v string) *HostResourceUpdate {
	_u.mutation.SetProductName(v)
	return _u
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableProductName(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetProductName(*v)
	}
	return _u
}

// ClearProductName clears the value of the "product_name" field.
func (_u *HostResourceUpdate) ClearProductName() *HostResourceUpdate {
	_u.mutation.ClearProductName()
	return _u
}

// SetBiosVersion sets the "bios_version" field.
func (_u *HostResourceUpdate) SetBiosVersion(v string) *HostResourceUpdate {
	_u.mutation.SetBiosVersion(v)
	return _u
}

// SetNillableBiosVersion sets the "bios_version" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBiosVersion(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetBiosVersion(*v)
	}
	return _u
}

// ClearBiosVersion clears the value of the "bios_version" field.
func (_u *HostResourceUpdate) ClearBiosVersion() *HostResourceUpdate {
	_u.mutation.ClearBiosVersion()
	return _u
}

// SetBiosReleaseDate sets the "bios_release_date" field.
func (_u *HostResourceUpdate) SetBiosReleaseDate(v string) *HostResourceUpdate {
	_u.mutation.SetBiosReleaseDate(v)
	return _u
}

// SetNillableBiosReleaseDate sets the "bios_release_date" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBiosReleaseDate(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetBiosReleaseDate(*v)
	}
	return _u
}

// ClearBiosReleaseDate clears the value of the "bios_release_date" field.
func (_u *HostResourceUpdate) ClearBiosReleaseDate() *HostResourceUpdate {
	_u.mutation.ClearBiosReleaseDate()
	return _u
}

// SetBiosVendor sets the "bios_vendor" field.
func (_u *HostResourceUpdate) SetBiosVendor(v string) *HostResourceUpdate {
	_u.mutation.SetBiosVendor(v)
	return _u
}

// SetNillableBiosVendor sets the "bios_vendor" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableBiosVendor(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetBiosVendor(*v)
	}
	return _u
}

// ClearBiosVendor clears the value of the "bios_vendor" field.
func (_u *HostResourceUpdate) ClearBiosVendor() *HostResourceUpdate {
	_u.mutation.ClearBiosVendor()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *HostResourceUpdate) SetMetadata(v string) *HostResourceUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableMetadata(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *HostResourceUpdate) ClearMetadata() *HostResourceUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// SetDesiredPowerState sets the "desired_power_state" field.
func (_u *HostResourceUpdate) SetDesiredPowerState(v hostresource.DesiredPowerState) *HostResourceUpdate {
	_u.mutation.SetDesiredPowerState(v)
	return _u
}

// SetNillableDesiredPowerState sets the "desired_power_state" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableDesiredPowerState(v *hostresource.DesiredPowerState) *HostResourceUpdate {
	if v != nil {
		_u.SetDesiredPowerState(*v)
	}
	return _u
}

// ClearDesiredPowerState clears the value of the "desired_power_state" field.
func (_u *HostResourceUpdate) ClearDesiredPowerState() *HostResourceUpdate {
	_u.mutation.ClearDesiredPowerState()
	return _u
}

// SetCurrentPowerState sets the "current_power_state" field.
func (_u *HostResourceUpdate) SetCurrentPowerState(v hostresource.CurrentPowerState) *HostResourceUpdate {
	_u.mutation.SetCurrentPowerState(v)
	return _u
}

// SetNillableCurrentPowerState sets the "current_power_state" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCurrentPowerState(v *hostresource.CurrentPowerState) *HostResourceUpdate {
	if v != nil {
		_u.SetCurrentPowerState(*v)
	}
	return _u
}

// ClearCurrentPowerState clears the value of the "current_power_state" field.
func (_u *HostResourceUpdate) ClearCurrentPowerState() *HostResourceUpdate {
	_u.mutation.ClearCurrentPowerState()
	return _u
}

// SetPowerStatus sets the "power_status" field.
func (_u *HostResourceUpdate) SetPowerStatus(v string) *HostResourceUpdate {
	_u.mutation.SetPowerStatus(v)
	return _u
}

// SetNillablePowerStatus sets the "power_status" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillablePowerStatus(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetPowerStatus(*v)
	}
	return _u
}

// ClearPowerStatus clears the value of the "power_status" field.
func (_u *HostResourceUpdate) ClearPowerStatus() *HostResourceUpdate {
	_u.mutation.ClearPowerStatus()
	return _u
}

// SetPowerStatusIndicator sets the "power_status_indicator" field.
func (_u *HostResourceUpdate) SetPowerStatusIndicator(v hostresource.PowerStatusIndicator) *HostResourceUpdate {
	_u.mutation.SetPowerStatusIndicator(v)
	return _u
}

// SetNillablePowerStatusIndicator sets the "power_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillablePowerStatusIndicator(v *hostresource.PowerStatusIndicator) *HostResourceUpdate {
	if v != nil {
		_u.SetPowerStatusIndicator(*v)
	}
	return _u
}

// ClearPowerStatusIndicator clears the value of the "power_status_indicator" field.
func (_u *HostResourceUpdate) ClearPowerStatusIndicator() *HostResourceUpdate {
	_u.mutation.ClearPowerStatusIndicator()
	return _u
}

// SetPowerStatusTimestamp sets the "power_status_timestamp" field.
func (_u *HostResourceUpdate) SetPowerStatusTimestamp(v uint64) *HostResourceUpdate {
	_u.mutation.ResetPowerStatusTimestamp()
	_u.mutation.SetPowerStatusTimestamp(v)
	return _u
}

// SetNillablePowerStatusTimestamp sets the "power_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillablePowerStatusTimestamp(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetPowerStatusTimestamp(*v)
	}
	return _u
}

// AddPowerStatusTimestamp adds value to the "power_status_timestamp" field.
func (_u *HostResourceUpdate) AddPowerStatusTimestamp(v int64) *HostResourceUpdate {
	_u.mutation.AddPowerStatusTimestamp(v)
	return _u
}

// ClearPowerStatusTimestamp clears the value of the "power_status_timestamp" field.
func (_u *HostResourceUpdate) ClearPowerStatusTimestamp() *HostResourceUpdate {
	_u.mutation.ClearPowerStatusTimestamp()
	return _u
}

// SetPowerCommandPolicy sets the "power_command_policy" field.
func (_u *HostResourceUpdate) SetPowerCommandPolicy(v hostresource.PowerCommandPolicy) *HostResourceUpdate {
	_u.mutation.SetPowerCommandPolicy(v)
	return _u
}

// SetNillablePowerCommandPolicy sets the "power_command_policy" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillablePowerCommandPolicy(v *hostresource.PowerCommandPolicy) *HostResourceUpdate {
	if v != nil {
		_u.SetPowerCommandPolicy(*v)
	}
	return _u
}

// ClearPowerCommandPolicy clears the value of the "power_command_policy" field.
func (_u *HostResourceUpdate) ClearPowerCommandPolicy() *HostResourceUpdate {
	_u.mutation.ClearPowerCommandPolicy()
	return _u
}

// SetPowerOnTime sets the "power_on_time" field.
func (_u *HostResourceUpdate) SetPowerOnTime(v uint64) *HostResourceUpdate {
	_u.mutation.ResetPowerOnTime()
	_u.mutation.SetPowerOnTime(v)
	return _u
}

// SetNillablePowerOnTime sets the "power_on_time" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillablePowerOnTime(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetPowerOnTime(*v)
	}
	return _u
}

// AddPowerOnTime adds value to the "power_on_time" field.
func (_u *HostResourceUpdate) AddPowerOnTime(v int64) *HostResourceUpdate {
	_u.mutation.AddPowerOnTime(v)
	return _u
}

// ClearPowerOnTime clears the value of the "power_on_time" field.
func (_u *HostResourceUpdate) ClearPowerOnTime() *HostResourceUpdate {
	_u.mutation.ClearPowerOnTime()
	return _u
}

// SetHostStatus sets the "host_status" field.
func (_u *HostResourceUpdate) SetHostStatus(v string) *HostResourceUpdate {
	_u.mutation.SetHostStatus(v)
	return _u
}

// SetNillableHostStatus sets the "host_status" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableHostStatus(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetHostStatus(*v)
	}
	return _u
}

// ClearHostStatus clears the value of the "host_status" field.
func (_u *HostResourceUpdate) ClearHostStatus() *HostResourceUpdate {
	_u.mutation.ClearHostStatus()
	return _u
}

// SetHostStatusIndicator sets the "host_status_indicator" field.
func (_u *HostResourceUpdate) SetHostStatusIndicator(v hostresource.HostStatusIndicator) *HostResourceUpdate {
	_u.mutation.SetHostStatusIndicator(v)
	return _u
}

// SetNillableHostStatusIndicator sets the "host_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableHostStatusIndicator(v *hostresource.HostStatusIndicator) *HostResourceUpdate {
	if v != nil {
		_u.SetHostStatusIndicator(*v)
	}
	return _u
}

// ClearHostStatusIndicator clears the value of the "host_status_indicator" field.
func (_u *HostResourceUpdate) ClearHostStatusIndicator() *HostResourceUpdate {
	_u.mutation.ClearHostStatusIndicator()
	return _u
}

// SetHostStatusTimestamp sets the "host_status_timestamp" field.
func (_u *HostResourceUpdate) SetHostStatusTimestamp(v uint64) *HostResourceUpdate {
	_u.mutation.ResetHostStatusTimestamp()
	_u.mutation.SetHostStatusTimestamp(v)
	return _u
}

// SetNillableHostStatusTimestamp sets the "host_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableHostStatusTimestamp(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetHostStatusTimestamp(*v)
	}
	return _u
}

// AddHostStatusTimestamp adds value to the "host_status_timestamp" field.
func (_u *HostResourceUpdate) AddHostStatusTimestamp(v int64) *HostResourceUpdate {
	_u.mutation.AddHostStatusTimestamp(v)
	return _u
}

// ClearHostStatusTimestamp clears the value of the "host_status_timestamp" field.
func (_u *HostResourceUpdate) ClearHostStatusTimestamp() *HostResourceUpdate {
	_u.mutation.ClearHostStatusTimestamp()
	return _u
}

// SetOnboardingStatus sets the "onboarding_status" field.
func (_u *HostResourceUpdate) SetOnboardingStatus(v string) *HostResourceUpdate {
	_u.mutation.SetOnboardingStatus(v)
	return _u
}

// SetNillableOnboardingStatus sets the "onboarding_status" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableOnboardingStatus(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetOnboardingStatus(*v)
	}
	return _u
}

// ClearOnboardingStatus clears the value of the "onboarding_status" field.
func (_u *HostResourceUpdate) ClearOnboardingStatus() *HostResourceUpdate {
	_u.mutation.ClearOnboardingStatus()
	return _u
}

// SetOnboardingStatusIndicator sets the "onboarding_status_indicator" field.
func (_u *HostResourceUpdate) SetOnboardingStatusIndicator(v hostresource.OnboardingStatusIndicator) *HostResourceUpdate {
	_u.mutation.SetOnboardingStatusIndicator(v)
	return _u
}

// SetNillableOnboardingStatusIndicator sets the "onboarding_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableOnboardingStatusIndicator(v *hostresource.OnboardingStatusIndicator) *HostResourceUpdate {
	if v != nil {
		_u.SetOnboardingStatusIndicator(*v)
	}
	return _u
}

// ClearOnboardingStatusIndicator clears the value of the "onboarding_status_indicator" field.
func (_u *HostResourceUpdate) ClearOnboardingStatusIndicator() *HostResourceUpdate {
	_u.mutation.ClearOnboardingStatusIndicator()
	return _u
}

// SetOnboardingStatusTimestamp sets the "onboarding_status_timestamp" field.
func (_u *HostResourceUpdate) SetOnboardingStatusTimestamp(v uint64) *HostResourceUpdate {
	_u.mutation.ResetOnboardingStatusTimestamp()
	_u.mutation.SetOnboardingStatusTimestamp(v)
	return _u
}

// SetNillableOnboardingStatusTimestamp sets the "onboarding_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableOnboardingStatusTimestamp(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetOnboardingStatusTimestamp(*v)
	}
	return _u
}

// AddOnboardingStatusTimestamp adds value to the "onboarding_status_timestamp" field.
func (_u *HostResourceUpdate) AddOnboardingStatusTimestamp(v int64) *HostResourceUpdate {
	_u.mutation.AddOnboardingStatusTimestamp(v)
	return _u
}

// ClearOnboardingStatusTimestamp clears the value of the "onboarding_status_timestamp" field.
func (_u *HostResourceUpdate) ClearOnboardingStatusTimestamp() *HostResourceUpdate {
	_u.mutation.ClearOnboardingStatusTimestamp()
	return _u
}

// SetRegistrationStatus sets the "registration_status" field.
func (_u *HostResourceUpdate) SetRegistrationStatus(v string) *HostResourceUpdate {
	_u.mutation.SetRegistrationStatus(v)
	return _u
}

// SetNillableRegistrationStatus sets the "registration_status" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableRegistrationStatus(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetRegistrationStatus(*v)
	}
	return _u
}

// ClearRegistrationStatus clears the value of the "registration_status" field.
func (_u *HostResourceUpdate) ClearRegistrationStatus() *HostResourceUpdate {
	_u.mutation.ClearRegistrationStatus()
	return _u
}

// SetRegistrationStatusIndicator sets the "registration_status_indicator" field.
func (_u *HostResourceUpdate) SetRegistrationStatusIndicator(v hostresource.RegistrationStatusIndicator) *HostResourceUpdate {
	_u.mutation.SetRegistrationStatusIndicator(v)
	return _u
}

// SetNillableRegistrationStatusIndicator sets the "registration_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableRegistrationStatusIndicator(v *hostresource.RegistrationStatusIndicator) *HostResourceUpdate {
	if v != nil {
		_u.SetRegistrationStatusIndicator(*v)
	}
	return _u
}

// ClearRegistrationStatusIndicator clears the value of the "registration_status_indicator" field.
func (_u *HostResourceUpdate) ClearRegistrationStatusIndicator() *HostResourceUpdate {
	_u.mutation.ClearRegistrationStatusIndicator()
	return _u
}

// SetRegistrationStatusTimestamp sets the "registration_status_timestamp" field.
func (_u *HostResourceUpdate) SetRegistrationStatusTimestamp(v uint64) *HostResourceUpdate {
	_u.mutation.ResetRegistrationStatusTimestamp()
	_u.mutation.SetRegistrationStatusTimestamp(v)
	return _u
}

// SetNillableRegistrationStatusTimestamp sets the "registration_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableRegistrationStatusTimestamp(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetRegistrationStatusTimestamp(*v)
	}
	return _u
}

// AddRegistrationStatusTimestamp adds value to the "registration_status_timestamp" field.
func (_u *HostResourceUpdate) AddRegistrationStatusTimestamp(v int64) *HostResourceUpdate {
	_u.mutation.AddRegistrationStatusTimestamp(v)
	return _u
}

// ClearRegistrationStatusTimestamp clears the value of the "registration_status_timestamp" field.
func (_u *HostResourceUpdate) ClearRegistrationStatusTimestamp() *HostResourceUpdate {
	_u.mutation.ClearRegistrationStatusTimestamp()
	return _u
}

// SetAmtSku sets the "amt_sku" field.
func (_u *HostResourceUpdate) SetAmtSku(v hostresource.AmtSku) *HostResourceUpdate {
	_u.mutation.SetAmtSku(v)
	return _u
}

// SetNillableAmtSku sets the "amt_sku" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableAmtSku(v *hostresource.AmtSku) *HostResourceUpdate {
	if v != nil {
		_u.SetAmtSku(*v)
	}
	return _u
}

// ClearAmtSku clears the value of the "amt_sku" field.
func (_u *HostResourceUpdate) ClearAmtSku() *HostResourceUpdate {
	_u.mutation.ClearAmtSku()
	return _u
}

// SetDesiredAmtState sets the "desired_amt_state" field.
func (_u *HostResourceUpdate) SetDesiredAmtState(v hostresource.DesiredAmtState) *HostResourceUpdate {
	_u.mutation.SetDesiredAmtState(v)
	return _u
}

// SetNillableDesiredAmtState sets the "desired_amt_state" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableDesiredAmtState(v *hostresource.DesiredAmtState) *HostResourceUpdate {
	if v != nil {
		_u.SetDesiredAmtState(*v)
	}
	return _u
}

// ClearDesiredAmtState clears the value of the "desired_amt_state" field.
func (_u *HostResourceUpdate) ClearDesiredAmtState() *HostResourceUpdate {
	_u.mutation.ClearDesiredAmtState()
	return _u
}

// SetCurrentAmtState sets the "current_amt_state" field.
func (_u *HostResourceUpdate) SetCurrentAmtState(v hostresource.CurrentAmtState) *HostResourceUpdate {
	_u.mutation.SetCurrentAmtState(v)
	return _u
}

// SetNillableCurrentAmtState sets the "current_amt_state" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableCurrentAmtState(v *hostresource.CurrentAmtState) *HostResourceUpdate {
	if v != nil {
		_u.SetCurrentAmtState(*v)
	}
	return _u
}

// ClearCurrentAmtState clears the value of the "current_amt_state" field.
func (_u *HostResourceUpdate) ClearCurrentAmtState() *HostResourceUpdate {
	_u.mutation.ClearCurrentAmtState()
	return _u
}

// SetAmtStatus sets the "amt_status" field.
func (_u *HostResourceUpdate) SetAmtStatus(v string) *HostResourceUpdate {
	_u.mutation.SetAmtStatus(v)
	return _u
}

// SetNillableAmtStatus sets the "amt_status" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableAmtStatus(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetAmtStatus(*v)
	}
	return _u
}

// ClearAmtStatus clears the value of the "amt_status" field.
func (_u *HostResourceUpdate) ClearAmtStatus() *HostResourceUpdate {
	_u.mutation.ClearAmtStatus()
	return _u
}

// SetAmtStatusIndicator sets the "amt_status_indicator" field.
func (_u *HostResourceUpdate) SetAmtStatusIndicator(v hostresource.AmtStatusIndicator) *HostResourceUpdate {
	_u.mutation.SetAmtStatusIndicator(v)
	return _u
}

// SetNillableAmtStatusIndicator sets the "amt_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableAmtStatusIndicator(v *hostresource.AmtStatusIndicator) *HostResourceUpdate {
	if v != nil {
		_u.SetAmtStatusIndicator(*v)
	}
	return _u
}

// ClearAmtStatusIndicator clears the value of the "amt_status_indicator" field.
func (_u *HostResourceUpdate) ClearAmtStatusIndicator() *HostResourceUpdate {
	_u.mutation.ClearAmtStatusIndicator()
	return _u
}

// SetAmtStatusTimestamp sets the "amt_status_timestamp" field.
func (_u *HostResourceUpdate) SetAmtStatusTimestamp(v uint64) *HostResourceUpdate {
	_u.mutation.ResetAmtStatusTimestamp()
	_u.mutation.SetAmtStatusTimestamp(v)
	return _u
}

// SetNillableAmtStatusTimestamp sets the "amt_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableAmtStatusTimestamp(v *uint64) *HostResourceUpdate {
	if v != nil {
		_u.SetAmtStatusTimestamp(*v)
	}
	return _u
}

// AddAmtStatusTimestamp adds value to the "amt_status_timestamp" field.
func (_u *HostResourceUpdate) AddAmtStatusTimestamp(v int64) *HostResourceUpdate {
	_u.mutation.AddAmtStatusTimestamp(v)
	return _u
}

// ClearAmtStatusTimestamp clears the value of the "amt_status_timestamp" field.
func (_u *HostResourceUpdate) ClearAmtStatusTimestamp() *HostResourceUpdate {
	_u.mutation.ClearAmtStatusTimestamp()
	return _u
}

// SetUserLvmSize sets the "user_lvm_size" field.
func (_u *HostResourceUpdate) SetUserLvmSize(v uint32) *HostResourceUpdate {
	_u.mutation.ResetUserLvmSize()
	_u.mutation.SetUserLvmSize(v)
	return _u
}

// SetNillableUserLvmSize sets the "user_lvm_size" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableUserLvmSize(v *uint32) *HostResourceUpdate {
	if v != nil {
		_u.SetUserLvmSize(*v)
	}
	return _u
}

// AddUserLvmSize adds value to the "user_lvm_size" field.
func (_u *HostResourceUpdate) AddUserLvmSize(v int32) *HostResourceUpdate {
	_u.mutation.AddUserLvmSize(v)
	return _u
}

// ClearUserLvmSize clears the value of the "user_lvm_size" field.
func (_u *HostResourceUpdate) ClearUserLvmSize() *HostResourceUpdate {
	_u.mutation.ClearUserLvmSize()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostResourceUpdate) SetUpdatedAt(v string) *HostResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableUpdatedAt(v *string) *HostResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (_u *HostResourceUpdate) SetSiteID(id int) *HostResourceUpdate {
	_u.mutation.SetSiteID(id)
	return _u
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableSiteID(id *int) *HostResourceUpdate {
	if id != nil {
		_u = _u.SetSiteID(*id)
	}
	return _u
}

// SetSite sets the "site" edge to the SiteResource entity.
func (_u *HostResourceUpdate) SetSite(v *SiteResource) *HostResourceUpdate {
	return _u.SetSiteID(v.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_u *HostResourceUpdate) SetProviderID(id int) *HostResourceUpdate {
	_u.mutation.SetProviderID(id)
	return _u
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableProviderID(id *int) *HostResourceUpdate {
	if id != nil {
		_u = _u.SetProviderID(*id)
	}
	return _u
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_u *HostResourceUpdate) SetProvider(v *ProviderResource) *HostResourceUpdate {
	return _u.SetProviderID(v.ID)
}

// AddHostStorageIDs adds the "host_storages" edge to the HoststorageResource entity by IDs.
func (_u *HostResourceUpdate) AddHostStorageIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.AddHostStorageIDs(ids...)
	return _u
}

// AddHostStorages adds the "host_storages" edges to the HoststorageResource entity.
func (_u *HostResourceUpdate) AddHostStorages(v ...*HoststorageResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostStorageIDs(ids...)
}

// AddHostNicIDs adds the "host_nics" edge to the HostnicResource entity by IDs.
func (_u *HostResourceUpdate) AddHostNicIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.AddHostNicIDs(ids...)
	return _u
}

// AddHostNics adds the "host_nics" edges to the HostnicResource entity.
func (_u *HostResourceUpdate) AddHostNics(v ...*HostnicResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostNicIDs(ids...)
}

// AddHostUsbIDs adds the "host_usbs" edge to the HostusbResource entity by IDs.
func (_u *HostResourceUpdate) AddHostUsbIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.AddHostUsbIDs(ids...)
	return _u
}

// AddHostUsbs adds the "host_usbs" edges to the HostusbResource entity.
func (_u *HostResourceUpdate) AddHostUsbs(v ...*HostusbResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostUsbIDs(ids...)
}

// AddHostGpuIDs adds the "host_gpus" edge to the HostgpuResource entity by IDs.
func (_u *HostResourceUpdate) AddHostGpuIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.AddHostGpuIDs(ids...)
	return _u
}

// AddHostGpus adds the "host_gpus" edges to the HostgpuResource entity.
func (_u *HostResourceUpdate) AddHostGpus(v ...*HostgpuResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostGpuIDs(ids...)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (_u *HostResourceUpdate) SetInstanceID(id int) *HostResourceUpdate {
	_u.mutation.SetInstanceID(id)
	return _u
}

// SetNillableInstanceID sets the "instance" edge to the InstanceResource entity by ID if the given value is not nil.
func (_u *HostResourceUpdate) SetNillableInstanceID(id *int) *HostResourceUpdate {
	if id != nil {
		_u = _u.SetInstanceID(*id)
	}
	return _u
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (_u *HostResourceUpdate) SetInstance(v *InstanceResource) *HostResourceUpdate {
	return _u.SetInstanceID(v.ID)
}

// Mutation returns the HostResourceMutation object of the builder.
func (_u *HostResourceUpdate) Mutation() *HostResourceMutation {
	return _u.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (_u *HostResourceUpdate) ClearSite() *HostResourceUpdate {
	_u.mutation.ClearSite()
	return _u
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (_u *HostResourceUpdate) ClearProvider() *HostResourceUpdate {
	_u.mutation.ClearProvider()
	return _u
}

// ClearHostStorages clears all "host_storages" edges to the HoststorageResource entity.
func (_u *HostResourceUpdate) ClearHostStorages() *HostResourceUpdate {
	_u.mutation.ClearHostStorages()
	return _u
}

// RemoveHostStorageIDs removes the "host_storages" edge to HoststorageResource entities by IDs.
func (_u *HostResourceUpdate) RemoveHostStorageIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.RemoveHostStorageIDs(ids...)
	return _u
}

// RemoveHostStorages removes "host_storages" edges to HoststorageResource entities.
func (_u *HostResourceUpdate) RemoveHostStorages(v ...*HoststorageResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostStorageIDs(ids...)
}

// ClearHostNics clears all "host_nics" edges to the HostnicResource entity.
func (_u *HostResourceUpdate) ClearHostNics() *HostResourceUpdate {
	_u.mutation.ClearHostNics()
	return _u
}

// RemoveHostNicIDs removes the "host_nics" edge to HostnicResource entities by IDs.
func (_u *HostResourceUpdate) RemoveHostNicIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.RemoveHostNicIDs(ids...)
	return _u
}

// RemoveHostNics removes "host_nics" edges to HostnicResource entities.
func (_u *HostResourceUpdate) RemoveHostNics(v ...*HostnicResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostNicIDs(ids...)
}

// ClearHostUsbs clears all "host_usbs" edges to the HostusbResource entity.
func (_u *HostResourceUpdate) ClearHostUsbs() *HostResourceUpdate {
	_u.mutation.ClearHostUsbs()
	return _u
}

// RemoveHostUsbIDs removes the "host_usbs" edge to HostusbResource entities by IDs.
func (_u *HostResourceUpdate) RemoveHostUsbIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.RemoveHostUsbIDs(ids...)
	return _u
}

// RemoveHostUsbs removes "host_usbs" edges to HostusbResource entities.
func (_u *HostResourceUpdate) RemoveHostUsbs(v ...*HostusbResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostUsbIDs(ids...)
}

// ClearHostGpus clears all "host_gpus" edges to the HostgpuResource entity.
func (_u *HostResourceUpdate) ClearHostGpus() *HostResourceUpdate {
	_u.mutation.ClearHostGpus()
	return _u
}

// RemoveHostGpuIDs removes the "host_gpus" edge to HostgpuResource entities by IDs.
func (_u *HostResourceUpdate) RemoveHostGpuIDs(ids ...int) *HostResourceUpdate {
	_u.mutation.RemoveHostGpuIDs(ids...)
	return _u
}

// RemoveHostGpus removes "host_gpus" edges to HostgpuResource entities.
func (_u *HostResourceUpdate) RemoveHostGpus(v ...*HostgpuResource) *HostResourceUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostGpuIDs(ids...)
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (_u *HostResourceUpdate) ClearInstance() *HostResourceUpdate {
	_u.mutation.ClearInstance()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HostResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HostResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostResourceUpdate) check() error {
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := hostresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := hostresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BmcKind(); ok {
		if err := hostresource.BmcKindValidator(v); err != nil {
			return &ValidationError{Name: "bmc_kind", err: fmt.Errorf(`ent: validator failed for field "HostResource.bmc_kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredPowerState(); ok {
		if err := hostresource.DesiredPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_power_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentPowerState(); ok {
		if err := hostresource.CurrentPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "current_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_power_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PowerStatusIndicator(); ok {
		if err := hostresource.PowerStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "power_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.power_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PowerCommandPolicy(); ok {
		if err := hostresource.PowerCommandPolicyValidator(v); err != nil {
			return &ValidationError{Name: "power_command_policy", err: fmt.Errorf(`ent: validator failed for field "HostResource.power_command_policy": %w`, err)}
		}
	}
	if v, ok := _u.mutation.HostStatusIndicator(); ok {
		if err := hostresource.HostStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "host_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.host_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.OnboardingStatusIndicator(); ok {
		if err := hostresource.OnboardingStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.onboarding_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RegistrationStatusIndicator(); ok {
		if err := hostresource.RegistrationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "registration_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.registration_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AmtSku(); ok {
		if err := hostresource.AmtSkuValidator(v); err != nil {
			return &ValidationError{Name: "amt_sku", err: fmt.Errorf(`ent: validator failed for field "HostResource.amt_sku": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredAmtState(); ok {
		if err := hostresource.DesiredAmtStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_amt_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_amt_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentAmtState(); ok {
		if err := hostresource.CurrentAmtStateValidator(v); err != nil {
			return &ValidationError{Name: "current_amt_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_amt_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AmtStatusIndicator(); ok {
		if err := hostresource.AmtStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "amt_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.amt_status_indicator": %w`, err)}
		}
	}
	return nil
}

func (_u *HostResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostresource.Table, hostresource.Columns, sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(hostresource.FieldKind, field.TypeString, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(hostresource.FieldKind, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(hostresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(hostresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(hostresource.FieldDesiredState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(hostresource.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(hostresource.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(hostresource.FieldNote, field.TypeString)
	}
	if value, ok := _u.mutation.HardwareKind(); ok {
		_spec.SetField(hostresource.FieldHardwareKind, field.TypeString, value)
	}
	if _u.mutation.HardwareKindCleared() {
		_spec.ClearField(hostresource.FieldHardwareKind, field.TypeString)
	}
	if value, ok := _u.mutation.SerialNumber(); ok {
		_spec.SetField(hostresource.FieldSerialNumber, field.TypeString, value)
	}
	if _u.mutation.SerialNumberCleared() {
		_spec.ClearField(hostresource.FieldSerialNumber, field.TypeString)
	}
	if value, ok := _u.mutation.UUID(); ok {
		_spec.SetField(hostresource.FieldUUID, field.TypeString, value)
	}
	if _u.mutation.UUIDCleared() {
		_spec.ClearField(hostresource.FieldUUID, field.TypeString)
	}
	if value, ok := _u.mutation.MemoryBytes(); ok {
		_spec.SetField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryBytes(); ok {
		_spec.AddField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if _u.mutation.MemoryBytesCleared() {
		_spec.ClearField(hostresource.FieldMemoryBytes, field.TypeUint64)
	}
	if value, ok := _u.mutation.CPUModel(); ok {
		_spec.SetField(hostresource.FieldCPUModel, field.TypeString, value)
	}
	if _u.mutation.CPUModelCleared() {
		_spec.ClearField(hostresource.FieldCPUModel, field.TypeString)
	}
	if value, ok := _u.mutation.CPUSockets(); ok {
		_spec.SetField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCPUSockets(); ok {
		_spec.AddField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if _u.mutation.CPUSocketsCleared() {
		_spec.ClearField(hostresource.FieldCPUSockets, field.TypeUint32)
	}
	if value, ok := _u.mutation.CPUCores(); ok {
		_spec.SetField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCPUCores(); ok {
		_spec.AddField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if _u.mutation.CPUCoresCleared() {
		_spec.ClearField(hostresource.FieldCPUCores, field.TypeUint32)
	}
	if value, ok := _u.mutation.CPUCapabilities(); ok {
		_spec.SetField(hostresource.FieldCPUCapabilities, field.TypeString, value)
	}
	if _u.mutation.CPUCapabilitiesCleared() {
		_spec.ClearField(hostresource.FieldCPUCapabilities, field.TypeString)
	}
	if value, ok := _u.mutation.CPUArchitecture(); ok {
		_spec.SetField(hostresource.FieldCPUArchitecture, field.TypeString, value)
	}
	if _u.mutation.CPUArchitectureCleared() {
		_spec.ClearField(hostresource.FieldCPUArchitecture, field.TypeString)
	}
	if value, ok := _u.mutation.CPUThreads(); ok {
		_spec.SetField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCPUThreads(); ok {
		_spec.AddField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if _u.mutation.CPUThreadsCleared() {
		_spec.ClearField(hostresource.FieldCPUThreads, field.TypeUint32)
	}
	if value, ok := _u.mutation.CPUTopology(); ok {
		_spec.SetField(hostresource.FieldCPUTopology, field.TypeString, value)
	}
	if _u.mutation.CPUTopologyCleared() {
		_spec.ClearField(hostresource.FieldCPUTopology, field.TypeString)
	}
	if value, ok := _u.mutation.MgmtIP(); ok {
		_spec.SetField(hostresource.FieldMgmtIP, field.TypeString, value)
	}
	if _u.mutation.MgmtIPCleared() {
		_spec.ClearField(hostresource.FieldMgmtIP, field.TypeString)
	}
	if value, ok := _u.mutation.BmcKind(); ok {
		_spec.SetField(hostresource.FieldBmcKind, field.TypeEnum, value)
	}
	if _u.mutation.BmcKindCleared() {
		_spec.ClearField(hostresource.FieldBmcKind, field.TypeEnum)
	}
	if value, ok := _u.mutation.BmcIP(); ok {
		_spec.SetField(hostresource.FieldBmcIP, field.TypeString, value)
	}
	if _u.mutation.BmcIPCleared() {
		_spec.ClearField(hostresource.FieldBmcIP, field.TypeString)
	}
	if value, ok := _u.mutation.BmcUsername(); ok {
		_spec.SetField(hostresource.FieldBmcUsername, field.TypeString, value)
	}
	if _u.mutation.BmcUsernameCleared() {
		_spec.ClearField(hostresource.FieldBmcUsername, field.TypeString)
	}
	if value, ok := _u.mutation.BmcPassword(); ok {
		_spec.SetField(hostresource.FieldBmcPassword, field.TypeString, value)
	}
	if _u.mutation.BmcPasswordCleared() {
		_spec.ClearField(hostresource.FieldBmcPassword, field.TypeString)
	}
	if value, ok := _u.mutation.PxeMAC(); ok {
		_spec.SetField(hostresource.FieldPxeMAC, field.TypeString, value)
	}
	if _u.mutation.PxeMACCleared() {
		_spec.ClearField(hostresource.FieldPxeMAC, field.TypeString)
	}
	if value, ok := _u.mutation.Hostname(); ok {
		_spec.SetField(hostresource.FieldHostname, field.TypeString, value)
	}
	if _u.mutation.HostnameCleared() {
		_spec.ClearField(hostresource.FieldHostname, field.TypeString)
	}
	if value, ok := _u.mutation.ProductName(); ok {
		_spec.SetField(hostresource.FieldProductName, field.TypeString, value)
	}
	if _u.mutation.ProductNameCleared() {
		_spec.ClearField(hostresource.FieldProductName, field.TypeString)
	}
	if value, ok := _u.mutation.BiosVersion(); ok {
		_spec.SetField(hostresource.FieldBiosVersion, field.TypeString, value)
	}
	if _u.mutation.BiosVersionCleared() {
		_spec.ClearField(hostresource.FieldBiosVersion, field.TypeString)
	}
	if value, ok := _u.mutation.BiosReleaseDate(); ok {
		_spec.SetField(hostresource.FieldBiosReleaseDate, field.TypeString, value)
	}
	if _u.mutation.BiosReleaseDateCleared() {
		_spec.ClearField(hostresource.FieldBiosReleaseDate, field.TypeString)
	}
	if value, ok := _u.mutation.BiosVendor(); ok {
		_spec.SetField(hostresource.FieldBiosVendor, field.TypeString, value)
	}
	if _u.mutation.BiosVendorCleared() {
		_spec.ClearField(hostresource.FieldBiosVendor, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(hostresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(hostresource.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredPowerState(); ok {
		_spec.SetField(hostresource.FieldDesiredPowerState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredPowerStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredPowerState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentPowerState(); ok {
		_spec.SetField(hostresource.FieldCurrentPowerState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentPowerStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentPowerState, field.TypeEnum)
	}
	if value, ok := _u.mutation.PowerStatus(); ok {
		_spec.SetField(hostresource.FieldPowerStatus, field.TypeString, value)
	}
	if _u.mutation.PowerStatusCleared() {
		_spec.ClearField(hostresource.FieldPowerStatus, field.TypeString)
	}
	if value, ok := _u.mutation.PowerStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldPowerStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.PowerStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldPowerStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.PowerStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldPowerStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedPowerStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldPowerStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.PowerStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldPowerStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.PowerCommandPolicy(); ok {
		_spec.SetField(hostresource.FieldPowerCommandPolicy, field.TypeEnum, value)
	}
	if _u.mutation.PowerCommandPolicyCleared() {
		_spec.ClearField(hostresource.FieldPowerCommandPolicy, field.TypeEnum)
	}
	if value, ok := _u.mutation.PowerOnTime(); ok {
		_spec.SetField(hostresource.FieldPowerOnTime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedPowerOnTime(); ok {
		_spec.AddField(hostresource.FieldPowerOnTime, field.TypeUint64, value)
	}
	if _u.mutation.PowerOnTimeCleared() {
		_spec.ClearField(hostresource.FieldPowerOnTime, field.TypeUint64)
	}
	if value, ok := _u.mutation.HostStatus(); ok {
		_spec.SetField(hostresource.FieldHostStatus, field.TypeString, value)
	}
	if _u.mutation.HostStatusCleared() {
		_spec.ClearField(hostresource.FieldHostStatus, field.TypeString)
	}
	if value, ok := _u.mutation.HostStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldHostStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.HostStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldHostStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.HostStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldHostStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedHostStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldHostStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.HostStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldHostStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.OnboardingStatus(); ok {
		_spec.SetField(hostresource.FieldOnboardingStatus, field.TypeString, value)
	}
	if _u.mutation.OnboardingStatusCleared() {
		_spec.ClearField(hostresource.FieldOnboardingStatus, field.TypeString)
	}
	if value, ok := _u.mutation.OnboardingStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldOnboardingStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.OnboardingStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldOnboardingStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.OnboardingStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldOnboardingStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedOnboardingStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldOnboardingStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.OnboardingStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldOnboardingStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.RegistrationStatus(); ok {
		_spec.SetField(hostresource.FieldRegistrationStatus, field.TypeString, value)
	}
	if _u.mutation.RegistrationStatusCleared() {
		_spec.ClearField(hostresource.FieldRegistrationStatus, field.TypeString)
	}
	if value, ok := _u.mutation.RegistrationStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldRegistrationStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.RegistrationStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldRegistrationStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.RegistrationStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldRegistrationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedRegistrationStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldRegistrationStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.RegistrationStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldRegistrationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.AmtSku(); ok {
		_spec.SetField(hostresource.FieldAmtSku, field.TypeEnum, value)
	}
	if _u.mutation.AmtSkuCleared() {
		_spec.ClearField(hostresource.FieldAmtSku, field.TypeEnum)
	}
	if value, ok := _u.mutation.DesiredAmtState(); ok {
		_spec.SetField(hostresource.FieldDesiredAmtState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredAmtStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredAmtState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentAmtState(); ok {
		_spec.SetField(hostresource.FieldCurrentAmtState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentAmtStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentAmtState, field.TypeEnum)
	}
	if value, ok := _u.mutation.AmtStatus(); ok {
		_spec.SetField(hostresource.FieldAmtStatus, field.TypeString, value)
	}
	if _u.mutation.AmtStatusCleared() {
		_spec.ClearField(hostresource.FieldAmtStatus, field.TypeString)
	}
	if value, ok := _u.mutation.AmtStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldAmtStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.AmtStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldAmtStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.AmtStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldAmtStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedAmtStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldAmtStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.AmtStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldAmtStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.UserLvmSize(); ok {
		_spec.SetField(hostresource.FieldUserLvmSize, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserLvmSize(); ok {
		_spec.AddField(hostresource.FieldUserLvmSize, field.TypeUint32, value)
	}
	if _u.mutation.UserLvmSizeCleared() {
		_spec.ClearField(hostresource.FieldUserLvmSize, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostStoragesIDs(); len(nodes) > 0 && !_u.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostStoragesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostNicsIDs(); len(nodes) > 0 && !_u.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostNicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostUsbsIDs(); len(nodes) > 0 && !_u.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostUsbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostGpusIDs(); len(nodes) > 0 && !_u.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostGpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HostResourceUpdateOne is the builder for updating a single HostResource entity.
type HostResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *HostResourceUpdateOne) SetResourceID(v string) *HostResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableResourceID(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *HostResourceUpdateOne) SetKind(v string) *HostResourceUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableKind(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *HostResourceUpdateOne) ClearKind() *HostResourceUpdateOne {
	_u.mutation.ClearKind()
	return _u
}

// SetName sets the "name" field.
func (_u *HostResourceUpdateOne) SetName(v string) *HostResourceUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableName(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *HostResourceUpdateOne) ClearName() *HostResourceUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *HostResourceUpdateOne) SetDesiredState(v hostresource.DesiredState) *HostResourceUpdateOne {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableDesiredState(v *hostresource.DesiredState) *HostResourceUpdateOne {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// ClearDesiredState clears the value of the "desired_state" field.
func (_u *HostResourceUpdateOne) ClearDesiredState() *HostResourceUpdateOne {
	_u.mutation.ClearDesiredState()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *HostResourceUpdateOne) SetCurrentState(v hostresource.CurrentState) *HostResourceUpdateOne {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCurrentState(v *hostresource.CurrentState) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *HostResourceUpdateOne) ClearCurrentState() *HostResourceUpdateOne {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetNote sets the "note" field.
func (_u *HostResourceUpdateOne) SetNote(v string) *HostResourceUpdateOne {
	_u.mutation.SetNote(v)
	return _u
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableNote(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetNote(*v)
	}
	return _u
}

// ClearNote clears the value of the "note" field.
func (_u *HostResourceUpdateOne) ClearNote() *HostResourceUpdateOne {
	_u.mutation.ClearNote()
	return _u
}

// SetHardwareKind sets the "hardware_kind" field.
func (_u *HostResourceUpdateOne) SetHardwareKind(v string) *HostResourceUpdateOne {
	_u.mutation.SetHardwareKind(v)
	return _u
}

// SetNillableHardwareKind sets the "hardware_kind" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableHardwareKind(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetHardwareKind(*v)
	}
	return _u
}

// ClearHardwareKind clears the value of the "hardware_kind" field.
func (_u *HostResourceUpdateOne) ClearHardwareKind() *HostResourceUpdateOne {
	_u.mutation.ClearHardwareKind()
	return _u
}

// SetSerialNumber sets the "serial_number" field.
func (_u *HostResourceUpdateOne) SetSerialNumber(v string) *HostResourceUpdateOne {
	_u.mutation.SetSerialNumber(v)
	return _u
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableSerialNumber(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetSerialNumber(*v)
	}
	return _u
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (_u *HostResourceUpdateOne) ClearSerialNumber() *HostResourceUpdateOne {
	_u.mutation.ClearSerialNumber()
	return _u
}

// SetUUID sets the "uuid" field.
func (_u *HostResourceUpdateOne) SetUUID(v string) *HostResourceUpdateOne {
	_u.mutation.SetUUID(v)
	return _u
}

// SetNillableUUID sets the "uuid" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableUUID(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetUUID(*v)
	}
	return _u
}

// ClearUUID clears the value of the "uuid" field.
func (_u *HostResourceUpdateOne) ClearUUID() *HostResourceUpdateOne {
	_u.mutation.ClearUUID()
	return _u
}

// SetMemoryBytes sets the "memory_bytes" field.
func (_u *HostResourceUpdateOne) SetMemoryBytes(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetMemoryBytes()
	_u.mutation.SetMemoryBytes(v)
	return _u
}

// SetNillableMemoryBytes sets the "memory_bytes" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableMemoryBytes(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetMemoryBytes(*v)
	}
	return _u
}

// AddMemoryBytes adds value to the "memory_bytes" field.
func (_u *HostResourceUpdateOne) AddMemoryBytes(v int64) *HostResourceUpdateOne {
	_u.mutation.AddMemoryBytes(v)
	return _u
}

// ClearMemoryBytes clears the value of the "memory_bytes" field.
func (_u *HostResourceUpdateOne) ClearMemoryBytes() *HostResourceUpdateOne {
	_u.mutation.ClearMemoryBytes()
	return _u
}

// SetCPUModel sets the "cpu_model" field.
func (_u *HostResourceUpdateOne) SetCPUModel(v string) *HostResourceUpdateOne {
	_u.mutation.SetCPUModel(v)
	return _u
}

// SetNillableCPUModel sets the "cpu_model" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUModel(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUModel(*v)
	}
	return _u
}

// ClearCPUModel clears the value of the "cpu_model" field.
func (_u *HostResourceUpdateOne) ClearCPUModel() *HostResourceUpdateOne {
	_u.mutation.ClearCPUModel()
	return _u
}

// SetCPUSockets sets the "cpu_sockets" field.
func (_u *HostResourceUpdateOne) SetCPUSockets(v uint32) *HostResourceUpdateOne {
	_u.mutation.ResetCPUSockets()
	_u.mutation.SetCPUSockets(v)
	return _u
}

// SetNillableCPUSockets sets the "cpu_sockets" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUSockets(v *uint32) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUSockets(*v)
	}
	return _u
}

// AddCPUSockets adds value to the "cpu_sockets" field.
func (_u *HostResourceUpdateOne) AddCPUSockets(v int32) *HostResourceUpdateOne {
	_u.mutation.AddCPUSockets(v)
	return _u
}

// ClearCPUSockets clears the value of the "cpu_sockets" field.
func (_u *HostResourceUpdateOne) ClearCPUSockets() *HostResourceUpdateOne {
	_u.mutation.ClearCPUSockets()
	return _u
}

// SetCPUCores sets the "cpu_cores" field.
func (_u *HostResourceUpdateOne) SetCPUCores(v uint32) *HostResourceUpdateOne {
	_u.mutation.ResetCPUCores()
	_u.mutation.SetCPUCores(v)
	return _u
}

// SetNillableCPUCores sets the "cpu_cores" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUCores(v *uint32) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUCores(*v)
	}
	return _u
}

// AddCPUCores adds value to the "cpu_cores" field.
func (_u *HostResourceUpdateOne) AddCPUCores(v int32) *HostResourceUpdateOne {
	_u.mutation.AddCPUCores(v)
	return _u
}

// ClearCPUCores clears the value of the "cpu_cores" field.
func (_u *HostResourceUpdateOne) ClearCPUCores() *HostResourceUpdateOne {
	_u.mutation.ClearCPUCores()
	return _u
}

// SetCPUCapabilities sets the "cpu_capabilities" field.
func (_u *HostResourceUpdateOne) SetCPUCapabilities(v string) *HostResourceUpdateOne {
	_u.mutation.SetCPUCapabilities(v)
	return _u
}

// SetNillableCPUCapabilities sets the "cpu_capabilities" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUCapabilities(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUCapabilities(*v)
	}
	return _u
}

// ClearCPUCapabilities clears the value of the "cpu_capabilities" field.
func (_u *HostResourceUpdateOne) ClearCPUCapabilities() *HostResourceUpdateOne {
	_u.mutation.ClearCPUCapabilities()
	return _u
}

// SetCPUArchitecture sets the "cpu_architecture" field.
func (_u *HostResourceUpdateOne) SetCPUArchitecture(v string) *HostResourceUpdateOne {
	_u.mutation.SetCPUArchitecture(v)
	return _u
}

// SetNillableCPUArchitecture sets the "cpu_architecture" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUArchitecture(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUArchitecture(*v)
	}
	return _u
}

// ClearCPUArchitecture clears the value of the "cpu_architecture" field.
func (_u *HostResourceUpdateOne) ClearCPUArchitecture() *HostResourceUpdateOne {
	_u.mutation.ClearCPUArchitecture()
	return _u
}

// SetCPUThreads sets the "cpu_threads" field.
func (_u *HostResourceUpdateOne) SetCPUThreads(v uint32) *HostResourceUpdateOne {
	_u.mutation.ResetCPUThreads()
	_u.mutation.SetCPUThreads(v)
	return _u
}

// SetNillableCPUThreads sets the "cpu_threads" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUThreads(v *uint32) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUThreads(*v)
	}
	return _u
}

// AddCPUThreads adds value to the "cpu_threads" field.
func (_u *HostResourceUpdateOne) AddCPUThreads(v int32) *HostResourceUpdateOne {
	_u.mutation.AddCPUThreads(v)
	return _u
}

// ClearCPUThreads clears the value of the "cpu_threads" field.
func (_u *HostResourceUpdateOne) ClearCPUThreads() *HostResourceUpdateOne {
	_u.mutation.ClearCPUThreads()
	return _u
}

// SetCPUTopology sets the "cpu_topology" field.
func (_u *HostResourceUpdateOne) SetCPUTopology(v string) *HostResourceUpdateOne {
	_u.mutation.SetCPUTopology(v)
	return _u
}

// SetNillableCPUTopology sets the "cpu_topology" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCPUTopology(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCPUTopology(*v)
	}
	return _u
}

// ClearCPUTopology clears the value of the "cpu_topology" field.
func (_u *HostResourceUpdateOne) ClearCPUTopology() *HostResourceUpdateOne {
	_u.mutation.ClearCPUTopology()
	return _u
}

// SetMgmtIP sets the "mgmt_ip" field.
func (_u *HostResourceUpdateOne) SetMgmtIP(v string) *HostResourceUpdateOne {
	_u.mutation.SetMgmtIP(v)
	return _u
}

// SetNillableMgmtIP sets the "mgmt_ip" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableMgmtIP(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetMgmtIP(*v)
	}
	return _u
}

// ClearMgmtIP clears the value of the "mgmt_ip" field.
func (_u *HostResourceUpdateOne) ClearMgmtIP() *HostResourceUpdateOne {
	_u.mutation.ClearMgmtIP()
	return _u
}

// SetBmcKind sets the "bmc_kind" field.
func (_u *HostResourceUpdateOne) SetBmcKind(v hostresource.BmcKind) *HostResourceUpdateOne {
	_u.mutation.SetBmcKind(v)
	return _u
}

// SetNillableBmcKind sets the "bmc_kind" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBmcKind(v *hostresource.BmcKind) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBmcKind(*v)
	}
	return _u
}

// ClearBmcKind clears the value of the "bmc_kind" field.
func (_u *HostResourceUpdateOne) ClearBmcKind() *HostResourceUpdateOne {
	_u.mutation.ClearBmcKind()
	return _u
}

// SetBmcIP sets the "bmc_ip" field.
func (_u *HostResourceUpdateOne) SetBmcIP(v string) *HostResourceUpdateOne {
	_u.mutation.SetBmcIP(v)
	return _u
}

// SetNillableBmcIP sets the "bmc_ip" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBmcIP(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBmcIP(*v)
	}
	return _u
}

// ClearBmcIP clears the value of the "bmc_ip" field.
func (_u *HostResourceUpdateOne) ClearBmcIP() *HostResourceUpdateOne {
	_u.mutation.ClearBmcIP()
	return _u
}

// SetBmcUsername sets the "bmc_username" field.
func (_u *HostResourceUpdateOne) SetBmcUsername(v string) *HostResourceUpdateOne {
	_u.mutation.SetBmcUsername(v)
	return _u
}

// SetNillableBmcUsername sets the "bmc_username" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBmcUsername(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBmcUsername(*v)
	}
	return _u
}

// ClearBmcUsername clears the value of the "bmc_username" field.
func (_u *HostResourceUpdateOne) ClearBmcUsername() *HostResourceUpdateOne {
	_u.mutation.ClearBmcUsername()
	return _u
}

// SetBmcPassword sets the "bmc_password" field.
func (_u *HostResourceUpdateOne) SetBmcPassword(v string) *HostResourceUpdateOne {
	_u.mutation.SetBmcPassword(v)
	return _u
}

// SetNillableBmcPassword sets the "bmc_password" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBmcPassword(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBmcPassword(*v)
	}
	return _u
}

// ClearBmcPassword clears the value of the "bmc_password" field.
func (_u *HostResourceUpdateOne) ClearBmcPassword() *HostResourceUpdateOne {
	_u.mutation.ClearBmcPassword()
	return _u
}

// SetPxeMAC sets the "pxe_mac" field.
func (_u *HostResourceUpdateOne) SetPxeMAC(v string) *HostResourceUpdateOne {
	_u.mutation.SetPxeMAC(v)
	return _u
}

// SetNillablePxeMAC sets the "pxe_mac" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillablePxeMAC(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetPxeMAC(*v)
	}
	return _u
}

// ClearPxeMAC clears the value of the "pxe_mac" field.
func (_u *HostResourceUpdateOne) ClearPxeMAC() *HostResourceUpdateOne {
	_u.mutation.ClearPxeMAC()
	return _u
}

// SetHostname sets the "hostname" field.
func (_u *HostResourceUpdateOne) SetHostname(v string) *HostResourceUpdateOne {
	_u.mutation.SetHostname(v)
	return _u
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableHostname(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetHostname(*v)
	}
	return _u
}

// ClearHostname clears the value of the "hostname" field.
func (_u *HostResourceUpdateOne) ClearHostname() *HostResourceUpdateOne {
	_u.mutation.ClearHostname()
	return _u
}

// SetProductName sets the "product_name" field.
func (_u *HostResourceUpdateOne) SetProductName(v string) *HostResourceUpdateOne {
	_u.mutation.SetProductName(v)
	return _u
}

// SetNillableProductName sets the "product_name" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableProductName(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetProductName(*v)
	}
	return _u
}

// ClearProductName clears the value of the "product_name" field.
func (_u *HostResourceUpdateOne) ClearProductName() *HostResourceUpdateOne {
	_u.mutation.ClearProductName()
	return _u
}

// SetBiosVersion sets the "bios_version" field.
func (_u *HostResourceUpdateOne) SetBiosVersion(v string) *HostResourceUpdateOne {
	_u.mutation.SetBiosVersion(v)
	return _u
}

// SetNillableBiosVersion sets the "bios_version" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBiosVersion(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBiosVersion(*v)
	}
	return _u
}

// ClearBiosVersion clears the value of the "bios_version" field.
func (_u *HostResourceUpdateOne) ClearBiosVersion() *HostResourceUpdateOne {
	_u.mutation.ClearBiosVersion()
	return _u
}

// SetBiosReleaseDate sets the "bios_release_date" field.
func (_u *HostResourceUpdateOne) SetBiosReleaseDate(v string) *HostResourceUpdateOne {
	_u.mutation.SetBiosReleaseDate(v)
	return _u
}

// SetNillableBiosReleaseDate sets the "bios_release_date" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBiosReleaseDate(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBiosReleaseDate(*v)
	}
	return _u
}

// ClearBiosReleaseDate clears the value of the "bios_release_date" field.
func (_u *HostResourceUpdateOne) ClearBiosReleaseDate() *HostResourceUpdateOne {
	_u.mutation.ClearBiosReleaseDate()
	return _u
}

// SetBiosVendor sets the "bios_vendor" field.
func (_u *HostResourceUpdateOne) SetBiosVendor(v string) *HostResourceUpdateOne {
	_u.mutation.SetBiosVendor(v)
	return _u
}

// SetNillableBiosVendor sets the "bios_vendor" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableBiosVendor(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetBiosVendor(*v)
	}
	return _u
}

// ClearBiosVendor clears the value of the "bios_vendor" field.
func (_u *HostResourceUpdateOne) ClearBiosVendor() *HostResourceUpdateOne {
	_u.mutation.ClearBiosVendor()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *HostResourceUpdateOne) SetMetadata(v string) *HostResourceUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableMetadata(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetMetadata(*v)
	}
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *HostResourceUpdateOne) ClearMetadata() *HostResourceUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// SetDesiredPowerState sets the "desired_power_state" field.
func (_u *HostResourceUpdateOne) SetDesiredPowerState(v hostresource.DesiredPowerState) *HostResourceUpdateOne {
	_u.mutation.SetDesiredPowerState(v)
	return _u
}

// SetNillableDesiredPowerState sets the "desired_power_state" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableDesiredPowerState(v *hostresource.DesiredPowerState) *HostResourceUpdateOne {
	if v != nil {
		_u.SetDesiredPowerState(*v)
	}
	return _u
}

// ClearDesiredPowerState clears the value of the "desired_power_state" field.
func (_u *HostResourceUpdateOne) ClearDesiredPowerState() *HostResourceUpdateOne {
	_u.mutation.ClearDesiredPowerState()
	return _u
}

// SetCurrentPowerState sets the "current_power_state" field.
func (_u *HostResourceUpdateOne) SetCurrentPowerState(v hostresource.CurrentPowerState) *HostResourceUpdateOne {
	_u.mutation.SetCurrentPowerState(v)
	return _u
}

// SetNillableCurrentPowerState sets the "current_power_state" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCurrentPowerState(v *hostresource.CurrentPowerState) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCurrentPowerState(*v)
	}
	return _u
}

// ClearCurrentPowerState clears the value of the "current_power_state" field.
func (_u *HostResourceUpdateOne) ClearCurrentPowerState() *HostResourceUpdateOne {
	_u.mutation.ClearCurrentPowerState()
	return _u
}

// SetPowerStatus sets the "power_status" field.
func (_u *HostResourceUpdateOne) SetPowerStatus(v string) *HostResourceUpdateOne {
	_u.mutation.SetPowerStatus(v)
	return _u
}

// SetNillablePowerStatus sets the "power_status" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillablePowerStatus(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetPowerStatus(*v)
	}
	return _u
}

// ClearPowerStatus clears the value of the "power_status" field.
func (_u *HostResourceUpdateOne) ClearPowerStatus() *HostResourceUpdateOne {
	_u.mutation.ClearPowerStatus()
	return _u
}

// SetPowerStatusIndicator sets the "power_status_indicator" field.
func (_u *HostResourceUpdateOne) SetPowerStatusIndicator(v hostresource.PowerStatusIndicator) *HostResourceUpdateOne {
	_u.mutation.SetPowerStatusIndicator(v)
	return _u
}

// SetNillablePowerStatusIndicator sets the "power_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillablePowerStatusIndicator(v *hostresource.PowerStatusIndicator) *HostResourceUpdateOne {
	if v != nil {
		_u.SetPowerStatusIndicator(*v)
	}
	return _u
}

// ClearPowerStatusIndicator clears the value of the "power_status_indicator" field.
func (_u *HostResourceUpdateOne) ClearPowerStatusIndicator() *HostResourceUpdateOne {
	_u.mutation.ClearPowerStatusIndicator()
	return _u
}

// SetPowerStatusTimestamp sets the "power_status_timestamp" field.
func (_u *HostResourceUpdateOne) SetPowerStatusTimestamp(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetPowerStatusTimestamp()
	_u.mutation.SetPowerStatusTimestamp(v)
	return _u
}

// SetNillablePowerStatusTimestamp sets the "power_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillablePowerStatusTimestamp(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetPowerStatusTimestamp(*v)
	}
	return _u
}

// AddPowerStatusTimestamp adds value to the "power_status_timestamp" field.
func (_u *HostResourceUpdateOne) AddPowerStatusTimestamp(v int64) *HostResourceUpdateOne {
	_u.mutation.AddPowerStatusTimestamp(v)
	return _u
}

// ClearPowerStatusTimestamp clears the value of the "power_status_timestamp" field.
func (_u *HostResourceUpdateOne) ClearPowerStatusTimestamp() *HostResourceUpdateOne {
	_u.mutation.ClearPowerStatusTimestamp()
	return _u
}

// SetPowerCommandPolicy sets the "power_command_policy" field.
func (_u *HostResourceUpdateOne) SetPowerCommandPolicy(v hostresource.PowerCommandPolicy) *HostResourceUpdateOne {
	_u.mutation.SetPowerCommandPolicy(v)
	return _u
}

// SetNillablePowerCommandPolicy sets the "power_command_policy" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillablePowerCommandPolicy(v *hostresource.PowerCommandPolicy) *HostResourceUpdateOne {
	if v != nil {
		_u.SetPowerCommandPolicy(*v)
	}
	return _u
}

// ClearPowerCommandPolicy clears the value of the "power_command_policy" field.
func (_u *HostResourceUpdateOne) ClearPowerCommandPolicy() *HostResourceUpdateOne {
	_u.mutation.ClearPowerCommandPolicy()
	return _u
}

// SetPowerOnTime sets the "power_on_time" field.
func (_u *HostResourceUpdateOne) SetPowerOnTime(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetPowerOnTime()
	_u.mutation.SetPowerOnTime(v)
	return _u
}

// SetNillablePowerOnTime sets the "power_on_time" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillablePowerOnTime(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetPowerOnTime(*v)
	}
	return _u
}

// AddPowerOnTime adds value to the "power_on_time" field.
func (_u *HostResourceUpdateOne) AddPowerOnTime(v int64) *HostResourceUpdateOne {
	_u.mutation.AddPowerOnTime(v)
	return _u
}

// ClearPowerOnTime clears the value of the "power_on_time" field.
func (_u *HostResourceUpdateOne) ClearPowerOnTime() *HostResourceUpdateOne {
	_u.mutation.ClearPowerOnTime()
	return _u
}

// SetHostStatus sets the "host_status" field.
func (_u *HostResourceUpdateOne) SetHostStatus(v string) *HostResourceUpdateOne {
	_u.mutation.SetHostStatus(v)
	return _u
}

// SetNillableHostStatus sets the "host_status" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableHostStatus(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetHostStatus(*v)
	}
	return _u
}

// ClearHostStatus clears the value of the "host_status" field.
func (_u *HostResourceUpdateOne) ClearHostStatus() *HostResourceUpdateOne {
	_u.mutation.ClearHostStatus()
	return _u
}

// SetHostStatusIndicator sets the "host_status_indicator" field.
func (_u *HostResourceUpdateOne) SetHostStatusIndicator(v hostresource.HostStatusIndicator) *HostResourceUpdateOne {
	_u.mutation.SetHostStatusIndicator(v)
	return _u
}

// SetNillableHostStatusIndicator sets the "host_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableHostStatusIndicator(v *hostresource.HostStatusIndicator) *HostResourceUpdateOne {
	if v != nil {
		_u.SetHostStatusIndicator(*v)
	}
	return _u
}

// ClearHostStatusIndicator clears the value of the "host_status_indicator" field.
func (_u *HostResourceUpdateOne) ClearHostStatusIndicator() *HostResourceUpdateOne {
	_u.mutation.ClearHostStatusIndicator()
	return _u
}

// SetHostStatusTimestamp sets the "host_status_timestamp" field.
func (_u *HostResourceUpdateOne) SetHostStatusTimestamp(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetHostStatusTimestamp()
	_u.mutation.SetHostStatusTimestamp(v)
	return _u
}

// SetNillableHostStatusTimestamp sets the "host_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableHostStatusTimestamp(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetHostStatusTimestamp(*v)
	}
	return _u
}

// AddHostStatusTimestamp adds value to the "host_status_timestamp" field.
func (_u *HostResourceUpdateOne) AddHostStatusTimestamp(v int64) *HostResourceUpdateOne {
	_u.mutation.AddHostStatusTimestamp(v)
	return _u
}

// ClearHostStatusTimestamp clears the value of the "host_status_timestamp" field.
func (_u *HostResourceUpdateOne) ClearHostStatusTimestamp() *HostResourceUpdateOne {
	_u.mutation.ClearHostStatusTimestamp()
	return _u
}

// SetOnboardingStatus sets the "onboarding_status" field.
func (_u *HostResourceUpdateOne) SetOnboardingStatus(v string) *HostResourceUpdateOne {
	_u.mutation.SetOnboardingStatus(v)
	return _u
}

// SetNillableOnboardingStatus sets the "onboarding_status" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableOnboardingStatus(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetOnboardingStatus(*v)
	}
	return _u
}

// ClearOnboardingStatus clears the value of the "onboarding_status" field.
func (_u *HostResourceUpdateOne) ClearOnboardingStatus() *HostResourceUpdateOne {
	_u.mutation.ClearOnboardingStatus()
	return _u
}

// SetOnboardingStatusIndicator sets the "onboarding_status_indicator" field.
func (_u *HostResourceUpdateOne) SetOnboardingStatusIndicator(v hostresource.OnboardingStatusIndicator) *HostResourceUpdateOne {
	_u.mutation.SetOnboardingStatusIndicator(v)
	return _u
}

// SetNillableOnboardingStatusIndicator sets the "onboarding_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableOnboardingStatusIndicator(v *hostresource.OnboardingStatusIndicator) *HostResourceUpdateOne {
	if v != nil {
		_u.SetOnboardingStatusIndicator(*v)
	}
	return _u
}

// ClearOnboardingStatusIndicator clears the value of the "onboarding_status_indicator" field.
func (_u *HostResourceUpdateOne) ClearOnboardingStatusIndicator() *HostResourceUpdateOne {
	_u.mutation.ClearOnboardingStatusIndicator()
	return _u
}

// SetOnboardingStatusTimestamp sets the "onboarding_status_timestamp" field.
func (_u *HostResourceUpdateOne) SetOnboardingStatusTimestamp(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetOnboardingStatusTimestamp()
	_u.mutation.SetOnboardingStatusTimestamp(v)
	return _u
}

// SetNillableOnboardingStatusTimestamp sets the "onboarding_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableOnboardingStatusTimestamp(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetOnboardingStatusTimestamp(*v)
	}
	return _u
}

// AddOnboardingStatusTimestamp adds value to the "onboarding_status_timestamp" field.
func (_u *HostResourceUpdateOne) AddOnboardingStatusTimestamp(v int64) *HostResourceUpdateOne {
	_u.mutation.AddOnboardingStatusTimestamp(v)
	return _u
}

// ClearOnboardingStatusTimestamp clears the value of the "onboarding_status_timestamp" field.
func (_u *HostResourceUpdateOne) ClearOnboardingStatusTimestamp() *HostResourceUpdateOne {
	_u.mutation.ClearOnboardingStatusTimestamp()
	return _u
}

// SetRegistrationStatus sets the "registration_status" field.
func (_u *HostResourceUpdateOne) SetRegistrationStatus(v string) *HostResourceUpdateOne {
	_u.mutation.SetRegistrationStatus(v)
	return _u
}

// SetNillableRegistrationStatus sets the "registration_status" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableRegistrationStatus(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetRegistrationStatus(*v)
	}
	return _u
}

// ClearRegistrationStatus clears the value of the "registration_status" field.
func (_u *HostResourceUpdateOne) ClearRegistrationStatus() *HostResourceUpdateOne {
	_u.mutation.ClearRegistrationStatus()
	return _u
}

// SetRegistrationStatusIndicator sets the "registration_status_indicator" field.
func (_u *HostResourceUpdateOne) SetRegistrationStatusIndicator(v hostresource.RegistrationStatusIndicator) *HostResourceUpdateOne {
	_u.mutation.SetRegistrationStatusIndicator(v)
	return _u
}

// SetNillableRegistrationStatusIndicator sets the "registration_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableRegistrationStatusIndicator(v *hostresource.RegistrationStatusIndicator) *HostResourceUpdateOne {
	if v != nil {
		_u.SetRegistrationStatusIndicator(*v)
	}
	return _u
}

// ClearRegistrationStatusIndicator clears the value of the "registration_status_indicator" field.
func (_u *HostResourceUpdateOne) ClearRegistrationStatusIndicator() *HostResourceUpdateOne {
	_u.mutation.ClearRegistrationStatusIndicator()
	return _u
}

// SetRegistrationStatusTimestamp sets the "registration_status_timestamp" field.
func (_u *HostResourceUpdateOne) SetRegistrationStatusTimestamp(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetRegistrationStatusTimestamp()
	_u.mutation.SetRegistrationStatusTimestamp(v)
	return _u
}

// SetNillableRegistrationStatusTimestamp sets the "registration_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableRegistrationStatusTimestamp(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetRegistrationStatusTimestamp(*v)
	}
	return _u
}

// AddRegistrationStatusTimestamp adds value to the "registration_status_timestamp" field.
func (_u *HostResourceUpdateOne) AddRegistrationStatusTimestamp(v int64) *HostResourceUpdateOne {
	_u.mutation.AddRegistrationStatusTimestamp(v)
	return _u
}

// ClearRegistrationStatusTimestamp clears the value of the "registration_status_timestamp" field.
func (_u *HostResourceUpdateOne) ClearRegistrationStatusTimestamp() *HostResourceUpdateOne {
	_u.mutation.ClearRegistrationStatusTimestamp()
	return _u
}

// SetAmtSku sets the "amt_sku" field.
func (_u *HostResourceUpdateOne) SetAmtSku(v hostresource.AmtSku) *HostResourceUpdateOne {
	_u.mutation.SetAmtSku(v)
	return _u
}

// SetNillableAmtSku sets the "amt_sku" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableAmtSku(v *hostresource.AmtSku) *HostResourceUpdateOne {
	if v != nil {
		_u.SetAmtSku(*v)
	}
	return _u
}

// ClearAmtSku clears the value of the "amt_sku" field.
func (_u *HostResourceUpdateOne) ClearAmtSku() *HostResourceUpdateOne {
	_u.mutation.ClearAmtSku()
	return _u
}

// SetDesiredAmtState sets the "desired_amt_state" field.
func (_u *HostResourceUpdateOne) SetDesiredAmtState(v hostresource.DesiredAmtState) *HostResourceUpdateOne {
	_u.mutation.SetDesiredAmtState(v)
	return _u
}

// SetNillableDesiredAmtState sets the "desired_amt_state" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableDesiredAmtState(v *hostresource.DesiredAmtState) *HostResourceUpdateOne {
	if v != nil {
		_u.SetDesiredAmtState(*v)
	}
	return _u
}

// ClearDesiredAmtState clears the value of the "desired_amt_state" field.
func (_u *HostResourceUpdateOne) ClearDesiredAmtState() *HostResourceUpdateOne {
	_u.mutation.ClearDesiredAmtState()
	return _u
}

// SetCurrentAmtState sets the "current_amt_state" field.
func (_u *HostResourceUpdateOne) SetCurrentAmtState(v hostresource.CurrentAmtState) *HostResourceUpdateOne {
	_u.mutation.SetCurrentAmtState(v)
	return _u
}

// SetNillableCurrentAmtState sets the "current_amt_state" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableCurrentAmtState(v *hostresource.CurrentAmtState) *HostResourceUpdateOne {
	if v != nil {
		_u.SetCurrentAmtState(*v)
	}
	return _u
}

// ClearCurrentAmtState clears the value of the "current_amt_state" field.
func (_u *HostResourceUpdateOne) ClearCurrentAmtState() *HostResourceUpdateOne {
	_u.mutation.ClearCurrentAmtState()
	return _u
}

// SetAmtStatus sets the "amt_status" field.
func (_u *HostResourceUpdateOne) SetAmtStatus(v string) *HostResourceUpdateOne {
	_u.mutation.SetAmtStatus(v)
	return _u
}

// SetNillableAmtStatus sets the "amt_status" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableAmtStatus(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetAmtStatus(*v)
	}
	return _u
}

// ClearAmtStatus clears the value of the "amt_status" field.
func (_u *HostResourceUpdateOne) ClearAmtStatus() *HostResourceUpdateOne {
	_u.mutation.ClearAmtStatus()
	return _u
}

// SetAmtStatusIndicator sets the "amt_status_indicator" field.
func (_u *HostResourceUpdateOne) SetAmtStatusIndicator(v hostresource.AmtStatusIndicator) *HostResourceUpdateOne {
	_u.mutation.SetAmtStatusIndicator(v)
	return _u
}

// SetNillableAmtStatusIndicator sets the "amt_status_indicator" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableAmtStatusIndicator(v *hostresource.AmtStatusIndicator) *HostResourceUpdateOne {
	if v != nil {
		_u.SetAmtStatusIndicator(*v)
	}
	return _u
}

// ClearAmtStatusIndicator clears the value of the "amt_status_indicator" field.
func (_u *HostResourceUpdateOne) ClearAmtStatusIndicator() *HostResourceUpdateOne {
	_u.mutation.ClearAmtStatusIndicator()
	return _u
}

// SetAmtStatusTimestamp sets the "amt_status_timestamp" field.
func (_u *HostResourceUpdateOne) SetAmtStatusTimestamp(v uint64) *HostResourceUpdateOne {
	_u.mutation.ResetAmtStatusTimestamp()
	_u.mutation.SetAmtStatusTimestamp(v)
	return _u
}

// SetNillableAmtStatusTimestamp sets the "amt_status_timestamp" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableAmtStatusTimestamp(v *uint64) *HostResourceUpdateOne {
	if v != nil {
		_u.SetAmtStatusTimestamp(*v)
	}
	return _u
}

// AddAmtStatusTimestamp adds value to the "amt_status_timestamp" field.
func (_u *HostResourceUpdateOne) AddAmtStatusTimestamp(v int64) *HostResourceUpdateOne {
	_u.mutation.AddAmtStatusTimestamp(v)
	return _u
}

// ClearAmtStatusTimestamp clears the value of the "amt_status_timestamp" field.
func (_u *HostResourceUpdateOne) ClearAmtStatusTimestamp() *HostResourceUpdateOne {
	_u.mutation.ClearAmtStatusTimestamp()
	return _u
}

// SetUserLvmSize sets the "user_lvm_size" field.
func (_u *HostResourceUpdateOne) SetUserLvmSize(v uint32) *HostResourceUpdateOne {
	_u.mutation.ResetUserLvmSize()
	_u.mutation.SetUserLvmSize(v)
	return _u
}

// SetNillableUserLvmSize sets the "user_lvm_size" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableUserLvmSize(v *uint32) *HostResourceUpdateOne {
	if v != nil {
		_u.SetUserLvmSize(*v)
	}
	return _u
}

// AddUserLvmSize adds value to the "user_lvm_size" field.
func (_u *HostResourceUpdateOne) AddUserLvmSize(v int32) *HostResourceUpdateOne {
	_u.mutation.AddUserLvmSize(v)
	return _u
}

// ClearUserLvmSize clears the value of the "user_lvm_size" field.
func (_u *HostResourceUpdateOne) ClearUserLvmSize() *HostResourceUpdateOne {
	_u.mutation.ClearUserLvmSize()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostResourceUpdateOne) SetUpdatedAt(v string) *HostResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableUpdatedAt(v *string) *HostResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetSiteID sets the "site" edge to the SiteResource entity by ID.
func (_u *HostResourceUpdateOne) SetSiteID(id int) *HostResourceUpdateOne {
	_u.mutation.SetSiteID(id)
	return _u
}

// SetNillableSiteID sets the "site" edge to the SiteResource entity by ID if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableSiteID(id *int) *HostResourceUpdateOne {
	if id != nil {
		_u = _u.SetSiteID(*id)
	}
	return _u
}

// SetSite sets the "site" edge to the SiteResource entity.
func (_u *HostResourceUpdateOne) SetSite(v *SiteResource) *HostResourceUpdateOne {
	return _u.SetSiteID(v.ID)
}

// SetProviderID sets the "provider" edge to the ProviderResource entity by ID.
func (_u *HostResourceUpdateOne) SetProviderID(id int) *HostResourceUpdateOne {
	_u.mutation.SetProviderID(id)
	return _u
}

// SetNillableProviderID sets the "provider" edge to the ProviderResource entity by ID if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableProviderID(id *int) *HostResourceUpdateOne {
	if id != nil {
		_u = _u.SetProviderID(*id)
	}
	return _u
}

// SetProvider sets the "provider" edge to the ProviderResource entity.
func (_u *HostResourceUpdateOne) SetProvider(v *ProviderResource) *HostResourceUpdateOne {
	return _u.SetProviderID(v.ID)
}

// AddHostStorageIDs adds the "host_storages" edge to the HoststorageResource entity by IDs.
func (_u *HostResourceUpdateOne) AddHostStorageIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.AddHostStorageIDs(ids...)
	return _u
}

// AddHostStorages adds the "host_storages" edges to the HoststorageResource entity.
func (_u *HostResourceUpdateOne) AddHostStorages(v ...*HoststorageResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostStorageIDs(ids...)
}

// AddHostNicIDs adds the "host_nics" edge to the HostnicResource entity by IDs.
func (_u *HostResourceUpdateOne) AddHostNicIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.AddHostNicIDs(ids...)
	return _u
}

// AddHostNics adds the "host_nics" edges to the HostnicResource entity.
func (_u *HostResourceUpdateOne) AddHostNics(v ...*HostnicResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostNicIDs(ids...)
}

// AddHostUsbIDs adds the "host_usbs" edge to the HostusbResource entity by IDs.
func (_u *HostResourceUpdateOne) AddHostUsbIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.AddHostUsbIDs(ids...)
	return _u
}

// AddHostUsbs adds the "host_usbs" edges to the HostusbResource entity.
func (_u *HostResourceUpdateOne) AddHostUsbs(v ...*HostusbResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostUsbIDs(ids...)
}

// AddHostGpuIDs adds the "host_gpus" edge to the HostgpuResource entity by IDs.
func (_u *HostResourceUpdateOne) AddHostGpuIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.AddHostGpuIDs(ids...)
	return _u
}

// AddHostGpus adds the "host_gpus" edges to the HostgpuResource entity.
func (_u *HostResourceUpdateOne) AddHostGpus(v ...*HostgpuResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHostGpuIDs(ids...)
}

// SetInstanceID sets the "instance" edge to the InstanceResource entity by ID.
func (_u *HostResourceUpdateOne) SetInstanceID(id int) *HostResourceUpdateOne {
	_u.mutation.SetInstanceID(id)
	return _u
}

// SetNillableInstanceID sets the "instance" edge to the InstanceResource entity by ID if the given value is not nil.
func (_u *HostResourceUpdateOne) SetNillableInstanceID(id *int) *HostResourceUpdateOne {
	if id != nil {
		_u = _u.SetInstanceID(*id)
	}
	return _u
}

// SetInstance sets the "instance" edge to the InstanceResource entity.
func (_u *HostResourceUpdateOne) SetInstance(v *InstanceResource) *HostResourceUpdateOne {
	return _u.SetInstanceID(v.ID)
}

// Mutation returns the HostResourceMutation object of the builder.
func (_u *HostResourceUpdateOne) Mutation() *HostResourceMutation {
	return _u.mutation
}

// ClearSite clears the "site" edge to the SiteResource entity.
func (_u *HostResourceUpdateOne) ClearSite() *HostResourceUpdateOne {
	_u.mutation.ClearSite()
	return _u
}

// ClearProvider clears the "provider" edge to the ProviderResource entity.
func (_u *HostResourceUpdateOne) ClearProvider() *HostResourceUpdateOne {
	_u.mutation.ClearProvider()
	return _u
}

// ClearHostStorages clears all "host_storages" edges to the HoststorageResource entity.
func (_u *HostResourceUpdateOne) ClearHostStorages() *HostResourceUpdateOne {
	_u.mutation.ClearHostStorages()
	return _u
}

// RemoveHostStorageIDs removes the "host_storages" edge to HoststorageResource entities by IDs.
func (_u *HostResourceUpdateOne) RemoveHostStorageIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.RemoveHostStorageIDs(ids...)
	return _u
}

// RemoveHostStorages removes "host_storages" edges to HoststorageResource entities.
func (_u *HostResourceUpdateOne) RemoveHostStorages(v ...*HoststorageResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostStorageIDs(ids...)
}

// ClearHostNics clears all "host_nics" edges to the HostnicResource entity.
func (_u *HostResourceUpdateOne) ClearHostNics() *HostResourceUpdateOne {
	_u.mutation.ClearHostNics()
	return _u
}

// RemoveHostNicIDs removes the "host_nics" edge to HostnicResource entities by IDs.
func (_u *HostResourceUpdateOne) RemoveHostNicIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.RemoveHostNicIDs(ids...)
	return _u
}

// RemoveHostNics removes "host_nics" edges to HostnicResource entities.
func (_u *HostResourceUpdateOne) RemoveHostNics(v ...*HostnicResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostNicIDs(ids...)
}

// ClearHostUsbs clears all "host_usbs" edges to the HostusbResource entity.
func (_u *HostResourceUpdateOne) ClearHostUsbs() *HostResourceUpdateOne {
	_u.mutation.ClearHostUsbs()
	return _u
}

// RemoveHostUsbIDs removes the "host_usbs" edge to HostusbResource entities by IDs.
func (_u *HostResourceUpdateOne) RemoveHostUsbIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.RemoveHostUsbIDs(ids...)
	return _u
}

// RemoveHostUsbs removes "host_usbs" edges to HostusbResource entities.
func (_u *HostResourceUpdateOne) RemoveHostUsbs(v ...*HostusbResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostUsbIDs(ids...)
}

// ClearHostGpus clears all "host_gpus" edges to the HostgpuResource entity.
func (_u *HostResourceUpdateOne) ClearHostGpus() *HostResourceUpdateOne {
	_u.mutation.ClearHostGpus()
	return _u
}

// RemoveHostGpuIDs removes the "host_gpus" edge to HostgpuResource entities by IDs.
func (_u *HostResourceUpdateOne) RemoveHostGpuIDs(ids ...int) *HostResourceUpdateOne {
	_u.mutation.RemoveHostGpuIDs(ids...)
	return _u
}

// RemoveHostGpus removes "host_gpus" edges to HostgpuResource entities.
func (_u *HostResourceUpdateOne) RemoveHostGpus(v ...*HostgpuResource) *HostResourceUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHostGpuIDs(ids...)
}

// ClearInstance clears the "instance" edge to the InstanceResource entity.
func (_u *HostResourceUpdateOne) ClearInstance() *HostResourceUpdateOne {
	_u.mutation.ClearInstance()
	return _u
}

// Where appends a list predicates to the HostResourceUpdate builder.
func (_u *HostResourceUpdateOne) Where(ps ...predicate.HostResource) *HostResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HostResourceUpdateOne) Select(field string, fields ...string) *HostResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated HostResource entity.
func (_u *HostResourceUpdateOne) Save(ctx context.Context) (*HostResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostResourceUpdateOne) SaveX(ctx context.Context) *HostResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HostResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostResourceUpdateOne) check() error {
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := hostresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := hostresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.BmcKind(); ok {
		if err := hostresource.BmcKindValidator(v); err != nil {
			return &ValidationError{Name: "bmc_kind", err: fmt.Errorf(`ent: validator failed for field "HostResource.bmc_kind": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredPowerState(); ok {
		if err := hostresource.DesiredPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_power_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentPowerState(); ok {
		if err := hostresource.CurrentPowerStateValidator(v); err != nil {
			return &ValidationError{Name: "current_power_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_power_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PowerStatusIndicator(); ok {
		if err := hostresource.PowerStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "power_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.power_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PowerCommandPolicy(); ok {
		if err := hostresource.PowerCommandPolicyValidator(v); err != nil {
			return &ValidationError{Name: "power_command_policy", err: fmt.Errorf(`ent: validator failed for field "HostResource.power_command_policy": %w`, err)}
		}
	}
	if v, ok := _u.mutation.HostStatusIndicator(); ok {
		if err := hostresource.HostStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "host_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.host_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.OnboardingStatusIndicator(); ok {
		if err := hostresource.OnboardingStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "onboarding_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.onboarding_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.RegistrationStatusIndicator(); ok {
		if err := hostresource.RegistrationStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "registration_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.registration_status_indicator": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AmtSku(); ok {
		if err := hostresource.AmtSkuValidator(v); err != nil {
			return &ValidationError{Name: "amt_sku", err: fmt.Errorf(`ent: validator failed for field "HostResource.amt_sku": %w`, err)}
		}
	}
	if v, ok := _u.mutation.DesiredAmtState(); ok {
		if err := hostresource.DesiredAmtStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_amt_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.desired_amt_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentAmtState(); ok {
		if err := hostresource.CurrentAmtStateValidator(v); err != nil {
			return &ValidationError{Name: "current_amt_state", err: fmt.Errorf(`ent: validator failed for field "HostResource.current_amt_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.AmtStatusIndicator(); ok {
		if err := hostresource.AmtStatusIndicatorValidator(v); err != nil {
			return &ValidationError{Name: "amt_status_indicator", err: fmt.Errorf(`ent: validator failed for field "HostResource.amt_status_indicator": %w`, err)}
		}
	}
	return nil
}

func (_u *HostResourceUpdateOne) sqlSave(ctx context.Context) (_node *HostResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostresource.Table, hostresource.Columns, sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostresource.FieldID)
		for _, f := range fields {
			if !hostresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(hostresource.FieldKind, field.TypeString, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(hostresource.FieldKind, field.TypeString)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(hostresource.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(hostresource.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(hostresource.FieldDesiredState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(hostresource.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.Note(); ok {
		_spec.SetField(hostresource.FieldNote, field.TypeString, value)
	}
	if _u.mutation.NoteCleared() {
		_spec.ClearField(hostresource.FieldNote, field.TypeString)
	}
	if value, ok := _u.mutation.HardwareKind(); ok {
		_spec.SetField(hostresource.FieldHardwareKind, field.TypeString, value)
	}
	if _u.mutation.HardwareKindCleared() {
		_spec.ClearField(hostresource.FieldHardwareKind, field.TypeString)
	}
	if value, ok := _u.mutation.SerialNumber(); ok {
		_spec.SetField(hostresource.FieldSerialNumber, field.TypeString, value)
	}
	if _u.mutation.SerialNumberCleared() {
		_spec.ClearField(hostresource.FieldSerialNumber, field.TypeString)
	}
	if value, ok := _u.mutation.UUID(); ok {
		_spec.SetField(hostresource.FieldUUID, field.TypeString, value)
	}
	if _u.mutation.UUIDCleared() {
		_spec.ClearField(hostresource.FieldUUID, field.TypeString)
	}
	if value, ok := _u.mutation.MemoryBytes(); ok {
		_spec.SetField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedMemoryBytes(); ok {
		_spec.AddField(hostresource.FieldMemoryBytes, field.TypeUint64, value)
	}
	if _u.mutation.MemoryBytesCleared() {
		_spec.ClearField(hostresource.FieldMemoryBytes, field.TypeUint64)
	}
	if value, ok := _u.mutation.CPUModel(); ok {
		_spec.SetField(hostresource.FieldCPUModel, field.TypeString, value)
	}
	if _u.mutation.CPUModelCleared() {
		_spec.ClearField(hostresource.FieldCPUModel, field.TypeString)
	}
	if value, ok := _u.mutation.CPUSockets(); ok {
		_spec.SetField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCPUSockets(); ok {
		_spec.AddField(hostresource.FieldCPUSockets, field.TypeUint32, value)
	}
	if _u.mutation.CPUSocketsCleared() {
		_spec.ClearField(hostresource.FieldCPUSockets, field.TypeUint32)
	}
	if value, ok := _u.mutation.CPUCores(); ok {
		_spec.SetField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCPUCores(); ok {
		_spec.AddField(hostresource.FieldCPUCores, field.TypeUint32, value)
	}
	if _u.mutation.CPUCoresCleared() {
		_spec.ClearField(hostresource.FieldCPUCores, field.TypeUint32)
	}
	if value, ok := _u.mutation.CPUCapabilities(); ok {
		_spec.SetField(hostresource.FieldCPUCapabilities, field.TypeString, value)
	}
	if _u.mutation.CPUCapabilitiesCleared() {
		_spec.ClearField(hostresource.FieldCPUCapabilities, field.TypeString)
	}
	if value, ok := _u.mutation.CPUArchitecture(); ok {
		_spec.SetField(hostresource.FieldCPUArchitecture, field.TypeString, value)
	}
	if _u.mutation.CPUArchitectureCleared() {
		_spec.ClearField(hostresource.FieldCPUArchitecture, field.TypeString)
	}
	if value, ok := _u.mutation.CPUThreads(); ok {
		_spec.SetField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedCPUThreads(); ok {
		_spec.AddField(hostresource.FieldCPUThreads, field.TypeUint32, value)
	}
	if _u.mutation.CPUThreadsCleared() {
		_spec.ClearField(hostresource.FieldCPUThreads, field.TypeUint32)
	}
	if value, ok := _u.mutation.CPUTopology(); ok {
		_spec.SetField(hostresource.FieldCPUTopology, field.TypeString, value)
	}
	if _u.mutation.CPUTopologyCleared() {
		_spec.ClearField(hostresource.FieldCPUTopology, field.TypeString)
	}
	if value, ok := _u.mutation.MgmtIP(); ok {
		_spec.SetField(hostresource.FieldMgmtIP, field.TypeString, value)
	}
	if _u.mutation.MgmtIPCleared() {
		_spec.ClearField(hostresource.FieldMgmtIP, field.TypeString)
	}
	if value, ok := _u.mutation.BmcKind(); ok {
		_spec.SetField(hostresource.FieldBmcKind, field.TypeEnum, value)
	}
	if _u.mutation.BmcKindCleared() {
		_spec.ClearField(hostresource.FieldBmcKind, field.TypeEnum)
	}
	if value, ok := _u.mutation.BmcIP(); ok {
		_spec.SetField(hostresource.FieldBmcIP, field.TypeString, value)
	}
	if _u.mutation.BmcIPCleared() {
		_spec.ClearField(hostresource.FieldBmcIP, field.TypeString)
	}
	if value, ok := _u.mutation.BmcUsername(); ok {
		_spec.SetField(hostresource.FieldBmcUsername, field.TypeString, value)
	}
	if _u.mutation.BmcUsernameCleared() {
		_spec.ClearField(hostresource.FieldBmcUsername, field.TypeString)
	}
	if value, ok := _u.mutation.BmcPassword(); ok {
		_spec.SetField(hostresource.FieldBmcPassword, field.TypeString, value)
	}
	if _u.mutation.BmcPasswordCleared() {
		_spec.ClearField(hostresource.FieldBmcPassword, field.TypeString)
	}
	if value, ok := _u.mutation.PxeMAC(); ok {
		_spec.SetField(hostresource.FieldPxeMAC, field.TypeString, value)
	}
	if _u.mutation.PxeMACCleared() {
		_spec.ClearField(hostresource.FieldPxeMAC, field.TypeString)
	}
	if value, ok := _u.mutation.Hostname(); ok {
		_spec.SetField(hostresource.FieldHostname, field.TypeString, value)
	}
	if _u.mutation.HostnameCleared() {
		_spec.ClearField(hostresource.FieldHostname, field.TypeString)
	}
	if value, ok := _u.mutation.ProductName(); ok {
		_spec.SetField(hostresource.FieldProductName, field.TypeString, value)
	}
	if _u.mutation.ProductNameCleared() {
		_spec.ClearField(hostresource.FieldProductName, field.TypeString)
	}
	if value, ok := _u.mutation.BiosVersion(); ok {
		_spec.SetField(hostresource.FieldBiosVersion, field.TypeString, value)
	}
	if _u.mutation.BiosVersionCleared() {
		_spec.ClearField(hostresource.FieldBiosVersion, field.TypeString)
	}
	if value, ok := _u.mutation.BiosReleaseDate(); ok {
		_spec.SetField(hostresource.FieldBiosReleaseDate, field.TypeString, value)
	}
	if _u.mutation.BiosReleaseDateCleared() {
		_spec.ClearField(hostresource.FieldBiosReleaseDate, field.TypeString)
	}
	if value, ok := _u.mutation.BiosVendor(); ok {
		_spec.SetField(hostresource.FieldBiosVendor, field.TypeString, value)
	}
	if _u.mutation.BiosVendorCleared() {
		_spec.ClearField(hostresource.FieldBiosVendor, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(hostresource.FieldMetadata, field.TypeString, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(hostresource.FieldMetadata, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredPowerState(); ok {
		_spec.SetField(hostresource.FieldDesiredPowerState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredPowerStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredPowerState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentPowerState(); ok {
		_spec.SetField(hostresource.FieldCurrentPowerState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentPowerStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentPowerState, field.TypeEnum)
	}
	if value, ok := _u.mutation.PowerStatus(); ok {
		_spec.SetField(hostresource.FieldPowerStatus, field.TypeString, value)
	}
	if _u.mutation.PowerStatusCleared() {
		_spec.ClearField(hostresource.FieldPowerStatus, field.TypeString)
	}
	if value, ok := _u.mutation.PowerStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldPowerStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.PowerStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldPowerStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.PowerStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldPowerStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedPowerStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldPowerStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.PowerStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldPowerStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.PowerCommandPolicy(); ok {
		_spec.SetField(hostresource.FieldPowerCommandPolicy, field.TypeEnum, value)
	}
	if _u.mutation.PowerCommandPolicyCleared() {
		_spec.ClearField(hostresource.FieldPowerCommandPolicy, field.TypeEnum)
	}
	if value, ok := _u.mutation.PowerOnTime(); ok {
		_spec.SetField(hostresource.FieldPowerOnTime, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedPowerOnTime(); ok {
		_spec.AddField(hostresource.FieldPowerOnTime, field.TypeUint64, value)
	}
	if _u.mutation.PowerOnTimeCleared() {
		_spec.ClearField(hostresource.FieldPowerOnTime, field.TypeUint64)
	}
	if value, ok := _u.mutation.HostStatus(); ok {
		_spec.SetField(hostresource.FieldHostStatus, field.TypeString, value)
	}
	if _u.mutation.HostStatusCleared() {
		_spec.ClearField(hostresource.FieldHostStatus, field.TypeString)
	}
	if value, ok := _u.mutation.HostStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldHostStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.HostStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldHostStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.HostStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldHostStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedHostStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldHostStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.HostStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldHostStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.OnboardingStatus(); ok {
		_spec.SetField(hostresource.FieldOnboardingStatus, field.TypeString, value)
	}
	if _u.mutation.OnboardingStatusCleared() {
		_spec.ClearField(hostresource.FieldOnboardingStatus, field.TypeString)
	}
	if value, ok := _u.mutation.OnboardingStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldOnboardingStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.OnboardingStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldOnboardingStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.OnboardingStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldOnboardingStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedOnboardingStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldOnboardingStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.OnboardingStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldOnboardingStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.RegistrationStatus(); ok {
		_spec.SetField(hostresource.FieldRegistrationStatus, field.TypeString, value)
	}
	if _u.mutation.RegistrationStatusCleared() {
		_spec.ClearField(hostresource.FieldRegistrationStatus, field.TypeString)
	}
	if value, ok := _u.mutation.RegistrationStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldRegistrationStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.RegistrationStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldRegistrationStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.RegistrationStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldRegistrationStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedRegistrationStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldRegistrationStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.RegistrationStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldRegistrationStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.AmtSku(); ok {
		_spec.SetField(hostresource.FieldAmtSku, field.TypeEnum, value)
	}
	if _u.mutation.AmtSkuCleared() {
		_spec.ClearField(hostresource.FieldAmtSku, field.TypeEnum)
	}
	if value, ok := _u.mutation.DesiredAmtState(); ok {
		_spec.SetField(hostresource.FieldDesiredAmtState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredAmtStateCleared() {
		_spec.ClearField(hostresource.FieldDesiredAmtState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentAmtState(); ok {
		_spec.SetField(hostresource.FieldCurrentAmtState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentAmtStateCleared() {
		_spec.ClearField(hostresource.FieldCurrentAmtState, field.TypeEnum)
	}
	if value, ok := _u.mutation.AmtStatus(); ok {
		_spec.SetField(hostresource.FieldAmtStatus, field.TypeString, value)
	}
	if _u.mutation.AmtStatusCleared() {
		_spec.ClearField(hostresource.FieldAmtStatus, field.TypeString)
	}
	if value, ok := _u.mutation.AmtStatusIndicator(); ok {
		_spec.SetField(hostresource.FieldAmtStatusIndicator, field.TypeEnum, value)
	}
	if _u.mutation.AmtStatusIndicatorCleared() {
		_spec.ClearField(hostresource.FieldAmtStatusIndicator, field.TypeEnum)
	}
	if value, ok := _u.mutation.AmtStatusTimestamp(); ok {
		_spec.SetField(hostresource.FieldAmtStatusTimestamp, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedAmtStatusTimestamp(); ok {
		_spec.AddField(hostresource.FieldAmtStatusTimestamp, field.TypeUint64, value)
	}
	if _u.mutation.AmtStatusTimestampCleared() {
		_spec.ClearField(hostresource.FieldAmtStatusTimestamp, field.TypeUint64)
	}
	if value, ok := _u.mutation.UserLvmSize(); ok {
		_spec.SetField(hostresource.FieldUserLvmSize, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedUserLvmSize(); ok {
		_spec.AddField(hostresource.FieldUserLvmSize, field.TypeUint32, value)
	}
	if _u.mutation.UserLvmSizeCleared() {
		_spec.ClearField(hostresource.FieldUserLvmSize, field.TypeUint32)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.SiteTable,
			Columns: []string{hostresource.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(siteresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ProviderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProviderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostresource.ProviderTable,
			Columns: []string{hostresource.ProviderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(providerresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostStoragesIDs(); len(nodes) > 0 && !_u.mutation.HostStoragesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostStoragesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostStoragesTable,
			Columns: []string{hostresource.HostStoragesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hoststorageresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostNicsIDs(); len(nodes) > 0 && !_u.mutation.HostNicsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostNicsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostNicsTable,
			Columns: []string{hostresource.HostNicsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostUsbsIDs(); len(nodes) > 0 && !_u.mutation.HostUsbsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostUsbsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostUsbsTable,
			Columns: []string{hostresource.HostUsbsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostusbresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHostGpusIDs(); len(nodes) > 0 && !_u.mutation.HostGpusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostGpusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   hostresource.HostGpusTable,
			Columns: []string{hostresource.HostGpusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostgpuresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.InstanceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.InstanceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   hostresource.InstanceTable,
			Columns: []string{hostresource.InstanceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(instanceresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
