// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicy"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdatePolicyUpdate is the builder for updating OSUpdatePolicy entities.
type OSUpdatePolicyUpdate struct {
	config
	hooks    []Hook
	mutation *OSUpdatePolicyMutation
}

// Where appends a list predicates to the OSUpdatePolicyUpdate builder.
func (_u *OSUpdatePolicyUpdate) Where(ps ...predicate.OSUpdatePolicy) *OSUpdatePolicyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *OSUpdatePolicyUpdate) SetResourceID(v string) *OSUpdatePolicyUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableResourceID(v *string) *OSUpdatePolicyUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetInstalledPackages sets the "installed_packages" field.
func (_u *OSUpdatePolicyUpdate) SetInstalledPackages(v string) *OSUpdatePolicyUpdate {
	_u.mutation.SetInstalledPackages(v)
	return _u
}

// SetNillableInstalledPackages sets the "installed_packages" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableInstalledPackages(v *string) *OSUpdatePolicyUpdate {
	if v != nil {
		_u.SetInstalledPackages(*v)
	}
	return _u
}

// ClearInstalledPackages clears the value of the "installed_packages" field.
func (_u *OSUpdatePolicyUpdate) ClearInstalledPackages() *OSUpdatePolicyUpdate {
	_u.mutation.ClearInstalledPackages()
	return _u
}

// SetUpdateSources sets the "update_sources" field.
func (_u *OSUpdatePolicyUpdate) SetUpdateSources(v string) *OSUpdatePolicyUpdate {
	_u.mutation.SetUpdateSources(v)
	return _u
}

// SetNillableUpdateSources sets the "update_sources" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableUpdateSources(v *string) *OSUpdatePolicyUpdate {
	if v != nil {
		_u.SetUpdateSources(*v)
	}
	return _u
}

// ClearUpdateSources clears the value of the "update_sources" field.
func (_u *OSUpdatePolicyUpdate) ClearUpdateSources() *OSUpdatePolicyUpdate {
	_u.mutation.ClearUpdateSources()
	return _u
}

// SetKernelCommand sets the "kernel_command" field.
func (_u *OSUpdatePolicyUpdate) SetKernelCommand(v string) *OSUpdatePolicyUpdate {
	_u.mutation.SetKernelCommand(v)
	return _u
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableKernelCommand(v *string) *OSUpdatePolicyUpdate {
	if v != nil {
		_u.SetKernelCommand(*v)
	}
	return _u
}

// ClearKernelCommand clears the value of the "kernel_command" field.
func (_u *OSUpdatePolicyUpdate) ClearKernelCommand() *OSUpdatePolicyUpdate {
	_u.mutation.ClearKernelCommand()
	return _u
}

// SetUpdatePolicy sets the "update_policy" field.
func (_u *OSUpdatePolicyUpdate) SetUpdatePolicy(v osupdatepolicy.UpdatePolicy) *OSUpdatePolicyUpdate {
	_u.mutation.SetUpdatePolicy(v)
	return _u
}

// SetNillableUpdatePolicy sets the "update_policy" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableUpdatePolicy(v *osupdatepolicy.UpdatePolicy) *OSUpdatePolicyUpdate {
	if v != nil {
		_u.SetUpdatePolicy(*v)
	}
	return _u
}

// ClearUpdatePolicy clears the value of the "update_policy" field.
func (_u *OSUpdatePolicyUpdate) ClearUpdatePolicy() *OSUpdatePolicyUpdate {
	_u.mutation.ClearUpdatePolicy()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OSUpdatePolicyUpdate) SetUpdatedAt(v string) *OSUpdatePolicyUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableUpdatedAt(v *string) *OSUpdatePolicyUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID.
func (_u *OSUpdatePolicyUpdate) SetTargetOsID(id int) *OSUpdatePolicyUpdate {
	_u.mutation.SetTargetOsID(id)
	return _u
}

// SetNillableTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (_u *OSUpdatePolicyUpdate) SetNillableTargetOsID(id *int) *OSUpdatePolicyUpdate {
	if id != nil {
		_u = _u.SetTargetOsID(*id)
	}
	return _u
}

// SetTargetOs sets the "target_os" edge to the OperatingSystemResource entity.
func (_u *OSUpdatePolicyUpdate) SetTargetOs(v *OperatingSystemResource) *OSUpdatePolicyUpdate {
	return _u.SetTargetOsID(v.ID)
}

// Mutation returns the OSUpdatePolicyMutation object of the builder.
func (_u *OSUpdatePolicyUpdate) Mutation() *OSUpdatePolicyMutation {
	return _u.mutation
}

// ClearTargetOs clears the "target_os" edge to the OperatingSystemResource entity.
func (_u *OSUpdatePolicyUpdate) ClearTargetOs() *OSUpdatePolicyUpdate {
	_u.mutation.ClearTargetOs()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OSUpdatePolicyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OSUpdatePolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OSUpdatePolicyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OSUpdatePolicyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OSUpdatePolicyUpdate) check() error {
	if v, ok := _u.mutation.UpdatePolicy(); ok {
		if err := osupdatepolicy.UpdatePolicyValidator(v); err != nil {
			return &ValidationError{Name: "update_policy", err: fmt.Errorf(`ent: validator failed for field "OSUpdatePolicy.update_policy": %w`, err)}
		}
	}
	return nil
}

func (_u *OSUpdatePolicyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(osupdatepolicy.Table, osupdatepolicy.Columns, sqlgraph.NewFieldSpec(osupdatepolicy.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(osupdatepolicy.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.InstalledPackages(); ok {
		_spec.SetField(osupdatepolicy.FieldInstalledPackages, field.TypeString, value)
	}
	if _u.mutation.InstalledPackagesCleared() {
		_spec.ClearField(osupdatepolicy.FieldInstalledPackages, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateSources(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdateSources, field.TypeString, value)
	}
	if _u.mutation.UpdateSourcesCleared() {
		_spec.ClearField(osupdatepolicy.FieldUpdateSources, field.TypeString)
	}
	if value, ok := _u.mutation.KernelCommand(); ok {
		_spec.SetField(osupdatepolicy.FieldKernelCommand, field.TypeString, value)
	}
	if _u.mutation.KernelCommandCleared() {
		_spec.ClearField(osupdatepolicy.FieldKernelCommand, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatePolicy(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdatePolicy, field.TypeEnum, value)
	}
	if _u.mutation.UpdatePolicyCleared() {
		_spec.ClearField(osupdatepolicy.FieldUpdatePolicy, field.TypeEnum)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.TargetOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicy.TargetOsTable,
			Columns: []string{osupdatepolicy.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicy.TargetOsTable,
			Columns: []string{osupdatepolicy.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osupdatepolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OSUpdatePolicyUpdateOne is the builder for updating a single OSUpdatePolicy entity.
type OSUpdatePolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OSUpdatePolicyMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *OSUpdatePolicyUpdateOne) SetResourceID(v string) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableResourceID(v *string) *OSUpdatePolicyUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetInstalledPackages sets the "installed_packages" field.
func (_u *OSUpdatePolicyUpdateOne) SetInstalledPackages(v string) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetInstalledPackages(v)
	return _u
}

// SetNillableInstalledPackages sets the "installed_packages" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableInstalledPackages(v *string) *OSUpdatePolicyUpdateOne {
	if v != nil {
		_u.SetInstalledPackages(*v)
	}
	return _u
}

// ClearInstalledPackages clears the value of the "installed_packages" field.
func (_u *OSUpdatePolicyUpdateOne) ClearInstalledPackages() *OSUpdatePolicyUpdateOne {
	_u.mutation.ClearInstalledPackages()
	return _u
}

// SetUpdateSources sets the "update_sources" field.
func (_u *OSUpdatePolicyUpdateOne) SetUpdateSources(v string) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetUpdateSources(v)
	return _u
}

// SetNillableUpdateSources sets the "update_sources" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableUpdateSources(v *string) *OSUpdatePolicyUpdateOne {
	if v != nil {
		_u.SetUpdateSources(*v)
	}
	return _u
}

// ClearUpdateSources clears the value of the "update_sources" field.
func (_u *OSUpdatePolicyUpdateOne) ClearUpdateSources() *OSUpdatePolicyUpdateOne {
	_u.mutation.ClearUpdateSources()
	return _u
}

// SetKernelCommand sets the "kernel_command" field.
func (_u *OSUpdatePolicyUpdateOne) SetKernelCommand(v string) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetKernelCommand(v)
	return _u
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableKernelCommand(v *string) *OSUpdatePolicyUpdateOne {
	if v != nil {
		_u.SetKernelCommand(*v)
	}
	return _u
}

// ClearKernelCommand clears the value of the "kernel_command" field.
func (_u *OSUpdatePolicyUpdateOne) ClearKernelCommand() *OSUpdatePolicyUpdateOne {
	_u.mutation.ClearKernelCommand()
	return _u
}

// SetUpdatePolicy sets the "update_policy" field.
func (_u *OSUpdatePolicyUpdateOne) SetUpdatePolicy(v osupdatepolicy.UpdatePolicy) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetUpdatePolicy(v)
	return _u
}

// SetNillableUpdatePolicy sets the "update_policy" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableUpdatePolicy(v *osupdatepolicy.UpdatePolicy) *OSUpdatePolicyUpdateOne {
	if v != nil {
		_u.SetUpdatePolicy(*v)
	}
	return _u
}

// ClearUpdatePolicy clears the value of the "update_policy" field.
func (_u *OSUpdatePolicyUpdateOne) ClearUpdatePolicy() *OSUpdatePolicyUpdateOne {
	_u.mutation.ClearUpdatePolicy()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OSUpdatePolicyUpdateOne) SetUpdatedAt(v string) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableUpdatedAt(v *string) *OSUpdatePolicyUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID.
func (_u *OSUpdatePolicyUpdateOne) SetTargetOsID(id int) *OSUpdatePolicyUpdateOne {
	_u.mutation.SetTargetOsID(id)
	return _u
}

// SetNillableTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (_u *OSUpdatePolicyUpdateOne) SetNillableTargetOsID(id *int) *OSUpdatePolicyUpdateOne {
	if id != nil {
		_u = _u.SetTargetOsID(*id)
	}
	return _u
}

// SetTargetOs sets the "target_os" edge to the OperatingSystemResource entity.
func (_u *OSUpdatePolicyUpdateOne) SetTargetOs(v *OperatingSystemResource) *OSUpdatePolicyUpdateOne {
	return _u.SetTargetOsID(v.ID)
}

// Mutation returns the OSUpdatePolicyMutation object of the builder.
func (_u *OSUpdatePolicyUpdateOne) Mutation() *OSUpdatePolicyMutation {
	return _u.mutation
}

// ClearTargetOs clears the "target_os" edge to the OperatingSystemResource entity.
func (_u *OSUpdatePolicyUpdateOne) ClearTargetOs() *OSUpdatePolicyUpdateOne {
	_u.mutation.ClearTargetOs()
	return _u
}

// Where appends a list predicates to the OSUpdatePolicyUpdate builder.
func (_u *OSUpdatePolicyUpdateOne) Where(ps ...predicate.OSUpdatePolicy) *OSUpdatePolicyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OSUpdatePolicyUpdateOne) Select(field string, fields ...string) *OSUpdatePolicyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated OSUpdatePolicy entity.
func (_u *OSUpdatePolicyUpdateOne) Save(ctx context.Context) (*OSUpdatePolicy, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OSUpdatePolicyUpdateOne) SaveX(ctx context.Context) *OSUpdatePolicy {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OSUpdatePolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OSUpdatePolicyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OSUpdatePolicyUpdateOne) check() error {
	if v, ok := _u.mutation.UpdatePolicy(); ok {
		if err := osupdatepolicy.UpdatePolicyValidator(v); err != nil {
			return &ValidationError{Name: "update_policy", err: fmt.Errorf(`ent: validator failed for field "OSUpdatePolicy.update_policy": %w`, err)}
		}
	}
	return nil
}

func (_u *OSUpdatePolicyUpdateOne) sqlSave(ctx context.Context) (_node *OSUpdatePolicy, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(osupdatepolicy.Table, osupdatepolicy.Columns, sqlgraph.NewFieldSpec(osupdatepolicy.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OSUpdatePolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osupdatepolicy.FieldID)
		for _, f := range fields {
			if !osupdatepolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != osupdatepolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(osupdatepolicy.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.InstalledPackages(); ok {
		_spec.SetField(osupdatepolicy.FieldInstalledPackages, field.TypeString, value)
	}
	if _u.mutation.InstalledPackagesCleared() {
		_spec.ClearField(osupdatepolicy.FieldInstalledPackages, field.TypeString)
	}
	if value, ok := _u.mutation.UpdateSources(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdateSources, field.TypeString, value)
	}
	if _u.mutation.UpdateSourcesCleared() {
		_spec.ClearField(osupdatepolicy.FieldUpdateSources, field.TypeString)
	}
	if value, ok := _u.mutation.KernelCommand(); ok {
		_spec.SetField(osupdatepolicy.FieldKernelCommand, field.TypeString, value)
	}
	if _u.mutation.KernelCommandCleared() {
		_spec.ClearField(osupdatepolicy.FieldKernelCommand, field.TypeString)
	}
	if value, ok := _u.mutation.UpdatePolicy(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdatePolicy, field.TypeEnum, value)
	}
	if _u.mutation.UpdatePolicyCleared() {
		_spec.ClearField(osupdatepolicy.FieldUpdatePolicy, field.TypeEnum)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.TargetOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicy.TargetOsTable,
			Columns: []string{osupdatepolicy.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TargetOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicy.TargetOsTable,
			Columns: []string{osupdatepolicy.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OSUpdatePolicy{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osupdatepolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
