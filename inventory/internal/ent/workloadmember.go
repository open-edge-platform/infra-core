// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// WorkloadMember is the model entity for the WorkloadMember schema.
type WorkloadMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind workloadmember.Kind `json:"kind,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkloadMemberQuery when eager-loading is set.
	Edges                    WorkloadMemberEdges `json:"edges"`
	workload_member_workload *int
	workload_member_instance *int
	selectValues             sql.SelectValues
}

// WorkloadMemberEdges holds the relations/edges for other nodes in the graph.
type WorkloadMemberEdges struct {
	// Workload holds the value of the workload edge.
	Workload *WorkloadResource `json:"workload,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *InstanceResource `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// WorkloadOrErr returns the Workload value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkloadMemberEdges) WorkloadOrErr() (*WorkloadResource, error) {
	if e.Workload != nil {
		return e.Workload, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workloadresource.Label}
	}
	return nil, &NotLoadedError{edge: "workload"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkloadMemberEdges) InstanceOrErr() (*InstanceResource, error) {
	if e.Instance != nil {
		return e.Instance, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: instanceresource.Label}
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkloadMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workloadmember.FieldID:
			values[i] = new(sql.NullInt64)
		case workloadmember.FieldResourceID, workloadmember.FieldKind, workloadmember.FieldTenantID, workloadmember.FieldCreatedAt, workloadmember.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case workloadmember.ForeignKeys[0]: // workload_member_workload
			values[i] = new(sql.NullInt64)
		case workloadmember.ForeignKeys[1]: // workload_member_instance
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkloadMember fields.
func (_m *WorkloadMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workloadmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case workloadmember.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case workloadmember.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				_m.Kind = workloadmember.Kind(value.String)
			}
		case workloadmember.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case workloadmember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case workloadmember.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		case workloadmember.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workload_member_workload", value)
			} else if value.Valid {
				_m.workload_member_workload = new(int)
				*_m.workload_member_workload = int(value.Int64)
			}
		case workloadmember.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field workload_member_instance", value)
			} else if value.Valid {
				_m.workload_member_instance = new(int)
				*_m.workload_member_instance = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkloadMember.
// This includes values selected through modifiers, order, etc.
func (_m *WorkloadMember) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryWorkload queries the "workload" edge of the WorkloadMember entity.
func (_m *WorkloadMember) QueryWorkload() *WorkloadResourceQuery {
	return NewWorkloadMemberClient(_m.config).QueryWorkload(_m)
}

// QueryInstance queries the "instance" edge of the WorkloadMember entity.
func (_m *WorkloadMember) QueryInstance() *InstanceResourceQuery {
	return NewWorkloadMemberClient(_m.config).QueryInstance(_m)
}

// Update returns a builder for updating this WorkloadMember.
// Note that you need to call WorkloadMember.Unwrap() before calling this method if this WorkloadMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *WorkloadMember) Update() *WorkloadMemberUpdateOne {
	return NewWorkloadMemberClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the WorkloadMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *WorkloadMember) Unwrap() *WorkloadMember {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkloadMember is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *WorkloadMember) String() string {
	var builder strings.Builder
	builder.WriteString("WorkloadMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(fmt.Sprintf("%v", _m.Kind))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// WorkloadMembers is a parsable slice of WorkloadMember.
type WorkloadMembers []*WorkloadMember
