// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// HostnicResourceUpdate is the builder for updating HostnicResource entities.
type HostnicResourceUpdate struct {
	config
	hooks    []Hook
	mutation *HostnicResourceMutation
}

// Where appends a list predicates to the HostnicResourceUpdate builder.
func (_u *HostnicResourceUpdate) Where(ps ...predicate.HostnicResource) *HostnicResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *HostnicResourceUpdate) SetResourceID(v string) *HostnicResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableResourceID(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *HostnicResourceUpdate) SetKind(v string) *HostnicResourceUpdate {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableKind(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *HostnicResourceUpdate) ClearKind() *HostnicResourceUpdate {
	_u.mutation.ClearKind()
	return _u
}

// SetProviderStatus sets the "provider_status" field.
func (_u *HostnicResourceUpdate) SetProviderStatus(v string) *HostnicResourceUpdate {
	_u.mutation.SetProviderStatus(v)
	return _u
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableProviderStatus(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetProviderStatus(*v)
	}
	return _u
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (_u *HostnicResourceUpdate) ClearProviderStatus() *HostnicResourceUpdate {
	_u.mutation.ClearProviderStatus()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *HostnicResourceUpdate) SetDeviceName(v string) *HostnicResourceUpdate {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableDeviceName(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *HostnicResourceUpdate) ClearDeviceName() *HostnicResourceUpdate {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetPciIdentifier sets the "pci_identifier" field.
func (_u *HostnicResourceUpdate) SetPciIdentifier(v string) *HostnicResourceUpdate {
	_u.mutation.SetPciIdentifier(v)
	return _u
}

// SetNillablePciIdentifier sets the "pci_identifier" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillablePciIdentifier(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetPciIdentifier(*v)
	}
	return _u
}

// ClearPciIdentifier clears the value of the "pci_identifier" field.
func (_u *HostnicResourceUpdate) ClearPciIdentifier() *HostnicResourceUpdate {
	_u.mutation.ClearPciIdentifier()
	return _u
}

// SetMACAddr sets the "mac_addr" field.
func (_u *HostnicResourceUpdate) SetMACAddr(v string) *HostnicResourceUpdate {
	_u.mutation.SetMACAddr(v)
	return _u
}

// SetNillableMACAddr sets the "mac_addr" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableMACAddr(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetMACAddr(*v)
	}
	return _u
}

// ClearMACAddr clears the value of the "mac_addr" field.
func (_u *HostnicResourceUpdate) ClearMACAddr() *HostnicResourceUpdate {
	_u.mutation.ClearMACAddr()
	return _u
}

// SetSriovEnabled sets the "sriov_enabled" field.
func (_u *HostnicResourceUpdate) SetSriovEnabled(v bool) *HostnicResourceUpdate {
	_u.mutation.SetSriovEnabled(v)
	return _u
}

// SetNillableSriovEnabled sets the "sriov_enabled" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableSriovEnabled(v *bool) *HostnicResourceUpdate {
	if v != nil {
		_u.SetSriovEnabled(*v)
	}
	return _u
}

// ClearSriovEnabled clears the value of the "sriov_enabled" field.
func (_u *HostnicResourceUpdate) ClearSriovEnabled() *HostnicResourceUpdate {
	_u.mutation.ClearSriovEnabled()
	return _u
}

// SetSriovVfsNum sets the "sriov_vfs_num" field.
func (_u *HostnicResourceUpdate) SetSriovVfsNum(v uint32) *HostnicResourceUpdate {
	_u.mutation.ResetSriovVfsNum()
	_u.mutation.SetSriovVfsNum(v)
	return _u
}

// SetNillableSriovVfsNum sets the "sriov_vfs_num" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableSriovVfsNum(v *uint32) *HostnicResourceUpdate {
	if v != nil {
		_u.SetSriovVfsNum(*v)
	}
	return _u
}

// AddSriovVfsNum adds value to the "sriov_vfs_num" field.
func (_u *HostnicResourceUpdate) AddSriovVfsNum(v int32) *HostnicResourceUpdate {
	_u.mutation.AddSriovVfsNum(v)
	return _u
}

// ClearSriovVfsNum clears the value of the "sriov_vfs_num" field.
func (_u *HostnicResourceUpdate) ClearSriovVfsNum() *HostnicResourceUpdate {
	_u.mutation.ClearSriovVfsNum()
	return _u
}

// SetSriovVfsTotal sets the "sriov_vfs_total" field.
func (_u *HostnicResourceUpdate) SetSriovVfsTotal(v uint32) *HostnicResourceUpdate {
	_u.mutation.ResetSriovVfsTotal()
	_u.mutation.SetSriovVfsTotal(v)
	return _u
}

// SetNillableSriovVfsTotal sets the "sriov_vfs_total" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableSriovVfsTotal(v *uint32) *HostnicResourceUpdate {
	if v != nil {
		_u.SetSriovVfsTotal(*v)
	}
	return _u
}

// AddSriovVfsTotal adds value to the "sriov_vfs_total" field.
func (_u *HostnicResourceUpdate) AddSriovVfsTotal(v int32) *HostnicResourceUpdate {
	_u.mutation.AddSriovVfsTotal(v)
	return _u
}

// ClearSriovVfsTotal clears the value of the "sriov_vfs_total" field.
func (_u *HostnicResourceUpdate) ClearSriovVfsTotal() *HostnicResourceUpdate {
	_u.mutation.ClearSriovVfsTotal()
	return _u
}

// SetPeerName sets the "peer_name" field.
func (_u *HostnicResourceUpdate) SetPeerName(v string) *HostnicResourceUpdate {
	_u.mutation.SetPeerName(v)
	return _u
}

// SetNillablePeerName sets the "peer_name" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillablePeerName(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetPeerName(*v)
	}
	return _u
}

// ClearPeerName clears the value of the "peer_name" field.
func (_u *HostnicResourceUpdate) ClearPeerName() *HostnicResourceUpdate {
	_u.mutation.ClearPeerName()
	return _u
}

// SetPeerDescription sets the "peer_description" field.
func (_u *HostnicResourceUpdate) SetPeerDescription(v string) *HostnicResourceUpdate {
	_u.mutation.SetPeerDescription(v)
	return _u
}

// SetNillablePeerDescription sets the "peer_description" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillablePeerDescription(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetPeerDescription(*v)
	}
	return _u
}

// ClearPeerDescription clears the value of the "peer_description" field.
func (_u *HostnicResourceUpdate) ClearPeerDescription() *HostnicResourceUpdate {
	_u.mutation.ClearPeerDescription()
	return _u
}

// SetPeerMAC sets the "peer_mac" field.
func (_u *HostnicResourceUpdate) SetPeerMAC(v string) *HostnicResourceUpdate {
	_u.mutation.SetPeerMAC(v)
	return _u
}

// SetNillablePeerMAC sets the "peer_mac" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillablePeerMAC(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetPeerMAC(*v)
	}
	return _u
}

// ClearPeerMAC clears the value of the "peer_mac" field.
func (_u *HostnicResourceUpdate) ClearPeerMAC() *HostnicResourceUpdate {
	_u.mutation.ClearPeerMAC()
	return _u
}

// SetPeerMgmtIP sets the "peer_mgmt_ip" field.
func (_u *HostnicResourceUpdate) SetPeerMgmtIP(v string) *HostnicResourceUpdate {
	_u.mutation.SetPeerMgmtIP(v)
	return _u
}

// SetNillablePeerMgmtIP sets the "peer_mgmt_ip" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillablePeerMgmtIP(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetPeerMgmtIP(*v)
	}
	return _u
}

// ClearPeerMgmtIP clears the value of the "peer_mgmt_ip" field.
func (_u *HostnicResourceUpdate) ClearPeerMgmtIP() *HostnicResourceUpdate {
	_u.mutation.ClearPeerMgmtIP()
	return _u
}

// SetPeerPort sets the "peer_port" field.
func (_u *HostnicResourceUpdate) SetPeerPort(v string) *HostnicResourceUpdate {
	_u.mutation.SetPeerPort(v)
	return _u
}

// SetNillablePeerPort sets the "peer_port" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillablePeerPort(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetPeerPort(*v)
	}
	return _u
}

// ClearPeerPort clears the value of the "peer_port" field.
func (_u *HostnicResourceUpdate) ClearPeerPort() *HostnicResourceUpdate {
	_u.mutation.ClearPeerPort()
	return _u
}

// SetSupportedLinkMode sets the "supported_link_mode" field.
func (_u *HostnicResourceUpdate) SetSupportedLinkMode(v string) *HostnicResourceUpdate {
	_u.mutation.SetSupportedLinkMode(v)
	return _u
}

// SetNillableSupportedLinkMode sets the "supported_link_mode" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableSupportedLinkMode(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetSupportedLinkMode(*v)
	}
	return _u
}

// ClearSupportedLinkMode clears the value of the "supported_link_mode" field.
func (_u *HostnicResourceUpdate) ClearSupportedLinkMode() *HostnicResourceUpdate {
	_u.mutation.ClearSupportedLinkMode()
	return _u
}

// SetAdvertisingLinkMode sets the "advertising_link_mode" field.
func (_u *HostnicResourceUpdate) SetAdvertisingLinkMode(v string) *HostnicResourceUpdate {
	_u.mutation.SetAdvertisingLinkMode(v)
	return _u
}

// SetNillableAdvertisingLinkMode sets the "advertising_link_mode" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableAdvertisingLinkMode(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetAdvertisingLinkMode(*v)
	}
	return _u
}

// ClearAdvertisingLinkMode clears the value of the "advertising_link_mode" field.
func (_u *HostnicResourceUpdate) ClearAdvertisingLinkMode() *HostnicResourceUpdate {
	_u.mutation.ClearAdvertisingLinkMode()
	return _u
}

// SetCurrentSpeedBps sets the "current_speed_bps" field.
func (_u *HostnicResourceUpdate) SetCurrentSpeedBps(v uint64) *HostnicResourceUpdate {
	_u.mutation.ResetCurrentSpeedBps()
	_u.mutation.SetCurrentSpeedBps(v)
	return _u
}

// SetNillableCurrentSpeedBps sets the "current_speed_bps" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableCurrentSpeedBps(v *uint64) *HostnicResourceUpdate {
	if v != nil {
		_u.SetCurrentSpeedBps(*v)
	}
	return _u
}

// AddCurrentSpeedBps adds value to the "current_speed_bps" field.
func (_u *HostnicResourceUpdate) AddCurrentSpeedBps(v int64) *HostnicResourceUpdate {
	_u.mutation.AddCurrentSpeedBps(v)
	return _u
}

// ClearCurrentSpeedBps clears the value of the "current_speed_bps" field.
func (_u *HostnicResourceUpdate) ClearCurrentSpeedBps() *HostnicResourceUpdate {
	_u.mutation.ClearCurrentSpeedBps()
	return _u
}

// SetCurrentDuplex sets the "current_duplex" field.
func (_u *HostnicResourceUpdate) SetCurrentDuplex(v string) *HostnicResourceUpdate {
	_u.mutation.SetCurrentDuplex(v)
	return _u
}

// SetNillableCurrentDuplex sets the "current_duplex" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableCurrentDuplex(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetCurrentDuplex(*v)
	}
	return _u
}

// ClearCurrentDuplex clears the value of the "current_duplex" field.
func (_u *HostnicResourceUpdate) ClearCurrentDuplex() *HostnicResourceUpdate {
	_u.mutation.ClearCurrentDuplex()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *HostnicResourceUpdate) SetFeatures(v string) *HostnicResourceUpdate {
	_u.mutation.SetFeatures(v)
	return _u
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableFeatures(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetFeatures(*v)
	}
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *HostnicResourceUpdate) ClearFeatures() *HostnicResourceUpdate {
	_u.mutation.ClearFeatures()
	return _u
}

// SetMtu sets the "mtu" field.
func (_u *HostnicResourceUpdate) SetMtu(v uint32) *HostnicResourceUpdate {
	_u.mutation.ResetMtu()
	_u.mutation.SetMtu(v)
	return _u
}

// SetNillableMtu sets the "mtu" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableMtu(v *uint32) *HostnicResourceUpdate {
	if v != nil {
		_u.SetMtu(*v)
	}
	return _u
}

// AddMtu adds value to the "mtu" field.
func (_u *HostnicResourceUpdate) AddMtu(v int32) *HostnicResourceUpdate {
	_u.mutation.AddMtu(v)
	return _u
}

// ClearMtu clears the value of the "mtu" field.
func (_u *HostnicResourceUpdate) ClearMtu() *HostnicResourceUpdate {
	_u.mutation.ClearMtu()
	return _u
}

// SetLinkState sets the "link_state" field.
func (_u *HostnicResourceUpdate) SetLinkState(v hostnicresource.LinkState) *HostnicResourceUpdate {
	_u.mutation.SetLinkState(v)
	return _u
}

// SetNillableLinkState sets the "link_state" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableLinkState(v *hostnicresource.LinkState) *HostnicResourceUpdate {
	if v != nil {
		_u.SetLinkState(*v)
	}
	return _u
}

// ClearLinkState clears the value of the "link_state" field.
func (_u *HostnicResourceUpdate) ClearLinkState() *HostnicResourceUpdate {
	_u.mutation.ClearLinkState()
	return _u
}

// SetBmcInterface sets the "bmc_interface" field.
func (_u *HostnicResourceUpdate) SetBmcInterface(v bool) *HostnicResourceUpdate {
	_u.mutation.SetBmcInterface(v)
	return _u
}

// SetNillableBmcInterface sets the "bmc_interface" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableBmcInterface(v *bool) *HostnicResourceUpdate {
	if v != nil {
		_u.SetBmcInterface(*v)
	}
	return _u
}

// ClearBmcInterface clears the value of the "bmc_interface" field.
func (_u *HostnicResourceUpdate) ClearBmcInterface() *HostnicResourceUpdate {
	_u.mutation.ClearBmcInterface()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostnicResourceUpdate) SetUpdatedAt(v string) *HostnicResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostnicResourceUpdate) SetNillableUpdatedAt(v *string) *HostnicResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *HostnicResourceUpdate) SetHostID(id int) *HostnicResourceUpdate {
	_u.mutation.SetHostID(id)
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *HostnicResourceUpdate) SetHost(v *HostResource) *HostnicResourceUpdate {
	return _u.SetHostID(v.ID)
}

// Mutation returns the HostnicResourceMutation object of the builder.
func (_u *HostnicResourceUpdate) Mutation() *HostnicResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *HostnicResourceUpdate) ClearHost() *HostnicResourceUpdate {
	_u.mutation.ClearHost()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *HostnicResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostnicResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *HostnicResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostnicResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostnicResourceUpdate) check() error {
	if v, ok := _u.mutation.LinkState(); ok {
		if err := hostnicresource.LinkStateValidator(v); err != nil {
			return &ValidationError{Name: "link_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.link_state": %w`, err)}
		}
	}
	if _u.mutation.HostCleared() && len(_u.mutation.HostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HostnicResource.host"`)
	}
	return nil
}

func (_u *HostnicResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostnicresource.Table, hostnicresource.Columns, sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostnicresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(hostnicresource.FieldKind, field.TypeString, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(hostnicresource.FieldKind, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderStatus(); ok {
		_spec.SetField(hostnicresource.FieldProviderStatus, field.TypeString, value)
	}
	if _u.mutation.ProviderStatusCleared() {
		_spec.ClearField(hostnicresource.FieldProviderStatus, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(hostnicresource.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(hostnicresource.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.PciIdentifier(); ok {
		_spec.SetField(hostnicresource.FieldPciIdentifier, field.TypeString, value)
	}
	if _u.mutation.PciIdentifierCleared() {
		_spec.ClearField(hostnicresource.FieldPciIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.MACAddr(); ok {
		_spec.SetField(hostnicresource.FieldMACAddr, field.TypeString, value)
	}
	if _u.mutation.MACAddrCleared() {
		_spec.ClearField(hostnicresource.FieldMACAddr, field.TypeString)
	}
	if value, ok := _u.mutation.SriovEnabled(); ok {
		_spec.SetField(hostnicresource.FieldSriovEnabled, field.TypeBool, value)
	}
	if _u.mutation.SriovEnabledCleared() {
		_spec.ClearField(hostnicresource.FieldSriovEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.SriovVfsNum(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSriovVfsNum(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if _u.mutation.SriovVfsNumCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsNum, field.TypeUint32)
	}
	if value, ok := _u.mutation.SriovVfsTotal(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSriovVfsTotal(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if _u.mutation.SriovVfsTotalCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32)
	}
	if value, ok := _u.mutation.PeerName(); ok {
		_spec.SetField(hostnicresource.FieldPeerName, field.TypeString, value)
	}
	if _u.mutation.PeerNameCleared() {
		_spec.ClearField(hostnicresource.FieldPeerName, field.TypeString)
	}
	if value, ok := _u.mutation.PeerDescription(); ok {
		_spec.SetField(hostnicresource.FieldPeerDescription, field.TypeString, value)
	}
	if _u.mutation.PeerDescriptionCleared() {
		_spec.ClearField(hostnicresource.FieldPeerDescription, field.TypeString)
	}
	if value, ok := _u.mutation.PeerMAC(); ok {
		_spec.SetField(hostnicresource.FieldPeerMAC, field.TypeString, value)
	}
	if _u.mutation.PeerMACCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMAC, field.TypeString)
	}
	if value, ok := _u.mutation.PeerMgmtIP(); ok {
		_spec.SetField(hostnicresource.FieldPeerMgmtIP, field.TypeString, value)
	}
	if _u.mutation.PeerMgmtIPCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMgmtIP, field.TypeString)
	}
	if value, ok := _u.mutation.PeerPort(); ok {
		_spec.SetField(hostnicresource.FieldPeerPort, field.TypeString, value)
	}
	if _u.mutation.PeerPortCleared() {
		_spec.ClearField(hostnicresource.FieldPeerPort, field.TypeString)
	}
	if value, ok := _u.mutation.SupportedLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldSupportedLinkMode, field.TypeString, value)
	}
	if _u.mutation.SupportedLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldSupportedLinkMode, field.TypeString)
	}
	if value, ok := _u.mutation.AdvertisingLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString, value)
	}
	if _u.mutation.AdvertisingLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString)
	}
	if value, ok := _u.mutation.CurrentSpeedBps(); ok {
		_spec.SetField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCurrentSpeedBps(); ok {
		_spec.AddField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if _u.mutation.CurrentSpeedBpsCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64)
	}
	if value, ok := _u.mutation.CurrentDuplex(); ok {
		_spec.SetField(hostnicresource.FieldCurrentDuplex, field.TypeString, value)
	}
	if _u.mutation.CurrentDuplexCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentDuplex, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(hostnicresource.FieldFeatures, field.TypeString, value)
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(hostnicresource.FieldFeatures, field.TypeString)
	}
	if value, ok := _u.mutation.Mtu(); ok {
		_spec.SetField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMtu(); ok {
		_spec.AddField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if _u.mutation.MtuCleared() {
		_spec.ClearField(hostnicresource.FieldMtu, field.TypeUint32)
	}
	if value, ok := _u.mutation.LinkState(); ok {
		_spec.SetField(hostnicresource.FieldLinkState, field.TypeEnum, value)
	}
	if _u.mutation.LinkStateCleared() {
		_spec.ClearField(hostnicresource.FieldLinkState, field.TypeEnum)
	}
	if value, ok := _u.mutation.BmcInterface(); ok {
		_spec.SetField(hostnicresource.FieldBmcInterface, field.TypeBool, value)
	}
	if _u.mutation.BmcInterfaceCleared() {
		_spec.ClearField(hostnicresource.FieldBmcInterface, field.TypeBool)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostnicresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostnicresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// HostnicResourceUpdateOne is the builder for updating a single HostnicResource entity.
type HostnicResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *HostnicResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *HostnicResourceUpdateOne) SetResourceID(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableResourceID(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetKind sets the "kind" field.
func (_u *HostnicResourceUpdateOne) SetKind(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetKind(v)
	return _u
}

// SetNillableKind sets the "kind" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableKind(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetKind(*v)
	}
	return _u
}

// ClearKind clears the value of the "kind" field.
func (_u *HostnicResourceUpdateOne) ClearKind() *HostnicResourceUpdateOne {
	_u.mutation.ClearKind()
	return _u
}

// SetProviderStatus sets the "provider_status" field.
func (_u *HostnicResourceUpdateOne) SetProviderStatus(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetProviderStatus(v)
	return _u
}

// SetNillableProviderStatus sets the "provider_status" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableProviderStatus(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetProviderStatus(*v)
	}
	return _u
}

// ClearProviderStatus clears the value of the "provider_status" field.
func (_u *HostnicResourceUpdateOne) ClearProviderStatus() *HostnicResourceUpdateOne {
	_u.mutation.ClearProviderStatus()
	return _u
}

// SetDeviceName sets the "device_name" field.
func (_u *HostnicResourceUpdateOne) SetDeviceName(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetDeviceName(v)
	return _u
}

// SetNillableDeviceName sets the "device_name" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableDeviceName(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetDeviceName(*v)
	}
	return _u
}

// ClearDeviceName clears the value of the "device_name" field.
func (_u *HostnicResourceUpdateOne) ClearDeviceName() *HostnicResourceUpdateOne {
	_u.mutation.ClearDeviceName()
	return _u
}

// SetPciIdentifier sets the "pci_identifier" field.
func (_u *HostnicResourceUpdateOne) SetPciIdentifier(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetPciIdentifier(v)
	return _u
}

// SetNillablePciIdentifier sets the "pci_identifier" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillablePciIdentifier(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetPciIdentifier(*v)
	}
	return _u
}

// ClearPciIdentifier clears the value of the "pci_identifier" field.
func (_u *HostnicResourceUpdateOne) ClearPciIdentifier() *HostnicResourceUpdateOne {
	_u.mutation.ClearPciIdentifier()
	return _u
}

// SetMACAddr sets the "mac_addr" field.
func (_u *HostnicResourceUpdateOne) SetMACAddr(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetMACAddr(v)
	return _u
}

// SetNillableMACAddr sets the "mac_addr" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableMACAddr(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetMACAddr(*v)
	}
	return _u
}

// ClearMACAddr clears the value of the "mac_addr" field.
func (_u *HostnicResourceUpdateOne) ClearMACAddr() *HostnicResourceUpdateOne {
	_u.mutation.ClearMACAddr()
	return _u
}

// SetSriovEnabled sets the "sriov_enabled" field.
func (_u *HostnicResourceUpdateOne) SetSriovEnabled(v bool) *HostnicResourceUpdateOne {
	_u.mutation.SetSriovEnabled(v)
	return _u
}

// SetNillableSriovEnabled sets the "sriov_enabled" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableSriovEnabled(v *bool) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetSriovEnabled(*v)
	}
	return _u
}

// ClearSriovEnabled clears the value of the "sriov_enabled" field.
func (_u *HostnicResourceUpdateOne) ClearSriovEnabled() *HostnicResourceUpdateOne {
	_u.mutation.ClearSriovEnabled()
	return _u
}

// SetSriovVfsNum sets the "sriov_vfs_num" field.
func (_u *HostnicResourceUpdateOne) SetSriovVfsNum(v uint32) *HostnicResourceUpdateOne {
	_u.mutation.ResetSriovVfsNum()
	_u.mutation.SetSriovVfsNum(v)
	return _u
}

// SetNillableSriovVfsNum sets the "sriov_vfs_num" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableSriovVfsNum(v *uint32) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetSriovVfsNum(*v)
	}
	return _u
}

// AddSriovVfsNum adds value to the "sriov_vfs_num" field.
func (_u *HostnicResourceUpdateOne) AddSriovVfsNum(v int32) *HostnicResourceUpdateOne {
	_u.mutation.AddSriovVfsNum(v)
	return _u
}

// ClearSriovVfsNum clears the value of the "sriov_vfs_num" field.
func (_u *HostnicResourceUpdateOne) ClearSriovVfsNum() *HostnicResourceUpdateOne {
	_u.mutation.ClearSriovVfsNum()
	return _u
}

// SetSriovVfsTotal sets the "sriov_vfs_total" field.
func (_u *HostnicResourceUpdateOne) SetSriovVfsTotal(v uint32) *HostnicResourceUpdateOne {
	_u.mutation.ResetSriovVfsTotal()
	_u.mutation.SetSriovVfsTotal(v)
	return _u
}

// SetNillableSriovVfsTotal sets the "sriov_vfs_total" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableSriovVfsTotal(v *uint32) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetSriovVfsTotal(*v)
	}
	return _u
}

// AddSriovVfsTotal adds value to the "sriov_vfs_total" field.
func (_u *HostnicResourceUpdateOne) AddSriovVfsTotal(v int32) *HostnicResourceUpdateOne {
	_u.mutation.AddSriovVfsTotal(v)
	return _u
}

// ClearSriovVfsTotal clears the value of the "sriov_vfs_total" field.
func (_u *HostnicResourceUpdateOne) ClearSriovVfsTotal() *HostnicResourceUpdateOne {
	_u.mutation.ClearSriovVfsTotal()
	return _u
}

// SetPeerName sets the "peer_name" field.
func (_u *HostnicResourceUpdateOne) SetPeerName(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetPeerName(v)
	return _u
}

// SetNillablePeerName sets the "peer_name" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillablePeerName(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetPeerName(*v)
	}
	return _u
}

// ClearPeerName clears the value of the "peer_name" field.
func (_u *HostnicResourceUpdateOne) ClearPeerName() *HostnicResourceUpdateOne {
	_u.mutation.ClearPeerName()
	return _u
}

// SetPeerDescription sets the "peer_description" field.
func (_u *HostnicResourceUpdateOne) SetPeerDescription(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetPeerDescription(v)
	return _u
}

// SetNillablePeerDescription sets the "peer_description" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillablePeerDescription(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetPeerDescription(*v)
	}
	return _u
}

// ClearPeerDescription clears the value of the "peer_description" field.
func (_u *HostnicResourceUpdateOne) ClearPeerDescription() *HostnicResourceUpdateOne {
	_u.mutation.ClearPeerDescription()
	return _u
}

// SetPeerMAC sets the "peer_mac" field.
func (_u *HostnicResourceUpdateOne) SetPeerMAC(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetPeerMAC(v)
	return _u
}

// SetNillablePeerMAC sets the "peer_mac" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillablePeerMAC(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetPeerMAC(*v)
	}
	return _u
}

// ClearPeerMAC clears the value of the "peer_mac" field.
func (_u *HostnicResourceUpdateOne) ClearPeerMAC() *HostnicResourceUpdateOne {
	_u.mutation.ClearPeerMAC()
	return _u
}

// SetPeerMgmtIP sets the "peer_mgmt_ip" field.
func (_u *HostnicResourceUpdateOne) SetPeerMgmtIP(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetPeerMgmtIP(v)
	return _u
}

// SetNillablePeerMgmtIP sets the "peer_mgmt_ip" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillablePeerMgmtIP(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetPeerMgmtIP(*v)
	}
	return _u
}

// ClearPeerMgmtIP clears the value of the "peer_mgmt_ip" field.
func (_u *HostnicResourceUpdateOne) ClearPeerMgmtIP() *HostnicResourceUpdateOne {
	_u.mutation.ClearPeerMgmtIP()
	return _u
}

// SetPeerPort sets the "peer_port" field.
func (_u *HostnicResourceUpdateOne) SetPeerPort(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetPeerPort(v)
	return _u
}

// SetNillablePeerPort sets the "peer_port" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillablePeerPort(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetPeerPort(*v)
	}
	return _u
}

// ClearPeerPort clears the value of the "peer_port" field.
func (_u *HostnicResourceUpdateOne) ClearPeerPort() *HostnicResourceUpdateOne {
	_u.mutation.ClearPeerPort()
	return _u
}

// SetSupportedLinkMode sets the "supported_link_mode" field.
func (_u *HostnicResourceUpdateOne) SetSupportedLinkMode(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetSupportedLinkMode(v)
	return _u
}

// SetNillableSupportedLinkMode sets the "supported_link_mode" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableSupportedLinkMode(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetSupportedLinkMode(*v)
	}
	return _u
}

// ClearSupportedLinkMode clears the value of the "supported_link_mode" field.
func (_u *HostnicResourceUpdateOne) ClearSupportedLinkMode() *HostnicResourceUpdateOne {
	_u.mutation.ClearSupportedLinkMode()
	return _u
}

// SetAdvertisingLinkMode sets the "advertising_link_mode" field.
func (_u *HostnicResourceUpdateOne) SetAdvertisingLinkMode(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetAdvertisingLinkMode(v)
	return _u
}

// SetNillableAdvertisingLinkMode sets the "advertising_link_mode" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableAdvertisingLinkMode(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetAdvertisingLinkMode(*v)
	}
	return _u
}

// ClearAdvertisingLinkMode clears the value of the "advertising_link_mode" field.
func (_u *HostnicResourceUpdateOne) ClearAdvertisingLinkMode() *HostnicResourceUpdateOne {
	_u.mutation.ClearAdvertisingLinkMode()
	return _u
}

// SetCurrentSpeedBps sets the "current_speed_bps" field.
func (_u *HostnicResourceUpdateOne) SetCurrentSpeedBps(v uint64) *HostnicResourceUpdateOne {
	_u.mutation.ResetCurrentSpeedBps()
	_u.mutation.SetCurrentSpeedBps(v)
	return _u
}

// SetNillableCurrentSpeedBps sets the "current_speed_bps" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableCurrentSpeedBps(v *uint64) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetCurrentSpeedBps(*v)
	}
	return _u
}

// AddCurrentSpeedBps adds value to the "current_speed_bps" field.
func (_u *HostnicResourceUpdateOne) AddCurrentSpeedBps(v int64) *HostnicResourceUpdateOne {
	_u.mutation.AddCurrentSpeedBps(v)
	return _u
}

// ClearCurrentSpeedBps clears the value of the "current_speed_bps" field.
func (_u *HostnicResourceUpdateOne) ClearCurrentSpeedBps() *HostnicResourceUpdateOne {
	_u.mutation.ClearCurrentSpeedBps()
	return _u
}

// SetCurrentDuplex sets the "current_duplex" field.
func (_u *HostnicResourceUpdateOne) SetCurrentDuplex(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetCurrentDuplex(v)
	return _u
}

// SetNillableCurrentDuplex sets the "current_duplex" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableCurrentDuplex(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetCurrentDuplex(*v)
	}
	return _u
}

// ClearCurrentDuplex clears the value of the "current_duplex" field.
func (_u *HostnicResourceUpdateOne) ClearCurrentDuplex() *HostnicResourceUpdateOne {
	_u.mutation.ClearCurrentDuplex()
	return _u
}

// SetFeatures sets the "features" field.
func (_u *HostnicResourceUpdateOne) SetFeatures(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetFeatures(v)
	return _u
}

// SetNillableFeatures sets the "features" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableFeatures(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetFeatures(*v)
	}
	return _u
}

// ClearFeatures clears the value of the "features" field.
func (_u *HostnicResourceUpdateOne) ClearFeatures() *HostnicResourceUpdateOne {
	_u.mutation.ClearFeatures()
	return _u
}

// SetMtu sets the "mtu" field.
func (_u *HostnicResourceUpdateOne) SetMtu(v uint32) *HostnicResourceUpdateOne {
	_u.mutation.ResetMtu()
	_u.mutation.SetMtu(v)
	return _u
}

// SetNillableMtu sets the "mtu" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableMtu(v *uint32) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetMtu(*v)
	}
	return _u
}

// AddMtu adds value to the "mtu" field.
func (_u *HostnicResourceUpdateOne) AddMtu(v int32) *HostnicResourceUpdateOne {
	_u.mutation.AddMtu(v)
	return _u
}

// ClearMtu clears the value of the "mtu" field.
func (_u *HostnicResourceUpdateOne) ClearMtu() *HostnicResourceUpdateOne {
	_u.mutation.ClearMtu()
	return _u
}

// SetLinkState sets the "link_state" field.
func (_u *HostnicResourceUpdateOne) SetLinkState(v hostnicresource.LinkState) *HostnicResourceUpdateOne {
	_u.mutation.SetLinkState(v)
	return _u
}

// SetNillableLinkState sets the "link_state" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableLinkState(v *hostnicresource.LinkState) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetLinkState(*v)
	}
	return _u
}

// ClearLinkState clears the value of the "link_state" field.
func (_u *HostnicResourceUpdateOne) ClearLinkState() *HostnicResourceUpdateOne {
	_u.mutation.ClearLinkState()
	return _u
}

// SetBmcInterface sets the "bmc_interface" field.
func (_u *HostnicResourceUpdateOne) SetBmcInterface(v bool) *HostnicResourceUpdateOne {
	_u.mutation.SetBmcInterface(v)
	return _u
}

// SetNillableBmcInterface sets the "bmc_interface" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableBmcInterface(v *bool) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetBmcInterface(*v)
	}
	return _u
}

// ClearBmcInterface clears the value of the "bmc_interface" field.
func (_u *HostnicResourceUpdateOne) ClearBmcInterface() *HostnicResourceUpdateOne {
	_u.mutation.ClearBmcInterface()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *HostnicResourceUpdateOne) SetUpdatedAt(v string) *HostnicResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *HostnicResourceUpdateOne) SetNillableUpdatedAt(v *string) *HostnicResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetHostID sets the "host" edge to the HostResource entity by ID.
func (_u *HostnicResourceUpdateOne) SetHostID(id int) *HostnicResourceUpdateOne {
	_u.mutation.SetHostID(id)
	return _u
}

// SetHost sets the "host" edge to the HostResource entity.
func (_u *HostnicResourceUpdateOne) SetHost(v *HostResource) *HostnicResourceUpdateOne {
	return _u.SetHostID(v.ID)
}

// Mutation returns the HostnicResourceMutation object of the builder.
func (_u *HostnicResourceUpdateOne) Mutation() *HostnicResourceMutation {
	return _u.mutation
}

// ClearHost clears the "host" edge to the HostResource entity.
func (_u *HostnicResourceUpdateOne) ClearHost() *HostnicResourceUpdateOne {
	_u.mutation.ClearHost()
	return _u
}

// Where appends a list predicates to the HostnicResourceUpdate builder.
func (_u *HostnicResourceUpdateOne) Where(ps ...predicate.HostnicResource) *HostnicResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *HostnicResourceUpdateOne) Select(field string, fields ...string) *HostnicResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated HostnicResource entity.
func (_u *HostnicResourceUpdateOne) Save(ctx context.Context) (*HostnicResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *HostnicResourceUpdateOne) SaveX(ctx context.Context) *HostnicResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *HostnicResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *HostnicResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *HostnicResourceUpdateOne) check() error {
	if v, ok := _u.mutation.LinkState(); ok {
		if err := hostnicresource.LinkStateValidator(v); err != nil {
			return &ValidationError{Name: "link_state", err: fmt.Errorf(`ent: validator failed for field "HostnicResource.link_state": %w`, err)}
		}
	}
	if _u.mutation.HostCleared() && len(_u.mutation.HostIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "HostnicResource.host"`)
	}
	return nil
}

func (_u *HostnicResourceUpdateOne) sqlSave(ctx context.Context) (_node *HostnicResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(hostnicresource.Table, hostnicresource.Columns, sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "HostnicResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, hostnicresource.FieldID)
		for _, f := range fields {
			if !hostnicresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != hostnicresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(hostnicresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Kind(); ok {
		_spec.SetField(hostnicresource.FieldKind, field.TypeString, value)
	}
	if _u.mutation.KindCleared() {
		_spec.ClearField(hostnicresource.FieldKind, field.TypeString)
	}
	if value, ok := _u.mutation.ProviderStatus(); ok {
		_spec.SetField(hostnicresource.FieldProviderStatus, field.TypeString, value)
	}
	if _u.mutation.ProviderStatusCleared() {
		_spec.ClearField(hostnicresource.FieldProviderStatus, field.TypeString)
	}
	if value, ok := _u.mutation.DeviceName(); ok {
		_spec.SetField(hostnicresource.FieldDeviceName, field.TypeString, value)
	}
	if _u.mutation.DeviceNameCleared() {
		_spec.ClearField(hostnicresource.FieldDeviceName, field.TypeString)
	}
	if value, ok := _u.mutation.PciIdentifier(); ok {
		_spec.SetField(hostnicresource.FieldPciIdentifier, field.TypeString, value)
	}
	if _u.mutation.PciIdentifierCleared() {
		_spec.ClearField(hostnicresource.FieldPciIdentifier, field.TypeString)
	}
	if value, ok := _u.mutation.MACAddr(); ok {
		_spec.SetField(hostnicresource.FieldMACAddr, field.TypeString, value)
	}
	if _u.mutation.MACAddrCleared() {
		_spec.ClearField(hostnicresource.FieldMACAddr, field.TypeString)
	}
	if value, ok := _u.mutation.SriovEnabled(); ok {
		_spec.SetField(hostnicresource.FieldSriovEnabled, field.TypeBool, value)
	}
	if _u.mutation.SriovEnabledCleared() {
		_spec.ClearField(hostnicresource.FieldSriovEnabled, field.TypeBool)
	}
	if value, ok := _u.mutation.SriovVfsNum(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSriovVfsNum(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsNum, field.TypeUint32, value)
	}
	if _u.mutation.SriovVfsNumCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsNum, field.TypeUint32)
	}
	if value, ok := _u.mutation.SriovVfsTotal(); ok {
		_spec.SetField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedSriovVfsTotal(); ok {
		_spec.AddField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32, value)
	}
	if _u.mutation.SriovVfsTotalCleared() {
		_spec.ClearField(hostnicresource.FieldSriovVfsTotal, field.TypeUint32)
	}
	if value, ok := _u.mutation.PeerName(); ok {
		_spec.SetField(hostnicresource.FieldPeerName, field.TypeString, value)
	}
	if _u.mutation.PeerNameCleared() {
		_spec.ClearField(hostnicresource.FieldPeerName, field.TypeString)
	}
	if value, ok := _u.mutation.PeerDescription(); ok {
		_spec.SetField(hostnicresource.FieldPeerDescription, field.TypeString, value)
	}
	if _u.mutation.PeerDescriptionCleared() {
		_spec.ClearField(hostnicresource.FieldPeerDescription, field.TypeString)
	}
	if value, ok := _u.mutation.PeerMAC(); ok {
		_spec.SetField(hostnicresource.FieldPeerMAC, field.TypeString, value)
	}
	if _u.mutation.PeerMACCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMAC, field.TypeString)
	}
	if value, ok := _u.mutation.PeerMgmtIP(); ok {
		_spec.SetField(hostnicresource.FieldPeerMgmtIP, field.TypeString, value)
	}
	if _u.mutation.PeerMgmtIPCleared() {
		_spec.ClearField(hostnicresource.FieldPeerMgmtIP, field.TypeString)
	}
	if value, ok := _u.mutation.PeerPort(); ok {
		_spec.SetField(hostnicresource.FieldPeerPort, field.TypeString, value)
	}
	if _u.mutation.PeerPortCleared() {
		_spec.ClearField(hostnicresource.FieldPeerPort, field.TypeString)
	}
	if value, ok := _u.mutation.SupportedLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldSupportedLinkMode, field.TypeString, value)
	}
	if _u.mutation.SupportedLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldSupportedLinkMode, field.TypeString)
	}
	if value, ok := _u.mutation.AdvertisingLinkMode(); ok {
		_spec.SetField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString, value)
	}
	if _u.mutation.AdvertisingLinkModeCleared() {
		_spec.ClearField(hostnicresource.FieldAdvertisingLinkMode, field.TypeString)
	}
	if value, ok := _u.mutation.CurrentSpeedBps(); ok {
		_spec.SetField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if value, ok := _u.mutation.AddedCurrentSpeedBps(); ok {
		_spec.AddField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64, value)
	}
	if _u.mutation.CurrentSpeedBpsCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentSpeedBps, field.TypeUint64)
	}
	if value, ok := _u.mutation.CurrentDuplex(); ok {
		_spec.SetField(hostnicresource.FieldCurrentDuplex, field.TypeString, value)
	}
	if _u.mutation.CurrentDuplexCleared() {
		_spec.ClearField(hostnicresource.FieldCurrentDuplex, field.TypeString)
	}
	if value, ok := _u.mutation.Features(); ok {
		_spec.SetField(hostnicresource.FieldFeatures, field.TypeString, value)
	}
	if _u.mutation.FeaturesCleared() {
		_spec.ClearField(hostnicresource.FieldFeatures, field.TypeString)
	}
	if value, ok := _u.mutation.Mtu(); ok {
		_spec.SetField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if value, ok := _u.mutation.AddedMtu(); ok {
		_spec.AddField(hostnicresource.FieldMtu, field.TypeUint32, value)
	}
	if _u.mutation.MtuCleared() {
		_spec.ClearField(hostnicresource.FieldMtu, field.TypeUint32)
	}
	if value, ok := _u.mutation.LinkState(); ok {
		_spec.SetField(hostnicresource.FieldLinkState, field.TypeEnum, value)
	}
	if _u.mutation.LinkStateCleared() {
		_spec.ClearField(hostnicresource.FieldLinkState, field.TypeEnum)
	}
	if value, ok := _u.mutation.BmcInterface(); ok {
		_spec.SetField(hostnicresource.FieldBmcInterface, field.TypeBool, value)
	}
	if _u.mutation.BmcInterfaceCleared() {
		_spec.ClearField(hostnicresource.FieldBmcInterface, field.TypeBool)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(hostnicresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.HostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   hostnicresource.HostTable,
			Columns: []string{hostnicresource.HostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &HostnicResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{hostnicresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
