// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ipaddressresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// IPAddressResourceUpdate is the builder for updating IPAddressResource entities.
type IPAddressResourceUpdate struct {
	config
	hooks    []Hook
	mutation *IPAddressResourceMutation
}

// Where appends a list predicates to the IPAddressResourceUpdate builder.
func (_u *IPAddressResourceUpdate) Where(ps ...predicate.IPAddressResource) *IPAddressResourceUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetResourceID sets the "resource_id" field.
func (_u *IPAddressResourceUpdate) SetResourceID(v string) *IPAddressResourceUpdate {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableResourceID(v *string) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetAddress sets the "address" field.
func (_u *IPAddressResourceUpdate) SetAddress(v string) *IPAddressResourceUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableAddress(v *string) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *IPAddressResourceUpdate) ClearAddress() *IPAddressResourceUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *IPAddressResourceUpdate) SetDesiredState(v ipaddressresource.DesiredState) *IPAddressResourceUpdate {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableDesiredState(v *ipaddressresource.DesiredState) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// ClearDesiredState clears the value of the "desired_state" field.
func (_u *IPAddressResourceUpdate) ClearDesiredState() *IPAddressResourceUpdate {
	_u.mutation.ClearDesiredState()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *IPAddressResourceUpdate) SetCurrentState(v ipaddressresource.CurrentState) *IPAddressResourceUpdate {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableCurrentState(v *ipaddressresource.CurrentState) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *IPAddressResourceUpdate) ClearCurrentState() *IPAddressResourceUpdate {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetStatus sets the "status" field.
func (_u *IPAddressResourceUpdate) SetStatus(v ipaddressresource.Status) *IPAddressResourceUpdate {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableStatus(v *ipaddressresource.Status) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *IPAddressResourceUpdate) ClearStatus() *IPAddressResourceUpdate {
	_u.mutation.ClearStatus()
	return _u
}

// SetStatusDetail sets the "status_detail" field.
func (_u *IPAddressResourceUpdate) SetStatusDetail(v string) *IPAddressResourceUpdate {
	_u.mutation.SetStatusDetail(v)
	return _u
}

// SetNillableStatusDetail sets the "status_detail" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableStatusDetail(v *string) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetStatusDetail(*v)
	}
	return _u
}

// ClearStatusDetail clears the value of the "status_detail" field.
func (_u *IPAddressResourceUpdate) ClearStatusDetail() *IPAddressResourceUpdate {
	_u.mutation.ClearStatusDetail()
	return _u
}

// SetConfigMethod sets the "config_method" field.
func (_u *IPAddressResourceUpdate) SetConfigMethod(v ipaddressresource.ConfigMethod) *IPAddressResourceUpdate {
	_u.mutation.SetConfigMethod(v)
	return _u
}

// SetNillableConfigMethod sets the "config_method" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableConfigMethod(v *ipaddressresource.ConfigMethod) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetConfigMethod(*v)
	}
	return _u
}

// ClearConfigMethod clears the value of the "config_method" field.
func (_u *IPAddressResourceUpdate) ClearConfigMethod() *IPAddressResourceUpdate {
	_u.mutation.ClearConfigMethod()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *IPAddressResourceUpdate) SetUpdatedAt(v string) *IPAddressResourceUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *IPAddressResourceUpdate) SetNillableUpdatedAt(v *string) *IPAddressResourceUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetNicID sets the "nic" edge to the HostnicResource entity by ID.
func (_u *IPAddressResourceUpdate) SetNicID(id int) *IPAddressResourceUpdate {
	_u.mutation.SetNicID(id)
	return _u
}

// SetNic sets the "nic" edge to the HostnicResource entity.
func (_u *IPAddressResourceUpdate) SetNic(v *HostnicResource) *IPAddressResourceUpdate {
	return _u.SetNicID(v.ID)
}

// Mutation returns the IPAddressResourceMutation object of the builder.
func (_u *IPAddressResourceUpdate) Mutation() *IPAddressResourceMutation {
	return _u.mutation
}

// ClearNic clears the "nic" edge to the HostnicResource entity.
func (_u *IPAddressResourceUpdate) ClearNic() *IPAddressResourceUpdate {
	_u.mutation.ClearNic()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *IPAddressResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *IPAddressResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *IPAddressResourceUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *IPAddressResourceUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *IPAddressResourceUpdate) check() error {
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := ipaddressresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := ipaddressresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := ipaddressresource.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ConfigMethod(); ok {
		if err := ipaddressresource.ConfigMethodValidator(v); err != nil {
			return &ValidationError{Name: "config_method", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.config_method": %w`, err)}
		}
	}
	if _u.mutation.NicCleared() && len(_u.mutation.NicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IPAddressResource.nic"`)
	}
	return nil
}

func (_u *IPAddressResourceUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipaddressresource.Table, ipaddressresource.Columns, sqlgraph.NewFieldSpec(ipaddressresource.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(ipaddressresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(ipaddressresource.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(ipaddressresource.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(ipaddressresource.FieldDesiredState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredStateCleared() {
		_spec.ClearField(ipaddressresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(ipaddressresource.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(ipaddressresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(ipaddressresource.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(ipaddressresource.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.StatusDetail(); ok {
		_spec.SetField(ipaddressresource.FieldStatusDetail, field.TypeString, value)
	}
	if _u.mutation.StatusDetailCleared() {
		_spec.ClearField(ipaddressresource.FieldStatusDetail, field.TypeString)
	}
	if value, ok := _u.mutation.ConfigMethod(); ok {
		_spec.SetField(ipaddressresource.FieldConfigMethod, field.TypeEnum, value)
	}
	if _u.mutation.ConfigMethodCleared() {
		_spec.ClearField(ipaddressresource.FieldConfigMethod, field.TypeEnum)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaddressresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.NicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ipaddressresource.NicTable,
			Columns: []string{ipaddressresource.NicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ipaddressresource.NicTable,
			Columns: []string{ipaddressresource.NicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddressresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// IPAddressResourceUpdateOne is the builder for updating a single IPAddressResource entity.
type IPAddressResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IPAddressResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (_u *IPAddressResourceUpdateOne) SetResourceID(v string) *IPAddressResourceUpdateOne {
	_u.mutation.SetResourceID(v)
	return _u
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableResourceID(v *string) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetResourceID(*v)
	}
	return _u
}

// SetAddress sets the "address" field.
func (_u *IPAddressResourceUpdateOne) SetAddress(v string) *IPAddressResourceUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableAddress(v *string) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *IPAddressResourceUpdateOne) ClearAddress() *IPAddressResourceUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetDesiredState sets the "desired_state" field.
func (_u *IPAddressResourceUpdateOne) SetDesiredState(v ipaddressresource.DesiredState) *IPAddressResourceUpdateOne {
	_u.mutation.SetDesiredState(v)
	return _u
}

// SetNillableDesiredState sets the "desired_state" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableDesiredState(v *ipaddressresource.DesiredState) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetDesiredState(*v)
	}
	return _u
}

// ClearDesiredState clears the value of the "desired_state" field.
func (_u *IPAddressResourceUpdateOne) ClearDesiredState() *IPAddressResourceUpdateOne {
	_u.mutation.ClearDesiredState()
	return _u
}

// SetCurrentState sets the "current_state" field.
func (_u *IPAddressResourceUpdateOne) SetCurrentState(v ipaddressresource.CurrentState) *IPAddressResourceUpdateOne {
	_u.mutation.SetCurrentState(v)
	return _u
}

// SetNillableCurrentState sets the "current_state" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableCurrentState(v *ipaddressresource.CurrentState) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetCurrentState(*v)
	}
	return _u
}

// ClearCurrentState clears the value of the "current_state" field.
func (_u *IPAddressResourceUpdateOne) ClearCurrentState() *IPAddressResourceUpdateOne {
	_u.mutation.ClearCurrentState()
	return _u
}

// SetStatus sets the "status" field.
func (_u *IPAddressResourceUpdateOne) SetStatus(v ipaddressresource.Status) *IPAddressResourceUpdateOne {
	_u.mutation.SetStatus(v)
	return _u
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableStatus(v *ipaddressresource.Status) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetStatus(*v)
	}
	return _u
}

// ClearStatus clears the value of the "status" field.
func (_u *IPAddressResourceUpdateOne) ClearStatus() *IPAddressResourceUpdateOne {
	_u.mutation.ClearStatus()
	return _u
}

// SetStatusDetail sets the "status_detail" field.
func (_u *IPAddressResourceUpdateOne) SetStatusDetail(v string) *IPAddressResourceUpdateOne {
	_u.mutation.SetStatusDetail(v)
	return _u
}

// SetNillableStatusDetail sets the "status_detail" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableStatusDetail(v *string) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetStatusDetail(*v)
	}
	return _u
}

// ClearStatusDetail clears the value of the "status_detail" field.
func (_u *IPAddressResourceUpdateOne) ClearStatusDetail() *IPAddressResourceUpdateOne {
	_u.mutation.ClearStatusDetail()
	return _u
}

// SetConfigMethod sets the "config_method" field.
func (_u *IPAddressResourceUpdateOne) SetConfigMethod(v ipaddressresource.ConfigMethod) *IPAddressResourceUpdateOne {
	_u.mutation.SetConfigMethod(v)
	return _u
}

// SetNillableConfigMethod sets the "config_method" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableConfigMethod(v *ipaddressresource.ConfigMethod) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetConfigMethod(*v)
	}
	return _u
}

// ClearConfigMethod clears the value of the "config_method" field.
func (_u *IPAddressResourceUpdateOne) ClearConfigMethod() *IPAddressResourceUpdateOne {
	_u.mutation.ClearConfigMethod()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *IPAddressResourceUpdateOne) SetUpdatedAt(v string) *IPAddressResourceUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *IPAddressResourceUpdateOne) SetNillableUpdatedAt(v *string) *IPAddressResourceUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// SetNicID sets the "nic" edge to the HostnicResource entity by ID.
func (_u *IPAddressResourceUpdateOne) SetNicID(id int) *IPAddressResourceUpdateOne {
	_u.mutation.SetNicID(id)
	return _u
}

// SetNic sets the "nic" edge to the HostnicResource entity.
func (_u *IPAddressResourceUpdateOne) SetNic(v *HostnicResource) *IPAddressResourceUpdateOne {
	return _u.SetNicID(v.ID)
}

// Mutation returns the IPAddressResourceMutation object of the builder.
func (_u *IPAddressResourceUpdateOne) Mutation() *IPAddressResourceMutation {
	return _u.mutation
}

// ClearNic clears the "nic" edge to the HostnicResource entity.
func (_u *IPAddressResourceUpdateOne) ClearNic() *IPAddressResourceUpdateOne {
	_u.mutation.ClearNic()
	return _u
}

// Where appends a list predicates to the IPAddressResourceUpdate builder.
func (_u *IPAddressResourceUpdateOne) Where(ps ...predicate.IPAddressResource) *IPAddressResourceUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *IPAddressResourceUpdateOne) Select(field string, fields ...string) *IPAddressResourceUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated IPAddressResource entity.
func (_u *IPAddressResourceUpdateOne) Save(ctx context.Context) (*IPAddressResource, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *IPAddressResourceUpdateOne) SaveX(ctx context.Context) *IPAddressResource {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *IPAddressResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *IPAddressResourceUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *IPAddressResourceUpdateOne) check() error {
	if v, ok := _u.mutation.DesiredState(); ok {
		if err := ipaddressresource.DesiredStateValidator(v); err != nil {
			return &ValidationError{Name: "desired_state", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.desired_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CurrentState(); ok {
		if err := ipaddressresource.CurrentStateValidator(v); err != nil {
			return &ValidationError{Name: "current_state", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.current_state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Status(); ok {
		if err := ipaddressresource.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ConfigMethod(); ok {
		if err := ipaddressresource.ConfigMethodValidator(v); err != nil {
			return &ValidationError{Name: "config_method", err: fmt.Errorf(`ent: validator failed for field "IPAddressResource.config_method": %w`, err)}
		}
	}
	if _u.mutation.NicCleared() && len(_u.mutation.NicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "IPAddressResource.nic"`)
	}
	return nil
}

func (_u *IPAddressResourceUpdateOne) sqlSave(ctx context.Context) (_node *IPAddressResource, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ipaddressresource.Table, ipaddressresource.Columns, sqlgraph.NewFieldSpec(ipaddressresource.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IPAddressResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ipaddressresource.FieldID)
		for _, f := range fields {
			if !ipaddressresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ipaddressresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ResourceID(); ok {
		_spec.SetField(ipaddressresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(ipaddressresource.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(ipaddressresource.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.DesiredState(); ok {
		_spec.SetField(ipaddressresource.FieldDesiredState, field.TypeEnum, value)
	}
	if _u.mutation.DesiredStateCleared() {
		_spec.ClearField(ipaddressresource.FieldDesiredState, field.TypeEnum)
	}
	if value, ok := _u.mutation.CurrentState(); ok {
		_spec.SetField(ipaddressresource.FieldCurrentState, field.TypeEnum, value)
	}
	if _u.mutation.CurrentStateCleared() {
		_spec.ClearField(ipaddressresource.FieldCurrentState, field.TypeEnum)
	}
	if value, ok := _u.mutation.Status(); ok {
		_spec.SetField(ipaddressresource.FieldStatus, field.TypeEnum, value)
	}
	if _u.mutation.StatusCleared() {
		_spec.ClearField(ipaddressresource.FieldStatus, field.TypeEnum)
	}
	if value, ok := _u.mutation.StatusDetail(); ok {
		_spec.SetField(ipaddressresource.FieldStatusDetail, field.TypeString, value)
	}
	if _u.mutation.StatusDetailCleared() {
		_spec.ClearField(ipaddressresource.FieldStatusDetail, field.TypeString)
	}
	if value, ok := _u.mutation.ConfigMethod(); ok {
		_spec.SetField(ipaddressresource.FieldConfigMethod, field.TypeEnum, value)
	}
	if _u.mutation.ConfigMethodCleared() {
		_spec.ClearField(ipaddressresource.FieldConfigMethod, field.TypeEnum)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(ipaddressresource.FieldUpdatedAt, field.TypeString, value)
	}
	if _u.mutation.NicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ipaddressresource.NicTable,
			Columns: []string{ipaddressresource.NicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   ipaddressresource.NicTable,
			Columns: []string{ipaddressresource.NicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hostnicresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IPAddressResource{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ipaddressresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
