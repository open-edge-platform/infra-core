// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicy"
)

// OSUpdatePolicyCreate is the builder for creating a OSUpdatePolicy entity.
type OSUpdatePolicyCreate struct {
	config
	mutation *OSUpdatePolicyMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (oupc *OSUpdatePolicyCreate) SetResourceID(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetResourceID(s)
	return oupc
}

// SetInstalledPackages sets the "installed_packages" field.
func (oupc *OSUpdatePolicyCreate) SetInstalledPackages(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetInstalledPackages(s)
	return oupc
}

// SetNillableInstalledPackages sets the "installed_packages" field if the given value is not nil.
func (oupc *OSUpdatePolicyCreate) SetNillableInstalledPackages(s *string) *OSUpdatePolicyCreate {
	if s != nil {
		oupc.SetInstalledPackages(*s)
	}
	return oupc
}

// SetUpdateSources sets the "update_sources" field.
func (oupc *OSUpdatePolicyCreate) SetUpdateSources(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetUpdateSources(s)
	return oupc
}

// SetNillableUpdateSources sets the "update_sources" field if the given value is not nil.
func (oupc *OSUpdatePolicyCreate) SetNillableUpdateSources(s *string) *OSUpdatePolicyCreate {
	if s != nil {
		oupc.SetUpdateSources(*s)
	}
	return oupc
}

// SetKernelCommand sets the "kernel_command" field.
func (oupc *OSUpdatePolicyCreate) SetKernelCommand(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetKernelCommand(s)
	return oupc
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (oupc *OSUpdatePolicyCreate) SetNillableKernelCommand(s *string) *OSUpdatePolicyCreate {
	if s != nil {
		oupc.SetKernelCommand(*s)
	}
	return oupc
}

// SetUpdatePolicy sets the "update_policy" field.
func (oupc *OSUpdatePolicyCreate) SetUpdatePolicy(op osupdatepolicy.UpdatePolicy) *OSUpdatePolicyCreate {
	oupc.mutation.SetUpdatePolicy(op)
	return oupc
}

// SetNillableUpdatePolicy sets the "update_policy" field if the given value is not nil.
func (oupc *OSUpdatePolicyCreate) SetNillableUpdatePolicy(op *osupdatepolicy.UpdatePolicy) *OSUpdatePolicyCreate {
	if op != nil {
		oupc.SetUpdatePolicy(*op)
	}
	return oupc
}

// SetTenantID sets the "tenant_id" field.
func (oupc *OSUpdatePolicyCreate) SetTenantID(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetTenantID(s)
	return oupc
}

// SetCreatedAt sets the "created_at" field.
func (oupc *OSUpdatePolicyCreate) SetCreatedAt(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetCreatedAt(s)
	return oupc
}

// SetUpdatedAt sets the "updated_at" field.
func (oupc *OSUpdatePolicyCreate) SetUpdatedAt(s string) *OSUpdatePolicyCreate {
	oupc.mutation.SetUpdatedAt(s)
	return oupc
}

// SetTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID.
func (oupc *OSUpdatePolicyCreate) SetTargetOsID(id int) *OSUpdatePolicyCreate {
	oupc.mutation.SetTargetOsID(id)
	return oupc
}

// SetNillableTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (oupc *OSUpdatePolicyCreate) SetNillableTargetOsID(id *int) *OSUpdatePolicyCreate {
	if id != nil {
		oupc = oupc.SetTargetOsID(*id)
	}
	return oupc
}

// SetTargetOs sets the "target_os" edge to the OperatingSystemResource entity.
func (oupc *OSUpdatePolicyCreate) SetTargetOs(o *OperatingSystemResource) *OSUpdatePolicyCreate {
	return oupc.SetTargetOsID(o.ID)
}

// Mutation returns the OSUpdatePolicyMutation object of the builder.
func (oupc *OSUpdatePolicyCreate) Mutation() *OSUpdatePolicyMutation {
	return oupc.mutation
}

// Save creates the OSUpdatePolicy in the database.
func (oupc *OSUpdatePolicyCreate) Save(ctx context.Context) (*OSUpdatePolicy, error) {
	return withHooks(ctx, oupc.sqlSave, oupc.mutation, oupc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oupc *OSUpdatePolicyCreate) SaveX(ctx context.Context) *OSUpdatePolicy {
	v, err := oupc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oupc *OSUpdatePolicyCreate) Exec(ctx context.Context) error {
	_, err := oupc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupc *OSUpdatePolicyCreate) ExecX(ctx context.Context) {
	if err := oupc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oupc *OSUpdatePolicyCreate) check() error {
	if _, ok := oupc.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "OSUpdatePolicy.resource_id"`)}
	}
	if v, ok := oupc.mutation.UpdatePolicy(); ok {
		if err := osupdatepolicy.UpdatePolicyValidator(v); err != nil {
			return &ValidationError{Name: "update_policy", err: fmt.Errorf(`ent: validator failed for field "OSUpdatePolicy.update_policy": %w`, err)}
		}
	}
	if _, ok := oupc.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OSUpdatePolicy.tenant_id"`)}
	}
	if _, ok := oupc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OSUpdatePolicy.created_at"`)}
	}
	if _, ok := oupc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OSUpdatePolicy.updated_at"`)}
	}
	return nil
}

func (oupc *OSUpdatePolicyCreate) sqlSave(ctx context.Context) (*OSUpdatePolicy, error) {
	if err := oupc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oupc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oupc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oupc.mutation.id = &_node.ID
	oupc.mutation.done = true
	return _node, nil
}

func (oupc *OSUpdatePolicyCreate) createSpec() (*OSUpdatePolicy, *sqlgraph.CreateSpec) {
	var (
		_node = &OSUpdatePolicy{config: oupc.config}
		_spec = sqlgraph.NewCreateSpec(osupdatepolicy.Table, sqlgraph.NewFieldSpec(osupdatepolicy.FieldID, field.TypeInt))
	)
	if value, ok := oupc.mutation.ResourceID(); ok {
		_spec.SetField(osupdatepolicy.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := oupc.mutation.InstalledPackages(); ok {
		_spec.SetField(osupdatepolicy.FieldInstalledPackages, field.TypeString, value)
		_node.InstalledPackages = value
	}
	if value, ok := oupc.mutation.UpdateSources(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdateSources, field.TypeString, value)
		_node.UpdateSources = value
	}
	if value, ok := oupc.mutation.KernelCommand(); ok {
		_spec.SetField(osupdatepolicy.FieldKernelCommand, field.TypeString, value)
		_node.KernelCommand = value
	}
	if value, ok := oupc.mutation.UpdatePolicy(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdatePolicy, field.TypeEnum, value)
		_node.UpdatePolicy = value
	}
	if value, ok := oupc.mutation.TenantID(); ok {
		_spec.SetField(osupdatepolicy.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := oupc.mutation.CreatedAt(); ok {
		_spec.SetField(osupdatepolicy.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := oupc.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdatepolicy.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	if nodes := oupc.mutation.TargetOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicy.TargetOsTable,
			Columns: []string{osupdatepolicy.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.os_update_policy_target_os = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OSUpdatePolicyCreateBulk is the builder for creating many OSUpdatePolicy entities in bulk.
type OSUpdatePolicyCreateBulk struct {
	config
	err      error
	builders []*OSUpdatePolicyCreate
}

// Save creates the OSUpdatePolicy entities in the database.
func (oupcb *OSUpdatePolicyCreateBulk) Save(ctx context.Context) ([]*OSUpdatePolicy, error) {
	if oupcb.err != nil {
		return nil, oupcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oupcb.builders))
	nodes := make([]*OSUpdatePolicy, len(oupcb.builders))
	mutators := make([]Mutator, len(oupcb.builders))
	for i := range oupcb.builders {
		func(i int, root context.Context) {
			builder := oupcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OSUpdatePolicyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oupcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oupcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oupcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oupcb *OSUpdatePolicyCreateBulk) SaveX(ctx context.Context) []*OSUpdatePolicy {
	v, err := oupcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oupcb *OSUpdatePolicyCreateBulk) Exec(ctx context.Context) error {
	_, err := oupcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupcb *OSUpdatePolicyCreateBulk) ExecX(ctx context.Context) {
	if err := oupcb.Exec(ctx); err != nil {
		panic(err)
	}
}
