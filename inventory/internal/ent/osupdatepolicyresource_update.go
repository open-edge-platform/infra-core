// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// OSUpdatePolicyResourceUpdate is the builder for updating OSUpdatePolicyResource entities.
type OSUpdatePolicyResourceUpdate struct {
	config
	hooks    []Hook
	mutation *OSUpdatePolicyResourceMutation
}

// Where appends a list predicates to the OSUpdatePolicyResourceUpdate builder.
func (oupru *OSUpdatePolicyResourceUpdate) Where(ps ...predicate.OSUpdatePolicyResource) *OSUpdatePolicyResourceUpdate {
	oupru.mutation.Where(ps...)
	return oupru
}

// SetResourceID sets the "resource_id" field.
func (oupru *OSUpdatePolicyResourceUpdate) SetResourceID(s string) *OSUpdatePolicyResourceUpdate {
	oupru.mutation.SetResourceID(s)
	return oupru
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (oupru *OSUpdatePolicyResourceUpdate) SetNillableResourceID(s *string) *OSUpdatePolicyResourceUpdate {
	if s != nil {
		oupru.SetResourceID(*s)
	}
	return oupru
}

// SetName sets the "name" field.
func (oupru *OSUpdatePolicyResourceUpdate) SetName(s string) *OSUpdatePolicyResourceUpdate {
	oupru.mutation.SetName(s)
	return oupru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oupru *OSUpdatePolicyResourceUpdate) SetNillableName(s *string) *OSUpdatePolicyResourceUpdate {
	if s != nil {
		oupru.SetName(*s)
	}
	return oupru
}

// SetDescription sets the "description" field.
func (oupru *OSUpdatePolicyResourceUpdate) SetDescription(s string) *OSUpdatePolicyResourceUpdate {
	oupru.mutation.SetDescription(s)
	return oupru
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oupru *OSUpdatePolicyResourceUpdate) SetNillableDescription(s *string) *OSUpdatePolicyResourceUpdate {
	if s != nil {
		oupru.SetDescription(*s)
	}
	return oupru
}

// ClearDescription clears the value of the "description" field.
func (oupru *OSUpdatePolicyResourceUpdate) ClearDescription() *OSUpdatePolicyResourceUpdate {
	oupru.mutation.ClearDescription()
	return oupru
}

// SetUpdatedAt sets the "updated_at" field.
func (oupru *OSUpdatePolicyResourceUpdate) SetUpdatedAt(s string) *OSUpdatePolicyResourceUpdate {
	oupru.mutation.SetUpdatedAt(s)
	return oupru
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oupru *OSUpdatePolicyResourceUpdate) SetNillableUpdatedAt(s *string) *OSUpdatePolicyResourceUpdate {
	if s != nil {
		oupru.SetUpdatedAt(*s)
	}
	return oupru
}

// SetTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID.
func (oupru *OSUpdatePolicyResourceUpdate) SetTargetOsID(id int) *OSUpdatePolicyResourceUpdate {
	oupru.mutation.SetTargetOsID(id)
	return oupru
}

// SetNillableTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (oupru *OSUpdatePolicyResourceUpdate) SetNillableTargetOsID(id *int) *OSUpdatePolicyResourceUpdate {
	if id != nil {
		oupru = oupru.SetTargetOsID(*id)
	}
	return oupru
}

// SetTargetOs sets the "target_os" edge to the OperatingSystemResource entity.
func (oupru *OSUpdatePolicyResourceUpdate) SetTargetOs(o *OperatingSystemResource) *OSUpdatePolicyResourceUpdate {
	return oupru.SetTargetOsID(o.ID)
}

// Mutation returns the OSUpdatePolicyResourceMutation object of the builder.
func (oupru *OSUpdatePolicyResourceUpdate) Mutation() *OSUpdatePolicyResourceMutation {
	return oupru.mutation
}

// ClearTargetOs clears the "target_os" edge to the OperatingSystemResource entity.
func (oupru *OSUpdatePolicyResourceUpdate) ClearTargetOs() *OSUpdatePolicyResourceUpdate {
	oupru.mutation.ClearTargetOs()
	return oupru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oupru *OSUpdatePolicyResourceUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oupru.sqlSave, oupru.mutation, oupru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oupru *OSUpdatePolicyResourceUpdate) SaveX(ctx context.Context) int {
	affected, err := oupru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oupru *OSUpdatePolicyResourceUpdate) Exec(ctx context.Context) error {
	_, err := oupru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupru *OSUpdatePolicyResourceUpdate) ExecX(ctx context.Context) {
	if err := oupru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oupru *OSUpdatePolicyResourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(osupdatepolicyresource.Table, osupdatepolicyresource.Columns, sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt))
	if ps := oupru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oupru.mutation.ResourceID(); ok {
		_spec.SetField(osupdatepolicyresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := oupru.mutation.Name(); ok {
		_spec.SetField(osupdatepolicyresource.FieldName, field.TypeString, value)
	}
	if value, ok := oupru.mutation.Description(); ok {
		_spec.SetField(osupdatepolicyresource.FieldDescription, field.TypeString, value)
	}
	if oupru.mutation.DescriptionCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldDescription, field.TypeString)
	}
	if oupru.mutation.InstallPackagesCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldInstallPackages, field.TypeString)
	}
	if oupru.mutation.UpdateSourcesCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldUpdateSources, field.TypeString)
	}
	if oupru.mutation.KernelCommandCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldKernelCommand, field.TypeString)
	}
	if oupru.mutation.UpdatePolicyCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldUpdatePolicy, field.TypeEnum)
	}
	if value, ok := oupru.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdatepolicyresource.FieldUpdatedAt, field.TypeString, value)
	}
	if oupru.mutation.TargetOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicyresource.TargetOsTable,
			Columns: []string{osupdatepolicyresource.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupru.mutation.TargetOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicyresource.TargetOsTable,
			Columns: []string{osupdatepolicyresource.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, oupru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osupdatepolicyresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oupru.mutation.done = true
	return n, nil
}

// OSUpdatePolicyResourceUpdateOne is the builder for updating a single OSUpdatePolicyResource entity.
type OSUpdatePolicyResourceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OSUpdatePolicyResourceMutation
}

// SetResourceID sets the "resource_id" field.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetResourceID(s string) *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.SetResourceID(s)
	return oupruo
}

// SetNillableResourceID sets the "resource_id" field if the given value is not nil.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetNillableResourceID(s *string) *OSUpdatePolicyResourceUpdateOne {
	if s != nil {
		oupruo.SetResourceID(*s)
	}
	return oupruo
}

// SetName sets the "name" field.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetName(s string) *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.SetName(s)
	return oupruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetNillableName(s *string) *OSUpdatePolicyResourceUpdateOne {
	if s != nil {
		oupruo.SetName(*s)
	}
	return oupruo
}

// SetDescription sets the "description" field.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetDescription(s string) *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.SetDescription(s)
	return oupruo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetNillableDescription(s *string) *OSUpdatePolicyResourceUpdateOne {
	if s != nil {
		oupruo.SetDescription(*s)
	}
	return oupruo
}

// ClearDescription clears the value of the "description" field.
func (oupruo *OSUpdatePolicyResourceUpdateOne) ClearDescription() *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.ClearDescription()
	return oupruo
}

// SetUpdatedAt sets the "updated_at" field.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetUpdatedAt(s string) *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.SetUpdatedAt(s)
	return oupruo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetNillableUpdatedAt(s *string) *OSUpdatePolicyResourceUpdateOne {
	if s != nil {
		oupruo.SetUpdatedAt(*s)
	}
	return oupruo
}

// SetTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetTargetOsID(id int) *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.SetTargetOsID(id)
	return oupruo
}

// SetNillableTargetOsID sets the "target_os" edge to the OperatingSystemResource entity by ID if the given value is not nil.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetNillableTargetOsID(id *int) *OSUpdatePolicyResourceUpdateOne {
	if id != nil {
		oupruo = oupruo.SetTargetOsID(*id)
	}
	return oupruo
}

// SetTargetOs sets the "target_os" edge to the OperatingSystemResource entity.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SetTargetOs(o *OperatingSystemResource) *OSUpdatePolicyResourceUpdateOne {
	return oupruo.SetTargetOsID(o.ID)
}

// Mutation returns the OSUpdatePolicyResourceMutation object of the builder.
func (oupruo *OSUpdatePolicyResourceUpdateOne) Mutation() *OSUpdatePolicyResourceMutation {
	return oupruo.mutation
}

// ClearTargetOs clears the "target_os" edge to the OperatingSystemResource entity.
func (oupruo *OSUpdatePolicyResourceUpdateOne) ClearTargetOs() *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.ClearTargetOs()
	return oupruo
}

// Where appends a list predicates to the OSUpdatePolicyResourceUpdate builder.
func (oupruo *OSUpdatePolicyResourceUpdateOne) Where(ps ...predicate.OSUpdatePolicyResource) *OSUpdatePolicyResourceUpdateOne {
	oupruo.mutation.Where(ps...)
	return oupruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oupruo *OSUpdatePolicyResourceUpdateOne) Select(field string, fields ...string) *OSUpdatePolicyResourceUpdateOne {
	oupruo.fields = append([]string{field}, fields...)
	return oupruo
}

// Save executes the query and returns the updated OSUpdatePolicyResource entity.
func (oupruo *OSUpdatePolicyResourceUpdateOne) Save(ctx context.Context) (*OSUpdatePolicyResource, error) {
	return withHooks(ctx, oupruo.sqlSave, oupruo.mutation, oupruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oupruo *OSUpdatePolicyResourceUpdateOne) SaveX(ctx context.Context) *OSUpdatePolicyResource {
	node, err := oupruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oupruo *OSUpdatePolicyResourceUpdateOne) Exec(ctx context.Context) error {
	_, err := oupruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oupruo *OSUpdatePolicyResourceUpdateOne) ExecX(ctx context.Context) {
	if err := oupruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (oupruo *OSUpdatePolicyResourceUpdateOne) sqlSave(ctx context.Context) (_node *OSUpdatePolicyResource, err error) {
	_spec := sqlgraph.NewUpdateSpec(osupdatepolicyresource.Table, osupdatepolicyresource.Columns, sqlgraph.NewFieldSpec(osupdatepolicyresource.FieldID, field.TypeInt))
	id, ok := oupruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OSUpdatePolicyResource.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oupruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, osupdatepolicyresource.FieldID)
		for _, f := range fields {
			if !osupdatepolicyresource.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != osupdatepolicyresource.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oupruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := oupruo.mutation.ResourceID(); ok {
		_spec.SetField(osupdatepolicyresource.FieldResourceID, field.TypeString, value)
	}
	if value, ok := oupruo.mutation.Name(); ok {
		_spec.SetField(osupdatepolicyresource.FieldName, field.TypeString, value)
	}
	if value, ok := oupruo.mutation.Description(); ok {
		_spec.SetField(osupdatepolicyresource.FieldDescription, field.TypeString, value)
	}
	if oupruo.mutation.DescriptionCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldDescription, field.TypeString)
	}
	if oupruo.mutation.InstallPackagesCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldInstallPackages, field.TypeString)
	}
	if oupruo.mutation.UpdateSourcesCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldUpdateSources, field.TypeString)
	}
	if oupruo.mutation.KernelCommandCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldKernelCommand, field.TypeString)
	}
	if oupruo.mutation.UpdatePolicyCleared() {
		_spec.ClearField(osupdatepolicyresource.FieldUpdatePolicy, field.TypeEnum)
	}
	if value, ok := oupruo.mutation.UpdatedAt(); ok {
		_spec.SetField(osupdatepolicyresource.FieldUpdatedAt, field.TypeString, value)
	}
	if oupruo.mutation.TargetOsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicyresource.TargetOsTable,
			Columns: []string{osupdatepolicyresource.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := oupruo.mutation.TargetOsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   osupdatepolicyresource.TargetOsTable,
			Columns: []string{osupdatepolicyresource.TargetOsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OSUpdatePolicyResource{config: oupruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oupruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{osupdatepolicyresource.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oupruo.mutation.done = true
	return _node, nil
}
