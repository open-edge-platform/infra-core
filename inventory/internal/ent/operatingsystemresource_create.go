// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
)

// OperatingSystemResourceCreate is the builder for creating a OperatingSystemResource entity.
type OperatingSystemResourceCreate struct {
	config
	mutation *OperatingSystemResourceMutation
	hooks    []Hook
}

// SetResourceID sets the "resource_id" field.
func (_c *OperatingSystemResourceCreate) SetResourceID(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetResourceID(v)
	return _c
}

// SetName sets the "name" field.
func (_c *OperatingSystemResourceCreate) SetName(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableName(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetArchitecture sets the "architecture" field.
func (_c *OperatingSystemResourceCreate) SetArchitecture(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetArchitecture(v)
	return _c
}

// SetNillableArchitecture sets the "architecture" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableArchitecture(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetArchitecture(*v)
	}
	return _c
}

// SetKernelCommand sets the "kernel_command" field.
func (_c *OperatingSystemResourceCreate) SetKernelCommand(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetKernelCommand(v)
	return _c
}

// SetNillableKernelCommand sets the "kernel_command" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableKernelCommand(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetKernelCommand(*v)
	}
	return _c
}

// SetUpdateSources sets the "update_sources" field.
func (_c *OperatingSystemResourceCreate) SetUpdateSources(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetUpdateSources(v)
	return _c
}

// SetNillableUpdateSources sets the "update_sources" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableUpdateSources(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetUpdateSources(*v)
	}
	return _c
}

// SetImageURL sets the "image_url" field.
func (_c *OperatingSystemResourceCreate) SetImageURL(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetImageURL(v)
	return _c
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableImageURL(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetImageURL(*v)
	}
	return _c
}

// SetImageID sets the "image_id" field.
func (_c *OperatingSystemResourceCreate) SetImageID(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetImageID(v)
	return _c
}

// SetNillableImageID sets the "image_id" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableImageID(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetImageID(*v)
	}
	return _c
}

// SetSha256 sets the "sha256" field.
func (_c *OperatingSystemResourceCreate) SetSha256(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetSha256(v)
	return _c
}

// SetNillableSha256 sets the "sha256" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableSha256(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetSha256(*v)
	}
	return _c
}

// SetProfileName sets the "profile_name" field.
func (_c *OperatingSystemResourceCreate) SetProfileName(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetProfileName(v)
	return _c
}

// SetNillableProfileName sets the "profile_name" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableProfileName(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetProfileName(*v)
	}
	return _c
}

// SetProfileVersion sets the "profile_version" field.
func (_c *OperatingSystemResourceCreate) SetProfileVersion(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetProfileVersion(v)
	return _c
}

// SetNillableProfileVersion sets the "profile_version" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableProfileVersion(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetProfileVersion(*v)
	}
	return _c
}

// SetInstalledPackages sets the "installed_packages" field.
func (_c *OperatingSystemResourceCreate) SetInstalledPackages(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetInstalledPackages(v)
	return _c
}

// SetNillableInstalledPackages sets the "installed_packages" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableInstalledPackages(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetInstalledPackages(*v)
	}
	return _c
}

// SetInstalledPackagesURL sets the "installed_packages_url" field.
func (_c *OperatingSystemResourceCreate) SetInstalledPackagesURL(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetInstalledPackagesURL(v)
	return _c
}

// SetNillableInstalledPackagesURL sets the "installed_packages_url" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableInstalledPackagesURL(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetInstalledPackagesURL(*v)
	}
	return _c
}

// SetSecurityFeature sets the "security_feature" field.
func (_c *OperatingSystemResourceCreate) SetSecurityFeature(v operatingsystemresource.SecurityFeature) *OperatingSystemResourceCreate {
	_c.mutation.SetSecurityFeature(v)
	return _c
}

// SetNillableSecurityFeature sets the "security_feature" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableSecurityFeature(v *operatingsystemresource.SecurityFeature) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetSecurityFeature(*v)
	}
	return _c
}

// SetOsType sets the "os_type" field.
func (_c *OperatingSystemResourceCreate) SetOsType(v operatingsystemresource.OsType) *OperatingSystemResourceCreate {
	_c.mutation.SetOsType(v)
	return _c
}

// SetNillableOsType sets the "os_type" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableOsType(v *operatingsystemresource.OsType) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetOsType(*v)
	}
	return _c
}

// SetOsProvider sets the "os_provider" field.
func (_c *OperatingSystemResourceCreate) SetOsProvider(v operatingsystemresource.OsProvider) *OperatingSystemResourceCreate {
	_c.mutation.SetOsProvider(v)
	return _c
}

// SetPlatformBundle sets the "platform_bundle" field.
func (_c *OperatingSystemResourceCreate) SetPlatformBundle(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetPlatformBundle(v)
	return _c
}

// SetNillablePlatformBundle sets the "platform_bundle" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillablePlatformBundle(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetPlatformBundle(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *OperatingSystemResourceCreate) SetDescription(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableDescription(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *OperatingSystemResourceCreate) SetMetadata(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetNillableMetadata sets the "metadata" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableMetadata(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetMetadata(*v)
	}
	return _c
}

// SetTLSCaCert sets the "tls_ca_cert" field.
func (_c *OperatingSystemResourceCreate) SetTLSCaCert(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetTLSCaCert(v)
	return _c
}

// SetNillableTLSCaCert sets the "tls_ca_cert" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableTLSCaCert(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetTLSCaCert(*v)
	}
	return _c
}

// SetExistingCvesURL sets the "existing_cves_url" field.
func (_c *OperatingSystemResourceCreate) SetExistingCvesURL(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetExistingCvesURL(v)
	return _c
}

// SetNillableExistingCvesURL sets the "existing_cves_url" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableExistingCvesURL(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetExistingCvesURL(*v)
	}
	return _c
}

// SetExistingCves sets the "existing_cves" field.
func (_c *OperatingSystemResourceCreate) SetExistingCves(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetExistingCves(v)
	return _c
}

// SetNillableExistingCves sets the "existing_cves" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableExistingCves(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetExistingCves(*v)
	}
	return _c
}

// SetFixedCvesURL sets the "fixed_cves_url" field.
func (_c *OperatingSystemResourceCreate) SetFixedCvesURL(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetFixedCvesURL(v)
	return _c
}

// SetNillableFixedCvesURL sets the "fixed_cves_url" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableFixedCvesURL(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetFixedCvesURL(*v)
	}
	return _c
}

// SetFixedCves sets the "fixed_cves" field.
func (_c *OperatingSystemResourceCreate) SetFixedCves(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetFixedCves(v)
	return _c
}

// SetNillableFixedCves sets the "fixed_cves" field if the given value is not nil.
func (_c *OperatingSystemResourceCreate) SetNillableFixedCves(v *string) *OperatingSystemResourceCreate {
	if v != nil {
		_c.SetFixedCves(*v)
	}
	return _c
}

// SetTenantID sets the "tenant_id" field.
func (_c *OperatingSystemResourceCreate) SetTenantID(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetTenantID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *OperatingSystemResourceCreate) SetCreatedAt(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *OperatingSystemResourceCreate) SetUpdatedAt(v string) *OperatingSystemResourceCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// Mutation returns the OperatingSystemResourceMutation object of the builder.
func (_c *OperatingSystemResourceCreate) Mutation() *OperatingSystemResourceMutation {
	return _c.mutation
}

// Save creates the OperatingSystemResource in the database.
func (_c *OperatingSystemResourceCreate) Save(ctx context.Context) (*OperatingSystemResource, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OperatingSystemResourceCreate) SaveX(ctx context.Context) *OperatingSystemResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OperatingSystemResourceCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OperatingSystemResourceCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OperatingSystemResourceCreate) check() error {
	if _, ok := _c.mutation.ResourceID(); !ok {
		return &ValidationError{Name: "resource_id", err: errors.New(`ent: missing required field "OperatingSystemResource.resource_id"`)}
	}
	if v, ok := _c.mutation.SecurityFeature(); ok {
		if err := operatingsystemresource.SecurityFeatureValidator(v); err != nil {
			return &ValidationError{Name: "security_feature", err: fmt.Errorf(`ent: validator failed for field "OperatingSystemResource.security_feature": %w`, err)}
		}
	}
	if v, ok := _c.mutation.OsType(); ok {
		if err := operatingsystemresource.OsTypeValidator(v); err != nil {
			return &ValidationError{Name: "os_type", err: fmt.Errorf(`ent: validator failed for field "OperatingSystemResource.os_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.OsProvider(); !ok {
		return &ValidationError{Name: "os_provider", err: errors.New(`ent: missing required field "OperatingSystemResource.os_provider"`)}
	}
	if v, ok := _c.mutation.OsProvider(); ok {
		if err := operatingsystemresource.OsProviderValidator(v); err != nil {
			return &ValidationError{Name: "os_provider", err: fmt.Errorf(`ent: validator failed for field "OperatingSystemResource.os_provider": %w`, err)}
		}
	}
	if _, ok := _c.mutation.TenantID(); !ok {
		return &ValidationError{Name: "tenant_id", err: errors.New(`ent: missing required field "OperatingSystemResource.tenant_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "OperatingSystemResource.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "OperatingSystemResource.updated_at"`)}
	}
	return nil
}

func (_c *OperatingSystemResourceCreate) sqlSave(ctx context.Context) (*OperatingSystemResource, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OperatingSystemResourceCreate) createSpec() (*OperatingSystemResource, *sqlgraph.CreateSpec) {
	var (
		_node = &OperatingSystemResource{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(operatingsystemresource.Table, sqlgraph.NewFieldSpec(operatingsystemresource.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.ResourceID(); ok {
		_spec.SetField(operatingsystemresource.FieldResourceID, field.TypeString, value)
		_node.ResourceID = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(operatingsystemresource.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Architecture(); ok {
		_spec.SetField(operatingsystemresource.FieldArchitecture, field.TypeString, value)
		_node.Architecture = value
	}
	if value, ok := _c.mutation.KernelCommand(); ok {
		_spec.SetField(operatingsystemresource.FieldKernelCommand, field.TypeString, value)
		_node.KernelCommand = value
	}
	if value, ok := _c.mutation.UpdateSources(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdateSources, field.TypeString, value)
		_node.UpdateSources = value
	}
	if value, ok := _c.mutation.ImageURL(); ok {
		_spec.SetField(operatingsystemresource.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := _c.mutation.ImageID(); ok {
		_spec.SetField(operatingsystemresource.FieldImageID, field.TypeString, value)
		_node.ImageID = value
	}
	if value, ok := _c.mutation.Sha256(); ok {
		_spec.SetField(operatingsystemresource.FieldSha256, field.TypeString, value)
		_node.Sha256 = value
	}
	if value, ok := _c.mutation.ProfileName(); ok {
		_spec.SetField(operatingsystemresource.FieldProfileName, field.TypeString, value)
		_node.ProfileName = value
	}
	if value, ok := _c.mutation.ProfileVersion(); ok {
		_spec.SetField(operatingsystemresource.FieldProfileVersion, field.TypeString, value)
		_node.ProfileVersion = value
	}
	if value, ok := _c.mutation.InstalledPackages(); ok {
		_spec.SetField(operatingsystemresource.FieldInstalledPackages, field.TypeString, value)
		_node.InstalledPackages = value
	}
	if value, ok := _c.mutation.InstalledPackagesURL(); ok {
		_spec.SetField(operatingsystemresource.FieldInstalledPackagesURL, field.TypeString, value)
		_node.InstalledPackagesURL = value
	}
	if value, ok := _c.mutation.SecurityFeature(); ok {
		_spec.SetField(operatingsystemresource.FieldSecurityFeature, field.TypeEnum, value)
		_node.SecurityFeature = value
	}
	if value, ok := _c.mutation.OsType(); ok {
		_spec.SetField(operatingsystemresource.FieldOsType, field.TypeEnum, value)
		_node.OsType = value
	}
	if value, ok := _c.mutation.OsProvider(); ok {
		_spec.SetField(operatingsystemresource.FieldOsProvider, field.TypeEnum, value)
		_node.OsProvider = value
	}
	if value, ok := _c.mutation.PlatformBundle(); ok {
		_spec.SetField(operatingsystemresource.FieldPlatformBundle, field.TypeString, value)
		_node.PlatformBundle = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(operatingsystemresource.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(operatingsystemresource.FieldMetadata, field.TypeString, value)
		_node.Metadata = value
	}
	if value, ok := _c.mutation.TLSCaCert(); ok {
		_spec.SetField(operatingsystemresource.FieldTLSCaCert, field.TypeString, value)
		_node.TLSCaCert = value
	}
	if value, ok := _c.mutation.ExistingCvesURL(); ok {
		_spec.SetField(operatingsystemresource.FieldExistingCvesURL, field.TypeString, value)
		_node.ExistingCvesURL = value
	}
	if value, ok := _c.mutation.ExistingCves(); ok {
		_spec.SetField(operatingsystemresource.FieldExistingCves, field.TypeString, value)
		_node.ExistingCves = value
	}
	if value, ok := _c.mutation.FixedCvesURL(); ok {
		_spec.SetField(operatingsystemresource.FieldFixedCvesURL, field.TypeString, value)
		_node.FixedCvesURL = value
	}
	if value, ok := _c.mutation.FixedCves(); ok {
		_spec.SetField(operatingsystemresource.FieldFixedCves, field.TypeString, value)
		_node.FixedCves = value
	}
	if value, ok := _c.mutation.TenantID(); ok {
		_spec.SetField(operatingsystemresource.FieldTenantID, field.TypeString, value)
		_node.TenantID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(operatingsystemresource.FieldCreatedAt, field.TypeString, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(operatingsystemresource.FieldUpdatedAt, field.TypeString, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OperatingSystemResourceCreateBulk is the builder for creating many OperatingSystemResource entities in bulk.
type OperatingSystemResourceCreateBulk struct {
	config
	err      error
	builders []*OperatingSystemResourceCreate
}

// Save creates the OperatingSystemResource entities in the database.
func (_c *OperatingSystemResourceCreateBulk) Save(ctx context.Context) ([]*OperatingSystemResource, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OperatingSystemResource, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OperatingSystemResourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OperatingSystemResourceCreateBulk) SaveX(ctx context.Context) []*OperatingSystemResource {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OperatingSystemResourceCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OperatingSystemResourceCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
