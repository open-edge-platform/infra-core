// Code generated by ent, DO NOT EDIT.

package intercept

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/endpointresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostgpuresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostnicresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hoststorageresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostusbresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ipaddressresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/localaccountresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/netlinkresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/networksegment"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/operatingsystemresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicy"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/osupdatepolicyresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/ouresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/regionresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/remoteaccessconfiguration"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/repeatedscheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/singlescheduleresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/telemetrygroupresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/telemetryprofile"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/tenant"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadmember"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/workloadresource"
)

// The Query interface represents an operation that queries a graph.
// By using this interface, users can write generic code that manipulates
// query builders of different types.
type Query interface {
	// Type returns the string representation of the query type.
	Type() string
	// Limit the number of records to be returned by this query.
	Limit(int)
	// Offset to start from.
	Offset(int)
	// Unique configures the query builder to filter duplicate records.
	Unique(bool)
	// Order specifies how the records should be ordered.
	Order(...func(*sql.Selector))
	// WhereP appends storage-level predicates to the query builder. Using this method, users
	// can use type-assertion to append predicates that do not depend on any generated package.
	WhereP(...func(*sql.Selector))
}

// The Func type is an adapter that allows ordinary functions to be used as interceptors.
// Unlike traversal functions, interceptors are skipped during graph traversals. Note that the
// implementation of Func is different from the one defined in entgo.io/ent.InterceptFunc.
type Func func(context.Context, Query) error

// Intercept calls f(ctx, q) and then applied the next Querier.
func (f Func) Intercept(next ent.Querier) ent.Querier {
	return ent.QuerierFunc(func(ctx context.Context, q ent.Query) (ent.Value, error) {
		query, err := NewQuery(q)
		if err != nil {
			return nil, err
		}
		if err := f(ctx, query); err != nil {
			return nil, err
		}
		return next.Query(ctx, q)
	})
}

// The TraverseFunc type is an adapter to allow the use of ordinary function as Traverser.
// If f is a function with the appropriate signature, TraverseFunc(f) is a Traverser that calls f.
type TraverseFunc func(context.Context, Query) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseFunc) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseFunc) Traverse(ctx context.Context, q ent.Query) error {
	query, err := NewQuery(q)
	if err != nil {
		return err
	}
	return f(ctx, query)
}

// The CustomConfigResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type CustomConfigResourceFunc func(context.Context, *ent.CustomConfigResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f CustomConfigResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.CustomConfigResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.CustomConfigResourceQuery", q)
}

// The TraverseCustomConfigResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseCustomConfigResource func(context.Context, *ent.CustomConfigResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseCustomConfigResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseCustomConfigResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.CustomConfigResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.CustomConfigResourceQuery", q)
}

// The EndpointResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type EndpointResourceFunc func(context.Context, *ent.EndpointResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f EndpointResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.EndpointResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.EndpointResourceQuery", q)
}

// The TraverseEndpointResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseEndpointResource func(context.Context, *ent.EndpointResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseEndpointResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseEndpointResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.EndpointResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.EndpointResourceQuery", q)
}

// The HostResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type HostResourceFunc func(context.Context, *ent.HostResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HostResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HostResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HostResourceQuery", q)
}

// The TraverseHostResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHostResource func(context.Context, *ent.HostResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHostResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHostResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HostResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HostResourceQuery", q)
}

// The HostgpuResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type HostgpuResourceFunc func(context.Context, *ent.HostgpuResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HostgpuResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HostgpuResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HostgpuResourceQuery", q)
}

// The TraverseHostgpuResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHostgpuResource func(context.Context, *ent.HostgpuResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHostgpuResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHostgpuResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HostgpuResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HostgpuResourceQuery", q)
}

// The HostnicResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type HostnicResourceFunc func(context.Context, *ent.HostnicResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HostnicResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HostnicResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HostnicResourceQuery", q)
}

// The TraverseHostnicResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHostnicResource func(context.Context, *ent.HostnicResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHostnicResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHostnicResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HostnicResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HostnicResourceQuery", q)
}

// The HoststorageResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type HoststorageResourceFunc func(context.Context, *ent.HoststorageResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HoststorageResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HoststorageResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HoststorageResourceQuery", q)
}

// The TraverseHoststorageResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHoststorageResource func(context.Context, *ent.HoststorageResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHoststorageResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHoststorageResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HoststorageResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HoststorageResourceQuery", q)
}

// The HostusbResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type HostusbResourceFunc func(context.Context, *ent.HostusbResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f HostusbResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.HostusbResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.HostusbResourceQuery", q)
}

// The TraverseHostusbResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseHostusbResource func(context.Context, *ent.HostusbResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseHostusbResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseHostusbResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.HostusbResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.HostusbResourceQuery", q)
}

// The IPAddressResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type IPAddressResourceFunc func(context.Context, *ent.IPAddressResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f IPAddressResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.IPAddressResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.IPAddressResourceQuery", q)
}

// The TraverseIPAddressResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseIPAddressResource func(context.Context, *ent.IPAddressResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseIPAddressResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseIPAddressResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.IPAddressResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.IPAddressResourceQuery", q)
}

// The InstanceResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type InstanceResourceFunc func(context.Context, *ent.InstanceResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f InstanceResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.InstanceResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.InstanceResourceQuery", q)
}

// The TraverseInstanceResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseInstanceResource func(context.Context, *ent.InstanceResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseInstanceResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseInstanceResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.InstanceResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.InstanceResourceQuery", q)
}

// The LocalAccountResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type LocalAccountResourceFunc func(context.Context, *ent.LocalAccountResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f LocalAccountResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.LocalAccountResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.LocalAccountResourceQuery", q)
}

// The TraverseLocalAccountResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseLocalAccountResource func(context.Context, *ent.LocalAccountResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseLocalAccountResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseLocalAccountResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.LocalAccountResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.LocalAccountResourceQuery", q)
}

// The NetlinkResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type NetlinkResourceFunc func(context.Context, *ent.NetlinkResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f NetlinkResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.NetlinkResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.NetlinkResourceQuery", q)
}

// The TraverseNetlinkResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNetlinkResource func(context.Context, *ent.NetlinkResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNetlinkResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNetlinkResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NetlinkResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.NetlinkResourceQuery", q)
}

// The NetworkSegmentFunc type is an adapter to allow the use of ordinary function as a Querier.
type NetworkSegmentFunc func(context.Context, *ent.NetworkSegmentQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f NetworkSegmentFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.NetworkSegmentQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.NetworkSegmentQuery", q)
}

// The TraverseNetworkSegment type is an adapter to allow the use of ordinary function as Traverser.
type TraverseNetworkSegment func(context.Context, *ent.NetworkSegmentQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseNetworkSegment) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseNetworkSegment) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.NetworkSegmentQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.NetworkSegmentQuery", q)
}

// The OSUpdatePolicyFunc type is an adapter to allow the use of ordinary function as a Querier.
type OSUpdatePolicyFunc func(context.Context, *ent.OSUpdatePolicyQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OSUpdatePolicyFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OSUpdatePolicyQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OSUpdatePolicyQuery", q)
}

// The TraverseOSUpdatePolicy type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOSUpdatePolicy func(context.Context, *ent.OSUpdatePolicyQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOSUpdatePolicy) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOSUpdatePolicy) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OSUpdatePolicyQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OSUpdatePolicyQuery", q)
}

// The OSUpdatePolicyResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type OSUpdatePolicyResourceFunc func(context.Context, *ent.OSUpdatePolicyResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OSUpdatePolicyResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OSUpdatePolicyResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OSUpdatePolicyResourceQuery", q)
}

// The TraverseOSUpdatePolicyResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOSUpdatePolicyResource func(context.Context, *ent.OSUpdatePolicyResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOSUpdatePolicyResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOSUpdatePolicyResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OSUpdatePolicyResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OSUpdatePolicyResourceQuery", q)
}

// The OperatingSystemResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type OperatingSystemResourceFunc func(context.Context, *ent.OperatingSystemResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OperatingSystemResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OperatingSystemResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OperatingSystemResourceQuery", q)
}

// The TraverseOperatingSystemResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOperatingSystemResource func(context.Context, *ent.OperatingSystemResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOperatingSystemResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOperatingSystemResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OperatingSystemResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OperatingSystemResourceQuery", q)
}

// The OuResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type OuResourceFunc func(context.Context, *ent.OuResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f OuResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.OuResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.OuResourceQuery", q)
}

// The TraverseOuResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseOuResource func(context.Context, *ent.OuResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseOuResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseOuResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.OuResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.OuResourceQuery", q)
}

// The ProviderResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type ProviderResourceFunc func(context.Context, *ent.ProviderResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f ProviderResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.ProviderResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.ProviderResourceQuery", q)
}

// The TraverseProviderResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseProviderResource func(context.Context, *ent.ProviderResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseProviderResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseProviderResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.ProviderResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.ProviderResourceQuery", q)
}

// The RegionResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type RegionResourceFunc func(context.Context, *ent.RegionResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RegionResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RegionResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RegionResourceQuery", q)
}

// The TraverseRegionResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRegionResource func(context.Context, *ent.RegionResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRegionResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRegionResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RegionResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RegionResourceQuery", q)
}

// The RemoteAccessConfigurationFunc type is an adapter to allow the use of ordinary function as a Querier.
type RemoteAccessConfigurationFunc func(context.Context, *ent.RemoteAccessConfigurationQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RemoteAccessConfigurationFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RemoteAccessConfigurationQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RemoteAccessConfigurationQuery", q)
}

// The TraverseRemoteAccessConfiguration type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRemoteAccessConfiguration func(context.Context, *ent.RemoteAccessConfigurationQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRemoteAccessConfiguration) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRemoteAccessConfiguration) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RemoteAccessConfigurationQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RemoteAccessConfigurationQuery", q)
}

// The RepeatedScheduleResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type RepeatedScheduleResourceFunc func(context.Context, *ent.RepeatedScheduleResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f RepeatedScheduleResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.RepeatedScheduleResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.RepeatedScheduleResourceQuery", q)
}

// The TraverseRepeatedScheduleResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseRepeatedScheduleResource func(context.Context, *ent.RepeatedScheduleResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseRepeatedScheduleResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseRepeatedScheduleResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.RepeatedScheduleResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.RepeatedScheduleResourceQuery", q)
}

// The SingleScheduleResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type SingleScheduleResourceFunc func(context.Context, *ent.SingleScheduleResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SingleScheduleResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SingleScheduleResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SingleScheduleResourceQuery", q)
}

// The TraverseSingleScheduleResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSingleScheduleResource func(context.Context, *ent.SingleScheduleResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSingleScheduleResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSingleScheduleResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SingleScheduleResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SingleScheduleResourceQuery", q)
}

// The SiteResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type SiteResourceFunc func(context.Context, *ent.SiteResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f SiteResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.SiteResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.SiteResourceQuery", q)
}

// The TraverseSiteResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseSiteResource func(context.Context, *ent.SiteResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseSiteResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseSiteResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.SiteResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.SiteResourceQuery", q)
}

// The TelemetryGroupResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type TelemetryGroupResourceFunc func(context.Context, *ent.TelemetryGroupResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TelemetryGroupResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TelemetryGroupResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TelemetryGroupResourceQuery", q)
}

// The TraverseTelemetryGroupResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTelemetryGroupResource func(context.Context, *ent.TelemetryGroupResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTelemetryGroupResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTelemetryGroupResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TelemetryGroupResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TelemetryGroupResourceQuery", q)
}

// The TelemetryProfileFunc type is an adapter to allow the use of ordinary function as a Querier.
type TelemetryProfileFunc func(context.Context, *ent.TelemetryProfileQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TelemetryProfileFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TelemetryProfileQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TelemetryProfileQuery", q)
}

// The TraverseTelemetryProfile type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTelemetryProfile func(context.Context, *ent.TelemetryProfileQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTelemetryProfile) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTelemetryProfile) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TelemetryProfileQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TelemetryProfileQuery", q)
}

// The TenantFunc type is an adapter to allow the use of ordinary function as a Querier.
type TenantFunc func(context.Context, *ent.TenantQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f TenantFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.TenantQuery", q)
}

// The TraverseTenant type is an adapter to allow the use of ordinary function as Traverser.
type TraverseTenant func(context.Context, *ent.TenantQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseTenant) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseTenant) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.TenantQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.TenantQuery", q)
}

// The WorkloadMemberFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkloadMemberFunc func(context.Context, *ent.WorkloadMemberQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WorkloadMemberFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WorkloadMemberQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WorkloadMemberQuery", q)
}

// The TraverseWorkloadMember type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkloadMember func(context.Context, *ent.WorkloadMemberQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkloadMember) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkloadMember) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkloadMemberQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WorkloadMemberQuery", q)
}

// The WorkloadResourceFunc type is an adapter to allow the use of ordinary function as a Querier.
type WorkloadResourceFunc func(context.Context, *ent.WorkloadResourceQuery) (ent.Value, error)

// Query calls f(ctx, q).
func (f WorkloadResourceFunc) Query(ctx context.Context, q ent.Query) (ent.Value, error) {
	if q, ok := q.(*ent.WorkloadResourceQuery); ok {
		return f(ctx, q)
	}
	return nil, fmt.Errorf("unexpected query type %T. expect *ent.WorkloadResourceQuery", q)
}

// The TraverseWorkloadResource type is an adapter to allow the use of ordinary function as Traverser.
type TraverseWorkloadResource func(context.Context, *ent.WorkloadResourceQuery) error

// Intercept is a dummy implementation of Intercept that returns the next Querier in the pipeline.
func (f TraverseWorkloadResource) Intercept(next ent.Querier) ent.Querier {
	return next
}

// Traverse calls f(ctx, q).
func (f TraverseWorkloadResource) Traverse(ctx context.Context, q ent.Query) error {
	if q, ok := q.(*ent.WorkloadResourceQuery); ok {
		return f(ctx, q)
	}
	return fmt.Errorf("unexpected query type %T. expect *ent.WorkloadResourceQuery", q)
}

// NewQuery returns the generic Query interface for the given typed query.
func NewQuery(q ent.Query) (Query, error) {
	switch q := q.(type) {
	case *ent.CustomConfigResourceQuery:
		return &query[*ent.CustomConfigResourceQuery, predicate.CustomConfigResource, customconfigresource.OrderOption]{typ: ent.TypeCustomConfigResource, tq: q}, nil
	case *ent.EndpointResourceQuery:
		return &query[*ent.EndpointResourceQuery, predicate.EndpointResource, endpointresource.OrderOption]{typ: ent.TypeEndpointResource, tq: q}, nil
	case *ent.HostResourceQuery:
		return &query[*ent.HostResourceQuery, predicate.HostResource, hostresource.OrderOption]{typ: ent.TypeHostResource, tq: q}, nil
	case *ent.HostgpuResourceQuery:
		return &query[*ent.HostgpuResourceQuery, predicate.HostgpuResource, hostgpuresource.OrderOption]{typ: ent.TypeHostgpuResource, tq: q}, nil
	case *ent.HostnicResourceQuery:
		return &query[*ent.HostnicResourceQuery, predicate.HostnicResource, hostnicresource.OrderOption]{typ: ent.TypeHostnicResource, tq: q}, nil
	case *ent.HoststorageResourceQuery:
		return &query[*ent.HoststorageResourceQuery, predicate.HoststorageResource, hoststorageresource.OrderOption]{typ: ent.TypeHoststorageResource, tq: q}, nil
	case *ent.HostusbResourceQuery:
		return &query[*ent.HostusbResourceQuery, predicate.HostusbResource, hostusbresource.OrderOption]{typ: ent.TypeHostusbResource, tq: q}, nil
	case *ent.IPAddressResourceQuery:
		return &query[*ent.IPAddressResourceQuery, predicate.IPAddressResource, ipaddressresource.OrderOption]{typ: ent.TypeIPAddressResource, tq: q}, nil
	case *ent.InstanceResourceQuery:
		return &query[*ent.InstanceResourceQuery, predicate.InstanceResource, instanceresource.OrderOption]{typ: ent.TypeInstanceResource, tq: q}, nil
	case *ent.LocalAccountResourceQuery:
		return &query[*ent.LocalAccountResourceQuery, predicate.LocalAccountResource, localaccountresource.OrderOption]{typ: ent.TypeLocalAccountResource, tq: q}, nil
	case *ent.NetlinkResourceQuery:
		return &query[*ent.NetlinkResourceQuery, predicate.NetlinkResource, netlinkresource.OrderOption]{typ: ent.TypeNetlinkResource, tq: q}, nil
	case *ent.NetworkSegmentQuery:
		return &query[*ent.NetworkSegmentQuery, predicate.NetworkSegment, networksegment.OrderOption]{typ: ent.TypeNetworkSegment, tq: q}, nil
	case *ent.OSUpdatePolicyQuery:
		return &query[*ent.OSUpdatePolicyQuery, predicate.OSUpdatePolicy, osupdatepolicy.OrderOption]{typ: ent.TypeOSUpdatePolicy, tq: q}, nil
	case *ent.OSUpdatePolicyResourceQuery:
		return &query[*ent.OSUpdatePolicyResourceQuery, predicate.OSUpdatePolicyResource, osupdatepolicyresource.OrderOption]{typ: ent.TypeOSUpdatePolicyResource, tq: q}, nil
	case *ent.OperatingSystemResourceQuery:
		return &query[*ent.OperatingSystemResourceQuery, predicate.OperatingSystemResource, operatingsystemresource.OrderOption]{typ: ent.TypeOperatingSystemResource, tq: q}, nil
	case *ent.OuResourceQuery:
		return &query[*ent.OuResourceQuery, predicate.OuResource, ouresource.OrderOption]{typ: ent.TypeOuResource, tq: q}, nil
	case *ent.ProviderResourceQuery:
		return &query[*ent.ProviderResourceQuery, predicate.ProviderResource, providerresource.OrderOption]{typ: ent.TypeProviderResource, tq: q}, nil
	case *ent.RegionResourceQuery:
		return &query[*ent.RegionResourceQuery, predicate.RegionResource, regionresource.OrderOption]{typ: ent.TypeRegionResource, tq: q}, nil
	case *ent.RemoteAccessConfigurationQuery:
		return &query[*ent.RemoteAccessConfigurationQuery, predicate.RemoteAccessConfiguration, remoteaccessconfiguration.OrderOption]{typ: ent.TypeRemoteAccessConfiguration, tq: q}, nil
	case *ent.RepeatedScheduleResourceQuery:
		return &query[*ent.RepeatedScheduleResourceQuery, predicate.RepeatedScheduleResource, repeatedscheduleresource.OrderOption]{typ: ent.TypeRepeatedScheduleResource, tq: q}, nil
	case *ent.SingleScheduleResourceQuery:
		return &query[*ent.SingleScheduleResourceQuery, predicate.SingleScheduleResource, singlescheduleresource.OrderOption]{typ: ent.TypeSingleScheduleResource, tq: q}, nil
	case *ent.SiteResourceQuery:
		return &query[*ent.SiteResourceQuery, predicate.SiteResource, siteresource.OrderOption]{typ: ent.TypeSiteResource, tq: q}, nil
	case *ent.TelemetryGroupResourceQuery:
		return &query[*ent.TelemetryGroupResourceQuery, predicate.TelemetryGroupResource, telemetrygroupresource.OrderOption]{typ: ent.TypeTelemetryGroupResource, tq: q}, nil
	case *ent.TelemetryProfileQuery:
		return &query[*ent.TelemetryProfileQuery, predicate.TelemetryProfile, telemetryprofile.OrderOption]{typ: ent.TypeTelemetryProfile, tq: q}, nil
	case *ent.TenantQuery:
		return &query[*ent.TenantQuery, predicate.Tenant, tenant.OrderOption]{typ: ent.TypeTenant, tq: q}, nil
	case *ent.WorkloadMemberQuery:
		return &query[*ent.WorkloadMemberQuery, predicate.WorkloadMember, workloadmember.OrderOption]{typ: ent.TypeWorkloadMember, tq: q}, nil
	case *ent.WorkloadResourceQuery:
		return &query[*ent.WorkloadResourceQuery, predicate.WorkloadResource, workloadresource.OrderOption]{typ: ent.TypeWorkloadResource, tq: q}, nil
	default:
		return nil, fmt.Errorf("unknown query type %T", q)
	}
}

type query[T any, P ~func(*sql.Selector), R ~func(*sql.Selector)] struct {
	typ string
	tq  interface {
		Limit(int) T
		Offset(int) T
		Unique(bool) T
		Order(...R) T
		Where(...P) T
	}
}

func (q query[T, P, R]) Type() string {
	return q.typ
}

func (q query[T, P, R]) Limit(limit int) {
	q.tq.Limit(limit)
}

func (q query[T, P, R]) Offset(offset int) {
	q.tq.Offset(offset)
}

func (q query[T, P, R]) Unique(unique bool) {
	q.tq.Unique(unique)
}

func (q query[T, P, R]) Order(orders ...func(*sql.Selector)) {
	rs := make([]R, len(orders))
	for i := range orders {
		rs[i] = orders[i]
	}
	q.tq.Order(rs...)
}

func (q query[T, P, R]) WhereP(ps ...func(*sql.Selector)) {
	p := make([]P, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	q.tq.Where(p...)
}
