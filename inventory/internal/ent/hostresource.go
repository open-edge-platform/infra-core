// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/hostresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/instanceresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/providerresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/siteresource"
)

// HostResource is the model entity for the HostResource schema.
type HostResource struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ResourceID holds the value of the "resource_id" field.
	ResourceID string `json:"resource_id,omitempty"`
	// Kind holds the value of the "kind" field.
	Kind string `json:"kind,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// DesiredState holds the value of the "desired_state" field.
	DesiredState hostresource.DesiredState `json:"desired_state,omitempty"`
	// CurrentState holds the value of the "current_state" field.
	CurrentState hostresource.CurrentState `json:"current_state,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// HardwareKind holds the value of the "hardware_kind" field.
	HardwareKind string `json:"hardware_kind,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber string `json:"serial_number,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID string `json:"uuid,omitempty"`
	// MemoryBytes holds the value of the "memory_bytes" field.
	MemoryBytes uint64 `json:"memory_bytes,omitempty"`
	// CPUModel holds the value of the "cpu_model" field.
	CPUModel string `json:"cpu_model,omitempty"`
	// CPUSockets holds the value of the "cpu_sockets" field.
	CPUSockets uint32 `json:"cpu_sockets,omitempty"`
	// CPUCores holds the value of the "cpu_cores" field.
	CPUCores uint32 `json:"cpu_cores,omitempty"`
	// CPUCapabilities holds the value of the "cpu_capabilities" field.
	CPUCapabilities string `json:"cpu_capabilities,omitempty"`
	// CPUArchitecture holds the value of the "cpu_architecture" field.
	CPUArchitecture string `json:"cpu_architecture,omitempty"`
	// CPUThreads holds the value of the "cpu_threads" field.
	CPUThreads uint32 `json:"cpu_threads,omitempty"`
	// CPUTopology holds the value of the "cpu_topology" field.
	CPUTopology string `json:"cpu_topology,omitempty"`
	// MgmtIP holds the value of the "mgmt_ip" field.
	MgmtIP string `json:"mgmt_ip,omitempty"`
	// BmcKind holds the value of the "bmc_kind" field.
	BmcKind hostresource.BmcKind `json:"bmc_kind,omitempty"`
	// BmcIP holds the value of the "bmc_ip" field.
	BmcIP string `json:"bmc_ip,omitempty"`
	// BmcUsername holds the value of the "bmc_username" field.
	BmcUsername string `json:"bmc_username,omitempty"`
	// BmcPassword holds the value of the "bmc_password" field.
	BmcPassword string `json:"bmc_password,omitempty"`
	// PxeMAC holds the value of the "pxe_mac" field.
	PxeMAC string `json:"pxe_mac,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// ProductName holds the value of the "product_name" field.
	ProductName string `json:"product_name,omitempty"`
	// BiosVersion holds the value of the "bios_version" field.
	BiosVersion string `json:"bios_version,omitempty"`
	// BiosReleaseDate holds the value of the "bios_release_date" field.
	BiosReleaseDate string `json:"bios_release_date,omitempty"`
	// BiosVendor holds the value of the "bios_vendor" field.
	BiosVendor string `json:"bios_vendor,omitempty"`
	// Metadata holds the value of the "metadata" field.
	Metadata string `json:"metadata,omitempty"`
	// DesiredPowerState holds the value of the "desired_power_state" field.
	DesiredPowerState hostresource.DesiredPowerState `json:"desired_power_state,omitempty"`
	// CurrentPowerState holds the value of the "current_power_state" field.
	CurrentPowerState hostresource.CurrentPowerState `json:"current_power_state,omitempty"`
	// PowerStatus holds the value of the "power_status" field.
	PowerStatus string `json:"power_status,omitempty"`
	// PowerStatusIndicator holds the value of the "power_status_indicator" field.
	PowerStatusIndicator hostresource.PowerStatusIndicator `json:"power_status_indicator,omitempty"`
	// PowerStatusTimestamp holds the value of the "power_status_timestamp" field.
	PowerStatusTimestamp uint64 `json:"power_status_timestamp,omitempty"`
	// PowerCommandPolicy holds the value of the "power_command_policy" field.
	PowerCommandPolicy hostresource.PowerCommandPolicy `json:"power_command_policy,omitempty"`
	// PowerOnTime holds the value of the "power_on_time" field.
	PowerOnTime uint64 `json:"power_on_time,omitempty"`
	// HostStatus holds the value of the "host_status" field.
	HostStatus string `json:"host_status,omitempty"`
	// HostStatusIndicator holds the value of the "host_status_indicator" field.
	HostStatusIndicator hostresource.HostStatusIndicator `json:"host_status_indicator,omitempty"`
	// HostStatusTimestamp holds the value of the "host_status_timestamp" field.
	HostStatusTimestamp uint64 `json:"host_status_timestamp,omitempty"`
	// OnboardingStatus holds the value of the "onboarding_status" field.
	OnboardingStatus string `json:"onboarding_status,omitempty"`
	// OnboardingStatusIndicator holds the value of the "onboarding_status_indicator" field.
	OnboardingStatusIndicator hostresource.OnboardingStatusIndicator `json:"onboarding_status_indicator,omitempty"`
	// OnboardingStatusTimestamp holds the value of the "onboarding_status_timestamp" field.
	OnboardingStatusTimestamp uint64 `json:"onboarding_status_timestamp,omitempty"`
	// RegistrationStatus holds the value of the "registration_status" field.
	RegistrationStatus string `json:"registration_status,omitempty"`
	// RegistrationStatusIndicator holds the value of the "registration_status_indicator" field.
	RegistrationStatusIndicator hostresource.RegistrationStatusIndicator `json:"registration_status_indicator,omitempty"`
	// RegistrationStatusTimestamp holds the value of the "registration_status_timestamp" field.
	RegistrationStatusTimestamp uint64 `json:"registration_status_timestamp,omitempty"`
	// AmtSku holds the value of the "amt_sku" field.
	AmtSku hostresource.AmtSku `json:"amt_sku,omitempty"`
	// DesiredAmtState holds the value of the "desired_amt_state" field.
	DesiredAmtState hostresource.DesiredAmtState `json:"desired_amt_state,omitempty"`
	// CurrentAmtState holds the value of the "current_amt_state" field.
	CurrentAmtState hostresource.CurrentAmtState `json:"current_amt_state,omitempty"`
	// AmtStatus holds the value of the "amt_status" field.
	AmtStatus string `json:"amt_status,omitempty"`
	// AmtStatusIndicator holds the value of the "amt_status_indicator" field.
	AmtStatusIndicator hostresource.AmtStatusIndicator `json:"amt_status_indicator,omitempty"`
	// AmtStatusTimestamp holds the value of the "amt_status_timestamp" field.
	AmtStatusTimestamp uint64 `json:"amt_status_timestamp,omitempty"`
	// TenantID holds the value of the "tenant_id" field.
	TenantID string `json:"tenant_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt string `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt string `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the HostResourceQuery when eager-loading is set.
	Edges                  HostResourceEdges `json:"edges"`
	host_resource_site     *int
	host_resource_provider *int
	instance_resource_host *int
	selectValues           sql.SelectValues
}

// HostResourceEdges holds the relations/edges for other nodes in the graph.
type HostResourceEdges struct {
	// Site holds the value of the site edge.
	Site *SiteResource `json:"site,omitempty"`
	// Provider holds the value of the provider edge.
	Provider *ProviderResource `json:"provider,omitempty"`
	// HostStorages holds the value of the host_storages edge.
	HostStorages []*HoststorageResource `json:"host_storages,omitempty"`
	// HostNics holds the value of the host_nics edge.
	HostNics []*HostnicResource `json:"host_nics,omitempty"`
	// HostUsbs holds the value of the host_usbs edge.
	HostUsbs []*HostusbResource `json:"host_usbs,omitempty"`
	// HostGpus holds the value of the host_gpus edge.
	HostGpus []*HostgpuResource `json:"host_gpus,omitempty"`
	// Instance holds the value of the instance edge.
	Instance *InstanceResource `json:"instance,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) SiteOrErr() (*SiteResource, error) {
	if e.Site != nil {
		return e.Site, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: siteresource.Label}
	}
	return nil, &NotLoadedError{edge: "site"}
}

// ProviderOrErr returns the Provider value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) ProviderOrErr() (*ProviderResource, error) {
	if e.Provider != nil {
		return e.Provider, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: providerresource.Label}
	}
	return nil, &NotLoadedError{edge: "provider"}
}

// HostStoragesOrErr returns the HostStorages value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostStoragesOrErr() ([]*HoststorageResource, error) {
	if e.loadedTypes[2] {
		return e.HostStorages, nil
	}
	return nil, &NotLoadedError{edge: "host_storages"}
}

// HostNicsOrErr returns the HostNics value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostNicsOrErr() ([]*HostnicResource, error) {
	if e.loadedTypes[3] {
		return e.HostNics, nil
	}
	return nil, &NotLoadedError{edge: "host_nics"}
}

// HostUsbsOrErr returns the HostUsbs value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostUsbsOrErr() ([]*HostusbResource, error) {
	if e.loadedTypes[4] {
		return e.HostUsbs, nil
	}
	return nil, &NotLoadedError{edge: "host_usbs"}
}

// HostGpusOrErr returns the HostGpus value or an error if the edge
// was not loaded in eager-loading.
func (e HostResourceEdges) HostGpusOrErr() ([]*HostgpuResource, error) {
	if e.loadedTypes[5] {
		return e.HostGpus, nil
	}
	return nil, &NotLoadedError{edge: "host_gpus"}
}

// InstanceOrErr returns the Instance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e HostResourceEdges) InstanceOrErr() (*InstanceResource, error) {
	if e.Instance != nil {
		return e.Instance, nil
	} else if e.loadedTypes[6] {
		return nil, &NotFoundError{label: instanceresource.Label}
	}
	return nil, &NotLoadedError{edge: "instance"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*HostResource) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case hostresource.FieldID, hostresource.FieldMemoryBytes, hostresource.FieldCPUSockets, hostresource.FieldCPUCores, hostresource.FieldCPUThreads, hostresource.FieldPowerStatusTimestamp, hostresource.FieldPowerOnTime, hostresource.FieldHostStatusTimestamp, hostresource.FieldOnboardingStatusTimestamp, hostresource.FieldRegistrationStatusTimestamp, hostresource.FieldAmtStatusTimestamp:
			values[i] = new(sql.NullInt64)
		case hostresource.FieldResourceID, hostresource.FieldKind, hostresource.FieldName, hostresource.FieldDesiredState, hostresource.FieldCurrentState, hostresource.FieldNote, hostresource.FieldHardwareKind, hostresource.FieldSerialNumber, hostresource.FieldUUID, hostresource.FieldCPUModel, hostresource.FieldCPUCapabilities, hostresource.FieldCPUArchitecture, hostresource.FieldCPUTopology, hostresource.FieldMgmtIP, hostresource.FieldBmcKind, hostresource.FieldBmcIP, hostresource.FieldBmcUsername, hostresource.FieldBmcPassword, hostresource.FieldPxeMAC, hostresource.FieldHostname, hostresource.FieldProductName, hostresource.FieldBiosVersion, hostresource.FieldBiosReleaseDate, hostresource.FieldBiosVendor, hostresource.FieldMetadata, hostresource.FieldDesiredPowerState, hostresource.FieldCurrentPowerState, hostresource.FieldPowerStatus, hostresource.FieldPowerStatusIndicator, hostresource.FieldPowerCommandPolicy, hostresource.FieldHostStatus, hostresource.FieldHostStatusIndicator, hostresource.FieldOnboardingStatus, hostresource.FieldOnboardingStatusIndicator, hostresource.FieldRegistrationStatus, hostresource.FieldRegistrationStatusIndicator, hostresource.FieldAmtSku, hostresource.FieldDesiredAmtState, hostresource.FieldCurrentAmtState, hostresource.FieldAmtStatus, hostresource.FieldAmtStatusIndicator, hostresource.FieldTenantID, hostresource.FieldCreatedAt, hostresource.FieldUpdatedAt:
			values[i] = new(sql.NullString)
		case hostresource.ForeignKeys[0]: // host_resource_site
			values[i] = new(sql.NullInt64)
		case hostresource.ForeignKeys[1]: // host_resource_provider
			values[i] = new(sql.NullInt64)
		case hostresource.ForeignKeys[2]: // instance_resource_host
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the HostResource fields.
func (_m *HostResource) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case hostresource.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case hostresource.FieldResourceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource_id", values[i])
			} else if value.Valid {
				_m.ResourceID = value.String
			}
		case hostresource.FieldKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field kind", values[i])
			} else if value.Valid {
				_m.Kind = value.String
			}
		case hostresource.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case hostresource.FieldDesiredState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_state", values[i])
			} else if value.Valid {
				_m.DesiredState = hostresource.DesiredState(value.String)
			}
		case hostresource.FieldCurrentState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_state", values[i])
			} else if value.Valid {
				_m.CurrentState = hostresource.CurrentState(value.String)
			}
		case hostresource.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				_m.Note = value.String
			}
		case hostresource.FieldHardwareKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hardware_kind", values[i])
			} else if value.Valid {
				_m.HardwareKind = value.String
			}
		case hostresource.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				_m.SerialNumber = value.String
			}
		case hostresource.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				_m.UUID = value.String
			}
		case hostresource.FieldMemoryBytes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field memory_bytes", values[i])
			} else if value.Valid {
				_m.MemoryBytes = uint64(value.Int64)
			}
		case hostresource.FieldCPUModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_model", values[i])
			} else if value.Valid {
				_m.CPUModel = value.String
			}
		case hostresource.FieldCPUSockets:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_sockets", values[i])
			} else if value.Valid {
				_m.CPUSockets = uint32(value.Int64)
			}
		case hostresource.FieldCPUCores:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_cores", values[i])
			} else if value.Valid {
				_m.CPUCores = uint32(value.Int64)
			}
		case hostresource.FieldCPUCapabilities:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_capabilities", values[i])
			} else if value.Valid {
				_m.CPUCapabilities = value.String
			}
		case hostresource.FieldCPUArchitecture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_architecture", values[i])
			} else if value.Valid {
				_m.CPUArchitecture = value.String
			}
		case hostresource.FieldCPUThreads:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_threads", values[i])
			} else if value.Valid {
				_m.CPUThreads = uint32(value.Int64)
			}
		case hostresource.FieldCPUTopology:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cpu_topology", values[i])
			} else if value.Valid {
				_m.CPUTopology = value.String
			}
		case hostresource.FieldMgmtIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mgmt_ip", values[i])
			} else if value.Valid {
				_m.MgmtIP = value.String
			}
		case hostresource.FieldBmcKind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_kind", values[i])
			} else if value.Valid {
				_m.BmcKind = hostresource.BmcKind(value.String)
			}
		case hostresource.FieldBmcIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_ip", values[i])
			} else if value.Valid {
				_m.BmcIP = value.String
			}
		case hostresource.FieldBmcUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_username", values[i])
			} else if value.Valid {
				_m.BmcUsername = value.String
			}
		case hostresource.FieldBmcPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bmc_password", values[i])
			} else if value.Valid {
				_m.BmcPassword = value.String
			}
		case hostresource.FieldPxeMAC:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pxe_mac", values[i])
			} else if value.Valid {
				_m.PxeMAC = value.String
			}
		case hostresource.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				_m.Hostname = value.String
			}
		case hostresource.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				_m.ProductName = value.String
			}
		case hostresource.FieldBiosVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bios_version", values[i])
			} else if value.Valid {
				_m.BiosVersion = value.String
			}
		case hostresource.FieldBiosReleaseDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bios_release_date", values[i])
			} else if value.Valid {
				_m.BiosReleaseDate = value.String
			}
		case hostresource.FieldBiosVendor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bios_vendor", values[i])
			} else if value.Valid {
				_m.BiosVendor = value.String
			}
		case hostresource.FieldMetadata:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field metadata", values[i])
			} else if value.Valid {
				_m.Metadata = value.String
			}
		case hostresource.FieldDesiredPowerState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_power_state", values[i])
			} else if value.Valid {
				_m.DesiredPowerState = hostresource.DesiredPowerState(value.String)
			}
		case hostresource.FieldCurrentPowerState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_power_state", values[i])
			} else if value.Valid {
				_m.CurrentPowerState = hostresource.CurrentPowerState(value.String)
			}
		case hostresource.FieldPowerStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power_status", values[i])
			} else if value.Valid {
				_m.PowerStatus = value.String
			}
		case hostresource.FieldPowerStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power_status_indicator", values[i])
			} else if value.Valid {
				_m.PowerStatusIndicator = hostresource.PowerStatusIndicator(value.String)
			}
		case hostresource.FieldPowerStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power_status_timestamp", values[i])
			} else if value.Valid {
				_m.PowerStatusTimestamp = uint64(value.Int64)
			}
		case hostresource.FieldPowerCommandPolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field power_command_policy", values[i])
			} else if value.Valid {
				_m.PowerCommandPolicy = hostresource.PowerCommandPolicy(value.String)
			}
		case hostresource.FieldPowerOnTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field power_on_time", values[i])
			} else if value.Valid {
				_m.PowerOnTime = uint64(value.Int64)
			}
		case hostresource.FieldHostStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_status", values[i])
			} else if value.Valid {
				_m.HostStatus = value.String
			}
		case hostresource.FieldHostStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host_status_indicator", values[i])
			} else if value.Valid {
				_m.HostStatusIndicator = hostresource.HostStatusIndicator(value.String)
			}
		case hostresource.FieldHostStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field host_status_timestamp", values[i])
			} else if value.Valid {
				_m.HostStatusTimestamp = uint64(value.Int64)
			}
		case hostresource.FieldOnboardingStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_status", values[i])
			} else if value.Valid {
				_m.OnboardingStatus = value.String
			}
		case hostresource.FieldOnboardingStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_status_indicator", values[i])
			} else if value.Valid {
				_m.OnboardingStatusIndicator = hostresource.OnboardingStatusIndicator(value.String)
			}
		case hostresource.FieldOnboardingStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field onboarding_status_timestamp", values[i])
			} else if value.Valid {
				_m.OnboardingStatusTimestamp = uint64(value.Int64)
			}
		case hostresource.FieldRegistrationStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registration_status", values[i])
			} else if value.Valid {
				_m.RegistrationStatus = value.String
			}
		case hostresource.FieldRegistrationStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registration_status_indicator", values[i])
			} else if value.Valid {
				_m.RegistrationStatusIndicator = hostresource.RegistrationStatusIndicator(value.String)
			}
		case hostresource.FieldRegistrationStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field registration_status_timestamp", values[i])
			} else if value.Valid {
				_m.RegistrationStatusTimestamp = uint64(value.Int64)
			}
		case hostresource.FieldAmtSku:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amt_sku", values[i])
			} else if value.Valid {
				_m.AmtSku = hostresource.AmtSku(value.String)
			}
		case hostresource.FieldDesiredAmtState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desired_amt_state", values[i])
			} else if value.Valid {
				_m.DesiredAmtState = hostresource.DesiredAmtState(value.String)
			}
		case hostresource.FieldCurrentAmtState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field current_amt_state", values[i])
			} else if value.Valid {
				_m.CurrentAmtState = hostresource.CurrentAmtState(value.String)
			}
		case hostresource.FieldAmtStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amt_status", values[i])
			} else if value.Valid {
				_m.AmtStatus = value.String
			}
		case hostresource.FieldAmtStatusIndicator:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field amt_status_indicator", values[i])
			} else if value.Valid {
				_m.AmtStatusIndicator = hostresource.AmtStatusIndicator(value.String)
			}
		case hostresource.FieldAmtStatusTimestamp:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field amt_status_timestamp", values[i])
			} else if value.Valid {
				_m.AmtStatusTimestamp = uint64(value.Int64)
			}
		case hostresource.FieldTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant_id", values[i])
			} else if value.Valid {
				_m.TenantID = value.String
			}
		case hostresource.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.String
			}
		case hostresource.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.String
			}
		case hostresource.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_resource_site", value)
			} else if value.Valid {
				_m.host_resource_site = new(int)
				*_m.host_resource_site = int(value.Int64)
			}
		case hostresource.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field host_resource_provider", value)
			} else if value.Valid {
				_m.host_resource_provider = new(int)
				*_m.host_resource_provider = int(value.Int64)
			}
		case hostresource.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field instance_resource_host", value)
			} else if value.Valid {
				_m.instance_resource_host = new(int)
				*_m.instance_resource_host = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the HostResource.
// This includes values selected through modifiers, order, etc.
func (_m *HostResource) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySite queries the "site" edge of the HostResource entity.
func (_m *HostResource) QuerySite() *SiteResourceQuery {
	return NewHostResourceClient(_m.config).QuerySite(_m)
}

// QueryProvider queries the "provider" edge of the HostResource entity.
func (_m *HostResource) QueryProvider() *ProviderResourceQuery {
	return NewHostResourceClient(_m.config).QueryProvider(_m)
}

// QueryHostStorages queries the "host_storages" edge of the HostResource entity.
func (_m *HostResource) QueryHostStorages() *HoststorageResourceQuery {
	return NewHostResourceClient(_m.config).QueryHostStorages(_m)
}

// QueryHostNics queries the "host_nics" edge of the HostResource entity.
func (_m *HostResource) QueryHostNics() *HostnicResourceQuery {
	return NewHostResourceClient(_m.config).QueryHostNics(_m)
}

// QueryHostUsbs queries the "host_usbs" edge of the HostResource entity.
func (_m *HostResource) QueryHostUsbs() *HostusbResourceQuery {
	return NewHostResourceClient(_m.config).QueryHostUsbs(_m)
}

// QueryHostGpus queries the "host_gpus" edge of the HostResource entity.
func (_m *HostResource) QueryHostGpus() *HostgpuResourceQuery {
	return NewHostResourceClient(_m.config).QueryHostGpus(_m)
}

// QueryInstance queries the "instance" edge of the HostResource entity.
func (_m *HostResource) QueryInstance() *InstanceResourceQuery {
	return NewHostResourceClient(_m.config).QueryInstance(_m)
}

// Update returns a builder for updating this HostResource.
// Note that you need to call HostResource.Unwrap() before calling this method if this HostResource
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *HostResource) Update() *HostResourceUpdateOne {
	return NewHostResourceClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the HostResource entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *HostResource) Unwrap() *HostResource {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: HostResource is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *HostResource) String() string {
	var builder strings.Builder
	builder.WriteString("HostResource(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("resource_id=")
	builder.WriteString(_m.ResourceID)
	builder.WriteString(", ")
	builder.WriteString("kind=")
	builder.WriteString(_m.Kind)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("desired_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.DesiredState))
	builder.WriteString(", ")
	builder.WriteString("current_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentState))
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(_m.Note)
	builder.WriteString(", ")
	builder.WriteString("hardware_kind=")
	builder.WriteString(_m.HardwareKind)
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(_m.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(_m.UUID)
	builder.WriteString(", ")
	builder.WriteString("memory_bytes=")
	builder.WriteString(fmt.Sprintf("%v", _m.MemoryBytes))
	builder.WriteString(", ")
	builder.WriteString("cpu_model=")
	builder.WriteString(_m.CPUModel)
	builder.WriteString(", ")
	builder.WriteString("cpu_sockets=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUSockets))
	builder.WriteString(", ")
	builder.WriteString("cpu_cores=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUCores))
	builder.WriteString(", ")
	builder.WriteString("cpu_capabilities=")
	builder.WriteString(_m.CPUCapabilities)
	builder.WriteString(", ")
	builder.WriteString("cpu_architecture=")
	builder.WriteString(_m.CPUArchitecture)
	builder.WriteString(", ")
	builder.WriteString("cpu_threads=")
	builder.WriteString(fmt.Sprintf("%v", _m.CPUThreads))
	builder.WriteString(", ")
	builder.WriteString("cpu_topology=")
	builder.WriteString(_m.CPUTopology)
	builder.WriteString(", ")
	builder.WriteString("mgmt_ip=")
	builder.WriteString(_m.MgmtIP)
	builder.WriteString(", ")
	builder.WriteString("bmc_kind=")
	builder.WriteString(fmt.Sprintf("%v", _m.BmcKind))
	builder.WriteString(", ")
	builder.WriteString("bmc_ip=")
	builder.WriteString(_m.BmcIP)
	builder.WriteString(", ")
	builder.WriteString("bmc_username=")
	builder.WriteString(_m.BmcUsername)
	builder.WriteString(", ")
	builder.WriteString("bmc_password=")
	builder.WriteString(_m.BmcPassword)
	builder.WriteString(", ")
	builder.WriteString("pxe_mac=")
	builder.WriteString(_m.PxeMAC)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(_m.Hostname)
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(_m.ProductName)
	builder.WriteString(", ")
	builder.WriteString("bios_version=")
	builder.WriteString(_m.BiosVersion)
	builder.WriteString(", ")
	builder.WriteString("bios_release_date=")
	builder.WriteString(_m.BiosReleaseDate)
	builder.WriteString(", ")
	builder.WriteString("bios_vendor=")
	builder.WriteString(_m.BiosVendor)
	builder.WriteString(", ")
	builder.WriteString("metadata=")
	builder.WriteString(_m.Metadata)
	builder.WriteString(", ")
	builder.WriteString("desired_power_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.DesiredPowerState))
	builder.WriteString(", ")
	builder.WriteString("current_power_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentPowerState))
	builder.WriteString(", ")
	builder.WriteString("power_status=")
	builder.WriteString(_m.PowerStatus)
	builder.WriteString(", ")
	builder.WriteString("power_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", _m.PowerStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("power_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", _m.PowerStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("power_command_policy=")
	builder.WriteString(fmt.Sprintf("%v", _m.PowerCommandPolicy))
	builder.WriteString(", ")
	builder.WriteString("power_on_time=")
	builder.WriteString(fmt.Sprintf("%v", _m.PowerOnTime))
	builder.WriteString(", ")
	builder.WriteString("host_status=")
	builder.WriteString(_m.HostStatus)
	builder.WriteString(", ")
	builder.WriteString("host_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", _m.HostStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("host_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", _m.HostStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("onboarding_status=")
	builder.WriteString(_m.OnboardingStatus)
	builder.WriteString(", ")
	builder.WriteString("onboarding_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", _m.OnboardingStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("onboarding_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", _m.OnboardingStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("registration_status=")
	builder.WriteString(_m.RegistrationStatus)
	builder.WriteString(", ")
	builder.WriteString("registration_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", _m.RegistrationStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("registration_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", _m.RegistrationStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("amt_sku=")
	builder.WriteString(fmt.Sprintf("%v", _m.AmtSku))
	builder.WriteString(", ")
	builder.WriteString("desired_amt_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.DesiredAmtState))
	builder.WriteString(", ")
	builder.WriteString("current_amt_state=")
	builder.WriteString(fmt.Sprintf("%v", _m.CurrentAmtState))
	builder.WriteString(", ")
	builder.WriteString("amt_status=")
	builder.WriteString(_m.AmtStatus)
	builder.WriteString(", ")
	builder.WriteString("amt_status_indicator=")
	builder.WriteString(fmt.Sprintf("%v", _m.AmtStatusIndicator))
	builder.WriteString(", ")
	builder.WriteString("amt_status_timestamp=")
	builder.WriteString(fmt.Sprintf("%v", _m.AmtStatusTimestamp))
	builder.WriteString(", ")
	builder.WriteString("tenant_id=")
	builder.WriteString(_m.TenantID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt)
	builder.WriteByte(')')
	return builder.String()
}

// HostResources is a parsable slice of HostResource.
type HostResources []*HostResource
