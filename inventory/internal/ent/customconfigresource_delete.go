// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/customconfigresource"
	"github.com/open-edge-platform/infra-core/inventory/v2/internal/ent/predicate"
)

// CustomConfigResourceDelete is the builder for deleting a CustomConfigResource entity.
type CustomConfigResourceDelete struct {
	config
	hooks    []Hook
	mutation *CustomConfigResourceMutation
}

// Where appends a list predicates to the CustomConfigResourceDelete builder.
func (ccrd *CustomConfigResourceDelete) Where(ps ...predicate.CustomConfigResource) *CustomConfigResourceDelete {
	ccrd.mutation.Where(ps...)
	return ccrd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ccrd *CustomConfigResourceDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ccrd.sqlExec, ccrd.mutation, ccrd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ccrd *CustomConfigResourceDelete) ExecX(ctx context.Context) int {
	n, err := ccrd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ccrd *CustomConfigResourceDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(customconfigresource.Table, sqlgraph.NewFieldSpec(customconfigresource.FieldID, field.TypeInt))
	if ps := ccrd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ccrd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ccrd.mutation.done = true
	return affected, err
}

// CustomConfigResourceDeleteOne is the builder for deleting a single CustomConfigResource entity.
type CustomConfigResourceDeleteOne struct {
	ccrd *CustomConfigResourceDelete
}

// Where appends a list predicates to the CustomConfigResourceDelete builder.
func (ccrdo *CustomConfigResourceDeleteOne) Where(ps ...predicate.CustomConfigResource) *CustomConfigResourceDeleteOne {
	ccrdo.ccrd.mutation.Where(ps...)
	return ccrdo
}

// Exec executes the deletion query.
func (ccrdo *CustomConfigResourceDeleteOne) Exec(ctx context.Context) error {
	n, err := ccrdo.ccrd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{customconfigresource.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ccrdo *CustomConfigResourceDeleteOne) ExecX(ctx context.Context) {
	if err := ccrdo.Exec(ctx); err != nil {
		panic(err)
	}
}
