// Code generated by ent, DO NOT EDIT.

package instanceresource

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the instanceresource type in the database.
	Label = "instance_resource"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldResourceID holds the string denoting the resource_id field in the database.
	FieldResourceID = "resource_id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDesiredState holds the string denoting the desired_state field in the database.
	FieldDesiredState = "desired_state"
	// FieldCurrentState holds the string denoting the current_state field in the database.
	FieldCurrentState = "current_state"
	// FieldVMMemoryBytes holds the string denoting the vm_memory_bytes field in the database.
	FieldVMMemoryBytes = "vm_memory_bytes"
	// FieldVMCPUCores holds the string denoting the vm_cpu_cores field in the database.
	FieldVMCPUCores = "vm_cpu_cores"
	// FieldVMStorageBytes holds the string denoting the vm_storage_bytes field in the database.
	FieldVMStorageBytes = "vm_storage_bytes"
	// FieldSecurityFeature holds the string denoting the security_feature field in the database.
	FieldSecurityFeature = "security_feature"
	// FieldInstanceStatus holds the string denoting the instance_status field in the database.
	FieldInstanceStatus = "instance_status"
	// FieldInstanceStatusIndicator holds the string denoting the instance_status_indicator field in the database.
	FieldInstanceStatusIndicator = "instance_status_indicator"
	// FieldInstanceStatusTimestamp holds the string denoting the instance_status_timestamp field in the database.
	FieldInstanceStatusTimestamp = "instance_status_timestamp"
	// FieldProvisioningStatus holds the string denoting the provisioning_status field in the database.
	FieldProvisioningStatus = "provisioning_status"
	// FieldProvisioningStatusIndicator holds the string denoting the provisioning_status_indicator field in the database.
	FieldProvisioningStatusIndicator = "provisioning_status_indicator"
	// FieldProvisioningStatusTimestamp holds the string denoting the provisioning_status_timestamp field in the database.
	FieldProvisioningStatusTimestamp = "provisioning_status_timestamp"
	// FieldUpdateStatus holds the string denoting the update_status field in the database.
	FieldUpdateStatus = "update_status"
	// FieldUpdateStatusIndicator holds the string denoting the update_status_indicator field in the database.
	FieldUpdateStatusIndicator = "update_status_indicator"
	// FieldUpdateStatusTimestamp holds the string denoting the update_status_timestamp field in the database.
	FieldUpdateStatusTimestamp = "update_status_timestamp"
	// FieldUpdateStatusDetail holds the string denoting the update_status_detail field in the database.
	FieldUpdateStatusDetail = "update_status_detail"
	// FieldTrustedAttestationStatus holds the string denoting the trusted_attestation_status field in the database.
	FieldTrustedAttestationStatus = "trusted_attestation_status"
	// FieldTrustedAttestationStatusIndicator holds the string denoting the trusted_attestation_status_indicator field in the database.
	FieldTrustedAttestationStatusIndicator = "trusted_attestation_status_indicator"
	// FieldTrustedAttestationStatusTimestamp holds the string denoting the trusted_attestation_status_timestamp field in the database.
	FieldTrustedAttestationStatusTimestamp = "trusted_attestation_status_timestamp"
	// FieldTenantID holds the string denoting the tenant_id field in the database.
	FieldTenantID = "tenant_id"
	// FieldInstanceStatusDetail holds the string denoting the instance_status_detail field in the database.
	FieldInstanceStatusDetail = "instance_status_detail"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeHost holds the string denoting the host edge name in mutations.
	EdgeHost = "host"
	// EdgeDesiredOs holds the string denoting the desired_os edge name in mutations.
	EdgeDesiredOs = "desired_os"
	// EdgeCurrentOs holds the string denoting the current_os edge name in mutations.
	EdgeCurrentOs = "current_os"
	// EdgeWorkloadMembers holds the string denoting the workload_members edge name in mutations.
	EdgeWorkloadMembers = "workload_members"
	// EdgeProvider holds the string denoting the provider edge name in mutations.
	EdgeProvider = "provider"
	// EdgeLocalaccount holds the string denoting the localaccount edge name in mutations.
	EdgeLocalaccount = "localaccount"
	// EdgeCustomConfig holds the string denoting the custom_config edge name in mutations.
	EdgeCustomConfig = "custom_config"
	// Table holds the table name of the instanceresource in the database.
	Table = "instance_resources"
	// HostTable is the table that holds the host relation/edge.
	HostTable = "host_resources"
	// HostInverseTable is the table name for the HostResource entity.
	// It exists in this package in order to avoid circular dependency with the "hostresource" package.
	HostInverseTable = "host_resources"
	// HostColumn is the table column denoting the host relation/edge.
	HostColumn = "instance_resource_host"
	// DesiredOsTable is the table that holds the desired_os relation/edge.
	DesiredOsTable = "instance_resources"
	// DesiredOsInverseTable is the table name for the OperatingSystemResource entity.
	// It exists in this package in order to avoid circular dependency with the "operatingsystemresource" package.
	DesiredOsInverseTable = "operating_system_resources"
	// DesiredOsColumn is the table column denoting the desired_os relation/edge.
	DesiredOsColumn = "instance_resource_desired_os"
	// CurrentOsTable is the table that holds the current_os relation/edge.
	CurrentOsTable = "instance_resources"
	// CurrentOsInverseTable is the table name for the OperatingSystemResource entity.
	// It exists in this package in order to avoid circular dependency with the "operatingsystemresource" package.
	CurrentOsInverseTable = "operating_system_resources"
	// CurrentOsColumn is the table column denoting the current_os relation/edge.
	CurrentOsColumn = "instance_resource_current_os"
	// WorkloadMembersTable is the table that holds the workload_members relation/edge.
	WorkloadMembersTable = "workload_members"
	// WorkloadMembersInverseTable is the table name for the WorkloadMember entity.
	// It exists in this package in order to avoid circular dependency with the "workloadmember" package.
	WorkloadMembersInverseTable = "workload_members"
	// WorkloadMembersColumn is the table column denoting the workload_members relation/edge.
	WorkloadMembersColumn = "workload_member_instance"
	// ProviderTable is the table that holds the provider relation/edge.
	ProviderTable = "instance_resources"
	// ProviderInverseTable is the table name for the ProviderResource entity.
	// It exists in this package in order to avoid circular dependency with the "providerresource" package.
	ProviderInverseTable = "provider_resources"
	// ProviderColumn is the table column denoting the provider relation/edge.
	ProviderColumn = "instance_resource_provider"
	// LocalaccountTable is the table that holds the localaccount relation/edge.
	LocalaccountTable = "instance_resources"
	// LocalaccountInverseTable is the table name for the LocalAccountResource entity.
	// It exists in this package in order to avoid circular dependency with the "localaccountresource" package.
	LocalaccountInverseTable = "local_account_resources"
	// LocalaccountColumn is the table column denoting the localaccount relation/edge.
	LocalaccountColumn = "instance_resource_localaccount"
	// CustomConfigTable is the table that holds the custom_config relation/edge.
	CustomConfigTable = "instance_resources"
	// CustomConfigInverseTable is the table name for the CustomConfigResource entity.
	// It exists in this package in order to avoid circular dependency with the "customconfigresource" package.
	CustomConfigInverseTable = "custom_config_resources"
	// CustomConfigColumn is the table column denoting the custom_config relation/edge.
	CustomConfigColumn = "instance_resource_custom_config"
)

// Columns holds all SQL columns for instanceresource fields.
var Columns = []string{
	FieldID,
	FieldResourceID,
	FieldKind,
	FieldName,
	FieldDesiredState,
	FieldCurrentState,
	FieldVMMemoryBytes,
	FieldVMCPUCores,
	FieldVMStorageBytes,
	FieldSecurityFeature,
	FieldInstanceStatus,
	FieldInstanceStatusIndicator,
	FieldInstanceStatusTimestamp,
	FieldProvisioningStatus,
	FieldProvisioningStatusIndicator,
	FieldProvisioningStatusTimestamp,
	FieldUpdateStatus,
	FieldUpdateStatusIndicator,
	FieldUpdateStatusTimestamp,
	FieldUpdateStatusDetail,
	FieldTrustedAttestationStatus,
	FieldTrustedAttestationStatusIndicator,
	FieldTrustedAttestationStatusTimestamp,
	FieldTenantID,
	FieldInstanceStatusDetail,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "instance_resources"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"instance_resource_desired_os",
	"instance_resource_current_os",
	"instance_resource_provider",
	"instance_resource_localaccount",
	"instance_resource_custom_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindINSTANCE_KIND_UNSPECIFIED Kind = "INSTANCE_KIND_UNSPECIFIED"
	KindINSTANCE_KIND_VM          Kind = "INSTANCE_KIND_VM"
	KindINSTANCE_KIND_METAL       Kind = "INSTANCE_KIND_METAL"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindINSTANCE_KIND_UNSPECIFIED, KindINSTANCE_KIND_VM, KindINSTANCE_KIND_METAL:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for kind field: %q", k)
	}
}

// DesiredState defines the type for the "desired_state" enum field.
type DesiredState string

// DesiredState values.
const (
	DesiredStateINSTANCE_STATE_UNSPECIFIED DesiredState = "INSTANCE_STATE_UNSPECIFIED"
	DesiredStateINSTANCE_STATE_RUNNING     DesiredState = "INSTANCE_STATE_RUNNING"
	DesiredStateINSTANCE_STATE_DELETED     DesiredState = "INSTANCE_STATE_DELETED"
	DesiredStateINSTANCE_STATE_UNTRUSTED   DesiredState = "INSTANCE_STATE_UNTRUSTED"
)

func (ds DesiredState) String() string {
	return string(ds)
}

// DesiredStateValidator is a validator for the "desired_state" field enum values. It is called by the builders before save.
func DesiredStateValidator(ds DesiredState) error {
	switch ds {
	case DesiredStateINSTANCE_STATE_UNSPECIFIED, DesiredStateINSTANCE_STATE_RUNNING, DesiredStateINSTANCE_STATE_DELETED, DesiredStateINSTANCE_STATE_UNTRUSTED:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for desired_state field: %q", ds)
	}
}

// CurrentState defines the type for the "current_state" enum field.
type CurrentState string

// CurrentState values.
const (
	CurrentStateINSTANCE_STATE_UNSPECIFIED CurrentState = "INSTANCE_STATE_UNSPECIFIED"
	CurrentStateINSTANCE_STATE_RUNNING     CurrentState = "INSTANCE_STATE_RUNNING"
	CurrentStateINSTANCE_STATE_DELETED     CurrentState = "INSTANCE_STATE_DELETED"
	CurrentStateINSTANCE_STATE_UNTRUSTED   CurrentState = "INSTANCE_STATE_UNTRUSTED"
)

func (cs CurrentState) String() string {
	return string(cs)
}

// CurrentStateValidator is a validator for the "current_state" field enum values. It is called by the builders before save.
func CurrentStateValidator(cs CurrentState) error {
	switch cs {
	case CurrentStateINSTANCE_STATE_UNSPECIFIED, CurrentStateINSTANCE_STATE_RUNNING, CurrentStateINSTANCE_STATE_DELETED, CurrentStateINSTANCE_STATE_UNTRUSTED:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for current_state field: %q", cs)
	}
}

// SecurityFeature defines the type for the "security_feature" enum field.
type SecurityFeature string

// SecurityFeature values.
const (
	SecurityFeatureSECURITY_FEATURE_UNSPECIFIED                          SecurityFeature = "SECURITY_FEATURE_UNSPECIFIED"
	SecurityFeatureSECURITY_FEATURE_NONE                                 SecurityFeature = "SECURITY_FEATURE_NONE"
	SecurityFeatureSECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION SecurityFeature = "SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION"
)

func (sf SecurityFeature) String() string {
	return string(sf)
}

// SecurityFeatureValidator is a validator for the "security_feature" field enum values. It is called by the builders before save.
func SecurityFeatureValidator(sf SecurityFeature) error {
	switch sf {
	case SecurityFeatureSECURITY_FEATURE_UNSPECIFIED, SecurityFeatureSECURITY_FEATURE_NONE, SecurityFeatureSECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for security_feature field: %q", sf)
	}
}

// InstanceStatusIndicator defines the type for the "instance_status_indicator" enum field.
type InstanceStatusIndicator string

// InstanceStatusIndicator values.
const (
	InstanceStatusIndicatorSTATUS_INDICATION_UNSPECIFIED InstanceStatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
	InstanceStatusIndicatorSTATUS_INDICATION_ERROR       InstanceStatusIndicator = "STATUS_INDICATION_ERROR"
	InstanceStatusIndicatorSTATUS_INDICATION_IN_PROGRESS InstanceStatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	InstanceStatusIndicatorSTATUS_INDICATION_IDLE        InstanceStatusIndicator = "STATUS_INDICATION_IDLE"
)

func (isi InstanceStatusIndicator) String() string {
	return string(isi)
}

// InstanceStatusIndicatorValidator is a validator for the "instance_status_indicator" field enum values. It is called by the builders before save.
func InstanceStatusIndicatorValidator(isi InstanceStatusIndicator) error {
	switch isi {
	case InstanceStatusIndicatorSTATUS_INDICATION_UNSPECIFIED, InstanceStatusIndicatorSTATUS_INDICATION_ERROR, InstanceStatusIndicatorSTATUS_INDICATION_IN_PROGRESS, InstanceStatusIndicatorSTATUS_INDICATION_IDLE:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for instance_status_indicator field: %q", isi)
	}
}

// ProvisioningStatusIndicator defines the type for the "provisioning_status_indicator" enum field.
type ProvisioningStatusIndicator string

// ProvisioningStatusIndicator values.
const (
	ProvisioningStatusIndicatorSTATUS_INDICATION_UNSPECIFIED ProvisioningStatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
	ProvisioningStatusIndicatorSTATUS_INDICATION_ERROR       ProvisioningStatusIndicator = "STATUS_INDICATION_ERROR"
	ProvisioningStatusIndicatorSTATUS_INDICATION_IN_PROGRESS ProvisioningStatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	ProvisioningStatusIndicatorSTATUS_INDICATION_IDLE        ProvisioningStatusIndicator = "STATUS_INDICATION_IDLE"
)

func (psi ProvisioningStatusIndicator) String() string {
	return string(psi)
}

// ProvisioningStatusIndicatorValidator is a validator for the "provisioning_status_indicator" field enum values. It is called by the builders before save.
func ProvisioningStatusIndicatorValidator(psi ProvisioningStatusIndicator) error {
	switch psi {
	case ProvisioningStatusIndicatorSTATUS_INDICATION_UNSPECIFIED, ProvisioningStatusIndicatorSTATUS_INDICATION_ERROR, ProvisioningStatusIndicatorSTATUS_INDICATION_IN_PROGRESS, ProvisioningStatusIndicatorSTATUS_INDICATION_IDLE:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for provisioning_status_indicator field: %q", psi)
	}
}

// UpdateStatusIndicator defines the type for the "update_status_indicator" enum field.
type UpdateStatusIndicator string

// UpdateStatusIndicator values.
const (
	UpdateStatusIndicatorSTATUS_INDICATION_UNSPECIFIED UpdateStatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
	UpdateStatusIndicatorSTATUS_INDICATION_ERROR       UpdateStatusIndicator = "STATUS_INDICATION_ERROR"
	UpdateStatusIndicatorSTATUS_INDICATION_IN_PROGRESS UpdateStatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	UpdateStatusIndicatorSTATUS_INDICATION_IDLE        UpdateStatusIndicator = "STATUS_INDICATION_IDLE"
)

func (usi UpdateStatusIndicator) String() string {
	return string(usi)
}

// UpdateStatusIndicatorValidator is a validator for the "update_status_indicator" field enum values. It is called by the builders before save.
func UpdateStatusIndicatorValidator(usi UpdateStatusIndicator) error {
	switch usi {
	case UpdateStatusIndicatorSTATUS_INDICATION_UNSPECIFIED, UpdateStatusIndicatorSTATUS_INDICATION_ERROR, UpdateStatusIndicatorSTATUS_INDICATION_IN_PROGRESS, UpdateStatusIndicatorSTATUS_INDICATION_IDLE:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for update_status_indicator field: %q", usi)
	}
}

// TrustedAttestationStatusIndicator defines the type for the "trusted_attestation_status_indicator" enum field.
type TrustedAttestationStatusIndicator string

// TrustedAttestationStatusIndicator values.
const (
	TrustedAttestationStatusIndicatorSTATUS_INDICATION_UNSPECIFIED TrustedAttestationStatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
	TrustedAttestationStatusIndicatorSTATUS_INDICATION_ERROR       TrustedAttestationStatusIndicator = "STATUS_INDICATION_ERROR"
	TrustedAttestationStatusIndicatorSTATUS_INDICATION_IN_PROGRESS TrustedAttestationStatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	TrustedAttestationStatusIndicatorSTATUS_INDICATION_IDLE        TrustedAttestationStatusIndicator = "STATUS_INDICATION_IDLE"
)

func (tasi TrustedAttestationStatusIndicator) String() string {
	return string(tasi)
}

// TrustedAttestationStatusIndicatorValidator is a validator for the "trusted_attestation_status_indicator" field enum values. It is called by the builders before save.
func TrustedAttestationStatusIndicatorValidator(tasi TrustedAttestationStatusIndicator) error {
	switch tasi {
	case TrustedAttestationStatusIndicatorSTATUS_INDICATION_UNSPECIFIED, TrustedAttestationStatusIndicatorSTATUS_INDICATION_ERROR, TrustedAttestationStatusIndicatorSTATUS_INDICATION_IN_PROGRESS, TrustedAttestationStatusIndicatorSTATUS_INDICATION_IDLE:
		return nil
	default:
		return fmt.Errorf("instanceresource: invalid enum value for trusted_attestation_status_indicator field: %q", tasi)
	}
}

// OrderOption defines the ordering options for the InstanceResource queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByResourceID orders the results by the resource_id field.
func ByResourceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResourceID, opts...).ToFunc()
}

// ByKind orders the results by the kind field.
func ByKind(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKind, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDesiredState orders the results by the desired_state field.
func ByDesiredState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesiredState, opts...).ToFunc()
}

// ByCurrentState orders the results by the current_state field.
func ByCurrentState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrentState, opts...).ToFunc()
}

// ByVMMemoryBytes orders the results by the vm_memory_bytes field.
func ByVMMemoryBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVMMemoryBytes, opts...).ToFunc()
}

// ByVMCPUCores orders the results by the vm_cpu_cores field.
func ByVMCPUCores(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVMCPUCores, opts...).ToFunc()
}

// ByVMStorageBytes orders the results by the vm_storage_bytes field.
func ByVMStorageBytes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVMStorageBytes, opts...).ToFunc()
}

// BySecurityFeature orders the results by the security_feature field.
func BySecurityFeature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecurityFeature, opts...).ToFunc()
}

// ByInstanceStatus orders the results by the instance_status field.
func ByInstanceStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceStatus, opts...).ToFunc()
}

// ByInstanceStatusIndicator orders the results by the instance_status_indicator field.
func ByInstanceStatusIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceStatusIndicator, opts...).ToFunc()
}

// ByInstanceStatusTimestamp orders the results by the instance_status_timestamp field.
func ByInstanceStatusTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceStatusTimestamp, opts...).ToFunc()
}

// ByProvisioningStatus orders the results by the provisioning_status field.
func ByProvisioningStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvisioningStatus, opts...).ToFunc()
}

// ByProvisioningStatusIndicator orders the results by the provisioning_status_indicator field.
func ByProvisioningStatusIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvisioningStatusIndicator, opts...).ToFunc()
}

// ByProvisioningStatusTimestamp orders the results by the provisioning_status_timestamp field.
func ByProvisioningStatusTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProvisioningStatusTimestamp, opts...).ToFunc()
}

// ByUpdateStatus orders the results by the update_status field.
func ByUpdateStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateStatus, opts...).ToFunc()
}

// ByUpdateStatusIndicator orders the results by the update_status_indicator field.
func ByUpdateStatusIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateStatusIndicator, opts...).ToFunc()
}

// ByUpdateStatusTimestamp orders the results by the update_status_timestamp field.
func ByUpdateStatusTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateStatusTimestamp, opts...).ToFunc()
}

// ByUpdateStatusDetail orders the results by the update_status_detail field.
func ByUpdateStatusDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateStatusDetail, opts...).ToFunc()
}

// ByTrustedAttestationStatus orders the results by the trusted_attestation_status field.
func ByTrustedAttestationStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustedAttestationStatus, opts...).ToFunc()
}

// ByTrustedAttestationStatusIndicator orders the results by the trusted_attestation_status_indicator field.
func ByTrustedAttestationStatusIndicator(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustedAttestationStatusIndicator, opts...).ToFunc()
}

// ByTrustedAttestationStatusTimestamp orders the results by the trusted_attestation_status_timestamp field.
func ByTrustedAttestationStatusTimestamp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTrustedAttestationStatusTimestamp, opts...).ToFunc()
}

// ByTenantID orders the results by the tenant_id field.
func ByTenantID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTenantID, opts...).ToFunc()
}

// ByInstanceStatusDetail orders the results by the instance_status_detail field.
func ByInstanceStatusDetail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstanceStatusDetail, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByHostField orders the results by host field.
func ByHostField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHostStep(), sql.OrderByField(field, opts...))
	}
}

// ByDesiredOsField orders the results by desired_os field.
func ByDesiredOsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDesiredOsStep(), sql.OrderByField(field, opts...))
	}
}

// ByCurrentOsField orders the results by current_os field.
func ByCurrentOsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCurrentOsStep(), sql.OrderByField(field, opts...))
	}
}

// ByWorkloadMembersCount orders the results by workload_members count.
func ByWorkloadMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkloadMembersStep(), opts...)
	}
}

// ByWorkloadMembers orders the results by workload_members terms.
func ByWorkloadMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkloadMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProviderField orders the results by provider field.
func ByProviderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProviderStep(), sql.OrderByField(field, opts...))
	}
}

// ByLocalaccountField orders the results by localaccount field.
func ByLocalaccountField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLocalaccountStep(), sql.OrderByField(field, opts...))
	}
}

// ByCustomConfigField orders the results by custom_config field.
func ByCustomConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCustomConfigStep(), sql.OrderByField(field, opts...))
	}
}
func newHostStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HostInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, HostTable, HostColumn),
	)
}
func newDesiredOsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DesiredOsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DesiredOsTable, DesiredOsColumn),
	)
}
func newCurrentOsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CurrentOsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CurrentOsTable, CurrentOsColumn),
	)
}
func newWorkloadMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkloadMembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkloadMembersTable, WorkloadMembersColumn),
	)
}
func newProviderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProviderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ProviderTable, ProviderColumn),
	)
}
func newLocalaccountStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LocalaccountInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, LocalaccountTable, LocalaccountColumn),
	)
}
func newCustomConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CustomConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CustomConfigTable, CustomConfigColumn),
	)
}
