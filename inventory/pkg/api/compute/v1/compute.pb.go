// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: compute/v1/compute.proto

package computev1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	v14 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/localaccount/v1"
	v1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/location/v1"
	v13 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/os/v1"
	v11 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/provider/v1"
	v12 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/status/v1"
	_ "github.com/open-edge-platform/infra-core/inventory/v2/pkg/infrainv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------------------------------------------- Host Resources --------------------------------------------------
type HostState int32

const (
	HostState_HOST_STATE_UNSPECIFIED HostState = 0
	HostState_HOST_STATE_DELETED     HostState = 2
	HostState_HOST_STATE_ONBOARDED   HostState = 3
	HostState_HOST_STATE_UNTRUSTED   HostState = 4
	HostState_HOST_STATE_REGISTERED  HostState = 5
)

// Enum value maps for HostState.
var (
	HostState_name = map[int32]string{
		0: "HOST_STATE_UNSPECIFIED",
		2: "HOST_STATE_DELETED",
		3: "HOST_STATE_ONBOARDED",
		4: "HOST_STATE_UNTRUSTED",
		5: "HOST_STATE_REGISTERED",
	}
	HostState_value = map[string]int32{
		"HOST_STATE_UNSPECIFIED": 0,
		"HOST_STATE_DELETED":     2,
		"HOST_STATE_ONBOARDED":   3,
		"HOST_STATE_UNTRUSTED":   4,
		"HOST_STATE_REGISTERED":  5,
	}
)

func (x HostState) Enum() *HostState {
	p := new(HostState)
	*p = x
	return p
}

func (x HostState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[0].Descriptor()
}

func (HostState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[0]
}

func (x HostState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostState.Descriptor instead.
func (HostState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{0}
}

type PowerState int32

const (
	PowerState_POWER_STATE_UNSPECIFIED PowerState = 0
	PowerState_POWER_STATE_ON          PowerState = 2
	PowerState_POWER_STATE_OFF         PowerState = 3
	PowerState_POWER_STATE_SLEEP       PowerState = 4
	PowerState_POWER_STATE_HIBERNATE   PowerState = 5
	PowerState_POWER_STATE_RESET       PowerState = 6
	PowerState_POWER_STATE_POWER_CYCLE PowerState = 7
)

// Enum value maps for PowerState.
var (
	PowerState_name = map[int32]string{
		0: "POWER_STATE_UNSPECIFIED",
		2: "POWER_STATE_ON",
		3: "POWER_STATE_OFF",
		4: "POWER_STATE_SLEEP",
		5: "POWER_STATE_HIBERNATE",
		6: "POWER_STATE_RESET",
		7: "POWER_STATE_POWER_CYCLE",
	}
	PowerState_value = map[string]int32{
		"POWER_STATE_UNSPECIFIED": 0,
		"POWER_STATE_ON":          2,
		"POWER_STATE_OFF":         3,
		"POWER_STATE_SLEEP":       4,
		"POWER_STATE_HIBERNATE":   5,
		"POWER_STATE_RESET":       6,
		"POWER_STATE_POWER_CYCLE": 7,
	}
)

func (x PowerState) Enum() *PowerState {
	p := new(PowerState)
	*p = x
	return p
}

func (x PowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[1].Descriptor()
}

func (PowerState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[1]
}

func (x PowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState.Descriptor instead.
func (PowerState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{1}
}

type PowerCommandPolicy int32

const (
	PowerCommandPolicy_POWER_COMMAND_POLICY_UNSPECIFIED PowerCommandPolicy = 0
	PowerCommandPolicy_POWER_COMMAND_POLICY_IMMEDIATE   PowerCommandPolicy = 1
	PowerCommandPolicy_POWER_COMMAND_POLICY_ORDERED     PowerCommandPolicy = 2
)

// Enum value maps for PowerCommandPolicy.
var (
	PowerCommandPolicy_name = map[int32]string{
		0: "POWER_COMMAND_POLICY_UNSPECIFIED",
		1: "POWER_COMMAND_POLICY_IMMEDIATE",
		2: "POWER_COMMAND_POLICY_ORDERED",
	}
	PowerCommandPolicy_value = map[string]int32{
		"POWER_COMMAND_POLICY_UNSPECIFIED": 0,
		"POWER_COMMAND_POLICY_IMMEDIATE":   1,
		"POWER_COMMAND_POLICY_ORDERED":     2,
	}
)

func (x PowerCommandPolicy) Enum() *PowerCommandPolicy {
	p := new(PowerCommandPolicy)
	*p = x
	return p
}

func (x PowerCommandPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerCommandPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[2].Descriptor()
}

func (PowerCommandPolicy) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[2]
}

func (x PowerCommandPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerCommandPolicy.Descriptor instead.
func (PowerCommandPolicy) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{2}
}

type BaremetalControllerKind int32

const (
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_UNSPECIFIED BaremetalControllerKind = 0
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_NONE        BaremetalControllerKind = 1
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_IPMI        BaremetalControllerKind = 2
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_VPRO        BaremetalControllerKind = 3
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_PDU         BaremetalControllerKind = 4
)

// Enum value maps for BaremetalControllerKind.
var (
	BaremetalControllerKind_name = map[int32]string{
		0: "BAREMETAL_CONTROLLER_KIND_UNSPECIFIED",
		1: "BAREMETAL_CONTROLLER_KIND_NONE",
		2: "BAREMETAL_CONTROLLER_KIND_IPMI",
		3: "BAREMETAL_CONTROLLER_KIND_VPRO",
		4: "BAREMETAL_CONTROLLER_KIND_PDU",
	}
	BaremetalControllerKind_value = map[string]int32{
		"BAREMETAL_CONTROLLER_KIND_UNSPECIFIED": 0,
		"BAREMETAL_CONTROLLER_KIND_NONE":        1,
		"BAREMETAL_CONTROLLER_KIND_IPMI":        2,
		"BAREMETAL_CONTROLLER_KIND_VPRO":        3,
		"BAREMETAL_CONTROLLER_KIND_PDU":         4,
	}
)

func (x BaremetalControllerKind) Enum() *BaremetalControllerKind {
	p := new(BaremetalControllerKind)
	*p = x
	return p
}

func (x BaremetalControllerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaremetalControllerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[3].Descriptor()
}

func (BaremetalControllerKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[3]
}

func (x BaremetalControllerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaremetalControllerKind.Descriptor instead.
func (BaremetalControllerKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{3}
}

type AmtState int32

const (
	AmtState_AMT_STATE_UNSPECIFIED   AmtState = 0
	AmtState_AMT_STATE_PROVISIONED   AmtState = 1
	AmtState_AMT_STATE_UNPROVISIONED AmtState = 2
	AmtState_AMT_STATE_DISCONNECTED  AmtState = 3
)

// Enum value maps for AmtState.
var (
	AmtState_name = map[int32]string{
		0: "AMT_STATE_UNSPECIFIED",
		1: "AMT_STATE_PROVISIONED",
		2: "AMT_STATE_UNPROVISIONED",
		3: "AMT_STATE_DISCONNECTED",
	}
	AmtState_value = map[string]int32{
		"AMT_STATE_UNSPECIFIED":   0,
		"AMT_STATE_PROVISIONED":   1,
		"AMT_STATE_UNPROVISIONED": 2,
		"AMT_STATE_DISCONNECTED":  3,
	}
)

func (x AmtState) Enum() *AmtState {
	p := new(AmtState)
	*p = x
	return p
}

func (x AmtState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AmtState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[4].Descriptor()
}

func (AmtState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[4]
}

func (x AmtState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AmtState.Descriptor instead.
func (AmtState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{4}
}

type HostComponentState int32

const (
	HostComponentState_HOST_COMPONENT_STATE_UNSPECIFIED HostComponentState = 0
	HostComponentState_HOST_COMPONENT_STATE_ERROR       HostComponentState = 1
	HostComponentState_HOST_COMPONENT_STATE_DELETED     HostComponentState = 2
	HostComponentState_HOST_COMPONENT_STATE_EXISTS      HostComponentState = 3
)

// Enum value maps for HostComponentState.
var (
	HostComponentState_name = map[int32]string{
		0: "HOST_COMPONENT_STATE_UNSPECIFIED",
		1: "HOST_COMPONENT_STATE_ERROR",
		2: "HOST_COMPONENT_STATE_DELETED",
		3: "HOST_COMPONENT_STATE_EXISTS",
	}
	HostComponentState_value = map[string]int32{
		"HOST_COMPONENT_STATE_UNSPECIFIED": 0,
		"HOST_COMPONENT_STATE_ERROR":       1,
		"HOST_COMPONENT_STATE_DELETED":     2,
		"HOST_COMPONENT_STATE_EXISTS":      3,
	}
)

func (x HostComponentState) Enum() *HostComponentState {
	p := new(HostComponentState)
	*p = x
	return p
}

func (x HostComponentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostComponentState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[5].Descriptor()
}

func (HostComponentState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[5]
}

func (x HostComponentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostComponentState.Descriptor instead.
func (HostComponentState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{5}
}

type NetworkInterfaceLinkState int32

const (
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED NetworkInterfaceLinkState = 0
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UP          NetworkInterfaceLinkState = 1
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_DOWN        NetworkInterfaceLinkState = 2
)

// Enum value maps for NetworkInterfaceLinkState.
var (
	NetworkInterfaceLinkState_name = map[int32]string{
		0: "NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED",
		1: "NETWORK_INTERFACE_LINK_STATE_UP",
		2: "NETWORK_INTERFACE_LINK_STATE_DOWN",
	}
	NetworkInterfaceLinkState_value = map[string]int32{
		"NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED": 0,
		"NETWORK_INTERFACE_LINK_STATE_UP":          1,
		"NETWORK_INTERFACE_LINK_STATE_DOWN":        2,
	}
)

func (x NetworkInterfaceLinkState) Enum() *NetworkInterfaceLinkState {
	p := new(NetworkInterfaceLinkState)
	*p = x
	return p
}

func (x NetworkInterfaceLinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInterfaceLinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[6].Descriptor()
}

func (NetworkInterfaceLinkState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[6]
}

func (x NetworkInterfaceLinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkInterfaceLinkState.Descriptor instead.
func (NetworkInterfaceLinkState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{6}
}

// --------------------------------------------- Instance Resources ----------------------------------------------------
type InstanceState int32

const (
	InstanceState_INSTANCE_STATE_UNSPECIFIED InstanceState = 0 // unconfigured
	InstanceState_INSTANCE_STATE_RUNNING     InstanceState = 1 // OS is Running
	InstanceState_INSTANCE_STATE_DELETED     InstanceState = 2 // OS should be Deleted
	InstanceState_INSTANCE_STATE_UNTRUSTED   InstanceState = 3 // OS should not be trusted anymore
)

// Enum value maps for InstanceState.
var (
	InstanceState_name = map[int32]string{
		0: "INSTANCE_STATE_UNSPECIFIED",
		1: "INSTANCE_STATE_RUNNING",
		2: "INSTANCE_STATE_DELETED",
		3: "INSTANCE_STATE_UNTRUSTED",
	}
	InstanceState_value = map[string]int32{
		"INSTANCE_STATE_UNSPECIFIED": 0,
		"INSTANCE_STATE_RUNNING":     1,
		"INSTANCE_STATE_DELETED":     2,
		"INSTANCE_STATE_UNTRUSTED":   3,
	}
)

func (x InstanceState) Enum() *InstanceState {
	p := new(InstanceState)
	*p = x
	return p
}

func (x InstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[7].Descriptor()
}

func (InstanceState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[7]
}

func (x InstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceState.Descriptor instead.
func (InstanceState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{7}
}

type InstanceKind int32

const (
	InstanceKind_INSTANCE_KIND_UNSPECIFIED InstanceKind = 0
	InstanceKind_INSTANCE_KIND_VM          InstanceKind = 1
	InstanceKind_INSTANCE_KIND_METAL       InstanceKind = 2
)

// Enum value maps for InstanceKind.
var (
	InstanceKind_name = map[int32]string{
		0: "INSTANCE_KIND_UNSPECIFIED",
		1: "INSTANCE_KIND_VM",
		2: "INSTANCE_KIND_METAL",
	}
	InstanceKind_value = map[string]int32{
		"INSTANCE_KIND_UNSPECIFIED": 0,
		"INSTANCE_KIND_VM":          1,
		"INSTANCE_KIND_METAL":       2,
	}
)

func (x InstanceKind) Enum() *InstanceKind {
	p := new(InstanceKind)
	*p = x
	return p
}

func (x InstanceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[8].Descriptor()
}

func (InstanceKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[8]
}

func (x InstanceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceKind.Descriptor instead.
func (InstanceKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{8}
}

// --------------------------------------------- Workload Resources ----------------------------------------------------
// Represents the Workload state, used for both current and desired state.
type WorkloadState int32

const (
	WorkloadState_WORKLOAD_STATE_UNSPECIFIED WorkloadState = 0
	WorkloadState_WORKLOAD_STATE_ERROR       WorkloadState = 1
	WorkloadState_WORKLOAD_STATE_DELETING    WorkloadState = 2
	WorkloadState_WORKLOAD_STATE_DELETED     WorkloadState = 3
	WorkloadState_WORKLOAD_STATE_PROVISIONED WorkloadState = 4
)

// Enum value maps for WorkloadState.
var (
	WorkloadState_name = map[int32]string{
		0: "WORKLOAD_STATE_UNSPECIFIED",
		1: "WORKLOAD_STATE_ERROR",
		2: "WORKLOAD_STATE_DELETING",
		3: "WORKLOAD_STATE_DELETED",
		4: "WORKLOAD_STATE_PROVISIONED",
	}
	WorkloadState_value = map[string]int32{
		"WORKLOAD_STATE_UNSPECIFIED": 0,
		"WORKLOAD_STATE_ERROR":       1,
		"WORKLOAD_STATE_DELETING":    2,
		"WORKLOAD_STATE_DELETED":     3,
		"WORKLOAD_STATE_PROVISIONED": 4,
	}
)

func (x WorkloadState) Enum() *WorkloadState {
	p := new(WorkloadState)
	*p = x
	return p
}

func (x WorkloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[9].Descriptor()
}

func (WorkloadState) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[9]
}

func (x WorkloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadState.Descriptor instead.
func (WorkloadState) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{9}
}

// Represents the type of workload (e.g., cluster, DHCP, DNS...).
type WorkloadKind int32

const (
	WorkloadKind_WORKLOAD_KIND_UNSPECIFIED WorkloadKind = 0 // Should never be used
	WorkloadKind_WORKLOAD_KIND_CLUSTER     WorkloadKind = 1
	WorkloadKind_WORKLOAD_KIND_DHCP        WorkloadKind = 2 // currently unused, but useful to test 2-phase delete
)

// Enum value maps for WorkloadKind.
var (
	WorkloadKind_name = map[int32]string{
		0: "WORKLOAD_KIND_UNSPECIFIED",
		1: "WORKLOAD_KIND_CLUSTER",
		2: "WORKLOAD_KIND_DHCP",
	}
	WorkloadKind_value = map[string]int32{
		"WORKLOAD_KIND_UNSPECIFIED": 0,
		"WORKLOAD_KIND_CLUSTER":     1,
		"WORKLOAD_KIND_DHCP":        2,
	}
)

func (x WorkloadKind) Enum() *WorkloadKind {
	p := new(WorkloadKind)
	*p = x
	return p
}

func (x WorkloadKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[10].Descriptor()
}

func (WorkloadKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[10]
}

func (x WorkloadKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadKind.Descriptor instead.
func (WorkloadKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{10}
}

// Represents the type of the workload member.
type WorkloadMemberKind int32

const (
	WorkloadMemberKind_WORKLOAD_MEMBER_KIND_UNSPECIFIED  WorkloadMemberKind = 0 // Should never be used
	WorkloadMemberKind_WORKLOAD_MEMBER_KIND_CLUSTER_NODE WorkloadMemberKind = 1 // Node of a cluster workload
)

// Enum value maps for WorkloadMemberKind.
var (
	WorkloadMemberKind_name = map[int32]string{
		0: "WORKLOAD_MEMBER_KIND_UNSPECIFIED",
		1: "WORKLOAD_MEMBER_KIND_CLUSTER_NODE",
	}
	WorkloadMemberKind_value = map[string]int32{
		"WORKLOAD_MEMBER_KIND_UNSPECIFIED":  0,
		"WORKLOAD_MEMBER_KIND_CLUSTER_NODE": 1,
	}
)

func (x WorkloadMemberKind) Enum() *WorkloadMemberKind {
	p := new(WorkloadMemberKind)
	*p = x
	return p
}

func (x WorkloadMemberKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadMemberKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[11].Descriptor()
}

func (WorkloadMemberKind) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[11]
}

func (x WorkloadMemberKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadMemberKind.Descriptor instead.
func (WorkloadMemberKind) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{11}
}

// UPDATE_POLICY_LATEST:
// - for mutable: unsupported
// - for immutable: latest version of the OS Resource
// UPDATE_POLICY_TARGET:
// - for mutable: apply the install_packages, update_sources, kernel_command
// - for immutable: install the version referenced by target_os
type UpdatePolicy int32

const (
	UpdatePolicy_UPDATE_POLICY_UNSPECIFIED UpdatePolicy = 0 // Should never be used
	UpdatePolicy_UPDATE_POLICY_LATEST      UpdatePolicy = 1 // Upgrade to latest version
	UpdatePolicy_UPDATE_POLICY_TARGET      UpdatePolicy = 2 // Upgrade to the target version
)

// Enum value maps for UpdatePolicy.
var (
	UpdatePolicy_name = map[int32]string{
		0: "UPDATE_POLICY_UNSPECIFIED",
		1: "UPDATE_POLICY_LATEST",
		2: "UPDATE_POLICY_TARGET",
	}
	UpdatePolicy_value = map[string]int32{
		"UPDATE_POLICY_UNSPECIFIED": 0,
		"UPDATE_POLICY_LATEST":      1,
		"UPDATE_POLICY_TARGET":      2,
	}
)

func (x UpdatePolicy) Enum() *UpdatePolicy {
	p := new(UpdatePolicy)
	*p = x
	return p
}

func (x UpdatePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdatePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_compute_v1_compute_proto_enumTypes[12].Descriptor()
}

func (UpdatePolicy) Type() protoreflect.EnumType {
	return &file_compute_v1_compute_proto_enumTypes[12]
}

func (x UpdatePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdatePolicy.Descriptor instead.
func (UpdatePolicy) EnumDescriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{12}
}

type HostResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   string                `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Kind         string                `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                               // Kind of resource. Frequently tied to Provider
	Name         string                `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name of host
	DesiredState HostState             `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=compute.v1.HostState" json:"desired_state,omitempty"`
	CurrentState HostState             `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=compute.v1.HostState" json:"current_state,omitempty"`
	Site         *v1.SiteResource      `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`         // Site this VM is located at
	Provider     *v11.ProviderResource `protobuf:"bytes,9,opt,name=provider,proto3" json:"provider,omitempty"` // Provider this host is onboarded through
	Note         string                `protobuf:"bytes,13,opt,name=note,proto3" json:"note,omitempty"`        // user-provided reason for change or a freeform field
	// FIXME: add validation rules on the below items
	HardwareKind    string                  `protobuf:"bytes,15,opt,name=hardware_kind,json=hardwareKind,proto3" json:"hardware_kind,omitempty"`                           // type such as "XSPgen3", "XDgen2", "CI7gen12"
	SerialNumber    string                  `protobuf:"bytes,16,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                           // SMBIOS device Serial Number
	Uuid            string                  `protobuf:"bytes,17,opt,name=uuid,proto3" json:"uuid,omitempty"`                                                               // SMBIOS device UUID. See pages 37-38 of https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.6.0.pdf
	MemoryBytes     uint64                  `protobuf:"varint,18,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`                             // Quantity of memory (RAM) in the system in bytes.
	CpuModel        string                  `protobuf:"bytes,19,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`                                       // CPU model of the Host
	CpuSockets      uint32                  `protobuf:"varint,20,opt,name=cpu_sockets,json=cpuSockets,proto3" json:"cpu_sockets,omitempty"`                                // Number of physical CPU sockets
	CpuCores        uint32                  `protobuf:"varint,21,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`                                      // Number of CPU cores
	CpuCapabilities string                  `protobuf:"bytes,22,opt,name=cpu_capabilities,json=cpuCapabilities,proto3" json:"cpu_capabilities,omitempty"`                  // String list of all CPU capabilities (possibly JSON)
	CpuArchitecture string                  `protobuf:"bytes,23,opt,name=cpu_architecture,json=cpuArchitecture,proto3" json:"cpu_architecture,omitempty"`                  // Architecture of the CPU model, e.g. x86_64
	CpuThreads      uint32                  `protobuf:"varint,24,opt,name=cpu_threads,json=cpuThreads,proto3" json:"cpu_threads,omitempty"`                                // Total Number of threads supported by the CPU
	CpuTopology     string                  `protobuf:"bytes,25,opt,name=cpu_topology,json=cpuTopology,proto3" json:"cpu_topology,omitempty"`                              // JSON field storing the CPU topology, refer to HDA/HRM docs for the JSON schema.
	MgmtIp          string                  `protobuf:"bytes,30,opt,name=mgmt_ip,json=mgmtIp,proto3" json:"mgmt_ip,omitempty"`                                             // IP address of management network
	BmcKind         BaremetalControllerKind `protobuf:"varint,34,opt,name=bmc_kind,json=bmcKind,proto3,enum=compute.v1.BaremetalControllerKind" json:"bmc_kind,omitempty"` // Kind of BMC
	BmcIp           string                  `protobuf:"bytes,35,opt,name=bmc_ip,json=bmcIp,proto3" json:"bmc_ip,omitempty"`                                                // BMC IP address, such as "192.0.0.1"
	BmcUsername     string                  `protobuf:"bytes,36,opt,name=bmc_username,json=bmcUsername,proto3" json:"bmc_username,omitempty"`                              // BMC user name, such as "admin"
	BmcPassword     string                  `protobuf:"bytes,37,opt,name=bmc_password,json=bmcPassword,proto3" json:"bmc_password,omitempty"`                              // BMC password, such as "admin"
	PxeMac          string                  `protobuf:"bytes,38,opt,name=pxe_mac,json=pxeMac,proto3" json:"pxe_mac,omitempty"`                                             // MAC address for PXE boot
	Hostname        string                  `protobuf:"bytes,43,opt,name=hostname,proto3" json:"hostname,omitempty"`                                                       // Hostname
	ProductName     string                  `protobuf:"bytes,44,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`                              // System Product Name
	BiosVersion     string                  `protobuf:"bytes,46,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty"`                              // BIOS Version
	BiosReleaseDate string                  `protobuf:"bytes,47,opt,name=bios_release_date,json=biosReleaseDate,proto3" json:"bios_release_date,omitempty"`                // BIOS Release Date
	BiosVendor      string                  `protobuf:"bytes,48,opt,name=bios_vendor,json=biosVendor,proto3" json:"bios_vendor,omitempty"`                                 // BIOS Vendor
	Metadata        string                  `protobuf:"bytes,45,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                       // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]
	// Power management related fields
	DesiredPowerState PowerState `protobuf:"varint,50,opt,name=desired_power_state,json=desiredPowerState,proto3,enum=compute.v1.PowerState" json:"desired_power_state,omitempty"` // Desired power state of the host
	CurrentPowerState PowerState `protobuf:"varint,51,opt,name=current_power_state,json=currentPowerState,proto3,enum=compute.v1.PowerState" json:"current_power_state,omitempty"` // Current power state of the host
	// A group of fields describing the Power status at runtime. The following 3 fields should always be updated in one shot.
	// If power_status is empty during initialization, it is automatically set to a Unknown value.
	PowerStatus          string               `protobuf:"bytes,52,opt,name=power_status,json=powerStatus,proto3" json:"power_status,omitempty"`                                                               // textual message that describes the runtime status of Host power. Set by DM RM only.
	PowerStatusIndicator v12.StatusIndication `protobuf:"varint,53,opt,name=power_status_indicator,json=powerStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"power_status_indicator,omitempty"` // Indicates dynamicity of the power_status. Set by DM RM only.
	PowerStatusTimestamp uint64               `protobuf:"varint,54,opt,name=power_status_timestamp,json=powerStatusTimestamp,proto3" json:"power_status_timestamp,omitempty"`                                 // UTC timestamp when power_status was last changed. Set by DM RM only.
	PowerCommandPolicy   PowerCommandPolicy   `protobuf:"varint,55,opt,name=power_command_policy,json=powerCommandPolicy,proto3,enum=compute.v1.PowerCommandPolicy" json:"power_command_policy,omitempty"`    // Power command policy of the host. By default, it is set to PowerCommandPolicy.POWER_COMMAND_POLICY_ORDERED.
	PowerOnTime          uint64               `protobuf:"varint,56,opt,name=power_on_time,json=powerOnTime,proto3" json:"power_on_time,omitempty"`                                                            // UTC timestamp when the host was powered on. Set by DM RM only.
	// A group of fields describing the Host runtime status. host_status, host_status_indicator and
	// host_status_timestamp should always be updated in one shot. If host_status is empty during initialization,
	// it is automatically set to a default value.
	HostStatus          string               `protobuf:"bytes,60,opt,name=host_status,json=hostStatus,proto3" json:"host_status,omitempty"`                                                               // textual message that describes the runtime status of Host. Set by RMs only.
	HostStatusIndicator v12.StatusIndication `protobuf:"varint,61,opt,name=host_status_indicator,json=hostStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"host_status_indicator,omitempty"` // Indicates interpretation of host_status. Set by RMs only.
	HostStatusTimestamp uint64               `protobuf:"varint,62,opt,name=host_status_timestamp,json=hostStatusTimestamp,proto3" json:"host_status_timestamp,omitempty"`                                 // UTC timestamp when host_status was last changed. Set by RMs only.
	// A group of fields describing the Host onboarding status. onboarding_status, onboarding_status_indicator and
	// onboarding_status_timestamp should always be updated in one shot. If onboarding_status is empty during initialization,
	// it is automatically set to a default value.
	OnboardingStatus          string               `protobuf:"bytes,63,opt,name=onboarding_status,json=onboardingStatus,proto3" json:"onboarding_status,omitempty"`                                                               // textual message that describes the onboarding status of Host. Set by RMs only.
	OnboardingStatusIndicator v12.StatusIndication `protobuf:"varint,64,opt,name=onboarding_status_indicator,json=onboardingStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"onboarding_status_indicator,omitempty"` // Indicates interpretation of onboarding_status. Set by RMs only.
	OnboardingStatusTimestamp uint64               `protobuf:"varint,65,opt,name=onboarding_status_timestamp,json=onboardingStatusTimestamp,proto3" json:"onboarding_status_timestamp,omitempty"`                                 // UTC timestamp when onboarding_status was last changed. Set by RMs only.
	// A group of fields describing the Host registration status. registration_status, registration_status_indicator and
	// registration_status_timestamp should always be updated in one shot. If registration_status is empty during initialization,
	// it is automatically set to a default value.
	RegistrationStatus          string                 `protobuf:"bytes,66,opt,name=registration_status,json=registrationStatus,proto3" json:"registration_status,omitempty"`                                                               // textual message that describes the onboarding status of Host. Set by RMs only.
	RegistrationStatusIndicator v12.StatusIndication   `protobuf:"varint,67,opt,name=registration_status_indicator,json=registrationStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"registration_status_indicator,omitempty"` // Indicates interpretation of registration_status. Set by RMs only.
	RegistrationStatusTimestamp uint64                 `protobuf:"varint,68,opt,name=registration_status_timestamp,json=registrationStatusTimestamp,proto3" json:"registration_status_timestamp,omitempty"`                                 // UTC timestamp when registration_status was last changed. Set by RMs only.
	HostStorages                []*HoststorageResource `protobuf:"bytes,70,rep,name=host_storages,json=hostStorages,proto3" json:"host_storages,omitempty"`                                                                                 // Back-reference to attached host storage resources. This edge is read-only.
	HostNics                    []*HostnicResource     `protobuf:"bytes,71,rep,name=host_nics,json=hostNics,proto3" json:"host_nics,omitempty"`                                                                                             // Back-reference to attached host NIC resources. This edge is read-only.
	HostUsbs                    []*HostusbResource     `protobuf:"bytes,72,rep,name=host_usbs,json=hostUsbs,proto3" json:"host_usbs,omitempty"`                                                                                             // Back-reference to attached host USB resources. This edge is read-only.
	HostGpus                    []*HostgpuResource     `protobuf:"bytes,73,rep,name=host_gpus,json=hostGpus,proto3" json:"host_gpus,omitempty"`                                                                                             // Back-reference to attached host GPU resources. This edge is read-only.
	Instance                    *InstanceResource      `protobuf:"bytes,90,opt,name=instance,proto3" json:"instance,omitempty"`                                                                                                             // back-reference to baremetal Instance associated to this host
	AmtSku                      string                 `protobuf:"bytes,91,opt,name=amt_sku,json=amtSku,proto3" json:"amt_sku,omitempty"`                                                                                                   // coming from device introspection
	DesiredAmtState             AmtState               `protobuf:"varint,92,opt,name=desired_amt_state,json=desiredAmtState,proto3,enum=compute.v1.AmtState" json:"desired_amt_state,omitempty"`                                            // Desired AMT/vPRO state of the host
	CurrentAmtState             AmtState               `protobuf:"varint,93,opt,name=current_amt_state,json=currentAmtState,proto3,enum=compute.v1.AmtState" json:"current_amt_state,omitempty"`                                            // Current AMT/vPRO state of the host
	// A group of fields describing the AMT status. amt_status, amt_status_indicator and
	// amt_status_timestamp should always be updated in one shot. If amt_status is empty during initialization,
	// it is automatically set to a Unknown value.
	AmtStatus          string               `protobuf:"bytes,94,opt,name=amt_status,json=amtStatus,proto3" json:"amt_status,omitempty"`                                                               // textual message that describes the AMT status of Host. Set by DM RM only.
	AmtStatusIndicator v12.StatusIndication `protobuf:"varint,95,opt,name=amt_status_indicator,json=amtStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"amt_status_indicator,omitempty"` // Indicates dynamicity of the amt_status. Set by DM and OM RM only.
	AmtStatusTimestamp uint64               `protobuf:"varint,96,opt,name=amt_status_timestamp,json=amtStatusTimestamp,proto3" json:"amt_status_timestamp,omitempty"`                                 // UTC timestamp when amt_status was last changed. Set by DM and OM RM only.
	TenantId           string               `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                                 // Tenant Identifier
	CreatedAt          string               `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                              // Creation timestamp
	UpdatedAt          string               `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                              // Update timestamp
}

func (x *HostResource) Reset() {
	*x = HostResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResource) ProtoMessage() {}

func (x *HostResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResource.ProtoReflect.Descriptor instead.
func (*HostResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{0}
}

func (x *HostResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HostResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostResource) GetDesiredState() HostState {
	if x != nil {
		return x.DesiredState
	}
	return HostState_HOST_STATE_UNSPECIFIED
}

func (x *HostResource) GetCurrentState() HostState {
	if x != nil {
		return x.CurrentState
	}
	return HostState_HOST_STATE_UNSPECIFIED
}

func (x *HostResource) GetSite() *v1.SiteResource {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *HostResource) GetProvider() *v11.ProviderResource {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *HostResource) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *HostResource) GetHardwareKind() string {
	if x != nil {
		return x.HardwareKind
	}
	return ""
}

func (x *HostResource) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *HostResource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HostResource) GetMemoryBytes() uint64 {
	if x != nil {
		return x.MemoryBytes
	}
	return 0
}

func (x *HostResource) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *HostResource) GetCpuSockets() uint32 {
	if x != nil {
		return x.CpuSockets
	}
	return 0
}

func (x *HostResource) GetCpuCores() uint32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *HostResource) GetCpuCapabilities() string {
	if x != nil {
		return x.CpuCapabilities
	}
	return ""
}

func (x *HostResource) GetCpuArchitecture() string {
	if x != nil {
		return x.CpuArchitecture
	}
	return ""
}

func (x *HostResource) GetCpuThreads() uint32 {
	if x != nil {
		return x.CpuThreads
	}
	return 0
}

func (x *HostResource) GetCpuTopology() string {
	if x != nil {
		return x.CpuTopology
	}
	return ""
}

func (x *HostResource) GetMgmtIp() string {
	if x != nil {
		return x.MgmtIp
	}
	return ""
}

func (x *HostResource) GetBmcKind() BaremetalControllerKind {
	if x != nil {
		return x.BmcKind
	}
	return BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_UNSPECIFIED
}

func (x *HostResource) GetBmcIp() string {
	if x != nil {
		return x.BmcIp
	}
	return ""
}

func (x *HostResource) GetBmcUsername() string {
	if x != nil {
		return x.BmcUsername
	}
	return ""
}

func (x *HostResource) GetBmcPassword() string {
	if x != nil {
		return x.BmcPassword
	}
	return ""
}

func (x *HostResource) GetPxeMac() string {
	if x != nil {
		return x.PxeMac
	}
	return ""
}

func (x *HostResource) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostResource) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *HostResource) GetBiosVersion() string {
	if x != nil {
		return x.BiosVersion
	}
	return ""
}

func (x *HostResource) GetBiosReleaseDate() string {
	if x != nil {
		return x.BiosReleaseDate
	}
	return ""
}

func (x *HostResource) GetBiosVendor() string {
	if x != nil {
		return x.BiosVendor
	}
	return ""
}

func (x *HostResource) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *HostResource) GetDesiredPowerState() PowerState {
	if x != nil {
		return x.DesiredPowerState
	}
	return PowerState_POWER_STATE_UNSPECIFIED
}

func (x *HostResource) GetCurrentPowerState() PowerState {
	if x != nil {
		return x.CurrentPowerState
	}
	return PowerState_POWER_STATE_UNSPECIFIED
}

func (x *HostResource) GetPowerStatus() string {
	if x != nil {
		return x.PowerStatus
	}
	return ""
}

func (x *HostResource) GetPowerStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.PowerStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *HostResource) GetPowerStatusTimestamp() uint64 {
	if x != nil {
		return x.PowerStatusTimestamp
	}
	return 0
}

func (x *HostResource) GetPowerCommandPolicy() PowerCommandPolicy {
	if x != nil {
		return x.PowerCommandPolicy
	}
	return PowerCommandPolicy_POWER_COMMAND_POLICY_UNSPECIFIED
}

func (x *HostResource) GetPowerOnTime() uint64 {
	if x != nil {
		return x.PowerOnTime
	}
	return 0
}

func (x *HostResource) GetHostStatus() string {
	if x != nil {
		return x.HostStatus
	}
	return ""
}

func (x *HostResource) GetHostStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.HostStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *HostResource) GetHostStatusTimestamp() uint64 {
	if x != nil {
		return x.HostStatusTimestamp
	}
	return 0
}

func (x *HostResource) GetOnboardingStatus() string {
	if x != nil {
		return x.OnboardingStatus
	}
	return ""
}

func (x *HostResource) GetOnboardingStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.OnboardingStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *HostResource) GetOnboardingStatusTimestamp() uint64 {
	if x != nil {
		return x.OnboardingStatusTimestamp
	}
	return 0
}

func (x *HostResource) GetRegistrationStatus() string {
	if x != nil {
		return x.RegistrationStatus
	}
	return ""
}

func (x *HostResource) GetRegistrationStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.RegistrationStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *HostResource) GetRegistrationStatusTimestamp() uint64 {
	if x != nil {
		return x.RegistrationStatusTimestamp
	}
	return 0
}

func (x *HostResource) GetHostStorages() []*HoststorageResource {
	if x != nil {
		return x.HostStorages
	}
	return nil
}

func (x *HostResource) GetHostNics() []*HostnicResource {
	if x != nil {
		return x.HostNics
	}
	return nil
}

func (x *HostResource) GetHostUsbs() []*HostusbResource {
	if x != nil {
		return x.HostUsbs
	}
	return nil
}

func (x *HostResource) GetHostGpus() []*HostgpuResource {
	if x != nil {
		return x.HostGpus
	}
	return nil
}

func (x *HostResource) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *HostResource) GetAmtSku() string {
	if x != nil {
		return x.AmtSku
	}
	return ""
}

func (x *HostResource) GetDesiredAmtState() AmtState {
	if x != nil {
		return x.DesiredAmtState
	}
	return AmtState_AMT_STATE_UNSPECIFIED
}

func (x *HostResource) GetCurrentAmtState() AmtState {
	if x != nil {
		return x.CurrentAmtState
	}
	return AmtState_AMT_STATE_UNSPECIFIED
}

func (x *HostResource) GetAmtStatus() string {
	if x != nil {
		return x.AmtStatus
	}
	return ""
}

func (x *HostResource) GetAmtStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.AmtStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *HostResource) GetAmtStatusTimestamp() uint64 {
	if x != nil {
		return x.AmtStatusTimestamp
	}
	return 0
}

func (x *HostResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HostResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type HoststorageResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string        `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`             // Resource ID
	Kind           string        `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                                           // Kind of resource. Frequently tied to Provider
	ProviderStatus string        `protobuf:"bytes,6,opt,name=provider_status,json=providerStatus,proto3" json:"provider_status,omitempty"` // current status of the resource according to the provider
	Host           *HostResource `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`                                          // The Host where this storage device is installed
	// FIXME: better validation of the below values
	Wwid          string `protobuf:"bytes,16,opt,name=wwid,proto3" json:"wwid,omitempty"`                                         // The storage device unique identifier.
	Serial        string `protobuf:"bytes,17,opt,name=serial,proto3" json:"serial,omitempty"`                                     // The storage device unique serial number.
	Vendor        string `protobuf:"bytes,18,opt,name=vendor,proto3" json:"vendor,omitempty"`                                     // The Storage device vendor
	Model         string `protobuf:"bytes,19,opt,name=model,proto3" json:"model,omitempty"`                                       // The storage device model string
	CapacityBytes uint64 `protobuf:"varint,20,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"` // The storage device Capacity (size) in bytes
	DeviceName    string `protobuf:"bytes,21,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`           // The storage device device name (OS provided, like sda, sdb, etc.)
	TenantId      string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                // Tenant Identifier
	CreatedAt     string `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`             // Creation timestamp
	UpdatedAt     string `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`             // Update timestamp
}

func (x *HoststorageResource) Reset() {
	*x = HoststorageResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoststorageResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoststorageResource) ProtoMessage() {}

func (x *HoststorageResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoststorageResource.ProtoReflect.Descriptor instead.
func (*HoststorageResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{1}
}

func (x *HoststorageResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HoststorageResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HoststorageResource) GetProviderStatus() string {
	if x != nil {
		return x.ProviderStatus
	}
	return ""
}

func (x *HoststorageResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HoststorageResource) GetWwid() string {
	if x != nil {
		return x.Wwid
	}
	return ""
}

func (x *HoststorageResource) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *HoststorageResource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HoststorageResource) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *HoststorageResource) GetCapacityBytes() uint64 {
	if x != nil {
		return x.CapacityBytes
	}
	return 0
}

func (x *HoststorageResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HoststorageResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HoststorageResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HoststorageResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type HostnicResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId     string        `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`             // Resource ID
	Kind           string        `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                                           // Kind of resource. Frequently tied to Provider
	ProviderStatus string        `protobuf:"bytes,6,opt,name=provider_status,json=providerStatus,proto3" json:"provider_status,omitempty"` // current status of the resource according to the provider
	Host           *HostResource `protobuf:"bytes,12,opt,name=host,proto3" json:"host,omitempty"`                                          // The Host where this NIC is installed
	// FIXME: Better validation on fields below
	DeviceName          string                    `protobuf:"bytes,16,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`                                         // the device name (OS provided, like eth0, enp1s0, etc.)
	PciIdentifier       string                    `protobuf:"bytes,17,opt,name=pci_identifier,json=pciIdentifier,proto3" json:"pci_identifier,omitempty"`                                // PCI identifier string for this network interface
	MacAddr             string                    `protobuf:"bytes,18,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`                                                  // MAC address
	SriovEnabled        bool                      `protobuf:"varint,19,opt,name=sriov_enabled,json=sriovEnabled,proto3" json:"sriov_enabled,omitempty"`                                  // has SRIOV
	SriovVfsNum         uint32                    `protobuf:"varint,20,opt,name=sriov_vfs_num,json=sriovVfsNum,proto3" json:"sriov_vfs_num,omitempty"`                                   // The number of VFs currently provisioned on the interface, if SR-IOV is supported
	SriovVfsTotal       uint32                    `protobuf:"varint,31,opt,name=sriov_vfs_total,json=sriovVfsTotal,proto3" json:"sriov_vfs_total,omitempty"`                             // The maximum number of VFs the interface supports, if SR-IOV is supported.
	PeerName            string                    `protobuf:"bytes,21,opt,name=peer_name,json=peerName,proto3" json:"peer_name,omitempty"`                                               // the neighbor device (the other side of the link), collecting via LLDP
	PeerDescription     string                    `protobuf:"bytes,22,opt,name=peer_description,json=peerDescription,proto3" json:"peer_description,omitempty"`                          // the neighbor device description
	PeerMac             string                    `protobuf:"bytes,23,opt,name=peer_mac,json=peerMac,proto3" json:"peer_mac,omitempty"`                                                  // the neighbor device MAC address
	PeerMgmtIp          string                    `protobuf:"bytes,24,opt,name=peer_mgmt_ip,json=peerMgmtIp,proto3" json:"peer_mgmt_ip,omitempty"`                                       // the neighbor device management IP address
	PeerPort            string                    `protobuf:"bytes,25,opt,name=peer_port,json=peerPort,proto3" json:"peer_port,omitempty"`                                               // the neighbor device port number
	SupportedLinkMode   string                    `protobuf:"bytes,26,opt,name=supported_link_mode,json=supportedLinkMode,proto3" json:"supported_link_mode,omitempty"`                  // the link mode supported by this interface, comma separated
	AdvertisingLinkMode string                    `protobuf:"bytes,27,opt,name=advertising_link_mode,json=advertisingLinkMode,proto3" json:"advertising_link_mode,omitempty"`            // the link mode advertising by this interface
	CurrentSpeedBps     uint64                    `protobuf:"varint,28,opt,name=current_speed_bps,json=currentSpeedBps,proto3" json:"current_speed_bps,omitempty"`                       // the current speed of this interface
	CurrentDuplex       string                    `protobuf:"bytes,29,opt,name=current_duplex,json=currentDuplex,proto3" json:"current_duplex,omitempty"`                                // the current duplex of this interface
	Features            string                    `protobuf:"bytes,30,opt,name=features,proto3" json:"features,omitempty"`                                                               // the features of this interface, comma separated
	Mtu                 uint32                    `protobuf:"varint,40,opt,name=mtu,proto3" json:"mtu,omitempty"`                                                                        // Maximum transmission unit of the interface
	LinkState           NetworkInterfaceLinkState `protobuf:"varint,41,opt,name=link_state,json=linkState,proto3,enum=compute.v1.NetworkInterfaceLinkState" json:"link_state,omitempty"` // link state of this interface
	BmcInterface        bool                      `protobuf:"varint,43,opt,name=bmc_interface,json=bmcInterface,proto3" json:"bmc_interface,omitempty"`                                  // whether this is a bmc interface or not
	TenantId            string                    `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                              // Tenant Identifier
	CreatedAt           string                    `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                           // Creation timestamp
	UpdatedAt           string                    `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                           // Update timestamp
}

func (x *HostnicResource) Reset() {
	*x = HostnicResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnicResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnicResource) ProtoMessage() {}

func (x *HostnicResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnicResource.ProtoReflect.Descriptor instead.
func (*HostnicResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{2}
}

func (x *HostnicResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostnicResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HostnicResource) GetProviderStatus() string {
	if x != nil {
		return x.ProviderStatus
	}
	return ""
}

func (x *HostnicResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostnicResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostnicResource) GetPciIdentifier() string {
	if x != nil {
		return x.PciIdentifier
	}
	return ""
}

func (x *HostnicResource) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *HostnicResource) GetSriovEnabled() bool {
	if x != nil {
		return x.SriovEnabled
	}
	return false
}

func (x *HostnicResource) GetSriovVfsNum() uint32 {
	if x != nil {
		return x.SriovVfsNum
	}
	return 0
}

func (x *HostnicResource) GetSriovVfsTotal() uint32 {
	if x != nil {
		return x.SriovVfsTotal
	}
	return 0
}

func (x *HostnicResource) GetPeerName() string {
	if x != nil {
		return x.PeerName
	}
	return ""
}

func (x *HostnicResource) GetPeerDescription() string {
	if x != nil {
		return x.PeerDescription
	}
	return ""
}

func (x *HostnicResource) GetPeerMac() string {
	if x != nil {
		return x.PeerMac
	}
	return ""
}

func (x *HostnicResource) GetPeerMgmtIp() string {
	if x != nil {
		return x.PeerMgmtIp
	}
	return ""
}

func (x *HostnicResource) GetPeerPort() string {
	if x != nil {
		return x.PeerPort
	}
	return ""
}

func (x *HostnicResource) GetSupportedLinkMode() string {
	if x != nil {
		return x.SupportedLinkMode
	}
	return ""
}

func (x *HostnicResource) GetAdvertisingLinkMode() string {
	if x != nil {
		return x.AdvertisingLinkMode
	}
	return ""
}

func (x *HostnicResource) GetCurrentSpeedBps() uint64 {
	if x != nil {
		return x.CurrentSpeedBps
	}
	return 0
}

func (x *HostnicResource) GetCurrentDuplex() string {
	if x != nil {
		return x.CurrentDuplex
	}
	return ""
}

func (x *HostnicResource) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *HostnicResource) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *HostnicResource) GetLinkState() NetworkInterfaceLinkState {
	if x != nil {
		return x.LinkState
	}
	return NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED
}

func (x *HostnicResource) GetBmcInterface() bool {
	if x != nil {
		return x.BmcInterface
	}
	return false
}

func (x *HostnicResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HostnicResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostnicResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type HostusbResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string        `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // Resource ID
	Kind       string        `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`                               // Kind of resource.
	Host       *HostResource `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`                               // The Host where this USB device is installed
	OwnerId    string        `protobuf:"bytes,9,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`          // VM or container this usb device allocated to
	// FIXME: better validation of the below values
	Idvendor   string `protobuf:"bytes,10,opt,name=idvendor,proto3" json:"idvendor,omitempty"`                       // Hexadecimal number representing ID of the USB device vendor
	Idproduct  string `protobuf:"bytes,11,opt,name=idproduct,proto3" json:"idproduct,omitempty"`                     // Hexadecimal number representing ID of the USB device product
	Bus        uint32 `protobuf:"varint,12,opt,name=bus,proto3" json:"bus,omitempty"`                                // Bus number of device connected with
	Addr       uint32 `protobuf:"varint,13,opt,name=addr,proto3" json:"addr,omitempty"`                              // USB Device number assigned by OS.
	Class      string `protobuf:"bytes,20,opt,name=class,proto3" json:"class,omitempty"`                             // class defined by USB-IF
	Serial     string `protobuf:"bytes,21,opt,name=serial,proto3" json:"serial,omitempty"`                           // Serial number of device
	DeviceName string `protobuf:"bytes,22,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"` // the OS-provided device name
	TenantId   string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`      // Tenant Identifier
	CreatedAt  string `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`   // Creation timestamp
	UpdatedAt  string `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`   // Update timestamp
}

func (x *HostusbResource) Reset() {
	*x = HostusbResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostusbResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostusbResource) ProtoMessage() {}

func (x *HostusbResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostusbResource.ProtoReflect.Descriptor instead.
func (*HostusbResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{3}
}

func (x *HostusbResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostusbResource) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *HostusbResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostusbResource) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *HostusbResource) GetIdvendor() string {
	if x != nil {
		return x.Idvendor
	}
	return ""
}

func (x *HostusbResource) GetIdproduct() string {
	if x != nil {
		return x.Idproduct
	}
	return ""
}

func (x *HostusbResource) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *HostusbResource) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *HostusbResource) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *HostusbResource) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *HostusbResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostusbResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HostusbResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostusbResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type HostgpuResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId  string        `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`  // Resource ID
	Host        *HostResource `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`                               // Host this GPU device is installed in
	PciId       string        `protobuf:"bytes,20,opt,name=pci_id,json=pciId,proto3" json:"pci_id,omitempty"`                // The GPU device PCI identifier
	Product     string        `protobuf:"bytes,21,opt,name=product,proto3" json:"product,omitempty"`                         // The GPU device model
	Vendor      string        `protobuf:"bytes,22,opt,name=vendor,proto3" json:"vendor,omitempty"`                           // The GPU device vendor
	Description string        `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`                 // The human-readable GPU device description
	DeviceName  string        `protobuf:"bytes,24,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"` // GPU name as reported by OS
	Features    string        `protobuf:"bytes,25,opt,name=features,proto3" json:"features,omitempty"`                       // The features of this GPU device, comma separated
	TenantId    string        `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`      // Tenant Identifier
	CreatedAt   string        `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`   // Creation timestamp
	UpdatedAt   string        `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`   // Update timestamp
}

func (x *HostgpuResource) Reset() {
	*x = HostgpuResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostgpuResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostgpuResource) ProtoMessage() {}

func (x *HostgpuResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostgpuResource.ProtoReflect.Descriptor instead.
func (*HostgpuResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{4}
}

func (x *HostgpuResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostgpuResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *HostgpuResource) GetPciId() string {
	if x != nil {
		return x.PciId
	}
	return ""
}

func (x *HostgpuResource) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *HostgpuResource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HostgpuResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HostgpuResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostgpuResource) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *HostgpuResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *HostgpuResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostgpuResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// InstanceResource describes an instantiated OS install, running on either a
// host or hypervisor.
type InstanceResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId      string                       `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create.
	Kind            InstanceKind                 `protobuf:"varint,2,opt,name=kind,proto3,enum=compute.v1.InstanceKind" json:"kind,omitempty"` // Kind of resource. Frequently tied to Provider.
	Name            string                       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name of Instance
	DesiredState    InstanceState                `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=compute.v1.InstanceState" json:"desired_state,omitempty"`
	CurrentState    InstanceState                `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=compute.v1.InstanceState" json:"current_state,omitempty"`
	VmMemoryBytes   uint64                       `protobuf:"varint,6,opt,name=vm_memory_bytes,json=vmMemoryBytes,proto3" json:"vm_memory_bytes,omitempty"`                                 // Quantity of memory in the system, in bytes. Only applicable to VM instances.
	VmCpuCores      uint32                       `protobuf:"varint,7,opt,name=vm_cpu_cores,json=vmCpuCores,proto3" json:"vm_cpu_cores,omitempty"`                                          // Number of CPU cores. Only applicable to VM instances.
	VmStorageBytes  uint64                       `protobuf:"varint,8,opt,name=vm_storage_bytes,json=vmStorageBytes,proto3" json:"vm_storage_bytes,omitempty"`                              // Storage quantity (primary), in bytes. Only applicable to VM instances.
	Host            *HostResource                `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`                                                                           // Host this Instance is placed on. Only applicable to baremetal instances.
	DesiredOs       *v13.OperatingSystemResource `protobuf:"bytes,11,opt,name=desired_os,json=desiredOs,proto3" json:"desired_os,omitempty"`                                               // Deprecated, use OSUpdatePolicy for driving day2, and os for day0 operations instead. OS resource that should be installed to this Instance.
	CurrentOs       *v13.OperatingSystemResource `protobuf:"bytes,25,opt,name=current_os,json=currentOs,proto3" json:"current_os,omitempty"`                                               // Deprecated, use os field instead. OS resource that is currently installed for this Instance.
	Os              *v13.OperatingSystemResource `protobuf:"bytes,12,opt,name=os,proto3" json:"os,omitempty"`                                                                              // OS resource that is installed for this Instance.
	SecurityFeature v13.SecurityFeature          `protobuf:"varint,14,opt,name=security_feature,json=securityFeature,proto3,enum=os.v1.SecurityFeature" json:"security_feature,omitempty"` // Select to enable security features such as Secure Boot (SB) and Full Disk Encryption (FDE).
	// A group of fields describing the Instance runtime status. instance_status, instance_status_indicator and
	// instance_status_timestamp should always be updated in one shot. If instance_status is empty during initialization,
	// it is automatically set to a default value.
	InstanceStatus          string               `protobuf:"bytes,15,opt,name=instance_status,json=instanceStatus,proto3" json:"instance_status,omitempty"`                                                               // textual message that describes the current instance status. Set by RMs only.
	InstanceStatusIndicator v12.StatusIndication `protobuf:"varint,16,opt,name=instance_status_indicator,json=instanceStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"instance_status_indicator,omitempty"` // Indicates interpretation of instance_status. Set by RMs only.
	InstanceStatusTimestamp uint64               `protobuf:"varint,17,opt,name=instance_status_timestamp,json=instanceStatusTimestamp,proto3" json:"instance_status_timestamp,omitempty"`                                 // UTC timestamp when instance_status was last changed. Set by RMs only.
	// A group of fields describing the Instance provisioning status. provisioning_status, provisioning_status_indicator and
	// provisioning_status_timestamp should always be updated in one shot. If provisioning_status is empty during initialization,
	// it is automatically set to a default value.
	ProvisioningStatus          string               `protobuf:"bytes,18,opt,name=provisioning_status,json=provisioningStatus,proto3" json:"provisioning_status,omitempty"`                                                               // textual message that describes the provisioning status of Instance. Set by RMs only.
	ProvisioningStatusIndicator v12.StatusIndication `protobuf:"varint,19,opt,name=provisioning_status_indicator,json=provisioningStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"provisioning_status_indicator,omitempty"` // Indicates interpretation of provisioning_status. Set by RMs only.
	ProvisioningStatusTimestamp uint64               `protobuf:"varint,20,opt,name=provisioning_status_timestamp,json=provisioningStatusTimestamp,proto3" json:"provisioning_status_timestamp,omitempty"`                                 // UTC timestamp when provisioning_status was last changed. Set by RMs only.
	// A group of fields describing the Instance update status. update_status, update_status_indicator and
	// update_status_timestamp should always be updated in one shot. update_status_detail should be populated when update status reports update finished successfully or failed.
	// If update_status is empty during initialization, it is automatically set to a default value.
	UpdateStatus          string               `protobuf:"bytes,21,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`                                                               // textual message that describes the update status of Instance. Set by RMs only.
	UpdateStatusIndicator v12.StatusIndication `protobuf:"varint,22,opt,name=update_status_indicator,json=updateStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"update_status_indicator,omitempty"` // Indicates interpretation of update_status. Set by RMs only.
	UpdateStatusTimestamp uint64               `protobuf:"varint,23,opt,name=update_status_timestamp,json=updateStatusTimestamp,proto3" json:"update_status_timestamp,omitempty"`                                 // UTC timestamp when update_status was last changed. Set by RMs only.
	UpdateStatusDetail    string               `protobuf:"bytes,24,opt,name=update_status_detail,json=updateStatusDetail,proto3" json:"update_status_detail,omitempty"`                                           // Deprecated, will be removed in EMF v3.2.0, use OSUpdateRun instead. JSON field storing details of Instance update status. Set by RMs only. Beta, subject to change.
	// A group of fields describing the Instance trusted_attestation status.
	// trusted_attestation_status, trusted_attestation_status_indicator and
	// trusted_attestation_status_timestamp should always be updated in one shot.
	// If trusted_attestation_status is empty during initialization, it is automatically set to a default value.
	TrustedAttestationStatus          string                    `protobuf:"bytes,26,opt,name=trusted_attestation_status,json=trustedAttestationStatus,proto3" json:"trusted_attestation_status,omitempty"`                                                               // textual message that describes the trusted_attestation status of Instance. Set by RMs only.
	TrustedAttestationStatusIndicator v12.StatusIndication      `protobuf:"varint,27,opt,name=trusted_attestation_status_indicator,json=trustedAttestationStatusIndicator,proto3,enum=status.v1.StatusIndication" json:"trusted_attestation_status_indicator,omitempty"` // Indicates interpretation of trusted_attestation_status. Set by RMs only.
	TrustedAttestationStatusTimestamp uint64                    `protobuf:"varint,28,opt,name=trusted_attestation_status_timestamp,json=trustedAttestationStatusTimestamp,proto3" json:"trusted_attestation_status_timestamp,omitempty"`                                 // UTC timestamp when trusted_attestation_status was last changed. Set by RMs only.
	WorkloadMembers                   []*WorkloadMember         `protobuf:"bytes,30,rep,name=workload_members,json=workloadMembers,proto3" json:"workload_members,omitempty"`                                                                                            // back-reference to the Workload Members associated to this Instance
	Provider                          *v11.ProviderResource     `protobuf:"bytes,40,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                                                 // Provider this Instance is provisioned through
	Localaccount                      *v14.LocalAccountResource `protobuf:"bytes,41,opt,name=localaccount,proto3" json:"localaccount,omitempty"`                                                                                                                         // Local Account associated with this Instance
	ExistingCves                      string                    `protobuf:"bytes,42,opt,name=existing_cves,json=existingCves,proto3" json:"existing_cves,omitempty"`                                                                                                     // The CVEs that are currently present on the Instance, encoded as a JSON list.
	OsUpdatePolicy                    *OSUpdatePolicyResource   `protobuf:"bytes,43,opt,name=os_update_policy,json=osUpdatePolicy,proto3" json:"os_update_policy,omitempty"`                                                                                             // OS Update Policy associated with this Instance.
	RuntimePackages                   string                    `protobuf:"bytes,51,opt,name=runtime_packages,json=runtimePackages,proto3" json:"runtime_packages,omitempty"`                                                                                            // The packages available on the Instance at runtime, represented as a JSON list.
	OsUpdateAvailable                 string                    `protobuf:"bytes,52,opt,name=os_update_available,json=osUpdateAvailable,proto3" json:"os_update_available,omitempty"`                                                                                    // Details about OS Updates available for this Instance. If empty, there are no updates available.
	CustomConfig                      []*CustomConfigResource   `protobuf:"bytes,53,rep,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty"`                                                                                                     // List of Custom Config associated with this Instance
	TenantId                          string                    `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                                                                                // Tenant Identifier
	InstanceStatusDetail              string                    `protobuf:"bytes,101,opt,name=instance_status_detail,json=instanceStatusDetail,proto3" json:"instance_status_detail,omitempty"`                                                                          // textual message that gives detailed status of the instance's software components.
	CreatedAt                         string                    `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                                                                             // Creation timestamp
	UpdatedAt                         string                    `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                                                                             // Update timestamp
}

func (x *InstanceResource) Reset() {
	*x = InstanceResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceResource) ProtoMessage() {}

func (x *InstanceResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceResource.ProtoReflect.Descriptor instead.
func (*InstanceResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{5}
}

func (x *InstanceResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceResource) GetKind() InstanceKind {
	if x != nil {
		return x.Kind
	}
	return InstanceKind_INSTANCE_KIND_UNSPECIFIED
}

func (x *InstanceResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceResource) GetDesiredState() InstanceState {
	if x != nil {
		return x.DesiredState
	}
	return InstanceState_INSTANCE_STATE_UNSPECIFIED
}

func (x *InstanceResource) GetCurrentState() InstanceState {
	if x != nil {
		return x.CurrentState
	}
	return InstanceState_INSTANCE_STATE_UNSPECIFIED
}

func (x *InstanceResource) GetVmMemoryBytes() uint64 {
	if x != nil {
		return x.VmMemoryBytes
	}
	return 0
}

func (x *InstanceResource) GetVmCpuCores() uint32 {
	if x != nil {
		return x.VmCpuCores
	}
	return 0
}

func (x *InstanceResource) GetVmStorageBytes() uint64 {
	if x != nil {
		return x.VmStorageBytes
	}
	return 0
}

func (x *InstanceResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *InstanceResource) GetDesiredOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.DesiredOs
	}
	return nil
}

func (x *InstanceResource) GetCurrentOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.CurrentOs
	}
	return nil
}

func (x *InstanceResource) GetOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.Os
	}
	return nil
}

func (x *InstanceResource) GetSecurityFeature() v13.SecurityFeature {
	if x != nil {
		return x.SecurityFeature
	}
	return v13.SecurityFeature(0)
}

func (x *InstanceResource) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *InstanceResource) GetInstanceStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.InstanceStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *InstanceResource) GetInstanceStatusTimestamp() uint64 {
	if x != nil {
		return x.InstanceStatusTimestamp
	}
	return 0
}

func (x *InstanceResource) GetProvisioningStatus() string {
	if x != nil {
		return x.ProvisioningStatus
	}
	return ""
}

func (x *InstanceResource) GetProvisioningStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.ProvisioningStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *InstanceResource) GetProvisioningStatusTimestamp() uint64 {
	if x != nil {
		return x.ProvisioningStatusTimestamp
	}
	return 0
}

func (x *InstanceResource) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *InstanceResource) GetUpdateStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.UpdateStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *InstanceResource) GetUpdateStatusTimestamp() uint64 {
	if x != nil {
		return x.UpdateStatusTimestamp
	}
	return 0
}

func (x *InstanceResource) GetUpdateStatusDetail() string {
	if x != nil {
		return x.UpdateStatusDetail
	}
	return ""
}

func (x *InstanceResource) GetTrustedAttestationStatus() string {
	if x != nil {
		return x.TrustedAttestationStatus
	}
	return ""
}

func (x *InstanceResource) GetTrustedAttestationStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.TrustedAttestationStatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *InstanceResource) GetTrustedAttestationStatusTimestamp() uint64 {
	if x != nil {
		return x.TrustedAttestationStatusTimestamp
	}
	return 0
}

func (x *InstanceResource) GetWorkloadMembers() []*WorkloadMember {
	if x != nil {
		return x.WorkloadMembers
	}
	return nil
}

func (x *InstanceResource) GetProvider() *v11.ProviderResource {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *InstanceResource) GetLocalaccount() *v14.LocalAccountResource {
	if x != nil {
		return x.Localaccount
	}
	return nil
}

func (x *InstanceResource) GetExistingCves() string {
	if x != nil {
		return x.ExistingCves
	}
	return ""
}

func (x *InstanceResource) GetOsUpdatePolicy() *OSUpdatePolicyResource {
	if x != nil {
		return x.OsUpdatePolicy
	}
	return nil
}

func (x *InstanceResource) GetRuntimePackages() string {
	if x != nil {
		return x.RuntimePackages
	}
	return ""
}

func (x *InstanceResource) GetOsUpdateAvailable() string {
	if x != nil {
		return x.OsUpdateAvailable
	}
	return ""
}

func (x *InstanceResource) GetCustomConfig() []*CustomConfigResource {
	if x != nil {
		return x.CustomConfig
	}
	return nil
}

func (x *InstanceResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *InstanceResource) GetInstanceStatusDetail() string {
	if x != nil {
		return x.InstanceStatusDetail
	}
	return ""
}

func (x *InstanceResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InstanceResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Represents a generic way to group compute resources (e.g., cluster, DHCP...).
type WorkloadResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   string            `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Kind         WorkloadKind      `protobuf:"varint,2,opt,name=kind,proto3,enum=compute.v1.WorkloadKind" json:"kind,omitempty"` // Type of workload
	Name         string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                               // user-provided, human-readable name of workload
	ExternalId   string            `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"` // Edge towards a resource that sits outside infra realm (for example, ID of the Cluster managed by cluster orchestrator). We don't enforce any pattern, but the max length of the field is 40 chars.
	DesiredState WorkloadState     `protobuf:"varint,10,opt,name=desired_state,json=desiredState,proto3,enum=compute.v1.WorkloadState" json:"desired_state,omitempty"`
	CurrentState WorkloadState     `protobuf:"varint,11,opt,name=current_state,json=currentState,proto3,enum=compute.v1.WorkloadState" json:"current_state,omitempty"`
	Status       string            `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`                         // Human-readable status of the workload
	Members      []*WorkloadMember `protobuf:"bytes,20,rep,name=members,proto3" json:"members,omitempty"`                       // Should not be used to set members
	Metadata     string            `protobuf:"bytes,30,opt,name=metadata,proto3" json:"metadata,omitempty"`                     // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]
	TenantId     string            `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`    // Tenant Identifier
	CreatedAt    string            `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp
	UpdatedAt    string            `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Update timestamp
}

func (x *WorkloadResource) Reset() {
	*x = WorkloadResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadResource) ProtoMessage() {}

func (x *WorkloadResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadResource.ProtoReflect.Descriptor instead.
func (*WorkloadResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *WorkloadResource) GetKind() WorkloadKind {
	if x != nil {
		return x.Kind
	}
	return WorkloadKind_WORKLOAD_KIND_UNSPECIFIED
}

func (x *WorkloadResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadResource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WorkloadResource) GetDesiredState() WorkloadState {
	if x != nil {
		return x.DesiredState
	}
	return WorkloadState_WORKLOAD_STATE_UNSPECIFIED
}

func (x *WorkloadResource) GetCurrentState() WorkloadState {
	if x != nil {
		return x.CurrentState
	}
	return WorkloadState_WORKLOAD_STATE_UNSPECIFIED
}

func (x *WorkloadResource) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkloadResource) GetMembers() []*WorkloadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *WorkloadResource) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *WorkloadResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *WorkloadResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkloadResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Intermediate resource to represent a relation between a workload and a compute resource (i.e., instance).
type WorkloadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string             `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`       // resource ID, generated by inventory on Create
	Kind       WorkloadMemberKind `protobuf:"varint,2,opt,name=kind,proto3,enum=compute.v1.WorkloadMemberKind" json:"kind,omitempty"` // Type of member
	Workload   *WorkloadResource  `protobuf:"bytes,10,opt,name=workload,proto3" json:"workload,omitempty"`
	Instance   *InstanceResource  `protobuf:"bytes,11,opt,name=instance,proto3" json:"instance,omitempty"`
	TenantId   string             `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`    // Tenant Identifier
	CreatedAt  string             `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Creation timestamp
	UpdatedAt  string             `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Update timestamp
}

func (x *WorkloadMember) Reset() {
	*x = WorkloadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadMember) ProtoMessage() {}

func (x *WorkloadMember) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadMember.ProtoReflect.Descriptor instead.
func (*WorkloadMember) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadMember) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *WorkloadMember) GetKind() WorkloadMemberKind {
	if x != nil {
		return x.Kind
	}
	return WorkloadMemberKind_WORKLOAD_MEMBER_KIND_UNSPECIFIED
}

func (x *WorkloadMember) GetWorkload() *WorkloadResource {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *WorkloadMember) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *WorkloadMember) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *WorkloadMember) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkloadMember) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type OSUpdatePolicyResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId      string                       `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Name            string                       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // User-provided, human-readable name of OSUpdatePolicy
	Description     string                       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	InstallPackages string                       `protobuf:"bytes,4,opt,name=install_packages,json=installPackages,proto3" json:"install_packages,omitempty"`                       // Freeform text, OS-dependent. A list of package names, one per line (newline separated). Should not contain version info. Applies only to Mutable OSes.
	UpdateSources   []string                     `protobuf:"bytes,5,rep,name=update_sources,json=updateSources,proto3" json:"update_sources,omitempty"`                             // OS Update Sources. Should be in 'DEB822 Source Format' for Debian style OSs. Applies only to Mutable OSes.
	KernelCommand   string                       `protobuf:"bytes,6,opt,name=kernel_command,json=kernelCommand,proto3" json:"kernel_command,omitempty"`                             // Kernel Command Line Options. Applies only to Mutable OSes.
	TargetOs        *v13.OperatingSystemResource `protobuf:"bytes,50,opt,name=target_os,json=targetOs,proto3" json:"target_os,omitempty"`                                           // OS resource that should be installed to this Instance. Applies only to Immutable OSes for A/B upgrades. The field is immutable.
	UpdatePolicy    UpdatePolicy                 `protobuf:"varint,60,opt,name=update_policy,json=updatePolicy,proto3,enum=compute.v1.UpdatePolicy" json:"update_policy,omitempty"` // Update Policy for the OS update. This field is used to determine the update policy for the OS update.
	TenantId        string                       `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                          // Tenant Identifier
	CreatedAt       string                       `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                       // Creation timestamp
	UpdatedAt       string                       `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                       // Update timestamp
}

func (x *OSUpdatePolicyResource) Reset() {
	*x = OSUpdatePolicyResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSUpdatePolicyResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSUpdatePolicyResource) ProtoMessage() {}

func (x *OSUpdatePolicyResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSUpdatePolicyResource.ProtoReflect.Descriptor instead.
func (*OSUpdatePolicyResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{8}
}

func (x *OSUpdatePolicyResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetInstallPackages() string {
	if x != nil {
		return x.InstallPackages
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetUpdateSources() []string {
	if x != nil {
		return x.UpdateSources
	}
	return nil
}

func (x *OSUpdatePolicyResource) GetKernelCommand() string {
	if x != nil {
		return x.KernelCommand
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetTargetOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.TargetOs
	}
	return nil
}

func (x *OSUpdatePolicyResource) GetUpdatePolicy() UpdatePolicy {
	if x != nil {
		return x.UpdatePolicy
	}
	return UpdatePolicy_UPDATE_POLICY_UNSPECIFIED
}

func (x *OSUpdatePolicyResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OSUpdatePolicyResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// ---------------------------------------------------------------------------------------------------------------------
// --------------------------------------------- Custom Config Resources -----------------------------------------------
type CustomConfigResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource identifier
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Unique name provided by admin
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Configuration file.
	Config string `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	// Config Description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Tenant Identifier.
	TenantId string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Creation timestamp
	CreatedAt string              `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt string              `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Update timestamp
	Instances []*InstanceResource `protobuf:"bytes,500,rep,name=instances,proto3" json:"instances,omitempty"`                  // back-reference to the Instances associated to this Custom Config, we don't handle setting edges via back-reference and we dont eager load this edge.
}

func (x *CustomConfigResource) Reset() {
	*x = CustomConfigResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomConfigResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomConfigResource) ProtoMessage() {}

func (x *CustomConfigResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomConfigResource.ProtoReflect.Descriptor instead.
func (*CustomConfigResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{9}
}

func (x *CustomConfigResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *CustomConfigResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomConfigResource) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *CustomConfigResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CustomConfigResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CustomConfigResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *CustomConfigResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *CustomConfigResource) GetInstances() []*InstanceResource {
	if x != nil {
		return x.Instances
	}
	return nil
}

type OSUpdateRunResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId      string                  `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"` // resource ID, generated by inventory on Create
	Name            string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                               // User-provided, human-readable name of OSUpdateRun
	Description     string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	AppliedPolicy   *OSUpdatePolicyResource `protobuf:"bytes,4,opt,name=applied_policy,json=appliedPolicy,proto3" json:"applied_policy,omitempty"`                                        // OSUpdate Policy of this OSUpdate Run. The field is immutable.
	Instance        *InstanceResource       `protobuf:"bytes,5,opt,name=instance,proto3" json:"instance,omitempty"`                                                                       // The instance resource associated with this OS Update Run. This OS Update Run is executed for this instance and is immutable.
	StatusIndicator v12.StatusIndication    `protobuf:"varint,6,opt,name=status_indicator,json=statusIndicator,proto3,enum=status.v1.StatusIndication" json:"status_indicator,omitempty"` // Status Indicator for the OS update run. This field is used to determine the status type for the OS update Run.
	Status          string                  `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`                                                                           // Short message that describes what happened during the OS Update.
	StatusDetails   string                  `protobuf:"bytes,8,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`                                        // Details about what happened during the OS Update.
	StatusTimestamp uint64                  `protobuf:"varint,9,opt,name=status_timestamp,json=statusTimestamp,proto3" json:"status_timestamp,omitempty"`                                 // UTC timestamp of OS Update status reported.
	StartTime       uint64                  `protobuf:"varint,10,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                                  // UTC timestamp of OS Update started. This field is set by the RM when the OS Update Run is started.
	EndTime         uint64                  `protobuf:"varint,11,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                        // UTC timestamp of OS Update ended. This field is set by the RM when the OS Update Run is finished.
	TenantId        string                  `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                     // Tenant Identifier
	CreatedAt       string                  `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                  // Creation timestamp
	UpdatedAt       string                  `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                  // Update timestamp
}

func (x *OSUpdateRunResource) Reset() {
	*x = OSUpdateRunResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compute_v1_compute_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSUpdateRunResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSUpdateRunResource) ProtoMessage() {}

func (x *OSUpdateRunResource) ProtoReflect() protoreflect.Message {
	mi := &file_compute_v1_compute_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSUpdateRunResource.ProtoReflect.Descriptor instead.
func (*OSUpdateRunResource) Descriptor() ([]byte, []int) {
	return file_compute_v1_compute_proto_rawDescGZIP(), []int{10}
}

func (x *OSUpdateRunResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *OSUpdateRunResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OSUpdateRunResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OSUpdateRunResource) GetAppliedPolicy() *OSUpdatePolicyResource {
	if x != nil {
		return x.AppliedPolicy
	}
	return nil
}

func (x *OSUpdateRunResource) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *OSUpdateRunResource) GetStatusIndicator() v12.StatusIndication {
	if x != nil {
		return x.StatusIndicator
	}
	return v12.StatusIndication(0)
}

func (x *OSUpdateRunResource) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OSUpdateRunResource) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

func (x *OSUpdateRunResource) GetStatusTimestamp() uint64 {
	if x != nil {
		return x.StatusTimestamp
	}
	return 0
}

func (x *OSUpdateRunResource) GetStartTime() uint64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OSUpdateRunResource) GetEndTime() uint64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *OSUpdateRunResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OSUpdateRunResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OSUpdateRunResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_compute_v1_compute_proto protoreflect.FileDescriptor

var file_compute_v1_compute_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2f, 0x69, 0x6e,
	0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6f, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbb, 0x1c, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xba, 0x48, 0x1b, 0xd8, 0x01, 0x01, 0x72, 0x16,
	0x28, 0x0d, 0x32, 0x12, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12,
	0x41, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x01, 0x18, 0x80, 0x04, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x68,
	0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0,
	0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x29, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x27, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x63,
	0x70, 0x75, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x70, 0x75,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x31,
	0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0f, 0x63, 0x70, 0x75, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x10, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0f, 0x63, 0x70, 0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x29, 0x0a,
	0x0c, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x63, 0x70, 0x75,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x07, 0x6d, 0x67, 0x6d, 0x74,
	0x5f, 0x69, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x06, 0x6d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x12, 0x46, 0x0a, 0x08, 0x62, 0x6d, 0x63,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x62, 0x6d, 0x63, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1d, 0x0a, 0x06, 0x62, 0x6d, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05, 0x62, 0x6d, 0x63, 0x49, 0x70,
	0x12, 0x29, 0x0a, 0x0c, 0x62, 0x6d, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b,
	0x62, 0x6d, 0x63, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x62,
	0x6d, 0x63, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x62, 0x6d, 0x63, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x07, 0x70, 0x78, 0x65, 0x5f, 0x6d, 0x61,
	0x63, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x06, 0x70, 0x78, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0c, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x4e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x11, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01,
	0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x14, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x16, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x14, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x58, 0x0a, 0x14, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2a, 0x0a, 0x0d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48,
	0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0a, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x57, 0x0a, 0x15, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x13, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x13, 0x68, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x3e, 0x0a, 0x11, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08,
	0xd8, 0x01, 0x01, 0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x10,
	0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x63, 0x0a, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x40, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x19, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x19, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x42, 0x0a,
	0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x42, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08, 0xd8,
	0x01, 0x01, 0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x67, 0x0a, 0x1d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x1b, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x1d, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x44, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a,
	0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x12, 0x44,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x62, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0a,
	0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x55, 0x73, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x67, 0x70, 0x75,
	0x73, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x0a, 0xc2, 0xa6, 0x49, 0x06, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x70, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x0c, 0xc2, 0xa6, 0x49, 0x08,
	0x08, 0x01, 0x12, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x29, 0x0a, 0x07, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x6b, 0x75, 0x18, 0x5b, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x07, 0xd8, 0x01, 0x01, 0x72, 0x02, 0x28, 0x60, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x74, 0x53, 0x6b, 0x75, 0x12, 0x48, 0x0a,
	0x11, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x41,
	0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x5d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x5e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0x28,
	0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x09, 0x61, 0x6d, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x55, 0x0a, 0x14, 0x61, 0x6d, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x5f, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x12, 0x61, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x14, 0x61, 0x6d,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x60, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x12, 0x61, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72,
	0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba,
	0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x56, 0xb2, 0xf9, 0x03, 0x4c,
	0x0a, 0x1a, 0x12, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x22, 0x10, 0x75, 0x75, 0x69, 0x64,
	0x20, 0x49, 0x53, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x0a, 0x1f, 0x12, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x22,
	0x0c, 0x75, 0x75, 0x69, 0x64, 0x20, 0x49, 0x53, 0x20, 0x4e, 0x55, 0x4c, 0x4c, 0x0a, 0x0d, 0x12,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x91,
	0x05, 0x0a, 0x13, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xba, 0x48, 0x22,
	0xd8, 0x01, 0x01, 0x72, 0x1d, 0x28, 0x14, 0x32, 0x19, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x2f, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08,
	0x01, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x04, 0x77, 0x77, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x04, 0x77, 0x77, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49,
	0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a,
	0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x3a, 0x19, 0xb2, 0xf9, 0x03, 0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x4a, 0x04, 0x08, 0x08,
	0x10, 0x0b, 0x22, 0x95, 0x0a, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x48, 0x1e,
	0xd8, 0x01, 0x01, 0x72, 0x19, 0x28, 0x10, 0x32, 0x15, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x69,
	0x63, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6,
	0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x0e, 0x70, 0x63, 0x69, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d,
	0x70, 0x63, 0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x2b, 0x0a, 0x0d, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52,
	0x0c, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x0d, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x5f, 0x76, 0x66, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x73, 0x72,
	0x69, 0x6f, 0x76, 0x56, 0x66, 0x73, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x0f, 0x73, 0x72, 0x69,
	0x6f, 0x76, 0x5f, 0x76, 0x66, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x73, 0x72, 0x69, 0x6f,
	0x76, 0x56, 0x66, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x4d, 0x61, 0x63, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6d, 0x67, 0x6d,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74, 0x49, 0x70, 0x12, 0x23,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x15, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x13, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x32, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x62, 0x70, 0x73, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x70, 0x73, 0x12, 0x2d, 0x0a, 0x0e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x44, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x4c, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x0d, 0x62, 0x6d, 0x63, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x62, 0x6d, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05,
	0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6,
	0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba,
	0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67,
	0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2, 0xf9, 0x03, 0x0f, 0x0a,
	0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x0b, 0x22, 0x8a, 0x05, 0x0a, 0x0f, 0x48,
	0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x27, 0xba, 0x48, 0x1e, 0xd8, 0x01, 0x01, 0x72, 0x19, 0x28, 0x14, 0x32,
	0x15, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6,
	0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x08, 0x69, 0x64, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x69, 0x64, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x09, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x09,
	0x69, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x03, 0x62, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x03,
	0x62, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x1c, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x27, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01,
	0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2, 0xf9,
	0x03, 0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xbc, 0x04, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74,
	0x67, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x27, 0xba, 0x48, 0x1e, 0xd8, 0x01, 0x01, 0x72, 0x19, 0x28, 0x10, 0x32, 0x15, 0x5e, 0x68,
	0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2,
	0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x06, 0x70, 0x63, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x05, 0x70, 0x63, 0x69, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1e,
	0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x28,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01,
	0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f,
	0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2, 0xf9, 0x03,
	0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xc5, 0x16, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x24, 0xba, 0x48, 0x1b, 0xd8, 0x01, 0x01, 0x72, 0x16, 0x28, 0x0d, 0x32, 0x12, 0x5e, 0x69,
	0x6e, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24,
	0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x0f, 0x76, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x76, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x76, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0a, 0x76, 0x6d, 0x43, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x30,
	0x0a, 0x10, 0x76, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x0e, 0x76, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x18, 0x01, 0x52, 0x09, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x73, 0x12,
	0x47, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x00, 0x52, 0x09, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x73, 0x12, 0x38, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x00, 0x52, 0x02,
	0x6f, 0x73, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x3a, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01,
	0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x19, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x19,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x42, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba,
	0x48, 0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x67, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x1b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a,
	0x1d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x1b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0d, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5b, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e,
	0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x48,
	0x09, 0xd8, 0x01, 0x01, 0x72, 0x04, 0x28, 0xa0, 0x8d, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x4f, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01,
	0x72, 0x03, 0x28, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x18, 0x74, 0x72, 0x75,
	0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x74, 0x0a, 0x24, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x21, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x57, 0x0a, 0x24, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x21, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x55, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0e, 0xc2, 0xa6, 0x49, 0x0a,
	0x12, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x51,
	0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xc2, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x69, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x76,
	0x65, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x44, 0xba, 0x48, 0x3b, 0xd8, 0x01, 0x01,
	0x72, 0x36, 0x18, 0xa0, 0x9c, 0x01, 0x32, 0x30, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a,
	0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21,
	0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x2b, 0x7e, 0x28, 0x29, 0x22, 0x5c, 0x5c, 0x20, 0x5c, 0x6e, 0x7b,
	0x7d, 0x5c, 0x5b, 0x5c, 0x5d, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x76, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x10,
	0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x18, 0x00, 0x52, 0x0e, 0x6f, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x6c, 0x0a, 0x10, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41,
	0xba, 0x48, 0x38, 0x72, 0x36, 0x18, 0xa0, 0xc2, 0x1e, 0x32, 0x30, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d,
	0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x2b, 0x7e, 0x28, 0x29, 0x22, 0x5c, 0x5c, 0x20,
	0x5c, 0x6e, 0x7b, 0x7d, 0x5c, 0x5b, 0x5c, 0x5d, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x08,
	0x01, 0x52, 0x0f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x68, 0x0a, 0x13, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x38, 0xba, 0x48, 0x2f, 0x72, 0x2d, 0x18, 0x90, 0x4e, 0x32, 0x28, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d,
	0x3f, 0x40, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x22, 0x5c, 0x5c, 0x20, 0x5c, 0x6e,
	0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x11, 0x6f, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x0d,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x35, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x04, 0xc2, 0xa6, 0x49, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48,
	0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08,
	0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x6c, 0x0a,
	0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xba,
	0x48, 0x2d, 0xd8, 0x01, 0x01, 0x72, 0x28, 0x18, 0x80, 0x08, 0x32, 0x23, 0x5e, 0x24, 0x7c, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b,
	0x3d, 0x3f, 0x40, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x20, 0x5d, 0x2b, 0x24, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3f, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2,
	0xf9, 0x03, 0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xe9,
	0x05, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xba, 0x48, 0x1f, 0xd8, 0x01, 0x01,
	0x72, 0x1a, 0x28, 0x11, 0x32, 0x16, 0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02,
	0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x31, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x07, 0xd8, 0x01, 0x01, 0x72, 0x02, 0x28,
	0x28, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0xba,
	0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x42, 0x0e, 0xc2, 0xa6, 0x49, 0x0a, 0x12, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6, 0x49,
	0x02, 0x08, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01,
	0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28,
	0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x35, 0xb2, 0xf9, 0x03, 0x2b, 0x0a, 0x1a, 0x12, 0x0b, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xe3, 0x03, 0x0a, 0x0e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x25, 0xd8, 0x01, 0x01, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c,
	0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02,
	0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x00, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x42, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x18, 0x01, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x42,
	0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08,
	0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28,
	0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49,
	0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6,
	0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72,
	0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01,
	0x22, 0x8a, 0x07, 0x0a, 0x16, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0xba, 0x48, 0x25, 0xd8, 0x01, 0x01, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x6f,
	0x73, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xba, 0x48, 0x29, 0x72,
	0x27, 0x28, 0x32, 0x32, 0x23, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a,
	0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x3f, 0x40, 0x21, 0x23, 0x2c, 0x3c,
	0x3e, 0x2a, 0x28, 0x29, 0x20, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x00,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xba, 0x48, 0x2a,
	0x72, 0x28, 0x28, 0xc8, 0x01, 0x32, 0x23, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x3f, 0x40, 0x21, 0x23,
	0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x20, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01,
	0x28, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x64, 0x0a, 0x10, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xba, 0x48, 0x2e, 0x72, 0x2c,
	0x18, 0xa0, 0xc2, 0x1e, 0x32, 0x26, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d,
	0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23, 0x2c,
	0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x22, 0x20, 0x5c, 0x0a, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x42, 0xba,
	0x48, 0x37, 0x92, 0x01, 0x34, 0x08, 0x00, 0x10, 0x64, 0x22, 0x2e, 0x72, 0x2c, 0x28, 0x90, 0x4e,
	0x32, 0x27, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x2b,
	0x28, 0x29, 0x22, 0x20, 0x5c, 0x0a, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x5d, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x18,
	0xf4, 0x03, 0x32, 0x24, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e,
	0x2a, 0x28, 0x29, 0x22, 0x20, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x45, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x73, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4f, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01,
	0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00,
	0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08,
	0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x3a, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0xae, 0x04,
	0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xba, 0x48, 0x23,
	0xd8, 0x01, 0x01, 0x72, 0x1e, 0x28, 0x15, 0x32, 0x1a, 0x5e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xba, 0x48, 0x07, 0xd8, 0x01, 0x01, 0x72, 0x02, 0x28, 0x28, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xba,
	0x48, 0x0b, 0xd8, 0x01, 0x01, 0x72, 0x06, 0x10, 0x01, 0x18, 0x80, 0x80, 0x01, 0xba, 0xa6, 0x49,
	0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x37, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x10, 0x00, 0x18, 0x80,
	0x02, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01,
	0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x50, 0x0a, 0x09,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xf4, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x13,
	0xc2, 0xa6, 0x49, 0x0f, 0x12, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x2e,
	0xb2, 0xf9, 0x03, 0x24, 0x0a, 0x13, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x22, 0x96,
	0x07, 0x0a, 0x13, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0xba, 0x48, 0x22,
	0xd8, 0x01, 0x01, 0x72, 0x1d, 0x28, 0x14, 0x32, 0x19, 0x5e, 0x6f, 0x73, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x75, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x34, 0xba, 0x48, 0x29, 0x72, 0x27, 0x28, 0x28, 0x32, 0x23, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a,
	0x3b, 0x3d, 0x3f, 0x40, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x20, 0x5d, 0x2b, 0x24,
	0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x57,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x35, 0xba, 0x48, 0x2a, 0x72, 0x28, 0x28, 0xc8, 0x01, 0x32, 0x23, 0x5e,
	0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e,
	0x2f, 0x3a, 0x3b, 0x3d, 0x3f, 0x40, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x20, 0x5d,
	0x2b, 0x24, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x53, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x42, 0x0a, 0x08,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x08, 0xc2, 0xa6,
	0x49, 0x04, 0x08, 0x01, 0x18, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x50, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28,
	0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x05, 0x72, 0x03, 0x18, 0x80, 0x08, 0xba, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x28, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x38, 0x0a, 0x0e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x06, 0x72, 0x04, 0x18, 0xa0, 0x8d, 0x06, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x00,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48,
	0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08,
	0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01, 0x4a, 0x15, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xc9, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x00, 0x4a, 0x15, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x3a,
	0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x2a, 0x94, 0x01, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a, 0xbe,
	0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46,
	0x46, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x42, 0x45, 0x52, 0x4e,
	0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0x07, 0x22, 0x04, 0x08, 0x01, 0x10, 0x01, 0x2a,
	0x80, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4f,
	0x4c, 0x49, 0x43, 0x59, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x10, 0x02, 0x2a, 0xd3, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x29,
	0x0a, 0x25, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52,
	0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a,
	0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x4d, 0x49, 0x10,
	0x02, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x56,
	0x50, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x50, 0x44, 0x55, 0x10, 0x04, 0x2a, 0x79, 0x0a, 0x08, 0x41, 0x6d, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x4d, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4d,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53,
	0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4d, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x9d, 0x01, 0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f,
	0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x03, 0x2a, 0x95, 0x01, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x28, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x50, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x0d,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x1a, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0x5c, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x56, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x10,
	0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x4f,
	0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x12, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24,
	0x0a, 0x20, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x2a, 0x61, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x53, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x42, 0x54,
	0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compute_v1_compute_proto_rawDescOnce sync.Once
	file_compute_v1_compute_proto_rawDescData = file_compute_v1_compute_proto_rawDesc
)

func file_compute_v1_compute_proto_rawDescGZIP() []byte {
	file_compute_v1_compute_proto_rawDescOnce.Do(func() {
		file_compute_v1_compute_proto_rawDescData = protoimpl.X.CompressGZIP(file_compute_v1_compute_proto_rawDescData)
	})
	return file_compute_v1_compute_proto_rawDescData
}

var file_compute_v1_compute_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_compute_v1_compute_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_compute_v1_compute_proto_goTypes = []interface{}{
	(HostState)(0),                      // 0: compute.v1.HostState
	(PowerState)(0),                     // 1: compute.v1.PowerState
	(PowerCommandPolicy)(0),             // 2: compute.v1.PowerCommandPolicy
	(BaremetalControllerKind)(0),        // 3: compute.v1.BaremetalControllerKind
	(AmtState)(0),                       // 4: compute.v1.AmtState
	(HostComponentState)(0),             // 5: compute.v1.HostComponentState
	(NetworkInterfaceLinkState)(0),      // 6: compute.v1.NetworkInterfaceLinkState
	(InstanceState)(0),                  // 7: compute.v1.InstanceState
	(InstanceKind)(0),                   // 8: compute.v1.InstanceKind
	(WorkloadState)(0),                  // 9: compute.v1.WorkloadState
	(WorkloadKind)(0),                   // 10: compute.v1.WorkloadKind
	(WorkloadMemberKind)(0),             // 11: compute.v1.WorkloadMemberKind
	(UpdatePolicy)(0),                   // 12: compute.v1.UpdatePolicy
	(*HostResource)(nil),                // 13: compute.v1.HostResource
	(*HoststorageResource)(nil),         // 14: compute.v1.HoststorageResource
	(*HostnicResource)(nil),             // 15: compute.v1.HostnicResource
	(*HostusbResource)(nil),             // 16: compute.v1.HostusbResource
	(*HostgpuResource)(nil),             // 17: compute.v1.HostgpuResource
	(*InstanceResource)(nil),            // 18: compute.v1.InstanceResource
	(*WorkloadResource)(nil),            // 19: compute.v1.WorkloadResource
	(*WorkloadMember)(nil),              // 20: compute.v1.WorkloadMember
	(*OSUpdatePolicyResource)(nil),      // 21: compute.v1.OSUpdatePolicyResource
	(*CustomConfigResource)(nil),        // 22: compute.v1.CustomConfigResource
	(*OSUpdateRunResource)(nil),         // 23: compute.v1.OSUpdateRunResource
	(*v1.SiteResource)(nil),             // 24: location.v1.SiteResource
	(*v11.ProviderResource)(nil),        // 25: provider.v1.ProviderResource
	(v12.StatusIndication)(0),           // 26: status.v1.StatusIndication
	(*v13.OperatingSystemResource)(nil), // 27: os.v1.OperatingSystemResource
	(v13.SecurityFeature)(0),            // 28: os.v1.SecurityFeature
	(*v14.LocalAccountResource)(nil),    // 29: localaccount.v1.LocalAccountResource
}
var file_compute_v1_compute_proto_depIdxs = []int32{
	0,  // 0: compute.v1.HostResource.desired_state:type_name -> compute.v1.HostState
	0,  // 1: compute.v1.HostResource.current_state:type_name -> compute.v1.HostState
	24, // 2: compute.v1.HostResource.site:type_name -> location.v1.SiteResource
	25, // 3: compute.v1.HostResource.provider:type_name -> provider.v1.ProviderResource
	3,  // 4: compute.v1.HostResource.bmc_kind:type_name -> compute.v1.BaremetalControllerKind
	1,  // 5: compute.v1.HostResource.desired_power_state:type_name -> compute.v1.PowerState
	1,  // 6: compute.v1.HostResource.current_power_state:type_name -> compute.v1.PowerState
	26, // 7: compute.v1.HostResource.power_status_indicator:type_name -> status.v1.StatusIndication
	2,  // 8: compute.v1.HostResource.power_command_policy:type_name -> compute.v1.PowerCommandPolicy
	26, // 9: compute.v1.HostResource.host_status_indicator:type_name -> status.v1.StatusIndication
	26, // 10: compute.v1.HostResource.onboarding_status_indicator:type_name -> status.v1.StatusIndication
	26, // 11: compute.v1.HostResource.registration_status_indicator:type_name -> status.v1.StatusIndication
	14, // 12: compute.v1.HostResource.host_storages:type_name -> compute.v1.HoststorageResource
	15, // 13: compute.v1.HostResource.host_nics:type_name -> compute.v1.HostnicResource
	16, // 14: compute.v1.HostResource.host_usbs:type_name -> compute.v1.HostusbResource
	17, // 15: compute.v1.HostResource.host_gpus:type_name -> compute.v1.HostgpuResource
	18, // 16: compute.v1.HostResource.instance:type_name -> compute.v1.InstanceResource
	4,  // 17: compute.v1.HostResource.desired_amt_state:type_name -> compute.v1.AmtState
	4,  // 18: compute.v1.HostResource.current_amt_state:type_name -> compute.v1.AmtState
	26, // 19: compute.v1.HostResource.amt_status_indicator:type_name -> status.v1.StatusIndication
	13, // 20: compute.v1.HoststorageResource.host:type_name -> compute.v1.HostResource
	13, // 21: compute.v1.HostnicResource.host:type_name -> compute.v1.HostResource
	6,  // 22: compute.v1.HostnicResource.link_state:type_name -> compute.v1.NetworkInterfaceLinkState
	13, // 23: compute.v1.HostusbResource.host:type_name -> compute.v1.HostResource
	13, // 24: compute.v1.HostgpuResource.host:type_name -> compute.v1.HostResource
	8,  // 25: compute.v1.InstanceResource.kind:type_name -> compute.v1.InstanceKind
	7,  // 26: compute.v1.InstanceResource.desired_state:type_name -> compute.v1.InstanceState
	7,  // 27: compute.v1.InstanceResource.current_state:type_name -> compute.v1.InstanceState
	13, // 28: compute.v1.InstanceResource.host:type_name -> compute.v1.HostResource
	27, // 29: compute.v1.InstanceResource.desired_os:type_name -> os.v1.OperatingSystemResource
	27, // 30: compute.v1.InstanceResource.current_os:type_name -> os.v1.OperatingSystemResource
	27, // 31: compute.v1.InstanceResource.os:type_name -> os.v1.OperatingSystemResource
	28, // 32: compute.v1.InstanceResource.security_feature:type_name -> os.v1.SecurityFeature
	26, // 33: compute.v1.InstanceResource.instance_status_indicator:type_name -> status.v1.StatusIndication
	26, // 34: compute.v1.InstanceResource.provisioning_status_indicator:type_name -> status.v1.StatusIndication
	26, // 35: compute.v1.InstanceResource.update_status_indicator:type_name -> status.v1.StatusIndication
	26, // 36: compute.v1.InstanceResource.trusted_attestation_status_indicator:type_name -> status.v1.StatusIndication
	20, // 37: compute.v1.InstanceResource.workload_members:type_name -> compute.v1.WorkloadMember
	25, // 38: compute.v1.InstanceResource.provider:type_name -> provider.v1.ProviderResource
	29, // 39: compute.v1.InstanceResource.localaccount:type_name -> localaccount.v1.LocalAccountResource
	21, // 40: compute.v1.InstanceResource.os_update_policy:type_name -> compute.v1.OSUpdatePolicyResource
	22, // 41: compute.v1.InstanceResource.custom_config:type_name -> compute.v1.CustomConfigResource
	10, // 42: compute.v1.WorkloadResource.kind:type_name -> compute.v1.WorkloadKind
	9,  // 43: compute.v1.WorkloadResource.desired_state:type_name -> compute.v1.WorkloadState
	9,  // 44: compute.v1.WorkloadResource.current_state:type_name -> compute.v1.WorkloadState
	20, // 45: compute.v1.WorkloadResource.members:type_name -> compute.v1.WorkloadMember
	11, // 46: compute.v1.WorkloadMember.kind:type_name -> compute.v1.WorkloadMemberKind
	19, // 47: compute.v1.WorkloadMember.workload:type_name -> compute.v1.WorkloadResource
	18, // 48: compute.v1.WorkloadMember.instance:type_name -> compute.v1.InstanceResource
	27, // 49: compute.v1.OSUpdatePolicyResource.target_os:type_name -> os.v1.OperatingSystemResource
	12, // 50: compute.v1.OSUpdatePolicyResource.update_policy:type_name -> compute.v1.UpdatePolicy
	18, // 51: compute.v1.CustomConfigResource.instances:type_name -> compute.v1.InstanceResource
	21, // 52: compute.v1.OSUpdateRunResource.applied_policy:type_name -> compute.v1.OSUpdatePolicyResource
	18, // 53: compute.v1.OSUpdateRunResource.instance:type_name -> compute.v1.InstanceResource
	26, // 54: compute.v1.OSUpdateRunResource.status_indicator:type_name -> status.v1.StatusIndication
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_compute_v1_compute_proto_init() }
func file_compute_v1_compute_proto_init() {
	if File_compute_v1_compute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_compute_v1_compute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoststorageResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnicResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostusbResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostgpuResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSUpdatePolicyResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomConfigResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compute_v1_compute_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSUpdateRunResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compute_v1_compute_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_compute_v1_compute_proto_goTypes,
		DependencyIndexes: file_compute_v1_compute_proto_depIdxs,
		EnumInfos:         file_compute_v1_compute_proto_enumTypes,
		MessageInfos:      file_compute_v1_compute_proto_msgTypes,
	}.Build()
	File_compute_v1_compute_proto = out.File
	file_compute_v1_compute_proto_rawDesc = nil
	file_compute_v1_compute_proto_goTypes = nil
	file_compute_v1_compute_proto_depIdxs = nil
}
