// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: inventory/v1/inventory.proto

package inventoryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// Registers a new client and subscribes to the requested events. All clients
	// must open and maintain this stream before making any other requests.
	// Closing this stream de-registers the client.
	SubscribeEvents(ctx context.Context, in *SubscribeEventsRequest, opts ...grpc.CallOption) (InventoryService_SubscribeEventsClient, error)
	// Changes the resource kinds the given client will receive events for. See SubscribeEvents.
	ChangeSubscribeEvents(ctx context.Context, in *ChangeSubscribeEventsRequest, opts ...grpc.CallOption) (*ChangeSubscribeEventsResponse, error)
	// Create a new resource, returning it (or error).
	// Returns UNKNOWN_CLIENT error if the UUID is not known. See SubscribeEvents.
	CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	// Find resource IDs given criteria.
	FindResources(ctx context.Context, in *FindResourcesRequest, opts ...grpc.CallOption) (*FindResourcesResponse, error)
	// Get information about a single resource given resource ID.
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	// Update a resource with a given ID, returning the updated resource.
	// If the update results in a hard-delete, the resource is returned in its last state before deletion.
	// Returns UNKNOWN_CLIENT error if the UUID is not known. See SubscribeEvents.
	UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*Resource, error)
	// Delete a resource with a given ID.
	// Returns UNKNOWN_CLIENT error if the UUID is not known. See SubscribeEvents.
	DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error)
	// List resources given a criteria.
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// Custom RPC for Telemetry: Lists the inherited telemetry given a site, instance or region ID.
	ListInheritedTelemetryProfiles(ctx context.Context, in *ListInheritedTelemetryProfilesRequest, opts ...grpc.CallOption) (*ListInheritedTelemetryProfilesResponse, error)
	// Returns the upstream tree hierarchy given the resource ID in the request.
	// The response contains a list of adjacent nodes, from which the tree can be reconstructed.
	GetTreeHierarchy(ctx context.Context, in *GetTreeHierarchyRequest, opts ...grpc.CallOption) (*GetTreeHierarchyResponse, error)
	// Returns a list of the number of sites per region ID given the list of region IDs in the request.
	// The response contains a list of objects with a region ID associated to the total amount of sites under it.
	// The sites under a region account for all the sites under its child regions recursively, respecting the max-depth
	// of parent relationships among regions.
	GetSitesPerRegion(ctx context.Context, in *GetSitesPerRegionRequest, opts ...grpc.CallOption) (*GetSitesPerRegionResponse, error)
	// Deletes all resources of given kind for tenant.
	DeleteAllResources(ctx context.Context, in *DeleteAllResourcesRequest, opts ...grpc.CallOption) (*DeleteAllResourcesResponse, error)
	// Custom RPC to establish clients heartbeat and subscription verification.
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) SubscribeEvents(ctx context.Context, in *SubscribeEventsRequest, opts ...grpc.CallOption) (InventoryService_SubscribeEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &InventoryService_ServiceDesc.Streams[0], "/inventory.v1.InventoryService/SubscribeEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &inventoryServiceSubscribeEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type InventoryService_SubscribeEventsClient interface {
	Recv() (*SubscribeEventsResponse, error)
	grpc.ClientStream
}

type inventoryServiceSubscribeEventsClient struct {
	grpc.ClientStream
}

func (x *inventoryServiceSubscribeEventsClient) Recv() (*SubscribeEventsResponse, error) {
	m := new(SubscribeEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *inventoryServiceClient) ChangeSubscribeEvents(ctx context.Context, in *ChangeSubscribeEventsRequest, opts ...grpc.CallOption) (*ChangeSubscribeEventsResponse, error) {
	out := new(ChangeSubscribeEventsResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/ChangeSubscribeEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateResource(ctx context.Context, in *CreateResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/CreateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FindResources(ctx context.Context, in *FindResourcesRequest, opts ...grpc.CallOption) (*FindResourcesResponse, error) {
	out := new(FindResourcesResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/FindResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/GetResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateResource(ctx context.Context, in *UpdateResourceRequest, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/UpdateResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteResource(ctx context.Context, in *DeleteResourceRequest, opts ...grpc.CallOption) (*DeleteResourceResponse, error) {
	out := new(DeleteResourceResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/DeleteResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListInheritedTelemetryProfiles(ctx context.Context, in *ListInheritedTelemetryProfilesRequest, opts ...grpc.CallOption) (*ListInheritedTelemetryProfilesResponse, error) {
	out := new(ListInheritedTelemetryProfilesResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/ListInheritedTelemetryProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetTreeHierarchy(ctx context.Context, in *GetTreeHierarchyRequest, opts ...grpc.CallOption) (*GetTreeHierarchyResponse, error) {
	out := new(GetTreeHierarchyResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/GetTreeHierarchy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetSitesPerRegion(ctx context.Context, in *GetSitesPerRegionRequest, opts ...grpc.CallOption) (*GetSitesPerRegionResponse, error) {
	out := new(GetSitesPerRegionResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/GetSitesPerRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteAllResources(ctx context.Context, in *DeleteAllResourcesRequest, opts ...grpc.CallOption) (*DeleteAllResourcesResponse, error) {
	out := new(DeleteAllResourcesResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/DeleteAllResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/inventory.v1.InventoryService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations should embed UnimplementedInventoryServiceServer
// for forward compatibility
type InventoryServiceServer interface {
	// Registers a new client and subscribes to the requested events. All clients
	// must open and maintain this stream before making any other requests.
	// Closing this stream de-registers the client.
	SubscribeEvents(*SubscribeEventsRequest, InventoryService_SubscribeEventsServer) error
	// Changes the resource kinds the given client will receive events for. See SubscribeEvents.
	ChangeSubscribeEvents(context.Context, *ChangeSubscribeEventsRequest) (*ChangeSubscribeEventsResponse, error)
	// Create a new resource, returning it (or error).
	// Returns UNKNOWN_CLIENT error if the UUID is not known. See SubscribeEvents.
	CreateResource(context.Context, *CreateResourceRequest) (*Resource, error)
	// Find resource IDs given criteria.
	FindResources(context.Context, *FindResourcesRequest) (*FindResourcesResponse, error)
	// Get information about a single resource given resource ID.
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	// Update a resource with a given ID, returning the updated resource.
	// If the update results in a hard-delete, the resource is returned in its last state before deletion.
	// Returns UNKNOWN_CLIENT error if the UUID is not known. See SubscribeEvents.
	UpdateResource(context.Context, *UpdateResourceRequest) (*Resource, error)
	// Delete a resource with a given ID.
	// Returns UNKNOWN_CLIENT error if the UUID is not known. See SubscribeEvents.
	DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error)
	// List resources given a criteria.
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// Custom RPC for Telemetry: Lists the inherited telemetry given a site, instance or region ID.
	ListInheritedTelemetryProfiles(context.Context, *ListInheritedTelemetryProfilesRequest) (*ListInheritedTelemetryProfilesResponse, error)
	// Returns the upstream tree hierarchy given the resource ID in the request.
	// The response contains a list of adjacent nodes, from which the tree can be reconstructed.
	GetTreeHierarchy(context.Context, *GetTreeHierarchyRequest) (*GetTreeHierarchyResponse, error)
	// Returns a list of the number of sites per region ID given the list of region IDs in the request.
	// The response contains a list of objects with a region ID associated to the total amount of sites under it.
	// The sites under a region account for all the sites under its child regions recursively, respecting the max-depth
	// of parent relationships among regions.
	GetSitesPerRegion(context.Context, *GetSitesPerRegionRequest) (*GetSitesPerRegionResponse, error)
	// Deletes all resources of given kind for tenant.
	DeleteAllResources(context.Context, *DeleteAllResourcesRequest) (*DeleteAllResourcesResponse, error)
	// Custom RPC to establish clients heartbeat and subscription verification.
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

// UnimplementedInventoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (UnimplementedInventoryServiceServer) SubscribeEvents(*SubscribeEventsRequest, InventoryService_SubscribeEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeEvents not implemented")
}
func (UnimplementedInventoryServiceServer) ChangeSubscribeEvents(context.Context, *ChangeSubscribeEventsRequest) (*ChangeSubscribeEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubscribeEvents not implemented")
}
func (UnimplementedInventoryServiceServer) CreateResource(context.Context, *CreateResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResource not implemented")
}
func (UnimplementedInventoryServiceServer) FindResources(context.Context, *FindResourcesRequest) (*FindResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindResources not implemented")
}
func (UnimplementedInventoryServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateResource(context.Context, *UpdateResourceRequest) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteResource(context.Context, *DeleteResourceRequest) (*DeleteResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedInventoryServiceServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedInventoryServiceServer) ListInheritedTelemetryProfiles(context.Context, *ListInheritedTelemetryProfilesRequest) (*ListInheritedTelemetryProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInheritedTelemetryProfiles not implemented")
}
func (UnimplementedInventoryServiceServer) GetTreeHierarchy(context.Context, *GetTreeHierarchyRequest) (*GetTreeHierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreeHierarchy not implemented")
}
func (UnimplementedInventoryServiceServer) GetSitesPerRegion(context.Context, *GetSitesPerRegionRequest) (*GetSitesPerRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSitesPerRegion not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteAllResources(context.Context, *DeleteAllResourcesRequest) (*DeleteAllResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllResources not implemented")
}
func (UnimplementedInventoryServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_SubscribeEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServiceServer).SubscribeEvents(m, &inventoryServiceSubscribeEventsServer{stream})
}

type InventoryService_SubscribeEventsServer interface {
	Send(*SubscribeEventsResponse) error
	grpc.ServerStream
}

type inventoryServiceSubscribeEventsServer struct {
	grpc.ServerStream
}

func (x *inventoryServiceSubscribeEventsServer) Send(m *SubscribeEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _InventoryService_ChangeSubscribeEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubscribeEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ChangeSubscribeEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/ChangeSubscribeEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ChangeSubscribeEvents(ctx, req.(*ChangeSubscribeEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/CreateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateResource(ctx, req.(*CreateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FindResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FindResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/FindResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FindResources(ctx, req.(*FindResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/GetResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/UpdateResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateResource(ctx, req.(*UpdateResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/DeleteResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteResource(ctx, req.(*DeleteResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListInheritedTelemetryProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInheritedTelemetryProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListInheritedTelemetryProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/ListInheritedTelemetryProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListInheritedTelemetryProfiles(ctx, req.(*ListInheritedTelemetryProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetTreeHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreeHierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetTreeHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/GetTreeHierarchy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetTreeHierarchy(ctx, req.(*GetTreeHierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetSitesPerRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSitesPerRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetSitesPerRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/GetSitesPerRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetSitesPerRegion(ctx, req.(*GetSitesPerRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteAllResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteAllResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/DeleteAllResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteAllResources(ctx, req.(*DeleteAllResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inventory.v1.InventoryService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeSubscribeEvents",
			Handler:    _InventoryService_ChangeSubscribeEvents_Handler,
		},
		{
			MethodName: "CreateResource",
			Handler:    _InventoryService_CreateResource_Handler,
		},
		{
			MethodName: "FindResources",
			Handler:    _InventoryService_FindResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _InventoryService_GetResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _InventoryService_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _InventoryService_DeleteResource_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _InventoryService_ListResources_Handler,
		},
		{
			MethodName: "ListInheritedTelemetryProfiles",
			Handler:    _InventoryService_ListInheritedTelemetryProfiles_Handler,
		},
		{
			MethodName: "GetTreeHierarchy",
			Handler:    _InventoryService_GetTreeHierarchy_Handler,
		},
		{
			MethodName: "GetSitesPerRegion",
			Handler:    _InventoryService_GetSitesPerRegion_Handler,
		},
		{
			MethodName: "DeleteAllResources",
			Handler:    _InventoryService_DeleteAllResources_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _InventoryService_Heartbeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeEvents",
			Handler:       _InventoryService_SubscribeEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inventory/v1/inventory.proto",
}
