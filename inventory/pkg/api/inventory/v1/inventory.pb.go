// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: inventory/v1/inventory.proto

package inventoryv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v13 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/compute/v1"
	v110 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/localaccount/v1"
	v1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/location/v1"
	v14 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/network/v1"
	v15 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/os/v1"
	v11 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/ou/v1"
	v12 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/provider/v1"
	v19 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/remoteaccess/v1"
	v16 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/schedule/v1"
	v17 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/telemetry/v1"
	v18 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/tenant/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientKind int32

const (
	ClientKind_CLIENT_KIND_UNSPECIFIED       ClientKind = 0 // Unspecified
	ClientKind_CLIENT_KIND_API               ClientKind = 1 // API server
	ClientKind_CLIENT_KIND_RESOURCE_MANAGER  ClientKind = 2 // Resource manager
	ClientKind_CLIENT_KIND_TENANT_CONTROLLER ClientKind = 3 // Tenant Controller
)

// Enum value maps for ClientKind.
var (
	ClientKind_name = map[int32]string{
		0: "CLIENT_KIND_UNSPECIFIED",
		1: "CLIENT_KIND_API",
		2: "CLIENT_KIND_RESOURCE_MANAGER",
		3: "CLIENT_KIND_TENANT_CONTROLLER",
	}
	ClientKind_value = map[string]int32{
		"CLIENT_KIND_UNSPECIFIED":       0,
		"CLIENT_KIND_API":               1,
		"CLIENT_KIND_RESOURCE_MANAGER":  2,
		"CLIENT_KIND_TENANT_CONTROLLER": 3,
	}
)

func (x ClientKind) Enum() *ClientKind {
	p := new(ClientKind)
	*p = x
	return p
}

func (x ClientKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientKind) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_v1_inventory_proto_enumTypes[0].Descriptor()
}

func (ClientKind) Type() protoreflect.EnumType {
	return &file_inventory_v1_inventory_proto_enumTypes[0]
}

func (x ClientKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientKind.Descriptor instead.
func (ClientKind) EnumDescriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{0}
}

type ResourceKind int32

const (
	ResourceKind_RESOURCE_KIND_UNSPECIFIED       ResourceKind = 0
	ResourceKind_RESOURCE_KIND_REGION            ResourceKind = 8
	ResourceKind_RESOURCE_KIND_SITE              ResourceKind = 9
	ResourceKind_RESOURCE_KIND_OU                ResourceKind = 10
	ResourceKind_RESOURCE_KIND_PROVIDER          ResourceKind = 32
	ResourceKind_RESOURCE_KIND_HOST              ResourceKind = 48
	ResourceKind_RESOURCE_KIND_HOSTSTORAGE       ResourceKind = 49
	ResourceKind_RESOURCE_KIND_HOSTNIC           ResourceKind = 50
	ResourceKind_RESOURCE_KIND_HOSTUSB           ResourceKind = 51
	ResourceKind_RESOURCE_KIND_HOSTGPU           ResourceKind = 52
	ResourceKind_RESOURCE_KIND_INSTANCE          ResourceKind = 64
	ResourceKind_RESOURCE_KIND_IPADDRESS         ResourceKind = 95
	ResourceKind_RESOURCE_KIND_NETWORKSEGMENT    ResourceKind = 96
	ResourceKind_RESOURCE_KIND_NETLINK           ResourceKind = 97
	ResourceKind_RESOURCE_KIND_ENDPOINT          ResourceKind = 98
	ResourceKind_RESOURCE_KIND_OS                ResourceKind = 99
	ResourceKind_RESOURCE_KIND_SINGLESCHEDULE    ResourceKind = 100
	ResourceKind_RESOURCE_KIND_REPEATEDSCHEDULE  ResourceKind = 101
	ResourceKind_RESOURCE_KIND_WORKLOAD          ResourceKind = 110
	ResourceKind_RESOURCE_KIND_WORKLOAD_MEMBER   ResourceKind = 111
	ResourceKind_RESOURCE_KIND_TELEMETRY_GROUP   ResourceKind = 120
	ResourceKind_RESOURCE_KIND_TELEMETRY_PROFILE ResourceKind = 121
	ResourceKind_RESOURCE_KIND_TENANT            ResourceKind = 130
	ResourceKind_RESOURCE_KIND_RMT_ACCESS_CONF   ResourceKind = 150
	ResourceKind_RESOURCE_KIND_LOCALACCOUNT      ResourceKind = 170
	ResourceKind_RESOURCE_KIND_OSUPDATEPOLICY    ResourceKind = 180
	ResourceKind_RESOURCE_KIND_CUSTOMCONFIG      ResourceKind = 190
)

// Enum value maps for ResourceKind.
var (
	ResourceKind_name = map[int32]string{
		0:   "RESOURCE_KIND_UNSPECIFIED",
		8:   "RESOURCE_KIND_REGION",
		9:   "RESOURCE_KIND_SITE",
		10:  "RESOURCE_KIND_OU",
		32:  "RESOURCE_KIND_PROVIDER",
		48:  "RESOURCE_KIND_HOST",
		49:  "RESOURCE_KIND_HOSTSTORAGE",
		50:  "RESOURCE_KIND_HOSTNIC",
		51:  "RESOURCE_KIND_HOSTUSB",
		52:  "RESOURCE_KIND_HOSTGPU",
		64:  "RESOURCE_KIND_INSTANCE",
		95:  "RESOURCE_KIND_IPADDRESS",
		96:  "RESOURCE_KIND_NETWORKSEGMENT",
		97:  "RESOURCE_KIND_NETLINK",
		98:  "RESOURCE_KIND_ENDPOINT",
		99:  "RESOURCE_KIND_OS",
		100: "RESOURCE_KIND_SINGLESCHEDULE",
		101: "RESOURCE_KIND_REPEATEDSCHEDULE",
		110: "RESOURCE_KIND_WORKLOAD",
		111: "RESOURCE_KIND_WORKLOAD_MEMBER",
		120: "RESOURCE_KIND_TELEMETRY_GROUP",
		121: "RESOURCE_KIND_TELEMETRY_PROFILE",
		130: "RESOURCE_KIND_TENANT",
		150: "RESOURCE_KIND_RMT_ACCESS_CONF",
		170: "RESOURCE_KIND_LOCALACCOUNT",
		180: "RESOURCE_KIND_OSUPDATEPOLICY",
		190: "RESOURCE_KIND_CUSTOMCONFIG",
	}
	ResourceKind_value = map[string]int32{
		"RESOURCE_KIND_UNSPECIFIED":       0,
		"RESOURCE_KIND_REGION":            8,
		"RESOURCE_KIND_SITE":              9,
		"RESOURCE_KIND_OU":                10,
		"RESOURCE_KIND_PROVIDER":          32,
		"RESOURCE_KIND_HOST":              48,
		"RESOURCE_KIND_HOSTSTORAGE":       49,
		"RESOURCE_KIND_HOSTNIC":           50,
		"RESOURCE_KIND_HOSTUSB":           51,
		"RESOURCE_KIND_HOSTGPU":           52,
		"RESOURCE_KIND_INSTANCE":          64,
		"RESOURCE_KIND_IPADDRESS":         95,
		"RESOURCE_KIND_NETWORKSEGMENT":    96,
		"RESOURCE_KIND_NETLINK":           97,
		"RESOURCE_KIND_ENDPOINT":          98,
		"RESOURCE_KIND_OS":                99,
		"RESOURCE_KIND_SINGLESCHEDULE":    100,
		"RESOURCE_KIND_REPEATEDSCHEDULE":  101,
		"RESOURCE_KIND_WORKLOAD":          110,
		"RESOURCE_KIND_WORKLOAD_MEMBER":   111,
		"RESOURCE_KIND_TELEMETRY_GROUP":   120,
		"RESOURCE_KIND_TELEMETRY_PROFILE": 121,
		"RESOURCE_KIND_TENANT":            130,
		"RESOURCE_KIND_RMT_ACCESS_CONF":   150,
		"RESOURCE_KIND_LOCALACCOUNT":      170,
		"RESOURCE_KIND_OSUPDATEPOLICY":    180,
		"RESOURCE_KIND_CUSTOMCONFIG":      190,
	}
)

func (x ResourceKind) Enum() *ResourceKind {
	p := new(ResourceKind)
	*p = x
	return p
}

func (x ResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_v1_inventory_proto_enumTypes[1].Descriptor()
}

func (ResourceKind) Type() protoreflect.EnumType {
	return &file_inventory_v1_inventory_proto_enumTypes[1]
}

func (x ResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceKind.Descriptor instead.
func (ResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{1}
}

// EventKind is a inventory operation event kind for event subscriptions.
type SubscribeEventsResponse_EventKind int32

const (
	SubscribeEventsResponse_EVENT_KIND_UNSPECIFIED SubscribeEventsResponse_EventKind = 0
	SubscribeEventsResponse_EVENT_KIND_CREATED     SubscribeEventsResponse_EventKind = 1
	SubscribeEventsResponse_EVENT_KIND_UPDATED     SubscribeEventsResponse_EventKind = 2
	SubscribeEventsResponse_EVENT_KIND_DELETED     SubscribeEventsResponse_EventKind = 3
)

// Enum value maps for SubscribeEventsResponse_EventKind.
var (
	SubscribeEventsResponse_EventKind_name = map[int32]string{
		0: "EVENT_KIND_UNSPECIFIED",
		1: "EVENT_KIND_CREATED",
		2: "EVENT_KIND_UPDATED",
		3: "EVENT_KIND_DELETED",
	}
	SubscribeEventsResponse_EventKind_value = map[string]int32{
		"EVENT_KIND_UNSPECIFIED": 0,
		"EVENT_KIND_CREATED":     1,
		"EVENT_KIND_UPDATED":     2,
		"EVENT_KIND_DELETED":     3,
	}
)

func (x SubscribeEventsResponse_EventKind) Enum() *SubscribeEventsResponse_EventKind {
	p := new(SubscribeEventsResponse_EventKind)
	*p = x
	return p
}

func (x SubscribeEventsResponse_EventKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscribeEventsResponse_EventKind) Descriptor() protoreflect.EnumDescriptor {
	return file_inventory_v1_inventory_proto_enumTypes[2].Descriptor()
}

func (SubscribeEventsResponse_EventKind) Type() protoreflect.EnumType {
	return &file_inventory_v1_inventory_proto_enumTypes[2]
}

func (x SubscribeEventsResponse_EventKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscribeEventsResponse_EventKind.Descriptor instead.
func (SubscribeEventsResponse_EventKind) EnumDescriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{1, 0}
}

type SubscribeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the API client
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// version string of the Client
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// the kind of API client
	ClientKind ClientKind `protobuf:"varint,3,opt,name=client_kind,json=clientKind,proto3,enum=inventory.v1.ClientKind" json:"client_kind,omitempty"`
	// The resource kinds that this client provides or subscribes to. Can be empty to not receive any events.
	SubscribedResourceKinds []ResourceKind `protobuf:"varint,4,rep,packed,name=subscribed_resource_kinds,json=subscribedResourceKinds,proto3,enum=inventory.v1.ResourceKind" json:"subscribed_resource_kinds,omitempty"`
}

func (x *SubscribeEventsRequest) Reset() {
	*x = SubscribeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsRequest) ProtoMessage() {}

func (x *SubscribeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsRequest.ProtoReflect.Descriptor instead.
func (*SubscribeEventsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeEventsRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubscribeEventsRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SubscribeEventsRequest) GetClientKind() ClientKind {
	if x != nil {
		return x.ClientKind
	}
	return ClientKind_CLIENT_KIND_UNSPECIFIED
}

func (x *SubscribeEventsRequest) GetSubscribedResourceKinds() []ResourceKind {
	if x != nil {
		return x.SubscribedResourceKinds
	}
	return nil
}

type SubscribeEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// For the first event response sent to the client, a UUID will be generated
	// and assigned to that client. Subsequent requests must use this UUID.
	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	// Deprecated, use resource instead. The resource ID that was changed.
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The changed resource. On delete events this contains the last known state.
	// On create and update events this contains the new state.
	Resource  *Resource                         `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	EventKind SubscribeEventsResponse_EventKind `protobuf:"varint,4,opt,name=event_kind,json=eventKind,proto3,enum=inventory.v1.SubscribeEventsResponse_EventKind" json:"event_kind,omitempty"`
}

func (x *SubscribeEventsResponse) Reset() {
	*x = SubscribeEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeEventsResponse) ProtoMessage() {}

func (x *SubscribeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeEventsResponse.ProtoReflect.Descriptor instead.
func (*SubscribeEventsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeEventsResponse) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *SubscribeEventsResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *SubscribeEventsResponse) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *SubscribeEventsResponse) GetEventKind() SubscribeEventsResponse_EventKind {
	if x != nil {
		return x.EventKind
	}
	return SubscribeEventsResponse_EVENT_KIND_UNSPECIFIED
}

type ChangeSubscribeEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the client to change the subscriptions for.
	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	// The new resource kinds that the client subscribes to. Can be empty to not receive any events.
	// Replaces the current subscriptions.
	SubscribedResourceKinds []ResourceKind `protobuf:"varint,4,rep,packed,name=subscribed_resource_kinds,json=subscribedResourceKinds,proto3,enum=inventory.v1.ResourceKind" json:"subscribed_resource_kinds,omitempty"`
}

func (x *ChangeSubscribeEventsRequest) Reset() {
	*x = ChangeSubscribeEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeSubscribeEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSubscribeEventsRequest) ProtoMessage() {}

func (x *ChangeSubscribeEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSubscribeEventsRequest.ProtoReflect.Descriptor instead.
func (*ChangeSubscribeEventsRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeSubscribeEventsRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *ChangeSubscribeEventsRequest) GetSubscribedResourceKinds() []ResourceKind {
	if x != nil {
		return x.SubscribedResourceKinds
	}
	return nil
}

type ChangeSubscribeEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangeSubscribeEventsResponse) Reset() {
	*x = ChangeSubscribeEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeSubscribeEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeSubscribeEventsResponse) ProtoMessage() {}

func (x *ChangeSubscribeEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeSubscribeEventsResponse.ProtoReflect.Descriptor instead.
func (*ChangeSubscribeEventsResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{3}
}

type CreateResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string    `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	Resource   *Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	// Definition of tenant_id can be seen as redundant since tenant_id is also defined in the nested resource.
	// Extracting tenant information from nested structs could be expensive.
	// Tenant related requests handling strategy has been created based on convention assuming that
	// tenant is available on top level of requests, this approach comes with clarity of implementation.
	// Underlying implementation enforces that tenant_id is consistent with tenant_id provided in the nested resource.
	TenantId string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *CreateResourceRequest) Reset() {
	*x = CreateResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResourceRequest) ProtoMessage() {}

func (x *CreateResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResourceRequest.ProtoReflect.Descriptor instead.
func (*CreateResourceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{4}
}

func (x *CreateResourceRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *CreateResourceRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *CreateResourceRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Resource:
	//
	//	*Resource_Region
	//	*Resource_Site
	//	*Resource_Ou
	//	*Resource_Provider
	//	*Resource_Host
	//	*Resource_Hoststorage
	//	*Resource_Hostnic
	//	*Resource_Hostusb
	//	*Resource_Hostgpu
	//	*Resource_Instance
	//	*Resource_Ipaddress
	//	*Resource_NetworkSegment
	//	*Resource_Netlink
	//	*Resource_Endpoint
	//	*Resource_Os
	//	*Resource_Singleschedule
	//	*Resource_Repeatedschedule
	//	*Resource_Workload
	//	*Resource_WorkloadMember
	//	*Resource_TelemetryGroup
	//	*Resource_TelemetryProfile
	//	*Resource_Tenant
	//	*Resource_RemoteAccess
	//	*Resource_LocalAccount
	//	*Resource_OsUpdatePolicy
	//	*Resource_CustomConfig
	Resource isResource_Resource `protobuf_oneof:"resource"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{5}
}

func (m *Resource) GetResource() isResource_Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (x *Resource) GetRegion() *v1.RegionResource {
	if x, ok := x.GetResource().(*Resource_Region); ok {
		return x.Region
	}
	return nil
}

func (x *Resource) GetSite() *v1.SiteResource {
	if x, ok := x.GetResource().(*Resource_Site); ok {
		return x.Site
	}
	return nil
}

func (x *Resource) GetOu() *v11.OuResource {
	if x, ok := x.GetResource().(*Resource_Ou); ok {
		return x.Ou
	}
	return nil
}

func (x *Resource) GetProvider() *v12.ProviderResource {
	if x, ok := x.GetResource().(*Resource_Provider); ok {
		return x.Provider
	}
	return nil
}

func (x *Resource) GetHost() *v13.HostResource {
	if x, ok := x.GetResource().(*Resource_Host); ok {
		return x.Host
	}
	return nil
}

func (x *Resource) GetHoststorage() *v13.HoststorageResource {
	if x, ok := x.GetResource().(*Resource_Hoststorage); ok {
		return x.Hoststorage
	}
	return nil
}

func (x *Resource) GetHostnic() *v13.HostnicResource {
	if x, ok := x.GetResource().(*Resource_Hostnic); ok {
		return x.Hostnic
	}
	return nil
}

func (x *Resource) GetHostusb() *v13.HostusbResource {
	if x, ok := x.GetResource().(*Resource_Hostusb); ok {
		return x.Hostusb
	}
	return nil
}

func (x *Resource) GetHostgpu() *v13.HostgpuResource {
	if x, ok := x.GetResource().(*Resource_Hostgpu); ok {
		return x.Hostgpu
	}
	return nil
}

func (x *Resource) GetInstance() *v13.InstanceResource {
	if x, ok := x.GetResource().(*Resource_Instance); ok {
		return x.Instance
	}
	return nil
}

func (x *Resource) GetIpaddress() *v14.IPAddressResource {
	if x, ok := x.GetResource().(*Resource_Ipaddress); ok {
		return x.Ipaddress
	}
	return nil
}

func (x *Resource) GetNetworkSegment() *v14.NetworkSegment {
	if x, ok := x.GetResource().(*Resource_NetworkSegment); ok {
		return x.NetworkSegment
	}
	return nil
}

func (x *Resource) GetNetlink() *v14.NetlinkResource {
	if x, ok := x.GetResource().(*Resource_Netlink); ok {
		return x.Netlink
	}
	return nil
}

func (x *Resource) GetEndpoint() *v14.EndpointResource {
	if x, ok := x.GetResource().(*Resource_Endpoint); ok {
		return x.Endpoint
	}
	return nil
}

func (x *Resource) GetOs() *v15.OperatingSystemResource {
	if x, ok := x.GetResource().(*Resource_Os); ok {
		return x.Os
	}
	return nil
}

func (x *Resource) GetSingleschedule() *v16.SingleScheduleResource {
	if x, ok := x.GetResource().(*Resource_Singleschedule); ok {
		return x.Singleschedule
	}
	return nil
}

func (x *Resource) GetRepeatedschedule() *v16.RepeatedScheduleResource {
	if x, ok := x.GetResource().(*Resource_Repeatedschedule); ok {
		return x.Repeatedschedule
	}
	return nil
}

func (x *Resource) GetWorkload() *v13.WorkloadResource {
	if x, ok := x.GetResource().(*Resource_Workload); ok {
		return x.Workload
	}
	return nil
}

func (x *Resource) GetWorkloadMember() *v13.WorkloadMember {
	if x, ok := x.GetResource().(*Resource_WorkloadMember); ok {
		return x.WorkloadMember
	}
	return nil
}

func (x *Resource) GetTelemetryGroup() *v17.TelemetryGroupResource {
	if x, ok := x.GetResource().(*Resource_TelemetryGroup); ok {
		return x.TelemetryGroup
	}
	return nil
}

func (x *Resource) GetTelemetryProfile() *v17.TelemetryProfile {
	if x, ok := x.GetResource().(*Resource_TelemetryProfile); ok {
		return x.TelemetryProfile
	}
	return nil
}

func (x *Resource) GetTenant() *v18.Tenant {
	if x, ok := x.GetResource().(*Resource_Tenant); ok {
		return x.Tenant
	}
	return nil
}

func (x *Resource) GetRemoteAccess() *v19.RemoteAccessConfiguration {
	if x, ok := x.GetResource().(*Resource_RemoteAccess); ok {
		return x.RemoteAccess
	}
	return nil
}

func (x *Resource) GetLocalAccount() *v110.LocalAccountResource {
	if x, ok := x.GetResource().(*Resource_LocalAccount); ok {
		return x.LocalAccount
	}
	return nil
}

func (x *Resource) GetOsUpdatePolicy() *v13.OSUpdatePolicyResource {
	if x, ok := x.GetResource().(*Resource_OsUpdatePolicy); ok {
		return x.OsUpdatePolicy
	}
	return nil
}

func (x *Resource) GetCustomConfig() *v13.CustomConfigResource {
	if x, ok := x.GetResource().(*Resource_CustomConfig); ok {
		return x.CustomConfig
	}
	return nil
}

type isResource_Resource interface {
	isResource_Resource()
}

type Resource_Region struct {
	Region *v1.RegionResource `protobuf:"bytes,1,opt,name=region,proto3,oneof"`
}

type Resource_Site struct {
	Site *v1.SiteResource `protobuf:"bytes,2,opt,name=site,proto3,oneof"`
}

type Resource_Ou struct {
	Ou *v11.OuResource `protobuf:"bytes,10,opt,name=ou,proto3,oneof"`
}

type Resource_Provider struct {
	Provider *v12.ProviderResource `protobuf:"bytes,30,opt,name=provider,proto3,oneof"`
}

type Resource_Host struct {
	Host *v13.HostResource `protobuf:"bytes,40,opt,name=host,proto3,oneof"`
}

type Resource_Hoststorage struct {
	Hoststorage *v13.HoststorageResource `protobuf:"bytes,41,opt,name=hoststorage,proto3,oneof"`
}

type Resource_Hostnic struct {
	Hostnic *v13.HostnicResource `protobuf:"bytes,42,opt,name=hostnic,proto3,oneof"`
}

type Resource_Hostusb struct {
	Hostusb *v13.HostusbResource `protobuf:"bytes,43,opt,name=hostusb,proto3,oneof"`
}

type Resource_Hostgpu struct {
	Hostgpu *v13.HostgpuResource `protobuf:"bytes,44,opt,name=hostgpu,proto3,oneof"`
}

type Resource_Instance struct {
	Instance *v13.InstanceResource `protobuf:"bytes,50,opt,name=instance,proto3,oneof"`
}

type Resource_Ipaddress struct {
	Ipaddress *v14.IPAddressResource `protobuf:"bytes,59,opt,name=ipaddress,proto3,oneof"`
}

type Resource_NetworkSegment struct {
	NetworkSegment *v14.NetworkSegment `protobuf:"bytes,60,opt,name=network_segment,json=networkSegment,proto3,oneof"`
}

type Resource_Netlink struct {
	Netlink *v14.NetlinkResource `protobuf:"bytes,61,opt,name=netlink,proto3,oneof"`
}

type Resource_Endpoint struct {
	Endpoint *v14.EndpointResource `protobuf:"bytes,62,opt,name=endpoint,proto3,oneof"`
}

type Resource_Os struct {
	Os *v15.OperatingSystemResource `protobuf:"bytes,70,opt,name=os,proto3,oneof"`
}

type Resource_Singleschedule struct {
	Singleschedule *v16.SingleScheduleResource `protobuf:"bytes,80,opt,name=singleschedule,proto3,oneof"`
}

type Resource_Repeatedschedule struct {
	Repeatedschedule *v16.RepeatedScheduleResource `protobuf:"bytes,81,opt,name=repeatedschedule,proto3,oneof"`
}

type Resource_Workload struct {
	Workload *v13.WorkloadResource `protobuf:"bytes,90,opt,name=workload,proto3,oneof"`
}

type Resource_WorkloadMember struct {
	WorkloadMember *v13.WorkloadMember `protobuf:"bytes,91,opt,name=workload_member,json=workloadMember,proto3,oneof"`
}

type Resource_TelemetryGroup struct {
	TelemetryGroup *v17.TelemetryGroupResource `protobuf:"bytes,100,opt,name=telemetry_group,json=telemetryGroup,proto3,oneof"`
}

type Resource_TelemetryProfile struct {
	TelemetryProfile *v17.TelemetryProfile `protobuf:"bytes,101,opt,name=telemetry_profile,json=telemetryProfile,proto3,oneof"`
}

type Resource_Tenant struct {
	Tenant *v18.Tenant `protobuf:"bytes,130,opt,name=tenant,proto3,oneof"`
}

type Resource_RemoteAccess struct {
	RemoteAccess *v19.RemoteAccessConfiguration `protobuf:"bytes,150,opt,name=remote_access,json=remoteAccess,proto3,oneof"`
}

type Resource_LocalAccount struct {
	LocalAccount *v110.LocalAccountResource `protobuf:"bytes,170,opt,name=local_account,json=localAccount,proto3,oneof"`
}

type Resource_OsUpdatePolicy struct {
	OsUpdatePolicy *v13.OSUpdatePolicyResource `protobuf:"bytes,180,opt,name=os_update_policy,json=osUpdatePolicy,proto3,oneof"`
}

type Resource_CustomConfig struct {
	CustomConfig *v13.CustomConfigResource `protobuf:"bytes,190,opt,name=custom_config,json=customConfig,proto3,oneof"`
}

func (*Resource_Region) isResource_Resource() {}

func (*Resource_Site) isResource_Resource() {}

func (*Resource_Ou) isResource_Resource() {}

func (*Resource_Provider) isResource_Resource() {}

func (*Resource_Host) isResource_Resource() {}

func (*Resource_Hoststorage) isResource_Resource() {}

func (*Resource_Hostnic) isResource_Resource() {}

func (*Resource_Hostusb) isResource_Resource() {}

func (*Resource_Hostgpu) isResource_Resource() {}

func (*Resource_Instance) isResource_Resource() {}

func (*Resource_Ipaddress) isResource_Resource() {}

func (*Resource_NetworkSegment) isResource_Resource() {}

func (*Resource_Netlink) isResource_Resource() {}

func (*Resource_Endpoint) isResource_Resource() {}

func (*Resource_Os) isResource_Resource() {}

func (*Resource_Singleschedule) isResource_Resource() {}

func (*Resource_Repeatedschedule) isResource_Resource() {}

func (*Resource_Workload) isResource_Resource() {}

func (*Resource_WorkloadMember) isResource_Resource() {}

func (*Resource_TelemetryGroup) isResource_Resource() {}

func (*Resource_TelemetryProfile) isResource_Resource() {}

func (*Resource_Tenant) isResource_Resource() {}

func (*Resource_RemoteAccess) isResource_Resource() {}

func (*Resource_LocalAccount) isResource_Resource() {}

func (*Resource_OsUpdatePolicy) isResource_Resource() {}

func (*Resource_CustomConfig) isResource_Resource() {}

// Filter resources with the given filter. The filter requires a filter string and a resource (kind) to be specified.
// Also, limit and offset parameter are used for pagination.
type ResourceFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource kind to filter on, must always be specified. Generally the resource's fields are unset,
	// except for metadata filters that include inherited metadata.
	Resource *Resource `protobuf:"bytes,3,opt,name=resource,proto3" json:"resource,omitempty"`
	Limit    uint32    `protobuf:"varint,512,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   uint32    `protobuf:"varint,513,opt,name=offset,proto3" json:"offset,omitempty"`
	// Optional filter to return only resources of interest.
	// See https://google.aip.dev/160 for details.
	// Note: for backwards compatability the fields `field_mask` and `resource` are used for filtering when `filter` is
	// unset. This means an empty (=no) filter cannot be expressed at the moment. Clients wanting to use this filter
	// mechanism must set `filter` and `resource` to select which resource type to return. Calls with an invalid filter
	// will fail with `INVALID_ARGUMENT`.
	// Limitations:
	//   - Timestamps are not supported beyond treating them as simple strings.
	//   - Filtering with only a naked literal (`filter: "foo"`) is not supported. Always provide a field.
	//   - Field names must be given as they appear in the protobuf message, but see the notes on casing.
	//   - The ":" (has) operator is not supported. Use the `has(<edge name>)` function extension instead.
	//   - Nested fields may be accessed up to 5 levels deep. I.e. `site.region.name = "foo"`.
	//   - If a string literal contains double quotes, the string itself must be single quoted. I.e. `metadata = '{"key": "value"}'`
	//
	// Extensions:
	//   - All fields of the resource kind set in `resource` are hoisted into the global name space. I.e. can be accessed
	//     directly without prefixing: `resource_id = "host-1234"` instead of `host.resource_id = ...`.
	//   - Field names may be specified in both camelCase and snake_case.
	//   - To check for edge presence, use the `has(<edge_name>)` operator. E.g.: `has(site)` to filter by resources that
	//     are linked to a site. Can be used on nested edges: `has(site.region)`.
	//   - String equality comparisons are case insensitive. `name = "foo"` and `name = "FOO"` are equivalent.
	//   - String equality comparisons are fuzzy. `name = "abc"` will match `abc`, `abcd` and `123abc`.
	//   - String equality comparisons may contain one or multiple wildcards `*` which match any number of characters.
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional, comma-seperated list of fields that specify the sorting order of the requested resources.
	// By default, resources are returned in alphanumerical and ascending order based on their resource ID.
	// Fields can be given in either their proto `foo_bar` and JSON `fooBar` casing.
	// See https://google.aip.dev/132 for details.
	// Additional limitations: Ordering on nested fields, such as `foo.bar` is not supported.
	OrderBy string `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
}

func (x *ResourceFilter) Reset() {
	*x = ResourceFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceFilter) ProtoMessage() {}

func (x *ResourceFilter) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceFilter.ProtoReflect.Descriptor instead.
func (*ResourceFilter) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{6}
}

func (x *ResourceFilter) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceFilter) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ResourceFilter) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ResourceFilter) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ResourceFilter) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

type FindResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string          `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	Filter     *ResourceFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *FindResourcesRequest) Reset() {
	*x = FindResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResourcesRequest) ProtoMessage() {}

func (x *FindResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResourcesRequest.ProtoReflect.Descriptor instead.
func (*FindResourcesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{7}
}

func (x *FindResourcesRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *FindResourcesRequest) GetFilter() *ResourceFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type FindResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*FindResourcesResponse_ResourceTenantIDCarrier `protobuf:"bytes,5,rep,name=resources,proto3" json:"resources,omitempty"`
	// Deprecated. Use total_elements instead.
	HasNext bool `protobuf:"varint,16,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// Total number of items the find request would return, if not limited by pagination.
	// Callers can use this value to determine if there are more elements to be fetched,
	// by comparing the supplied offset and returned items to the total:
	// bool more = offset + len(resource_id) < total_elements
	TotalElements int32 `protobuf:"varint,2,opt,name=total_elements,json=totalElements,proto3" json:"total_elements,omitempty"`
}

func (x *FindResourcesResponse) Reset() {
	*x = FindResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResourcesResponse) ProtoMessage() {}

func (x *FindResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResourcesResponse.ProtoReflect.Descriptor instead.
func (*FindResourcesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{8}
}

func (x *FindResourcesResponse) GetResources() []*FindResourcesResponse_ResourceTenantIDCarrier {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *FindResourcesResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *FindResourcesResponse) GetTotalElements() int32 {
	if x != nil {
		return x.TotalElements
	}
	return 0
}

type ListResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string          `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	Filter     *ResourceFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *ListResourcesRequest) Reset() {
	*x = ListResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesRequest) ProtoMessage() {}

func (x *ListResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListResourcesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{9}
}

func (x *ListResourcesRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *ListResourcesRequest) GetFilter() *ResourceFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ListResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources []*GetResourceResponse `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// Deprecated. Use total_elements instead.
	HasNext bool `protobuf:"varint,16,opt,name=has_next,json=hasNext,proto3" json:"has_next,omitempty"`
	// Total number of items the list request would return, if not limited by pagination.
	// Callers can use this value to determine if there are more elements to be fetched,
	// by comparing the supplied offset and returned items to the total:
	// bool more = offset + len(resources) < total_elements
	TotalElements int32 `protobuf:"varint,2,opt,name=total_elements,json=totalElements,proto3" json:"total_elements,omitempty"`
}

func (x *ListResourcesResponse) Reset() {
	*x = ListResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesResponse) ProtoMessage() {}

func (x *ListResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListResourcesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{10}
}

func (x *ListResourcesResponse) GetResources() []*GetResourceResponse {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ListResourcesResponse) GetHasNext() bool {
	if x != nil {
		return x.HasNext
	}
	return false
}

func (x *ListResourcesResponse) GetTotalElements() int32 {
	if x != nil {
		return x.TotalElements
	}
	return 0
}

type GetResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	TenantId   string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *GetResourceRequest) Reset() {
	*x = GetResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRequest) ProtoMessage() {}

func (x *GetResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRequest.ProtoReflect.Descriptor instead.
func (*GetResourceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{11}
}

func (x *GetResourceRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *GetResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetResourceRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource         *Resource                             `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	RenderedMetadata *GetResourceResponse_ResourceMetadata `protobuf:"bytes,200,opt,name=rendered_metadata,json=renderedMetadata,proto3" json:"rendered_metadata,omitempty"`
}

func (x *GetResourceResponse) Reset() {
	*x = GetResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceResponse) ProtoMessage() {}

func (x *GetResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceResponse.ProtoReflect.Descriptor instead.
func (*GetResourceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{12}
}

func (x *GetResourceResponse) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *GetResourceResponse) GetRenderedMetadata() *GetResourceResponse_ResourceMetadata {
	if x != nil {
		return x.RenderedMetadata
	}
	return nil
}

type UpdateResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string                 `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	ResourceId string                 `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	FieldMask  *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	Resource   *Resource              `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// Definition of tenant_id can be seen as redundant since tenant_id is also defined in the nested resource.
	// Extracting tenant information from nested structs could be expensive.
	// Tenant related requests handling strategy has been created based on convention assuming that
	// tenant is available on top level of requests, this approach comes with clarity of implementation.
	// Underlying implementation enforces that tenant_id is consistent with tenant_id provided in the nested resource.
	TenantId string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *UpdateResourceRequest) Reset() {
	*x = UpdateResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResourceRequest) ProtoMessage() {}

func (x *UpdateResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResourceRequest.ProtoReflect.Descriptor instead.
func (*UpdateResourceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateResourceRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *UpdateResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *UpdateResourceRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *UpdateResourceRequest) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *UpdateResourceRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeleteResourceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	TenantId   string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *DeleteResourceRequest) Reset() {
	*x = DeleteResourceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceRequest) ProtoMessage() {}

func (x *DeleteResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceRequest.ProtoReflect.Descriptor instead.
func (*DeleteResourceRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteResourceRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *DeleteResourceRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *DeleteResourceRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeleteResourceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteResourceResponse) Reset() {
	*x = DeleteResourceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResourceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResourceResponse) ProtoMessage() {}

func (x *DeleteResourceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResourceResponse.ProtoReflect.Descriptor instead.
func (*DeleteResourceResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{15}
}

type ListInheritedTelemetryProfilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	// Specifies the base resource ID to inherit from (Instance, Site, or Region ID).
	InheritBy *ListInheritedTelemetryProfilesRequest_InheritBy `protobuf:"bytes,10,opt,name=inherit_by,json=inheritBy,proto3" json:"inherit_by,omitempty"`
	// Specify a filter on the inherited telemetry profiles.
	// Allows also to specify pagination parameters (these must always be set)
	// Note: we support ONLY the new `AIP-160`-style filter, so filter.fieldmask and filter.resource are not supported
	Filter *ResourceFilter `protobuf:"bytes,15,opt,name=filter,proto3" json:"filter,omitempty"`
	// Definition of tenant_id can be seen as redundant since tenant_id is also defined in the nested resource.
	// Extracting tenant information from nested structs could be expensive.
	// Tenant related requests handling strategy has been created based on convention assuming that
	// tenant is available on top level of requests, this approach comes with clarity of implementation.
	TenantId string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *ListInheritedTelemetryProfilesRequest) Reset() {
	*x = ListInheritedTelemetryProfilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInheritedTelemetryProfilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInheritedTelemetryProfilesRequest) ProtoMessage() {}

func (x *ListInheritedTelemetryProfilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInheritedTelemetryProfilesRequest.ProtoReflect.Descriptor instead.
func (*ListInheritedTelemetryProfilesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{16}
}

func (x *ListInheritedTelemetryProfilesRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *ListInheritedTelemetryProfilesRequest) GetInheritBy() *ListInheritedTelemetryProfilesRequest_InheritBy {
	if x != nil {
		return x.InheritBy
	}
	return nil
}

func (x *ListInheritedTelemetryProfilesRequest) GetFilter() *ResourceFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListInheritedTelemetryProfilesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ListInheritedTelemetryProfilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The inherited Telemetry Profiles given the "inherit_by" param given in the request
	TelemetryProfiles []*v17.TelemetryProfile `protobuf:"bytes,1,rep,name=telemetry_profiles,json=telemetryProfiles,proto3" json:"telemetry_profiles,omitempty"`
	// Total number of Telemetry Profiles the request would return, if not limited by pagination.
	// Callers can use this value to determine if there are more elements to be fetched,
	// by comparing the supplied offset and returned items to the total:
	// bool more = offset + len(resource_id) < total_elements
	TotalElements int32 `protobuf:"varint,10,opt,name=total_elements,json=totalElements,proto3" json:"total_elements,omitempty"`
}

func (x *ListInheritedTelemetryProfilesResponse) Reset() {
	*x = ListInheritedTelemetryProfilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInheritedTelemetryProfilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInheritedTelemetryProfilesResponse) ProtoMessage() {}

func (x *ListInheritedTelemetryProfilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInheritedTelemetryProfilesResponse.ProtoReflect.Descriptor instead.
func (*ListInheritedTelemetryProfilesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{17}
}

func (x *ListInheritedTelemetryProfilesResponse) GetTelemetryProfiles() []*v17.TelemetryProfile {
	if x != nil {
		return x.TelemetryProfiles
	}
	return nil
}

func (x *ListInheritedTelemetryProfilesResponse) GetTotalElements() int32 {
	if x != nil {
		return x.TotalElements
	}
	return 0
}

type GetTreeHierarchyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	// List of resource ID to filter upon
	Filter []string `protobuf:"bytes,10,rep,name=filter,proto3" json:"filter,omitempty"` // resource ID, generated by inventory on Create
	// Order the tree by descending depth (root to leaf), otherwise ordering is by ascending depth (leaf to root).
	Descending bool `protobuf:"varint,15,opt,name=descending,proto3" json:"descending,omitempty"`
	// Definition of tenant_id can be seen as redundant since it could be provided as part of nested filter.
	// Extracting tenant information from nested structs could be expensive.
	// Tenant related requests handling strategy has been created based on convention assuming that
	// tenant is available on top level of requests, this approach comes with clarity of implementation.
	TenantId string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *GetTreeHierarchyRequest) Reset() {
	*x = GetTreeHierarchyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeHierarchyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeHierarchyRequest) ProtoMessage() {}

func (x *GetTreeHierarchyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeHierarchyRequest.ProtoReflect.Descriptor instead.
func (*GetTreeHierarchyRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{18}
}

func (x *GetTreeHierarchyRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *GetTreeHierarchyRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetTreeHierarchyRequest) GetDescending() bool {
	if x != nil {
		return x.Descending
	}
	return false
}

func (x *GetTreeHierarchyRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetTreeHierarchyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ordered list of tree nodes by depth
	Tree []*GetTreeHierarchyResponse_TreeNode `protobuf:"bytes,1,rep,name=tree,proto3" json:"tree,omitempty"`
}

func (x *GetTreeHierarchyResponse) Reset() {
	*x = GetTreeHierarchyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeHierarchyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeHierarchyResponse) ProtoMessage() {}

func (x *GetTreeHierarchyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeHierarchyResponse.ProtoReflect.Descriptor instead.
func (*GetTreeHierarchyResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{19}
}

func (x *GetTreeHierarchyResponse) GetTree() []*GetTreeHierarchyResponse_TreeNode {
	if x != nil {
		return x.Tree
	}
	return nil
}

type GetSitesPerRegionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	// List of resource ID to filter upon
	Filter []string `protobuf:"bytes,10,rep,name=filter,proto3" json:"filter,omitempty"`
	// Definition of tenant_id can be seen as redundant since tenant_id is also defined in the nested resource.
	// Extracting tenant information from nested structs could be expensive.
	// Tenant related requests handling strategy has been created based on convention assuming that
	// tenant is available on top level of requests, this approach comes with clarity of implementation.
	TenantId string `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *GetSitesPerRegionRequest) Reset() {
	*x = GetSitesPerRegionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSitesPerRegionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSitesPerRegionRequest) ProtoMessage() {}

func (x *GetSitesPerRegionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSitesPerRegionRequest.ProtoReflect.Descriptor instead.
func (*GetSitesPerRegionRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{20}
}

func (x *GetSitesPerRegionRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *GetSitesPerRegionRequest) GetFilter() []string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetSitesPerRegionRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GetSitesPerRegionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ordered list of nodes
	Regions []*GetSitesPerRegionResponse_Node `protobuf:"bytes,1,rep,name=regions,proto3" json:"regions,omitempty"`
}

func (x *GetSitesPerRegionResponse) Reset() {
	*x = GetSitesPerRegionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSitesPerRegionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSitesPerRegionResponse) ProtoMessage() {}

func (x *GetSitesPerRegionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSitesPerRegionResponse.ProtoReflect.Descriptor instead.
func (*GetSitesPerRegionResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{21}
}

func (x *GetSitesPerRegionResponse) GetRegions() []*GetSitesPerRegionResponse_Node {
	if x != nil {
		return x.Regions
	}
	return nil
}

type DeleteAllResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientUuid   string       `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
	ResourceKind ResourceKind `protobuf:"varint,2,opt,name=resource_kind,json=resourceKind,proto3,enum=inventory.v1.ResourceKind" json:"resource_kind,omitempty"`
	Enforce      bool         `protobuf:"varint,3,opt,name=enforce,proto3" json:"enforce,omitempty"` // Enforces deletion for resources supporting 2phase deletion. Transparent for all other resources.
	TenantId     string       `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *DeleteAllResourcesRequest) Reset() {
	*x = DeleteAllResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllResourcesRequest) ProtoMessage() {}

func (x *DeleteAllResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllResourcesRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllResourcesRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAllResourcesRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

func (x *DeleteAllResourcesRequest) GetResourceKind() ResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return ResourceKind_RESOURCE_KIND_UNSPECIFIED
}

func (x *DeleteAllResourcesRequest) GetEnforce() bool {
	if x != nil {
		return x.Enforce
	}
	return false
}

func (x *DeleteAllResourcesRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeleteAllResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteAllResourcesResponse) Reset() {
	*x = DeleteAllResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllResourcesResponse) ProtoMessage() {}

func (x *DeleteAllResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllResourcesResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllResourcesResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{23}
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The UUID of the client.
	ClientUuid string `protobuf:"bytes,1,opt,name=client_uuid,json=clientUuid,proto3" json:"client_uuid,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{24}
}

func (x *HeartbeatRequest) GetClientUuid() string {
	if x != nil {
		return x.ClientUuid
	}
	return ""
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{25}
}

type FindResourcesResponse_ResourceTenantIDCarrier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId   string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ResourceId string `protobuf:"bytes,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
}

func (x *FindResourcesResponse_ResourceTenantIDCarrier) Reset() {
	*x = FindResourcesResponse_ResourceTenantIDCarrier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResourcesResponse_ResourceTenantIDCarrier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResourcesResponse_ResourceTenantIDCarrier) ProtoMessage() {}

func (x *FindResourcesResponse_ResourceTenantIDCarrier) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResourcesResponse_ResourceTenantIDCarrier.ProtoReflect.Descriptor instead.
func (*FindResourcesResponse_ResourceTenantIDCarrier) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{8, 0}
}

func (x *FindResourcesResponse_ResourceTenantIDCarrier) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *FindResourcesResponse_ResourceTenantIDCarrier) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// Contains the rendered metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]
type GetResourceResponse_ResourceMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PhyMetadata  string `protobuf:"bytes,1,opt,name=phy_metadata,json=phyMetadata,proto3" json:"phy_metadata,omitempty"`
	LogiMetadata string `protobuf:"bytes,2,opt,name=logi_metadata,json=logiMetadata,proto3" json:"logi_metadata,omitempty"`
}

func (x *GetResourceResponse_ResourceMetadata) Reset() {
	*x = GetResourceResponse_ResourceMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetResourceResponse_ResourceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceResponse_ResourceMetadata) ProtoMessage() {}

func (x *GetResourceResponse_ResourceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceResponse_ResourceMetadata.ProtoReflect.Descriptor instead.
func (*GetResourceResponse_ResourceMetadata) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{12, 0}
}

func (x *GetResourceResponse_ResourceMetadata) GetPhyMetadata() string {
	if x != nil {
		return x.PhyMetadata
	}
	return ""
}

func (x *GetResourceResponse_ResourceMetadata) GetLogiMetadata() string {
	if x != nil {
		return x.LogiMetadata
	}
	return ""
}

type ListInheritedTelemetryProfilesRequest_InheritBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//
	//	*ListInheritedTelemetryProfilesRequest_InheritBy_InstanceId
	//	*ListInheritedTelemetryProfilesRequest_InheritBy_SiteId
	//	*ListInheritedTelemetryProfilesRequest_InheritBy_RegionId
	Id isListInheritedTelemetryProfilesRequest_InheritBy_Id `protobuf_oneof:"id"`
}

func (x *ListInheritedTelemetryProfilesRequest_InheritBy) Reset() {
	*x = ListInheritedTelemetryProfilesRequest_InheritBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInheritedTelemetryProfilesRequest_InheritBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInheritedTelemetryProfilesRequest_InheritBy) ProtoMessage() {}

func (x *ListInheritedTelemetryProfilesRequest_InheritBy) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInheritedTelemetryProfilesRequest_InheritBy.ProtoReflect.Descriptor instead.
func (*ListInheritedTelemetryProfilesRequest_InheritBy) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{16, 0}
}

func (m *ListInheritedTelemetryProfilesRequest_InheritBy) GetId() isListInheritedTelemetryProfilesRequest_InheritBy_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *ListInheritedTelemetryProfilesRequest_InheritBy) GetInstanceId() string {
	if x, ok := x.GetId().(*ListInheritedTelemetryProfilesRequest_InheritBy_InstanceId); ok {
		return x.InstanceId
	}
	return ""
}

func (x *ListInheritedTelemetryProfilesRequest_InheritBy) GetSiteId() string {
	if x, ok := x.GetId().(*ListInheritedTelemetryProfilesRequest_InheritBy_SiteId); ok {
		return x.SiteId
	}
	return ""
}

func (x *ListInheritedTelemetryProfilesRequest_InheritBy) GetRegionId() string {
	if x, ok := x.GetId().(*ListInheritedTelemetryProfilesRequest_InheritBy_RegionId); ok {
		return x.RegionId
	}
	return ""
}

type isListInheritedTelemetryProfilesRequest_InheritBy_Id interface {
	isListInheritedTelemetryProfilesRequest_InheritBy_Id()
}

type ListInheritedTelemetryProfilesRequest_InheritBy_InstanceId struct {
	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3,oneof"`
}

type ListInheritedTelemetryProfilesRequest_InheritBy_SiteId struct {
	SiteId string `protobuf:"bytes,2,opt,name=site_id,json=siteId,proto3,oneof"`
}

type ListInheritedTelemetryProfilesRequest_InheritBy_RegionId struct {
	RegionId string `protobuf:"bytes,3,opt,name=region_id,json=regionId,proto3,oneof"`
}

func (*ListInheritedTelemetryProfilesRequest_InheritBy_InstanceId) isListInheritedTelemetryProfilesRequest_InheritBy_Id() {
}

func (*ListInheritedTelemetryProfilesRequest_InheritBy_SiteId) isListInheritedTelemetryProfilesRequest_InheritBy_Id() {
}

func (*ListInheritedTelemetryProfilesRequest_InheritBy_RegionId) isListInheritedTelemetryProfilesRequest_InheritBy_Id() {
}

type GetTreeHierarchyResponse_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId   string       `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ResourceKind ResourceKind `protobuf:"varint,2,opt,name=resource_kind,json=resourceKind,proto3,enum=inventory.v1.ResourceKind" json:"resource_kind,omitempty"`
}

func (x *GetTreeHierarchyResponse_Node) Reset() {
	*x = GetTreeHierarchyResponse_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeHierarchyResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeHierarchyResponse_Node) ProtoMessage() {}

func (x *GetTreeHierarchyResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeHierarchyResponse_Node.ProtoReflect.Descriptor instead.
func (*GetTreeHierarchyResponse_Node) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{19, 0}
}

func (x *GetTreeHierarchyResponse_Node) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetTreeHierarchyResponse_Node) GetResourceKind() ResourceKind {
	if x != nil {
		return x.ResourceKind
	}
	return ResourceKind_RESOURCE_KIND_UNSPECIFIED
}

type GetTreeHierarchyResponse_TreeNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentNode *GetTreeHierarchyResponse_Node   `protobuf:"bytes,1,opt,name=current_node,json=currentNode,proto3" json:"current_node,omitempty"`
	ParentNodes []*GetTreeHierarchyResponse_Node `protobuf:"bytes,2,rep,name=parent_nodes,json=parentNodes,proto3" json:"parent_nodes,omitempty"`
	// Name of the resource if available, otherwise unset
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// The depth in the tree of the current node
	Depth int32 `protobuf:"varint,11,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *GetTreeHierarchyResponse_TreeNode) Reset() {
	*x = GetTreeHierarchyResponse_TreeNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreeHierarchyResponse_TreeNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreeHierarchyResponse_TreeNode) ProtoMessage() {}

func (x *GetTreeHierarchyResponse_TreeNode) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreeHierarchyResponse_TreeNode.ProtoReflect.Descriptor instead.
func (*GetTreeHierarchyResponse_TreeNode) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{19, 1}
}

func (x *GetTreeHierarchyResponse_TreeNode) GetCurrentNode() *GetTreeHierarchyResponse_Node {
	if x != nil {
		return x.CurrentNode
	}
	return nil
}

func (x *GetTreeHierarchyResponse_TreeNode) GetParentNodes() []*GetTreeHierarchyResponse_Node {
	if x != nil {
		return x.ParentNodes
	}
	return nil
}

func (x *GetTreeHierarchyResponse_TreeNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTreeHierarchyResponse_TreeNode) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type GetSitesPerRegionResponse_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ChildSites int32  `protobuf:"varint,2,opt,name=child_sites,json=childSites,proto3" json:"child_sites,omitempty"`
}

func (x *GetSitesPerRegionResponse_Node) Reset() {
	*x = GetSitesPerRegionResponse_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_inventory_v1_inventory_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSitesPerRegionResponse_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSitesPerRegionResponse_Node) ProtoMessage() {}

func (x *GetSitesPerRegionResponse_Node) ProtoReflect() protoreflect.Message {
	mi := &file_inventory_v1_inventory_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSitesPerRegionResponse_Node.ProtoReflect.Descriptor instead.
func (*GetSitesPerRegionResponse_Node) Descriptor() ([]byte, []int) {
	return file_inventory_v1_inventory_proto_rawDescGZIP(), []int{21, 0}
}

func (x *GetSitesPerRegionResponse_Node) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *GetSitesPerRegionResponse_Node) GetChildSites() int32 {
	if x != nil {
		return x.ChildSites
	}
	return 0
}

var File_inventory_v1_inventory_proto protoreflect.FileDescriptor

var file_inventory_v1_inventory_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x6f, 0x75, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x73, 0x22, 0xdd, 0x02,
	0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x22, 0x6f, 0x0a, 0x09,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x22, 0xa4, 0x01,
	0x0a, 0x1c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xd8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x19,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x17, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x69, 0x6e, 0x64, 0x73, 0x22, 0x1f, 0x0a, 0x1d, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x9c, 0x0d, 0x0a, 0x08, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x02, 0x6f, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x75, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x02,
	0x6f, 0x75, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63, 0x12, 0x37, 0x0a,
	0x07, 0x68, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x75, 0x73, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x12, 0x37, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x67, 0x70,
	0x75, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x12,
	0x3a, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x69,
	0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x70, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x51, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x5b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x0f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x4d, 0x0a, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x74,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x52, 0x0a,
	0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4f, 0x0a, 0x10, 0x6f, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0e, 0x6f, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x80, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x81, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x22, 0x77, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x15, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x43, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0x61, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x43, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x77, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x9a, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f,
	0x6e, 0x65, 0x78, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4e,
	0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x11, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x10, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x5a, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x79,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x68, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d,
	0x6c, 0x6f, 0x67, 0x69, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x84, 0x02, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x28,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x69, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x42, 0x79, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x42, 0x79, 0x12, 0x3c, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x75, 0x0a, 0x09, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x42, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x0b, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x9e, 0x01, 0x0a,
	0x26, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x11, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x02,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x74, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x5c, 0xba, 0x48, 0x59, 0x92, 0x01, 0x56, 0x18, 0x01, 0x22, 0x52,
	0xc8, 0x01, 0x01, 0x72, 0x4d, 0x32, 0x4b, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x7c, 0x5e, 0x73, 0x69, 0x74, 0x65, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x7c, 0x5e, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x24, 0x7c, 0x5e, 0x6f, 0x75, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x90, 0x04, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65,
	0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x73, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x52, 0xba, 0x48, 0x4f, 0x72, 0x4d, 0x32, 0x4b, 0x5e, 0x68, 0x6f,
	0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x7c,
	0x5e, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0x7c, 0x5e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x7c, 0x5e, 0x6f, 0x75, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x0e, 0xba, 0x48, 0x0b, 0x82, 0x01, 0x08, 0x18,
	0x08, 0x18, 0x09, 0x18, 0x0a, 0x18, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xdf, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x00,
	0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x22, 0xae, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53,
	0x69, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03,
	0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x3d, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x25, 0xba, 0x48, 0x22, 0x92, 0x01, 0x1f, 0x18, 0x01, 0x22, 0x1b, 0xc8, 0x01, 0x01, 0x72, 0x16,
	0x32, 0x14, 0x5e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xba, 0x48, 0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xca, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x65,
	0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0xba, 0x48, 0x18,
	0x72, 0x16, 0x32, 0x14, 0x5e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72, 0x03, 0xb0,
	0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xba, 0x48,
	0x08, 0xc8, 0x01, 0x01, 0x72, 0x03, 0xb0, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3d, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05, 0x72,
	0x03, 0xb0, 0x01, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x13, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x83, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x41, 0x50, 0x49, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x54, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x03, 0x2a, 0xbe, 0x06, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x09, 0x12, 0x14, 0x0a,
	0x10, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f,
	0x55, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x10, 0x20, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x30, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x10, 0x31, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x4e, 0x49, 0x43, 0x10,
	0x32, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x55, 0x53, 0x42, 0x10, 0x33, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f,
	0x53, 0x54, 0x47, 0x50, 0x55, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x40, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x50, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x5f,
	0x12, 0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x60, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x61, 0x12, 0x1a, 0x0a,
	0x16, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45,
	0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x62, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x53, 0x10, 0x63, 0x12,
	0x20, 0x0a, 0x1c, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x64, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x45, 0x44, 0x53, 0x43, 0x48, 0x45, 0x44,
	0x55, 0x4c, 0x45, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x6e, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x10, 0x6f, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x78, 0x12, 0x23, 0x0a, 0x1f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54,
	0x52, 0x59, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x79, 0x12, 0x19, 0x0a, 0x14,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x54, 0x45,
	0x4e, 0x41, 0x4e, 0x54, 0x10, 0x82, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x52, 0x4d, 0x54, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x96, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x52,
	0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0xaa, 0x01, 0x12, 0x21, 0x0a, 0x1c,
	0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4f, 0x53,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0xb4, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0xbe, 0x01,
	0x22, 0x04, 0x08, 0x10, 0x10, 0x10, 0x22, 0x04, 0x08, 0x11, 0x10, 0x11, 0x32, 0x91, 0x0a, 0x0a,
	0x10, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x62, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2a,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x46, 0x69,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23,
	0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x22, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x12, 0x25, 0x2e, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x65, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1e, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f,
	0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_inventory_v1_inventory_proto_rawDescOnce sync.Once
	file_inventory_v1_inventory_proto_rawDescData = file_inventory_v1_inventory_proto_rawDesc
)

func file_inventory_v1_inventory_proto_rawDescGZIP() []byte {
	file_inventory_v1_inventory_proto_rawDescOnce.Do(func() {
		file_inventory_v1_inventory_proto_rawDescData = protoimpl.X.CompressGZIP(file_inventory_v1_inventory_proto_rawDescData)
	})
	return file_inventory_v1_inventory_proto_rawDescData
}

var file_inventory_v1_inventory_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_inventory_v1_inventory_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_inventory_v1_inventory_proto_goTypes = []interface{}{
	(ClientKind)(0),                                         // 0: inventory.v1.ClientKind
	(ResourceKind)(0),                                       // 1: inventory.v1.ResourceKind
	(SubscribeEventsResponse_EventKind)(0),                  // 2: inventory.v1.SubscribeEventsResponse.EventKind
	(*SubscribeEventsRequest)(nil),                          // 3: inventory.v1.SubscribeEventsRequest
	(*SubscribeEventsResponse)(nil),                         // 4: inventory.v1.SubscribeEventsResponse
	(*ChangeSubscribeEventsRequest)(nil),                    // 5: inventory.v1.ChangeSubscribeEventsRequest
	(*ChangeSubscribeEventsResponse)(nil),                   // 6: inventory.v1.ChangeSubscribeEventsResponse
	(*CreateResourceRequest)(nil),                           // 7: inventory.v1.CreateResourceRequest
	(*Resource)(nil),                                        // 8: inventory.v1.Resource
	(*ResourceFilter)(nil),                                  // 9: inventory.v1.ResourceFilter
	(*FindResourcesRequest)(nil),                            // 10: inventory.v1.FindResourcesRequest
	(*FindResourcesResponse)(nil),                           // 11: inventory.v1.FindResourcesResponse
	(*ListResourcesRequest)(nil),                            // 12: inventory.v1.ListResourcesRequest
	(*ListResourcesResponse)(nil),                           // 13: inventory.v1.ListResourcesResponse
	(*GetResourceRequest)(nil),                              // 14: inventory.v1.GetResourceRequest
	(*GetResourceResponse)(nil),                             // 15: inventory.v1.GetResourceResponse
	(*UpdateResourceRequest)(nil),                           // 16: inventory.v1.UpdateResourceRequest
	(*DeleteResourceRequest)(nil),                           // 17: inventory.v1.DeleteResourceRequest
	(*DeleteResourceResponse)(nil),                          // 18: inventory.v1.DeleteResourceResponse
	(*ListInheritedTelemetryProfilesRequest)(nil),           // 19: inventory.v1.ListInheritedTelemetryProfilesRequest
	(*ListInheritedTelemetryProfilesResponse)(nil),          // 20: inventory.v1.ListInheritedTelemetryProfilesResponse
	(*GetTreeHierarchyRequest)(nil),                         // 21: inventory.v1.GetTreeHierarchyRequest
	(*GetTreeHierarchyResponse)(nil),                        // 22: inventory.v1.GetTreeHierarchyResponse
	(*GetSitesPerRegionRequest)(nil),                        // 23: inventory.v1.GetSitesPerRegionRequest
	(*GetSitesPerRegionResponse)(nil),                       // 24: inventory.v1.GetSitesPerRegionResponse
	(*DeleteAllResourcesRequest)(nil),                       // 25: inventory.v1.DeleteAllResourcesRequest
	(*DeleteAllResourcesResponse)(nil),                      // 26: inventory.v1.DeleteAllResourcesResponse
	(*HeartbeatRequest)(nil),                                // 27: inventory.v1.HeartbeatRequest
	(*HeartbeatResponse)(nil),                               // 28: inventory.v1.HeartbeatResponse
	(*FindResourcesResponse_ResourceTenantIDCarrier)(nil),   // 29: inventory.v1.FindResourcesResponse.ResourceTenantIDCarrier
	(*GetResourceResponse_ResourceMetadata)(nil),            // 30: inventory.v1.GetResourceResponse.ResourceMetadata
	(*ListInheritedTelemetryProfilesRequest_InheritBy)(nil), // 31: inventory.v1.ListInheritedTelemetryProfilesRequest.InheritBy
	(*GetTreeHierarchyResponse_Node)(nil),                   // 32: inventory.v1.GetTreeHierarchyResponse.Node
	(*GetTreeHierarchyResponse_TreeNode)(nil),               // 33: inventory.v1.GetTreeHierarchyResponse.TreeNode
	(*GetSitesPerRegionResponse_Node)(nil),                  // 34: inventory.v1.GetSitesPerRegionResponse.Node
	(*v1.RegionResource)(nil),                               // 35: location.v1.RegionResource
	(*v1.SiteResource)(nil),                                 // 36: location.v1.SiteResource
	(*v11.OuResource)(nil),                                  // 37: ou.v1.OuResource
	(*v12.ProviderResource)(nil),                            // 38: provider.v1.ProviderResource
	(*v13.HostResource)(nil),                                // 39: compute.v1.HostResource
	(*v13.HoststorageResource)(nil),                         // 40: compute.v1.HoststorageResource
	(*v13.HostnicResource)(nil),                             // 41: compute.v1.HostnicResource
	(*v13.HostusbResource)(nil),                             // 42: compute.v1.HostusbResource
	(*v13.HostgpuResource)(nil),                             // 43: compute.v1.HostgpuResource
	(*v13.InstanceResource)(nil),                            // 44: compute.v1.InstanceResource
	(*v14.IPAddressResource)(nil),                           // 45: network.v1.IPAddressResource
	(*v14.NetworkSegment)(nil),                              // 46: network.v1.NetworkSegment
	(*v14.NetlinkResource)(nil),                             // 47: network.v1.NetlinkResource
	(*v14.EndpointResource)(nil),                            // 48: network.v1.EndpointResource
	(*v15.OperatingSystemResource)(nil),                     // 49: os.v1.OperatingSystemResource
	(*v16.SingleScheduleResource)(nil),                      // 50: schedule.v1.SingleScheduleResource
	(*v16.RepeatedScheduleResource)(nil),                    // 51: schedule.v1.RepeatedScheduleResource
	(*v13.WorkloadResource)(nil),                            // 52: compute.v1.WorkloadResource
	(*v13.WorkloadMember)(nil),                              // 53: compute.v1.WorkloadMember
	(*v17.TelemetryGroupResource)(nil),                      // 54: telemetry.v1.TelemetryGroupResource
	(*v17.TelemetryProfile)(nil),                            // 55: telemetry.v1.TelemetryProfile
	(*v18.Tenant)(nil),                                      // 56: tenant.v1.Tenant
	(*v19.RemoteAccessConfiguration)(nil),                   // 57: remoteaccess.v1.RemoteAccessConfiguration
	(*v110.LocalAccountResource)(nil),                       // 58: localaccount.v1.LocalAccountResource
	(*v13.OSUpdatePolicyResource)(nil),                      // 59: compute.v1.OSUpdatePolicyResource
	(*v13.CustomConfigResource)(nil),                        // 60: compute.v1.CustomConfigResource
	(*fieldmaskpb.FieldMask)(nil),                           // 61: google.protobuf.FieldMask
}
var file_inventory_v1_inventory_proto_depIdxs = []int32{
	0,  // 0: inventory.v1.SubscribeEventsRequest.client_kind:type_name -> inventory.v1.ClientKind
	1,  // 1: inventory.v1.SubscribeEventsRequest.subscribed_resource_kinds:type_name -> inventory.v1.ResourceKind
	8,  // 2: inventory.v1.SubscribeEventsResponse.resource:type_name -> inventory.v1.Resource
	2,  // 3: inventory.v1.SubscribeEventsResponse.event_kind:type_name -> inventory.v1.SubscribeEventsResponse.EventKind
	1,  // 4: inventory.v1.ChangeSubscribeEventsRequest.subscribed_resource_kinds:type_name -> inventory.v1.ResourceKind
	8,  // 5: inventory.v1.CreateResourceRequest.resource:type_name -> inventory.v1.Resource
	35, // 6: inventory.v1.Resource.region:type_name -> location.v1.RegionResource
	36, // 7: inventory.v1.Resource.site:type_name -> location.v1.SiteResource
	37, // 8: inventory.v1.Resource.ou:type_name -> ou.v1.OuResource
	38, // 9: inventory.v1.Resource.provider:type_name -> provider.v1.ProviderResource
	39, // 10: inventory.v1.Resource.host:type_name -> compute.v1.HostResource
	40, // 11: inventory.v1.Resource.hoststorage:type_name -> compute.v1.HoststorageResource
	41, // 12: inventory.v1.Resource.hostnic:type_name -> compute.v1.HostnicResource
	42, // 13: inventory.v1.Resource.hostusb:type_name -> compute.v1.HostusbResource
	43, // 14: inventory.v1.Resource.hostgpu:type_name -> compute.v1.HostgpuResource
	44, // 15: inventory.v1.Resource.instance:type_name -> compute.v1.InstanceResource
	45, // 16: inventory.v1.Resource.ipaddress:type_name -> network.v1.IPAddressResource
	46, // 17: inventory.v1.Resource.network_segment:type_name -> network.v1.NetworkSegment
	47, // 18: inventory.v1.Resource.netlink:type_name -> network.v1.NetlinkResource
	48, // 19: inventory.v1.Resource.endpoint:type_name -> network.v1.EndpointResource
	49, // 20: inventory.v1.Resource.os:type_name -> os.v1.OperatingSystemResource
	50, // 21: inventory.v1.Resource.singleschedule:type_name -> schedule.v1.SingleScheduleResource
	51, // 22: inventory.v1.Resource.repeatedschedule:type_name -> schedule.v1.RepeatedScheduleResource
	52, // 23: inventory.v1.Resource.workload:type_name -> compute.v1.WorkloadResource
	53, // 24: inventory.v1.Resource.workload_member:type_name -> compute.v1.WorkloadMember
	54, // 25: inventory.v1.Resource.telemetry_group:type_name -> telemetry.v1.TelemetryGroupResource
	55, // 26: inventory.v1.Resource.telemetry_profile:type_name -> telemetry.v1.TelemetryProfile
	56, // 27: inventory.v1.Resource.tenant:type_name -> tenant.v1.Tenant
	57, // 28: inventory.v1.Resource.remote_access:type_name -> remoteaccess.v1.RemoteAccessConfiguration
	58, // 29: inventory.v1.Resource.local_account:type_name -> localaccount.v1.LocalAccountResource
	59, // 30: inventory.v1.Resource.os_update_policy:type_name -> compute.v1.OSUpdatePolicyResource
	60, // 31: inventory.v1.Resource.custom_config:type_name -> compute.v1.CustomConfigResource
	8,  // 32: inventory.v1.ResourceFilter.resource:type_name -> inventory.v1.Resource
	9,  // 33: inventory.v1.FindResourcesRequest.filter:type_name -> inventory.v1.ResourceFilter
	29, // 34: inventory.v1.FindResourcesResponse.resources:type_name -> inventory.v1.FindResourcesResponse.ResourceTenantIDCarrier
	9,  // 35: inventory.v1.ListResourcesRequest.filter:type_name -> inventory.v1.ResourceFilter
	15, // 36: inventory.v1.ListResourcesResponse.resources:type_name -> inventory.v1.GetResourceResponse
	8,  // 37: inventory.v1.GetResourceResponse.resource:type_name -> inventory.v1.Resource
	30, // 38: inventory.v1.GetResourceResponse.rendered_metadata:type_name -> inventory.v1.GetResourceResponse.ResourceMetadata
	61, // 39: inventory.v1.UpdateResourceRequest.field_mask:type_name -> google.protobuf.FieldMask
	8,  // 40: inventory.v1.UpdateResourceRequest.resource:type_name -> inventory.v1.Resource
	31, // 41: inventory.v1.ListInheritedTelemetryProfilesRequest.inherit_by:type_name -> inventory.v1.ListInheritedTelemetryProfilesRequest.InheritBy
	9,  // 42: inventory.v1.ListInheritedTelemetryProfilesRequest.filter:type_name -> inventory.v1.ResourceFilter
	55, // 43: inventory.v1.ListInheritedTelemetryProfilesResponse.telemetry_profiles:type_name -> telemetry.v1.TelemetryProfile
	33, // 44: inventory.v1.GetTreeHierarchyResponse.tree:type_name -> inventory.v1.GetTreeHierarchyResponse.TreeNode
	34, // 45: inventory.v1.GetSitesPerRegionResponse.regions:type_name -> inventory.v1.GetSitesPerRegionResponse.Node
	1,  // 46: inventory.v1.DeleteAllResourcesRequest.resource_kind:type_name -> inventory.v1.ResourceKind
	1,  // 47: inventory.v1.GetTreeHierarchyResponse.Node.resource_kind:type_name -> inventory.v1.ResourceKind
	32, // 48: inventory.v1.GetTreeHierarchyResponse.TreeNode.current_node:type_name -> inventory.v1.GetTreeHierarchyResponse.Node
	32, // 49: inventory.v1.GetTreeHierarchyResponse.TreeNode.parent_nodes:type_name -> inventory.v1.GetTreeHierarchyResponse.Node
	3,  // 50: inventory.v1.InventoryService.SubscribeEvents:input_type -> inventory.v1.SubscribeEventsRequest
	5,  // 51: inventory.v1.InventoryService.ChangeSubscribeEvents:input_type -> inventory.v1.ChangeSubscribeEventsRequest
	7,  // 52: inventory.v1.InventoryService.CreateResource:input_type -> inventory.v1.CreateResourceRequest
	10, // 53: inventory.v1.InventoryService.FindResources:input_type -> inventory.v1.FindResourcesRequest
	14, // 54: inventory.v1.InventoryService.GetResource:input_type -> inventory.v1.GetResourceRequest
	16, // 55: inventory.v1.InventoryService.UpdateResource:input_type -> inventory.v1.UpdateResourceRequest
	17, // 56: inventory.v1.InventoryService.DeleteResource:input_type -> inventory.v1.DeleteResourceRequest
	12, // 57: inventory.v1.InventoryService.ListResources:input_type -> inventory.v1.ListResourcesRequest
	19, // 58: inventory.v1.InventoryService.ListInheritedTelemetryProfiles:input_type -> inventory.v1.ListInheritedTelemetryProfilesRequest
	21, // 59: inventory.v1.InventoryService.GetTreeHierarchy:input_type -> inventory.v1.GetTreeHierarchyRequest
	23, // 60: inventory.v1.InventoryService.GetSitesPerRegion:input_type -> inventory.v1.GetSitesPerRegionRequest
	25, // 61: inventory.v1.InventoryService.DeleteAllResources:input_type -> inventory.v1.DeleteAllResourcesRequest
	27, // 62: inventory.v1.InventoryService.Heartbeat:input_type -> inventory.v1.HeartbeatRequest
	4,  // 63: inventory.v1.InventoryService.SubscribeEvents:output_type -> inventory.v1.SubscribeEventsResponse
	6,  // 64: inventory.v1.InventoryService.ChangeSubscribeEvents:output_type -> inventory.v1.ChangeSubscribeEventsResponse
	8,  // 65: inventory.v1.InventoryService.CreateResource:output_type -> inventory.v1.Resource
	11, // 66: inventory.v1.InventoryService.FindResources:output_type -> inventory.v1.FindResourcesResponse
	15, // 67: inventory.v1.InventoryService.GetResource:output_type -> inventory.v1.GetResourceResponse
	8,  // 68: inventory.v1.InventoryService.UpdateResource:output_type -> inventory.v1.Resource
	18, // 69: inventory.v1.InventoryService.DeleteResource:output_type -> inventory.v1.DeleteResourceResponse
	13, // 70: inventory.v1.InventoryService.ListResources:output_type -> inventory.v1.ListResourcesResponse
	20, // 71: inventory.v1.InventoryService.ListInheritedTelemetryProfiles:output_type -> inventory.v1.ListInheritedTelemetryProfilesResponse
	22, // 72: inventory.v1.InventoryService.GetTreeHierarchy:output_type -> inventory.v1.GetTreeHierarchyResponse
	24, // 73: inventory.v1.InventoryService.GetSitesPerRegion:output_type -> inventory.v1.GetSitesPerRegionResponse
	26, // 74: inventory.v1.InventoryService.DeleteAllResources:output_type -> inventory.v1.DeleteAllResourcesResponse
	28, // 75: inventory.v1.InventoryService.Heartbeat:output_type -> inventory.v1.HeartbeatResponse
	63, // [63:76] is the sub-list for method output_type
	50, // [50:63] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_inventory_v1_inventory_proto_init() }
func file_inventory_v1_inventory_proto_init() {
	if File_inventory_v1_inventory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_inventory_v1_inventory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeSubscribeEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeSubscribeEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResourceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInheritedTelemetryProfilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInheritedTelemetryProfilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeHierarchyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeHierarchyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSitesPerRegionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSitesPerRegionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResourcesResponse_ResourceTenantIDCarrier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetResourceResponse_ResourceMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInheritedTelemetryProfilesRequest_InheritBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeHierarchyResponse_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreeHierarchyResponse_TreeNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_inventory_v1_inventory_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSitesPerRegionResponse_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_inventory_v1_inventory_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Resource_Region)(nil),
		(*Resource_Site)(nil),
		(*Resource_Ou)(nil),
		(*Resource_Provider)(nil),
		(*Resource_Host)(nil),
		(*Resource_Hoststorage)(nil),
		(*Resource_Hostnic)(nil),
		(*Resource_Hostusb)(nil),
		(*Resource_Hostgpu)(nil),
		(*Resource_Instance)(nil),
		(*Resource_Ipaddress)(nil),
		(*Resource_NetworkSegment)(nil),
		(*Resource_Netlink)(nil),
		(*Resource_Endpoint)(nil),
		(*Resource_Os)(nil),
		(*Resource_Singleschedule)(nil),
		(*Resource_Repeatedschedule)(nil),
		(*Resource_Workload)(nil),
		(*Resource_WorkloadMember)(nil),
		(*Resource_TelemetryGroup)(nil),
		(*Resource_TelemetryProfile)(nil),
		(*Resource_Tenant)(nil),
		(*Resource_RemoteAccess)(nil),
		(*Resource_LocalAccount)(nil),
		(*Resource_OsUpdatePolicy)(nil),
		(*Resource_CustomConfig)(nil),
	}
	file_inventory_v1_inventory_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*ListInheritedTelemetryProfilesRequest_InheritBy_InstanceId)(nil),
		(*ListInheritedTelemetryProfilesRequest_InheritBy_SiteId)(nil),
		(*ListInheritedTelemetryProfilesRequest_InheritBy_RegionId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_inventory_v1_inventory_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_inventory_v1_inventory_proto_goTypes,
		DependencyIndexes: file_inventory_v1_inventory_proto_depIdxs,
		EnumInfos:         file_inventory_v1_inventory_proto_enumTypes,
		MessageInfos:      file_inventory_v1_inventory_proto_msgTypes,
	}.Build()
	File_inventory_v1_inventory_proto = out.File
	file_inventory_v1_inventory_proto_rawDesc = nil
	file_inventory_v1_inventory_proto_goTypes = nil
	file_inventory_v1_inventory_proto_depIdxs = nil
}
