// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: os/v1/os.proto

package osv1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "entgo.io/contrib/entproto/cmd/protoc-gen-ent/options/ent"
	_ "github.com/open-edge-platform/infra-core/inventory/v2/pkg/infrainv"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SecurityFeature describes the security capabilities of a resource.
// Due to limitations of the Ent code generator, this enum cannot be a repeated
// field in resource messages. Hence, we have to manually list composite options
// like SB+FDE.
type SecurityFeature int32

const (
	SecurityFeature_SECURITY_FEATURE_UNSPECIFIED                          SecurityFeature = 0
	SecurityFeature_SECURITY_FEATURE_NONE                                 SecurityFeature = 1
	SecurityFeature_SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION SecurityFeature = 2
)

// Enum value maps for SecurityFeature.
var (
	SecurityFeature_name = map[int32]string{
		0: "SECURITY_FEATURE_UNSPECIFIED",
		1: "SECURITY_FEATURE_NONE",
		2: "SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION",
	}
	SecurityFeature_value = map[string]int32{
		"SECURITY_FEATURE_UNSPECIFIED":                          0,
		"SECURITY_FEATURE_NONE":                                 1,
		"SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION": 2,
	}
)

func (x SecurityFeature) Enum() *SecurityFeature {
	p := new(SecurityFeature)
	*p = x
	return p
}

func (x SecurityFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_os_v1_os_proto_enumTypes[0].Descriptor()
}

func (SecurityFeature) Type() protoreflect.EnumType {
	return &file_os_v1_os_proto_enumTypes[0]
}

func (x SecurityFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityFeature.Descriptor instead.
func (SecurityFeature) EnumDescriptor() ([]byte, []int) {
	return file_os_v1_os_proto_rawDescGZIP(), []int{0}
}

// OsType describes type of operating system.
type OsType int32

const (
	OsType_OS_TYPE_UNSPECIFIED OsType = 0
	OsType_OS_TYPE_MUTABLE     OsType = 1
	OsType_OS_TYPE_IMMUTABLE   OsType = 2
)

// Enum value maps for OsType.
var (
	OsType_name = map[int32]string{
		0: "OS_TYPE_UNSPECIFIED",
		1: "OS_TYPE_MUTABLE",
		2: "OS_TYPE_IMMUTABLE",
	}
	OsType_value = map[string]int32{
		"OS_TYPE_UNSPECIFIED": 0,
		"OS_TYPE_MUTABLE":     1,
		"OS_TYPE_IMMUTABLE":   2,
	}
)

func (x OsType) Enum() *OsType {
	p := new(OsType)
	*p = x
	return p
}

func (x OsType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OsType) Descriptor() protoreflect.EnumDescriptor {
	return file_os_v1_os_proto_enumTypes[1].Descriptor()
}

func (OsType) Type() protoreflect.EnumType {
	return &file_os_v1_os_proto_enumTypes[1]
}

func (x OsType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OsType.Descriptor instead.
func (OsType) EnumDescriptor() ([]byte, []int) {
	return file_os_v1_os_proto_rawDescGZIP(), []int{1}
}

// OsProviderKind describes "owner" of the OS, that will drive OS provisioning.
type OsProviderKind int32

const (
	OsProviderKind_OS_PROVIDER_KIND_UNSPECIFIED OsProviderKind = 0
	OsProviderKind_OS_PROVIDER_KIND_INFRA       OsProviderKind = 1
	OsProviderKind_OS_PROVIDER_KIND_LENOVO      OsProviderKind = 2
)

// Enum value maps for OsProviderKind.
var (
	OsProviderKind_name = map[int32]string{
		0: "OS_PROVIDER_KIND_UNSPECIFIED",
		1: "OS_PROVIDER_KIND_INFRA",
		2: "OS_PROVIDER_KIND_LENOVO",
	}
	OsProviderKind_value = map[string]int32{
		"OS_PROVIDER_KIND_UNSPECIFIED": 0,
		"OS_PROVIDER_KIND_INFRA":       1,
		"OS_PROVIDER_KIND_LENOVO":      2,
	}
)

func (x OsProviderKind) Enum() *OsProviderKind {
	p := new(OsProviderKind)
	*p = x
	return p
}

func (x OsProviderKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OsProviderKind) Descriptor() protoreflect.EnumDescriptor {
	return file_os_v1_os_proto_enumTypes[2].Descriptor()
}

func (OsProviderKind) Type() protoreflect.EnumType {
	return &file_os_v1_os_proto_enumTypes[2]
}

func (x OsProviderKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OsProviderKind.Descriptor instead.
func (OsProviderKind) EnumDescriptor() ([]byte, []int) {
	return file_os_v1_os_proto_rawDescGZIP(), []int{2}
}

type OperatingSystemResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId        string   `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`                      // Resource ID of this OperatingSystemResource
	Name              string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                    // user-provided, human-readable name of OS
	Architecture      string   `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`                                    // CPU architecture supported
	KernelCommand     string   `protobuf:"bytes,4,opt,name=kernel_command,json=kernelCommand,proto3" json:"kernel_command,omitempty"`             // Kernel Command Line Options. Deprecated in EMF-v3.1, use OSUpdatePolicy.
	UpdateSources     []string `protobuf:"bytes,5,rep,name=update_sources,json=updateSources,proto3" json:"update_sources,omitempty"`             // OS Update Sources. Should be in 'DEB822 Source Format' for Debian style OSs. Deprecated in EMF-v3.1, use OSUpdatePolicy.
	ImageUrl          string   `protobuf:"bytes,6,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                            // OS image URL. URL of the original installation source.
	ImageId           string   `protobuf:"bytes,13,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`                              // OS image ID. This must be a unique identifier of OS image that can be retrieved from running OS. Used by IMMUTABLE only.
	Sha256            string   `protobuf:"bytes,7,opt,name=sha256,proto3" json:"sha256,omitempty"`                                                // SHA256 checksum of the OS resource in HEX. It's length is 32 bytes, but string representation of HEX is twice long (64 chars)
	ProfileName       string   `protobuf:"bytes,8,opt,name=profile_name,json=profileName,proto3" json:"profile_name,omitempty"`                   // Name of an OS profile that the OS resource belongs to. Uniquely identifies family of OSResources.
	ProfileVersion    string   `protobuf:"bytes,12,opt,name=profile_version,json=profileVersion,proto3" json:"profile_version,omitempty"`         // Version of an OS profile that the OS resource belongs to. Along with profile_name uniquely identifies OS resource.
	InstalledPackages string   `protobuf:"bytes,9,opt,name=installed_packages,json=installedPackages,proto3" json:"installed_packages,omitempty"` // Freeform text, OS-dependent. A list of package names, one per line (newline separated). Should not contain version info. Deprecated in EMF-v3.1, use OSUpdatePolicy.
	// The URL of the OS manifest which contains install packages details. This will be used to fill the installed_packages field
	// for the advance use case to allow manual creation of OSProfiles when supported from backend.
	InstalledPackagesUrl string          `protobuf:"bytes,17,opt,name=installed_packages_url,json=installedPackagesUrl,proto3" json:"installed_packages_url,omitempty"`
	SecurityFeature      SecurityFeature `protobuf:"varint,10,opt,name=security_feature,json=securityFeature,proto3,enum=os.v1.SecurityFeature" json:"security_feature,omitempty"` // Indicating if this OS is capable of supporting features like Secure Boot (SB) and Full Disk Encryption (FDE).
	OsType               OsType          `protobuf:"varint,11,opt,name=os_type,json=osType,proto3,enum=os.v1.OsType" json:"os_type,omitempty"`                                     // Indicating the type of OS (for example, mutable or immutable).
	OsProvider           OsProviderKind  `protobuf:"varint,14,opt,name=os_provider,json=osProvider,proto3,enum=os.v1.OsProviderKind" json:"os_provider,omitempty"`                 // Indicating the provider of OS (e.g., Infra or Lenovo).
	PlatformBundle       string          `protobuf:"bytes,15,opt,name=platform_bundle,json=platformBundle,proto3" json:"platform_bundle,omitempty"`                                // An opaque JSON string storing a reference to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations. If empty, the default OS installation will be used.
	Description          string          `protobuf:"bytes,16,opt,name=description,proto3" json:"description,omitempty"`                                                            // user-provided, human-readable description of OS
	Metadata             string          `protobuf:"bytes,18,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                                  // Opaque JSON field storing metadata associated to this OS resource. Expected to be a JSON object with string keys and values, or an empty string.
	ExistingCvesUrl      string          `protobuf:"bytes,42,opt,name=existing_cves_url,json=existingCvesUrl,proto3" json:"existing_cves_url,omitempty"`                           // URL of the file containing information about the existing CVEs on the Operating System.
	ExistingCves         string          `protobuf:"bytes,43,opt,name=existing_cves,json=existingCves,proto3" json:"existing_cves,omitempty"`                                      // The CVEs that are currently present on the Operating System, encoded as a JSON list.
	FixedCvesUrl         string          `protobuf:"bytes,44,opt,name=fixed_cves_url,json=fixedCvesUrl,proto3" json:"fixed_cves_url,omitempty"`                                    // URL of the file containing information about the CVEs that have been fixed by this OS Resource version.
	FixedCves            string          `protobuf:"bytes,45,opt,name=fixed_cves,json=fixedCves,proto3" json:"fixed_cves,omitempty"`                                               // The CVEs that have been fixed by this OS Resource version, encoded as a JSON list.
	TenantId             string          `protobuf:"bytes,100,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`                                                 // Tenant Identifier
	CreatedAt            string          `protobuf:"bytes,200,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                              // Creation timestamp
	UpdatedAt            string          `protobuf:"bytes,201,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                              // Update timestamp
}

func (x *OperatingSystemResource) Reset() {
	*x = OperatingSystemResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_os_v1_os_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatingSystemResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatingSystemResource) ProtoMessage() {}

func (x *OperatingSystemResource) ProtoReflect() protoreflect.Message {
	mi := &file_os_v1_os_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatingSystemResource.ProtoReflect.Descriptor instead.
func (*OperatingSystemResource) Descriptor() ([]byte, []int) {
	return file_os_v1_os_proto_rawDescGZIP(), []int{0}
}

func (x *OperatingSystemResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *OperatingSystemResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OperatingSystemResource) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *OperatingSystemResource) GetKernelCommand() string {
	if x != nil {
		return x.KernelCommand
	}
	return ""
}

func (x *OperatingSystemResource) GetUpdateSources() []string {
	if x != nil {
		return x.UpdateSources
	}
	return nil
}

func (x *OperatingSystemResource) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OperatingSystemResource) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *OperatingSystemResource) GetSha256() string {
	if x != nil {
		return x.Sha256
	}
	return ""
}

func (x *OperatingSystemResource) GetProfileName() string {
	if x != nil {
		return x.ProfileName
	}
	return ""
}

func (x *OperatingSystemResource) GetProfileVersion() string {
	if x != nil {
		return x.ProfileVersion
	}
	return ""
}

func (x *OperatingSystemResource) GetInstalledPackages() string {
	if x != nil {
		return x.InstalledPackages
	}
	return ""
}

func (x *OperatingSystemResource) GetInstalledPackagesUrl() string {
	if x != nil {
		return x.InstalledPackagesUrl
	}
	return ""
}

func (x *OperatingSystemResource) GetSecurityFeature() SecurityFeature {
	if x != nil {
		return x.SecurityFeature
	}
	return SecurityFeature_SECURITY_FEATURE_UNSPECIFIED
}

func (x *OperatingSystemResource) GetOsType() OsType {
	if x != nil {
		return x.OsType
	}
	return OsType_OS_TYPE_UNSPECIFIED
}

func (x *OperatingSystemResource) GetOsProvider() OsProviderKind {
	if x != nil {
		return x.OsProvider
	}
	return OsProviderKind_OS_PROVIDER_KIND_UNSPECIFIED
}

func (x *OperatingSystemResource) GetPlatformBundle() string {
	if x != nil {
		return x.PlatformBundle
	}
	return ""
}

func (x *OperatingSystemResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OperatingSystemResource) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *OperatingSystemResource) GetExistingCvesUrl() string {
	if x != nil {
		return x.ExistingCvesUrl
	}
	return ""
}

func (x *OperatingSystemResource) GetExistingCves() string {
	if x != nil {
		return x.ExistingCves
	}
	return ""
}

func (x *OperatingSystemResource) GetFixedCvesUrl() string {
	if x != nil {
		return x.FixedCvesUrl
	}
	return ""
}

func (x *OperatingSystemResource) GetFixedCves() string {
	if x != nil {
		return x.FixedCves
	}
	return ""
}

func (x *OperatingSystemResource) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *OperatingSystemResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OperatingSystemResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_os_v1_os_proto protoreflect.FileDescriptor

var file_os_v1_os_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x65, 0x6e, 0x74, 0x2f, 0x6f, 0x70, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2f, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x69, 0x6e, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x0c,
	0x0a, 0x17, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22,
	0xba, 0x48, 0x19, 0xd8, 0x01, 0x01, 0x72, 0x14, 0x28, 0x0b, 0x32, 0x10, 0x5e, 0x6f, 0x73, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0xba, 0xa6, 0x49, 0x02,
	0x18, 0x01, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0xa6,
	0x49, 0x02, 0x08, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0c, 0x61, 0x72,
	0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74,
	0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06,
	0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xba,
	0x48, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x72, 0x03, 0x28, 0x90, 0x4e, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x25, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x23, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04,
	0x08, 0x01, 0x28, 0x01, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xba,
	0x48, 0x15, 0xd8, 0x01, 0x01, 0x72, 0x10, 0x32, 0x0b, 0x5e, 0x5b, 0x61, 0x2d, 0x66, 0x30, 0x2d,
	0x39, 0x5d, 0x2b, 0x24, 0xa0, 0x01, 0x40, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x32, 0x35, 0x36, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x00, 0x52, 0x11, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x49, 0x0a, 0x16, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xba, 0x48, 0x08, 0x72, 0x06, 0x18, 0xc8, 0x01, 0x90, 0x01, 0x01, 0xba, 0xa6, 0x49,
	0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x4b, 0x0a, 0x10, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x6f, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6f, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x6f, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01,
	0x52, 0x0a, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x0f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x64, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x42, 0xba, 0x48, 0x37, 0xd8, 0x01, 0x01, 0x72, 0x32, 0x28, 0xe8,
	0x07, 0x32, 0x2d, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f,
	0x30, 0x2d, 0x39, 0x2e, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28,
	0x29, 0x7b, 0x7d, 0x26, 0x25, 0x24, 0x60, 0x5e, 0x5c, 0x2b, 0x5c, 0x2d, 0x20, 0x5d, 0x2b, 0x24,
	0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x34, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x18, 0xf4,
	0x03, 0x32, 0x24, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2c, 0x2e,
	0x5c, 0x2d, 0x5f, 0x3a, 0x2f, 0x22, 0x5c, 0x5c, 0x20, 0x5c, 0x5c, 0x6e, 0x5c, 0x7b, 0x5c, 0x7d,
	0x5c, 0x5b, 0x5c, 0x5d, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x42, 0x0a, 0x11, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0xba, 0x48, 0x0b, 0xd8, 0x01, 0x01, 0x72, 0x06, 0x18, 0xf4, 0x03, 0x90,
	0x01, 0x01, 0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x76, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x6b, 0x0a, 0x0d, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x76, 0x65, 0x73, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x46, 0xba, 0x48, 0x3d, 0xd8, 0x01, 0x01, 0x72, 0x38, 0x18, 0xa0, 0x9c, 0x01,
	0x32, 0x32, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x2b,
	0x7e, 0x28, 0x29, 0x22, 0x5c, 0x5c, 0x20, 0x5c, 0x0a, 0x5c, 0x7b, 0x5c, 0x7d, 0x5c, 0x5b, 0x5c,
	0x5d, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x76, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x63, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xba, 0x48, 0x0b, 0xd8, 0x01, 0x01, 0x72, 0x06, 0x18, 0xf4, 0x03, 0x90, 0x01, 0x01,
	0xba, 0xa6, 0x49, 0x04, 0x08, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x76, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x65, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f,
	0x63, 0x76, 0x65, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xba, 0x48, 0x3d, 0xd8,
	0x01, 0x01, 0x72, 0x38, 0x18, 0xa0, 0x9c, 0x01, 0x32, 0x32, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40,
	0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x2b, 0x7e, 0x28, 0x29, 0x22, 0x5c, 0x5c, 0x20, 0x5c,
	0x0a, 0x5c, 0x7b, 0x5c, 0x7d, 0x5c, 0x5b, 0x5c, 0x5d, 0x5d, 0x2b, 0x24, 0xba, 0xa6, 0x49, 0x02,
	0x08, 0x01, 0x52, 0x09, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x76, 0x65, 0x73, 0x12, 0x32, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0xba, 0x48, 0x0a, 0xd8, 0x01, 0x01, 0x72, 0x05, 0x28, 0x24, 0xb0, 0x01, 0x01, 0xba,
	0xa6, 0x49, 0x04, 0x08, 0x00, 0x28, 0x01, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28, 0x01,
	0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0xba, 0xa6, 0x49, 0x1b, 0x08, 0x00, 0x28,
	0x00, 0x4a, 0x15, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x09, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x3a, 0x19, 0xb2, 0xf9, 0x03, 0x0f, 0x0a, 0x0d, 0x12, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x00, 0xba, 0xa6, 0x49, 0x02, 0x08, 0x01, 0x2a, 0x89,
	0x01, 0x0a, 0x0f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46,
	0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x39, 0x0a, 0x35, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x5f,
	0x41, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x06, 0x4f, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4d,
	0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x2a, 0x6b, 0x0a, 0x0e, 0x4f, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x53, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c, 0x45,
	0x4e, 0x4f, 0x56, 0x4f, 0x10, 0x02, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x76, 0x32, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6f, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x6f, 0x73,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_os_v1_os_proto_rawDescOnce sync.Once
	file_os_v1_os_proto_rawDescData = file_os_v1_os_proto_rawDesc
)

func file_os_v1_os_proto_rawDescGZIP() []byte {
	file_os_v1_os_proto_rawDescOnce.Do(func() {
		file_os_v1_os_proto_rawDescData = protoimpl.X.CompressGZIP(file_os_v1_os_proto_rawDescData)
	})
	return file_os_v1_os_proto_rawDescData
}

var file_os_v1_os_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_os_v1_os_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_os_v1_os_proto_goTypes = []interface{}{
	(SecurityFeature)(0),            // 0: os.v1.SecurityFeature
	(OsType)(0),                     // 1: os.v1.OsType
	(OsProviderKind)(0),             // 2: os.v1.OsProviderKind
	(*OperatingSystemResource)(nil), // 3: os.v1.OperatingSystemResource
}
var file_os_v1_os_proto_depIdxs = []int32{
	0, // 0: os.v1.OperatingSystemResource.security_feature:type_name -> os.v1.SecurityFeature
	1, // 1: os.v1.OperatingSystemResource.os_type:type_name -> os.v1.OsType
	2, // 2: os.v1.OperatingSystemResource.os_provider:type_name -> os.v1.OsProviderKind
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_os_v1_os_proto_init() }
func file_os_v1_os_proto_init() {
	if File_os_v1_os_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_os_v1_os_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatingSystemResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_os_v1_os_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_os_v1_os_proto_goTypes,
		DependencyIndexes: file_os_v1_os_proto_depIdxs,
		EnumInfos:         file_os_v1_os_proto_enumTypes,
		MessageInfos:      file_os_v1_os_proto_msgTypes,
	}.Build()
	File_os_v1_os_proto = out.File
	file_os_v1_os_proto_rawDesc = nil
	file_os_v1_os_proto_goTypes = nil
	file_os_v1_os_proto_depIdxs = nil
}
