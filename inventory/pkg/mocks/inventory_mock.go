// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/inventory/v1 (interfaces: InventoryServiceClient,InventoryServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	inventoryv1 "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/inventory/v1"
	grpc "google.golang.org/grpc"
)

// MockInventoryServiceClient is a mock of InventoryServiceClient interface.
type MockInventoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceClientMockRecorder
}

// MockInventoryServiceClientMockRecorder is the mock recorder for MockInventoryServiceClient.
type MockInventoryServiceClientMockRecorder struct {
	mock *MockInventoryServiceClient
}

// NewMockInventoryServiceClient creates a new mock instance.
func NewMockInventoryServiceClient(ctrl *gomock.Controller) *MockInventoryServiceClient {
	mock := &MockInventoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceClient) EXPECT() *MockInventoryServiceClientMockRecorder {
	return m.recorder
}

// ChangeSubscribeEvents mocks base method.
func (m *MockInventoryServiceClient) ChangeSubscribeEvents(arg0 context.Context, arg1 *inventoryv1.ChangeSubscribeEventsRequest, arg2 ...grpc.CallOption) (*inventoryv1.ChangeSubscribeEventsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeSubscribeEvents", varargs...)
	ret0, _ := ret[0].(*inventoryv1.ChangeSubscribeEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSubscribeEvents indicates an expected call of ChangeSubscribeEvents.
func (mr *MockInventoryServiceClientMockRecorder) ChangeSubscribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSubscribeEvents", reflect.TypeOf((*MockInventoryServiceClient)(nil).ChangeSubscribeEvents), varargs...)
}

// CreateResource mocks base method.
func (m *MockInventoryServiceClient) CreateResource(arg0 context.Context, arg1 *inventoryv1.CreateResourceRequest, arg2 ...grpc.CallOption) (*inventoryv1.Resource, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateResource", varargs...)
	ret0, _ := ret[0].(*inventoryv1.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockInventoryServiceClientMockRecorder) CreateResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockInventoryServiceClient)(nil).CreateResource), varargs...)
}

// DeleteAllResources mocks base method.
func (m *MockInventoryServiceClient) DeleteAllResources(arg0 context.Context, arg1 *inventoryv1.DeleteAllResourcesRequest, arg2 ...grpc.CallOption) (*inventoryv1.DeleteAllResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAllResources", varargs...)
	ret0, _ := ret[0].(*inventoryv1.DeleteAllResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllResources indicates an expected call of DeleteAllResources.
func (mr *MockInventoryServiceClientMockRecorder) DeleteAllResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllResources", reflect.TypeOf((*MockInventoryServiceClient)(nil).DeleteAllResources), varargs...)
}

// DeleteResource mocks base method.
func (m *MockInventoryServiceClient) DeleteResource(arg0 context.Context, arg1 *inventoryv1.DeleteResourceRequest, arg2 ...grpc.CallOption) (*inventoryv1.DeleteResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteResource", varargs...)
	ret0, _ := ret[0].(*inventoryv1.DeleteResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockInventoryServiceClientMockRecorder) DeleteResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockInventoryServiceClient)(nil).DeleteResource), varargs...)
}

// FindResources mocks base method.
func (m *MockInventoryServiceClient) FindResources(arg0 context.Context, arg1 *inventoryv1.FindResourcesRequest, arg2 ...grpc.CallOption) (*inventoryv1.FindResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindResources", varargs...)
	ret0, _ := ret[0].(*inventoryv1.FindResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResources indicates an expected call of FindResources.
func (mr *MockInventoryServiceClientMockRecorder) FindResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResources", reflect.TypeOf((*MockInventoryServiceClient)(nil).FindResources), varargs...)
}

// GetResource mocks base method.
func (m *MockInventoryServiceClient) GetResource(arg0 context.Context, arg1 *inventoryv1.GetResourceRequest, arg2 ...grpc.CallOption) (*inventoryv1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetResource", varargs...)
	ret0, _ := ret[0].(*inventoryv1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockInventoryServiceClientMockRecorder) GetResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockInventoryServiceClient)(nil).GetResource), varargs...)
}

// GetSitesPerRegion mocks base method.
func (m *MockInventoryServiceClient) GetSitesPerRegion(arg0 context.Context, arg1 *inventoryv1.GetSitesPerRegionRequest, arg2 ...grpc.CallOption) (*inventoryv1.GetSitesPerRegionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSitesPerRegion", varargs...)
	ret0, _ := ret[0].(*inventoryv1.GetSitesPerRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitesPerRegion indicates an expected call of GetSitesPerRegion.
func (mr *MockInventoryServiceClientMockRecorder) GetSitesPerRegion(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesPerRegion", reflect.TypeOf((*MockInventoryServiceClient)(nil).GetSitesPerRegion), varargs...)
}

// GetTreeHierarchy mocks base method.
func (m *MockInventoryServiceClient) GetTreeHierarchy(arg0 context.Context, arg1 *inventoryv1.GetTreeHierarchyRequest, arg2 ...grpc.CallOption) (*inventoryv1.GetTreeHierarchyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTreeHierarchy", varargs...)
	ret0, _ := ret[0].(*inventoryv1.GetTreeHierarchyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreeHierarchy indicates an expected call of GetTreeHierarchy.
func (mr *MockInventoryServiceClientMockRecorder) GetTreeHierarchy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeHierarchy", reflect.TypeOf((*MockInventoryServiceClient)(nil).GetTreeHierarchy), varargs...)
}

// Heartbeat mocks base method.
func (m *MockInventoryServiceClient) Heartbeat(arg0 context.Context, arg1 *inventoryv1.HeartbeatRequest, arg2 ...grpc.CallOption) (*inventoryv1.HeartbeatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Heartbeat", varargs...)
	ret0, _ := ret[0].(*inventoryv1.HeartbeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockInventoryServiceClientMockRecorder) Heartbeat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockInventoryServiceClient)(nil).Heartbeat), varargs...)
}

// ListInheritedTelemetryProfiles mocks base method.
func (m *MockInventoryServiceClient) ListInheritedTelemetryProfiles(arg0 context.Context, arg1 *inventoryv1.ListInheritedTelemetryProfilesRequest, arg2 ...grpc.CallOption) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListInheritedTelemetryProfiles", varargs...)
	ret0, _ := ret[0].(*inventoryv1.ListInheritedTelemetryProfilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInheritedTelemetryProfiles indicates an expected call of ListInheritedTelemetryProfiles.
func (mr *MockInventoryServiceClientMockRecorder) ListInheritedTelemetryProfiles(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInheritedTelemetryProfiles", reflect.TypeOf((*MockInventoryServiceClient)(nil).ListInheritedTelemetryProfiles), varargs...)
}

// ListResources mocks base method.
func (m *MockInventoryServiceClient) ListResources(arg0 context.Context, arg1 *inventoryv1.ListResourcesRequest, arg2 ...grpc.CallOption) (*inventoryv1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListResources", varargs...)
	ret0, _ := ret[0].(*inventoryv1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockInventoryServiceClientMockRecorder) ListResources(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockInventoryServiceClient)(nil).ListResources), varargs...)
}

// SubscribeEvents mocks base method.
func (m *MockInventoryServiceClient) SubscribeEvents(arg0 context.Context, arg1 *inventoryv1.SubscribeEventsRequest, arg2 ...grpc.CallOption) (inventoryv1.InventoryService_SubscribeEventsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SubscribeEvents", varargs...)
	ret0, _ := ret[0].(inventoryv1.InventoryService_SubscribeEventsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockInventoryServiceClientMockRecorder) SubscribeEvents(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockInventoryServiceClient)(nil).SubscribeEvents), varargs...)
}

// UpdateResource mocks base method.
func (m *MockInventoryServiceClient) UpdateResource(arg0 context.Context, arg1 *inventoryv1.UpdateResourceRequest, arg2 ...grpc.CallOption) (*inventoryv1.Resource, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateResource", varargs...)
	ret0, _ := ret[0].(*inventoryv1.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockInventoryServiceClientMockRecorder) UpdateResource(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockInventoryServiceClient)(nil).UpdateResource), varargs...)
}

// MockInventoryServiceServer is a mock of InventoryServiceServer interface.
type MockInventoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInventoryServiceServerMockRecorder
}

// MockInventoryServiceServerMockRecorder is the mock recorder for MockInventoryServiceServer.
type MockInventoryServiceServerMockRecorder struct {
	mock *MockInventoryServiceServer
}

// NewMockInventoryServiceServer creates a new mock instance.
func NewMockInventoryServiceServer(ctrl *gomock.Controller) *MockInventoryServiceServer {
	mock := &MockInventoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockInventoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInventoryServiceServer) EXPECT() *MockInventoryServiceServerMockRecorder {
	return m.recorder
}

// ChangeSubscribeEvents mocks base method.
func (m *MockInventoryServiceServer) ChangeSubscribeEvents(arg0 context.Context, arg1 *inventoryv1.ChangeSubscribeEventsRequest) (*inventoryv1.ChangeSubscribeEventsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSubscribeEvents", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.ChangeSubscribeEventsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSubscribeEvents indicates an expected call of ChangeSubscribeEvents.
func (mr *MockInventoryServiceServerMockRecorder) ChangeSubscribeEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSubscribeEvents", reflect.TypeOf((*MockInventoryServiceServer)(nil).ChangeSubscribeEvents), arg0, arg1)
}

// CreateResource mocks base method.
func (m *MockInventoryServiceServer) CreateResource(arg0 context.Context, arg1 *inventoryv1.CreateResourceRequest) (*inventoryv1.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockInventoryServiceServerMockRecorder) CreateResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockInventoryServiceServer)(nil).CreateResource), arg0, arg1)
}

// DeleteAllResources mocks base method.
func (m *MockInventoryServiceServer) DeleteAllResources(arg0 context.Context, arg1 *inventoryv1.DeleteAllResourcesRequest) (*inventoryv1.DeleteAllResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllResources", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.DeleteAllResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAllResources indicates an expected call of DeleteAllResources.
func (mr *MockInventoryServiceServerMockRecorder) DeleteAllResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllResources", reflect.TypeOf((*MockInventoryServiceServer)(nil).DeleteAllResources), arg0, arg1)
}

// DeleteResource mocks base method.
func (m *MockInventoryServiceServer) DeleteResource(arg0 context.Context, arg1 *inventoryv1.DeleteResourceRequest) (*inventoryv1.DeleteResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.DeleteResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockInventoryServiceServerMockRecorder) DeleteResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockInventoryServiceServer)(nil).DeleteResource), arg0, arg1)
}

// FindResources mocks base method.
func (m *MockInventoryServiceServer) FindResources(arg0 context.Context, arg1 *inventoryv1.FindResourcesRequest) (*inventoryv1.FindResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindResources", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.FindResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindResources indicates an expected call of FindResources.
func (mr *MockInventoryServiceServerMockRecorder) FindResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindResources", reflect.TypeOf((*MockInventoryServiceServer)(nil).FindResources), arg0, arg1)
}

// GetResource mocks base method.
func (m *MockInventoryServiceServer) GetResource(arg0 context.Context, arg1 *inventoryv1.GetResourceRequest) (*inventoryv1.GetResourceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.GetResourceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockInventoryServiceServerMockRecorder) GetResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockInventoryServiceServer)(nil).GetResource), arg0, arg1)
}

// GetSitesPerRegion mocks base method.
func (m *MockInventoryServiceServer) GetSitesPerRegion(arg0 context.Context, arg1 *inventoryv1.GetSitesPerRegionRequest) (*inventoryv1.GetSitesPerRegionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSitesPerRegion", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.GetSitesPerRegionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSitesPerRegion indicates an expected call of GetSitesPerRegion.
func (mr *MockInventoryServiceServerMockRecorder) GetSitesPerRegion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSitesPerRegion", reflect.TypeOf((*MockInventoryServiceServer)(nil).GetSitesPerRegion), arg0, arg1)
}

// GetTreeHierarchy mocks base method.
func (m *MockInventoryServiceServer) GetTreeHierarchy(arg0 context.Context, arg1 *inventoryv1.GetTreeHierarchyRequest) (*inventoryv1.GetTreeHierarchyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeHierarchy", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.GetTreeHierarchyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreeHierarchy indicates an expected call of GetTreeHierarchy.
func (mr *MockInventoryServiceServerMockRecorder) GetTreeHierarchy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeHierarchy", reflect.TypeOf((*MockInventoryServiceServer)(nil).GetTreeHierarchy), arg0, arg1)
}

// Heartbeat mocks base method.
func (m *MockInventoryServiceServer) Heartbeat(arg0 context.Context, arg1 *inventoryv1.HeartbeatRequest) (*inventoryv1.HeartbeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.HeartbeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockInventoryServiceServerMockRecorder) Heartbeat(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockInventoryServiceServer)(nil).Heartbeat), arg0, arg1)
}

// ListInheritedTelemetryProfiles mocks base method.
func (m *MockInventoryServiceServer) ListInheritedTelemetryProfiles(arg0 context.Context, arg1 *inventoryv1.ListInheritedTelemetryProfilesRequest) (*inventoryv1.ListInheritedTelemetryProfilesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInheritedTelemetryProfiles", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.ListInheritedTelemetryProfilesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInheritedTelemetryProfiles indicates an expected call of ListInheritedTelemetryProfiles.
func (mr *MockInventoryServiceServerMockRecorder) ListInheritedTelemetryProfiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInheritedTelemetryProfiles", reflect.TypeOf((*MockInventoryServiceServer)(nil).ListInheritedTelemetryProfiles), arg0, arg1)
}

// ListResources mocks base method.
func (m *MockInventoryServiceServer) ListResources(arg0 context.Context, arg1 *inventoryv1.ListResourcesRequest) (*inventoryv1.ListResourcesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.ListResourcesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockInventoryServiceServerMockRecorder) ListResources(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockInventoryServiceServer)(nil).ListResources), arg0, arg1)
}

// SubscribeEvents mocks base method.
func (m *MockInventoryServiceServer) SubscribeEvents(arg0 *inventoryv1.SubscribeEventsRequest, arg1 inventoryv1.InventoryService_SubscribeEventsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubscribeEvents indicates an expected call of SubscribeEvents.
func (mr *MockInventoryServiceServerMockRecorder) SubscribeEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeEvents", reflect.TypeOf((*MockInventoryServiceServer)(nil).SubscribeEvents), arg0, arg1)
}

// UpdateResource mocks base method.
func (m *MockInventoryServiceServer) UpdateResource(arg0 context.Context, arg1 *inventoryv1.UpdateResourceRequest) (*inventoryv1.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResource", arg0, arg1)
	ret0, _ := ret[0].(*inventoryv1.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateResource indicates an expected call of UpdateResource.
func (mr *MockInventoryServiceServerMockRecorder) UpdateResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResource", reflect.TypeOf((*MockInventoryServiceServer)(nil).UpdateResource), arg0, arg1)
}
