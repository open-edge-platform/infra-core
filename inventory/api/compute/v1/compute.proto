// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

package compute.v1;

import "buf/validate/validate.proto";
import "ent/opts.proto";
import "infrainv/infrainv.proto";
import "localaccount/v1/localaccount.proto";
import "location/v1/location.proto";
import "os/v1/os.proto";
import "provider/v1/provider.proto";
import "status/v1/status.proto";

option go_package = "github.com/open-edge-platform/infra-core/inventory/v2/pkg/api/compute/v1;computev1";

// This file contains the proto definitions of both the host, instance and workload components.
// They need to be as part of the same package to allow back-references between them.

// --------------------------------------------------- Host Resources --------------------------------------------------
enum HostState {
  HOST_STATE_UNSPECIFIED = 0;
  reserved 1; // Previously HOST_STATE_DELETING, removed in v3.1
  HOST_STATE_DELETED = 2;
  HOST_STATE_ONBOARDED = 3;
  HOST_STATE_UNTRUSTED = 4;
  HOST_STATE_REGISTERED = 5;
}

enum PowerState {
  POWER_STATE_UNSPECIFIED = 0;
  reserved 1; // Previously POWER_STATE_ERROR, removed in v3.1
  POWER_STATE_ON = 2;
  POWER_STATE_OFF = 3;
  POWER_STATE_SLEEP = 4;
  POWER_STATE_HIBERNATE = 5;
  POWER_STATE_RESET = 6;
}

enum PowerCommandPolicy {
  POWER_COMMAND_POLICY_UNSPECIFIED = 0;
  POWER_COMMAND_POLICY_IMMEDIATE = 1;
  POWER_COMMAND_POLICY_ORDERED = 2;
}

enum BaremetalControllerKind {
  BAREMETAL_CONTROLLER_KIND_UNSPECIFIED = 0;
  BAREMETAL_CONTROLLER_KIND_NONE = 1;
  BAREMETAL_CONTROLLER_KIND_IPMI = 2;
  BAREMETAL_CONTROLLER_KIND_VPRO = 3;
  BAREMETAL_CONTROLLER_KIND_PDU = 4;
}

enum AmtState {
  AMT_STATE_UNSPECIFIED = 0;
  AMT_STATE_PROVISIONED = 1;
  AMT_STATE_UNPROVISIONED = 2;
  AMT_STATE_DISCONNECTED = 3;
}

message HostResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: true
        fields: ["uuid"]
        partialIndexCondition: "uuid IS NOT NULL"
      },
      {
        unique: true
        fields: ["serial_number"]
        partialIndexCondition: "uuid IS NULL"
      },
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };
  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^host-[0-9a-f]{8}$"
      max_bytes: 13
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create
  string kind = 2 [(ent.field) = {optional: true}]; // Kind of resource. Frequently tied to Provider
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of host

  HostState desired_state = 4 [(ent.field) = {optional: true}];
  HostState current_state = 5 [(ent.field) = {optional: true}];
  location.v1.SiteResource site = 8 [(ent.edge) = {unique: true}]; // Site this VM is located at
  provider.v1.ProviderResource provider = 9 [(ent.edge) = {unique: true}]; // Provider this host is onboarded through

  reserved 10; // Reserve for Project edge
  reserved 11; // Reserve for User edge

  string note = 13 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {
      min_len: 1
      max_len: 512
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // user-provided reason for change or a freeform field

  // FIXME: add validation rules on the below items
  string hardware_kind = 15 [(ent.field) = {optional: true}]; // type such as "XSPgen3", "XDgen2", "CI7gen12"
  string serial_number = 16 [(ent.field) = {optional: true}]; // SMBIOS device Serial Number
  string uuid = 17 [
    (ent.field) = {
      unique: true
      optional: true
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // SMBIOS device UUID. See pages 37-38 of https://www.dmtf.org/sites/default/files/standards/documents/DSP0134_3.6.0.pdf
  uint64 memory_bytes = 18 [(ent.field) = {optional: true}]; // Quantity of memory (RAM) in the system in bytes.
  string cpu_model = 19 [(ent.field) = {optional: true}]; // CPU model of the Host
  uint32 cpu_sockets = 20 [(ent.field) = {optional: true}]; // Number of physical CPU sockets
  uint32 cpu_cores = 21 [(ent.field) = {optional: true}]; // Number of CPU cores
  string cpu_capabilities = 22 [(ent.field) = {optional: true}]; // String list of all CPU capabilities (possibly JSON)
  string cpu_architecture = 23 [(ent.field) = {optional: true}]; // Architecture of the CPU model, e.g. x86_64
  uint32 cpu_threads = 24 [(ent.field) = {optional: true}]; // Total Number of threads supported by the CPU
  string cpu_topology = 25 [(ent.field) = {optional: true}]; // JSON field storing the CPU topology, refer to HDA/HRM docs for the JSON schema.

  string mgmt_ip = 30 [(ent.field) = {optional: true}]; // IP address of management network

  BaremetalControllerKind bmc_kind = 34 [(ent.field) = {optional: true}]; // Kind of BMC
  string bmc_ip = 35 [(ent.field) = {optional: true}]; // BMC IP address, such as "192.0.0.1"
  string bmc_username = 36 [(ent.field) = {optional: true}]; // BMC user name, such as "admin"
  string bmc_password = 37 [(ent.field) = {optional: true}]; // BMC password, such as "admin"
  string pxe_mac = 38 [(ent.field) = {optional: true}]; // MAC address for PXE boot

  string hostname = 43 [(ent.field) = {optional: true}]; // Hostname
  string product_name = 44 [(ent.field) = {optional: true}]; // System Product Name
  string bios_version = 46 [(ent.field) = {optional: true}]; // BIOS Version
  string bios_release_date = 47 [(ent.field) = {optional: true}]; // BIOS Release Date
  string bios_vendor = 48 [(ent.field) = {optional: true}]; // BIOS Vendor

  string metadata = 45 [(ent.field) = {optional: true}]; // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]

  // Power management related fields
  PowerState desired_power_state = 50 [(ent.field) = {optional: true}]; // Desired power state of the host
  PowerState current_power_state = 51 [(ent.field) = {optional: true}]; // Current power state of the host
  // A group of fields describing the Power status at runtime. The following 3 fields should always be updated in one shot.
  // If power_status is empty during initialization, it is automatically set to a Unknown value.
  string power_status = 52 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the runtime status of Host power. Set by DM RM only.
  status.v1.StatusIndication power_status_indicator = 53 [(ent.field) = {optional: true}]; // Indicates dynamicity of the power_status. Set by DM RM only.
  uint64 power_status_timestamp = 54 [(ent.field) = {optional: true}]; // UTC timestamp when power_status was last changed. Set by DM RM only.
  PowerCommandPolicy power_command_policy = 55 [(ent.field) = {optional: true}]; // Power command policy of the host. By default, it is set to PowerCommandPolicy.POWER_COMMAND_POLICY_ORDERED.
  uint64 power_on_time = 56 [(ent.field) = {optional: true}]; // UTC timestamp when the host was powered on. Set by DM RM only.

  // A group of fields describing the Host runtime status. host_status, host_status_indicator and
  // host_status_timestamp should always be updated in one shot. If host_status is empty during initialization,
  // it is automatically set to a default value.
  string host_status = 60 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the runtime status of Host. Set by RMs only.
  status.v1.StatusIndication host_status_indicator = 61 [(ent.field) = {optional: true}]; // Indicates interpretation of host_status. Set by RMs only.
  uint64 host_status_timestamp = 62 [(ent.field) = {optional: true}]; // UTC timestamp when host_status was last changed. Set by RMs only.

  // A group of fields describing the Host onboarding status. onboarding_status, onboarding_status_indicator and
  // onboarding_status_timestamp should always be updated in one shot. If onboarding_status is empty during initialization,
  // it is automatically set to a default value.
  string onboarding_status = 63 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the onboarding status of Host. Set by RMs only.
  status.v1.StatusIndication onboarding_status_indicator = 64 [(ent.field) = {optional: true}]; // Indicates interpretation of onboarding_status. Set by RMs only.
  uint64 onboarding_status_timestamp = 65 [(ent.field) = {optional: true}]; // UTC timestamp when onboarding_status was last changed. Set by RMs only.

  // A group of fields describing the Host registration status. registration_status, registration_status_indicator and
  // registration_status_timestamp should always be updated in one shot. If registration_status is empty during initialization,
  // it is automatically set to a default value.
  string registration_status = 66 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the onboarding status of Host. Set by RMs only.
  status.v1.StatusIndication registration_status_indicator = 67 [(ent.field) = {optional: true}]; // Indicates interpretation of registration_status. Set by RMs only.
  uint64 registration_status_timestamp = 68 [(ent.field) = {optional: true}]; // UTC timestamp when registration_status was last changed. Set by RMs only.

  repeated HoststorageResource host_storages = 70 [(ent.edge) = {ref: "host"}]; // Back-reference to attached host storage resources. This edge is read-only.
  repeated HostnicResource host_nics = 71 [(ent.edge) = {ref: "host"}]; // Back-reference to attached host NIC resources. This edge is read-only.
  repeated HostusbResource host_usbs = 72 [(ent.edge) = {ref: "host"}]; // Back-reference to attached host USB resources. This edge is read-only.
  repeated HostgpuResource host_gpus = 73 [(ent.edge) = {ref: "host"}]; // Back-reference to attached host GPU resources. This edge is read-only.

  InstanceResource instance = 90 [(ent.edge) = {
    unique: true
    ref: "host"
  }]; // back-reference to baremetal Instance associated to this host

  string amt_sku = 91 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 96},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // coming from device introspection
  AmtState desired_amt_state = 92 [(ent.field) = {optional: true}]; // Desired AMT/vPRO state of the host
  AmtState current_amt_state = 93 [(ent.field) = {optional: true}]; // Current AMT/vPRO state of the host
  // A group of fields describing the AMT status. amt_status, amt_status_indicator and
  // amt_status_timestamp should always be updated in one shot. If amt_status is empty during initialization,
  // it is automatically set to a Unknown value.
  string amt_status = 94 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the AMT status of Host. Set by DM RM only.
  status.v1.StatusIndication amt_status_indicator = 95 [(ent.field) = {optional: true}]; // Indicates dynamicity of the amt_status. Set by DM and OM RM only.
  uint64 amt_status_timestamp = 96 [(ent.field) = {optional: true}]; // UTC timestamp when amt_status was last changed. Set by DM and OM RM only.

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

enum HostComponentState {
  HOST_COMPONENT_STATE_UNSPECIFIED = 0;
  HOST_COMPONENT_STATE_ERROR = 1;
  HOST_COMPONENT_STATE_DELETED = 2;
  HOST_COMPONENT_STATE_EXISTS = 3;
}

message HoststorageResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^hoststorage-[0-9a-f]{8}$"
      max_bytes: 20
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID
  string kind = 2 [(ent.field) = {optional: true}]; // Kind of resource. Frequently tied to Provider

  string provider_status = 6 [(ent.field) = {optional: true}]; // current status of the resource according to the provider

  reserved 8 to 10; // Reserve these numbers for Site, Provider and Project edges

  HostResource host = 12 [(ent.edge) = {
    unique: true
    required: true
  }]; // The Host where this storage device is installed

  // FIXME: better validation of the below values
  string wwid = 16 [(ent.field) = {optional: true}]; // The storage device unique identifier.
  string serial = 17 [(ent.field) = {optional: true}]; // The storage device unique serial number.
  string vendor = 18 [(ent.field) = {optional: true}]; // The Storage device vendor
  string model = 19 [(ent.field) = {optional: true}]; // The storage device model string
  uint64 capacity_bytes = 20 [(ent.field) = {optional: true}]; // The storage device Capacity (size) in bytes
  string device_name = 21 [(ent.field) = {optional: true}]; // The storage device device name (OS provided, like sda, sdb, etc.)

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

enum NetworkInterfaceLinkState {
  NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED = 0;
  NETWORK_INTERFACE_LINK_STATE_UP = 1;
  NETWORK_INTERFACE_LINK_STATE_DOWN = 2;
}

message HostnicResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^hostnic-[0-9a-f]{8}$"
      max_bytes: 16
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID
  string kind = 2 [(ent.field) = {optional: true}]; // Kind of resource. Frequently tied to Provider

  string provider_status = 6 [(ent.field) = {optional: true}]; // current status of the resource according to the provider

  reserved 8 to 10; // Reserve these numbers for Site, Provider and Project edges

  HostResource host = 12 [(ent.edge) = {
    unique: true
    required: true
  }]; // The Host where this NIC is installed

  // FIXME: Better validation on fields below
  string device_name = 16 [(ent.field) = {optional: true}]; // the device name (OS provided, like eth0, enp1s0, etc.)
  string pci_identifier = 17 [(ent.field) = {optional: true}]; // PCI identifier string for this network interface
  string mac_addr = 18 [(ent.field) = {optional: true}]; // MAC address
  bool sriov_enabled = 19 [(ent.field) = {optional: true}]; // has SRIOV
  uint32 sriov_vfs_num = 20 [(ent.field) = {optional: true}]; // The number of VFs currently provisioned on the interface, if SR-IOV is supported
  uint32 sriov_vfs_total = 31 [(ent.field) = {optional: true}]; // The maximum number of VFs the interface supports, if SR-IOV is supported.

  string peer_name = 21 [(ent.field) = {optional: true}]; // the neighbor device (the other side of the link), collecting via LLDP
  string peer_description = 22 [(ent.field) = {optional: true}]; // the neighbor device description
  string peer_mac = 23 [(ent.field) = {optional: true}]; // the neighbor device MAC address
  string peer_mgmt_ip = 24 [(ent.field) = {optional: true}]; // the neighbor device management IP address
  string peer_port = 25 [(ent.field) = {optional: true}]; // the neighbor device port number

  string supported_link_mode = 26 [(ent.field) = {optional: true}]; // the link mode supported by this interface, comma separated
  string advertising_link_mode = 27 [(ent.field) = {optional: true}]; // the link mode advertising by this interface
  uint64 current_speed_bps = 28 [(ent.field) = {optional: true}]; // the current speed of this interface
  string current_duplex = 29 [(ent.field) = {optional: true}]; // the current duplex of this interface
  string features = 30 [(ent.field) = {optional: true}]; // the features of this interface, comma separated

  uint32 mtu = 40 [(ent.field) = {optional: true}]; // Maximum transmission unit of the interface
  NetworkInterfaceLinkState link_state = 41 [(ent.field) = {optional: true}]; // link state of this interface
  bool bmc_interface = 43 [(ent.field) = {optional: true}]; // whether this is a bmc interface or not

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

message HostusbResource { // A USB resource
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^hostusb-[0-9a-f]{8}$"
      max_bytes: 20
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID
  string kind = 2 [(ent.field) = {optional: true}]; // Kind of resource.

  HostResource host = 8 [(ent.edge) = {
    unique: true
    required: true
  }]; // The Host where this USB device is installed
  string owner_id = 9 [(ent.field) = {optional: true}]; // VM or container this usb device allocated to

  // FIXME: better validation of the below values
  string idvendor = 10 [(ent.field) = {optional: true}]; // Hexadecimal number representing ID of the USB device vendor
  string idproduct = 11 [(ent.field) = {optional: true}]; // Hexadecimal number representing ID of the USB device product
  uint32 bus = 12 [(ent.field) = {optional: true}]; // Bus number of device connected with
  uint32 addr = 13 [(ent.field) = {optional: true}]; // USB Device number assigned by OS.

  string class = 20 [(ent.field) = {optional: true}]; // class defined by USB-IF
  string serial = 21 [(ent.field) = {optional: true}]; // Serial number of device
  string device_name = 22 [(ent.field) = {optional: true}]; // the OS-provided device name

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

message HostgpuResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^hostgpu-[0-9a-f]{8}$"
      max_bytes: 16
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Resource ID

  HostResource host = 10 [(ent.edge) = {
    unique: true
    required: true
  }]; // Host this GPU device is installed in

  string pci_id = 20 [(ent.field) = {optional: true}]; // The GPU device PCI identifier
  string product = 21 [(ent.field) = {optional: true}]; // The GPU device model
  string vendor = 22 [(ent.field) = {optional: true}]; // The GPU device vendor
  string description = 23 [(ent.field) = {optional: true}]; // The human-readable GPU device description
  string device_name = 24 [(ent.field) = {optional: true}]; // GPU name as reported by OS
  string features = 25 [(ent.field) = {optional: true}]; // The features of this GPU device, comma separated

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
// ---------------------------------------------------------------------------------------------------------------------

// --------------------------------------------- Instance Resources ----------------------------------------------------
enum InstanceState {
  INSTANCE_STATE_UNSPECIFIED = 0; // unconfigured
  INSTANCE_STATE_RUNNING = 1; // OS is Running
  INSTANCE_STATE_DELETED = 2; // OS should be Deleted
  INSTANCE_STATE_UNTRUSTED = 3; // OS should not be trusted anymore
}

enum InstanceKind {
  INSTANCE_KIND_UNSPECIFIED = 0;
  INSTANCE_KIND_VM = 1;
  INSTANCE_KIND_METAL = 2;
}

// InstanceResource describes an instantiated OS install, running on either a
// host or hypervisor.
message InstanceResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^inst-[0-9a-f]{8}$"
      max_bytes: 13
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create.
  InstanceKind kind = 2 [(ent.field) = {optional: true}]; // Kind of resource. Frequently tied to Provider.
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of Instance
  InstanceState desired_state = 4 [(ent.field) = {optional: true}];
  InstanceState current_state = 5 [(ent.field) = {optional: true}];
  uint64 vm_memory_bytes = 6 [(ent.field) = {optional: true}]; // Quantity of memory in the system, in bytes. Only applicable to VM instances.
  uint32 vm_cpu_cores = 7 [(ent.field) = {optional: true}]; // Number of CPU cores. Only applicable to VM instances.
  uint64 vm_storage_bytes = 8 [(ent.field) = {optional: true}]; // Storage quantity (primary), in bytes. Only applicable to VM instances.
  HostResource host = 9 [(ent.edge) = {unique: true}]; // Host this Instance is placed on. Only applicable to baremetal instances.
  reserved 10; // Reserve for User edge

  os.v1.OperatingSystemResource desired_os = 11 [(ent.edge) = {
    unique: true
    required: true
  }]; // OS resource that should be installed to this Instance.

  os.v1.OperatingSystemResource current_os = 25 [(ent.edge) = {
    unique: true
    required: false
  }]; // OS resource that is currently installed for this Instance.

  os.v1.SecurityFeature security_feature = 14 [(ent.field) = {
    optional: true
    immutable: true
  }]; // Select to enable security features such as Secure Boot (SB) and Full Disk Encryption (FDE).

  // A group of fields describing the Instance runtime status. instance_status, instance_status_indicator and
  // instance_status_timestamp should always be updated in one shot. If instance_status is empty during initialization,
  // it is automatically set to a default value.
  string instance_status = 15 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the current instance status. Set by RMs only.
  status.v1.StatusIndication instance_status_indicator = 16 [(ent.field) = {optional: true}]; // Indicates interpretation of instance_status. Set by RMs only.
  uint64 instance_status_timestamp = 17 [(ent.field) = {optional: true}]; // UTC timestamp when instance_status was last changed. Set by RMs only.

  // A group of fields describing the Instance provisioning status. provisioning_status, provisioning_status_indicator and
  // provisioning_status_timestamp should always be updated in one shot. If provisioning_status is empty during initialization,
  // it is automatically set to a default value.
  string provisioning_status = 18 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the provisioning status of Instance. Set by RMs only.
  status.v1.StatusIndication provisioning_status_indicator = 19 [(ent.field) = {optional: true}]; // Indicates interpretation of provisioning_status. Set by RMs only.
  uint64 provisioning_status_timestamp = 20 [(ent.field) = {optional: true}]; // UTC timestamp when provisioning_status was last changed. Set by RMs only.

  // A group of fields describing the Instance update status. update_status, update_status_indicator and
  // update_status_timestamp should always be updated in one shot. update_status_detail should be populated when update status reports update finished successfully or failed.
  // If update_status is empty during initialization, it is automatically set to a default value.
  string update_status = 21 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the update status of Instance. Set by RMs only.
  status.v1.StatusIndication update_status_indicator = 22 [(ent.field) = {optional: true}]; // Indicates interpretation of update_status. Set by RMs only.
  uint64 update_status_timestamp = 23 [(ent.field) = {optional: true}]; // UTC timestamp when update_status was last changed. Set by RMs only.
  string update_status_detail = 24 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 100000},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // JSON field storing details of Instance update status. Set by RMs only. Beta, subject to change.

  // A group of fields describing the Instance trusted_attestation status.
  // trusted_attestation_status, trusted_attestation_status_indicator and
  // trusted_attestation_status_timestamp should always be updated in one shot.
  // If trusted_attestation_status is empty during initialization, it is automatically set to a default value.
  string trusted_attestation_status = 26 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 1024},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that describes the trusted_attestation status of Instance. Set by RMs only.
  status.v1.StatusIndication trusted_attestation_status_indicator = 27 [(ent.field) = {optional: true}]; // Indicates interpretation of trusted_attestation_status. Set by RMs only.
  uint64 trusted_attestation_status_timestamp = 28 [(ent.field) = {optional: true}]; // UTC timestamp when trusted_attestation_status was last changed. Set by RMs only.

  repeated WorkloadMember workload_members = 30 [(ent.edge) = {ref: "instance"}]; // back-reference to the Workload Members associated to this Instance
  provider.v1.ProviderResource provider = 40 [(ent.edge) = {unique: true}]; // Provider this Instance is provisioned through
  localaccount.v1.LocalAccountResource localaccount = 41 [(ent.edge) = {unique: true}]; // Local Account associated with this Instance

  OSUpdatePolicyResource os_update_policy = 42 [(ent.edge) = {
    unique: true
    required: false
  }]; // OS Update Policy associated with this Instance.

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string instance_status_detail = 101 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {
      max_len: 1024
      pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // textual message that gives detailed status of the instance's software components.

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
// ---------------------------------------------------------------------------------------------------------------------

// --------------------------------------------- Workload Resources ----------------------------------------------------
// Represents the Workload state, used for both current and desired state.
enum WorkloadState {
  WORKLOAD_STATE_UNSPECIFIED = 0;
  WORKLOAD_STATE_ERROR = 1;
  WORKLOAD_STATE_DELETING = 2;
  WORKLOAD_STATE_DELETED = 3;
  WORKLOAD_STATE_PROVISIONED = 4;
}

// Represents the type of workload (e.g., cluster, DHCP, DNS...).
enum WorkloadKind {
  WORKLOAD_KIND_UNSPECIFIED = 0; // Should never be used
  WORKLOAD_KIND_CLUSTER = 1;
  WORKLOAD_KIND_DHCP = 2; // currently unused, but useful to test 2-phase delete
}

// Represents a generic way to group compute resources (e.g., cluster, DHCP...).
message WorkloadResource {
  option (ent.schema) = {gen: true};
  option (infrainv.schemaExtension) = {
    indexes: [
      {
        unique: true
        fields: [
          "external_id",
          "tenant_id"
        ]
      },
      {
        unique: false
        fields: ["tenant_id"]
      }
    ]
  };
  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^workload-[0-9a-f]{8}$"
      max_bytes: 17
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create

  WorkloadKind kind = 2 [(ent.field) = {optional: false}]; // Type of workload
  string name = 3 [(ent.field) = {optional: true}]; // user-provided, human-readable name of workload
  string external_id = 5 [
    (ent.field) = {optional: true},
    (buf.validate.field).string = {max_bytes: 40},
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Edge towards a resource that sits outside infra realm (for example, ID of the Cluster managed by cluster orchestrator). We don't enforce any pattern, but the max length of the field is 40 chars.

  WorkloadState desired_state = 10 [(ent.field) = {optional: false}];
  WorkloadState current_state = 11 [(ent.field) = {optional: true}];

  string status = 15 [(ent.field) = {optional: true}]; // Human-readable status of the workload

  repeated WorkloadMember members = 20 [(ent.edge) = {ref: "workload"}]; // Should not be used to set members

  string metadata = 30 [(ent.field) = {optional: true}]; // Record metadata with format as json string. Example: [{"key":"cluster-name","value":""},{"key":"app-id","value":""}]

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}

// Represents the type of the workload member.
enum WorkloadMemberKind {
  WORKLOAD_MEMBER_KIND_UNSPECIFIED = 0; // Should never be used
  WORKLOAD_MEMBER_KIND_CLUSTER_NODE = 1; // Node of a cluster workload
  // TODO: add new kinds when we extend workload kinds
}

// Intermediate resource to represent a relation between a workload and a compute resource (i.e., instance).
message WorkloadMember {
  option (ent.schema) = {gen: true};

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^workloadmember-[0-9a-f]{8}$"
      max_bytes: 23
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create

  WorkloadMemberKind kind = 2 [(ent.field) = {optional: false}]; // Type of member

  WorkloadResource workload = 10 [(ent.edge) = {
    unique: true
    required: true
  }];
  InstanceResource instance = 11 [(ent.edge) = {
    unique: true
    required: true
  }];

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
// ---------------------------------------------------------------------------------------------------------------------

// UPDATE_POLICY_LATEST:
// - for mutable: unsupported
// - for immutable: latest version of the OS Resource
// UPDATE_POLICY_TARGET:
// - for mutable: apply the install_packages, update_sources, kernel_command
// - for immutable: install the version referenced by target_os
enum UpdatePolicy {
  UPDATE_POLICY_UNSPECIFIED = 0; // Should never be used
  UPDATE_POLICY_LATEST = 1; // Upgrade to latest version
  UPDATE_POLICY_TARGET = 2; // Upgrade to the target version
}

message OSUpdatePolicyResource {
  option (ent.schema) = {gen: true};

  string resource_id = 1 [
    (ent.field) = {unique: true},
    (buf.validate.field).string = {
      pattern: "^osupdatepolicy-[0-9a-f]{8}$"
      max_bytes: 23
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // resource ID, generated by inventory on Create

  string name = 2 [
    (ent.field) = {
      immutable: false
      optional: false
    },
    (buf.validate.field).string = {
      max_bytes: 50
      pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
    }
  ]; // User-provided, human-readable name of OSUpdatePolicy

  string description = 3 [
    (ent.field) = {
      immutable: false
      optional: true
    },
    (buf.validate.field).string = {
      max_bytes: 200
      pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
    }
  ];

  string install_packages = 4 [
    (ent.field) = {
      immutable: true
      optional: true
    },
    (buf.validate.field).string = {
      pattern: "^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\" \\\n]+$"
      max_len: 500000
    }
  ]; // Freeform text, OS-dependent. A list of package names, one per line (newline separated). Should not contain version info. Applies only to Mutable OSes.

  repeated string update_sources = 5 [
    (ent.field) = {
      immutable: true
      optional: true
    },
    (buf.validate.field).repeated.items.string = {
      pattern: "^$|^[a-zA-Z-_0-9./:;=@?!#,<>*+()\" \\\n]+$"
      max_bytes: 10000
    }
  ]; // OS Update Sources. Should be in 'DEB822 Source Format' for Debian style OSs. Applies only to Mutable OSes.

  string kernel_command = 6 [
    (ent.field) = {
      immutable: true
      optional: true
    },
    (buf.validate.field).string = {
      pattern: "^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\" ]+$"
      max_len: 500
    }
  ]; // Kernel Command Line Options. Applies only to Mutable OSes.

  os.v1.OperatingSystemResource target_os = 50 [(ent.edge) = {
    unique: true
    required: false
  }]; // OS resource that should be installed to this Instance. Applies only to Immutable OSes for A/B upgrades. The field is immutable.

  UpdatePolicy update_policy = 60 [(ent.field) = {
    immutable: true
    optional: true
  }]; // Update Policy for the OS update. This field is used to determine the update policy for the OS update.

  string tenant_id = 100 [
    (ent.field) = {
      immutable: true
      optional: false
    },
    (buf.validate.field).string = {
      uuid: true
      max_bytes: 36
    },
    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
  ]; // Tenant Identifier

  string created_at = 200 [(ent.field) = {
    immutable: true
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Creation timestamp

  string updated_at = 201 [(ent.field) = {
    // The field immutable from API perspective, will be changed internally in the hooks.
    immutable: false
    optional: false
    schema_type: [
      {
        key: "postgres"
        value: "TIMESTAMP"
      }
    ]
  }]; // Update timestamp
}
// ---------------------------------------------------------------------------------------------------------------------
