// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/v1/services.proto

package servicesv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRegionRequestMultiError, or nil if none found.
func (m *CreateRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRegionRequestValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRegionRequestValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRegionRequestValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRegionRequestMultiError(errors)
	}

	return nil
}

// CreateRegionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRegionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRegionRequestMultiError) AllErrors() []error { return m }

// CreateRegionRequestValidationError is the validation error returned by
// CreateRegionRequest.Validate if the designated constraints aren't met.
type CreateRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegionRequestValidationError) ErrorName() string {
	return "CreateRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegionRequestValidationError{}

// Validate checks the field values on CreateRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRegionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRegionResponseMultiError, or nil if none found.
func (m *CreateRegionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRegionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRegionResponseValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRegionResponseValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRegionResponseValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRegionResponseMultiError(errors)
	}

	return nil
}

// CreateRegionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateRegionResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateRegionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRegionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRegionResponseMultiError) AllErrors() []error { return m }

// CreateRegionResponseValidationError is the validation error returned by
// CreateRegionResponse.Validate if the designated constraints aren't met.
type CreateRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegionResponseValidationError) ErrorName() string {
	return "CreateRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegionResponseValidationError{}

// Validate checks the field values on GetRegionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRegionRequestMultiError, or nil if none found.
func (m *GetRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetRegionRequestMultiError(errors)
	}

	return nil
}

// GetRegionRequestMultiError is an error wrapping multiple validation errors
// returned by GetRegionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegionRequestMultiError) AllErrors() []error { return m }

// GetRegionRequestValidationError is the validation error returned by
// GetRegionRequest.Validate if the designated constraints aren't met.
type GetRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegionRequestValidationError) ErrorName() string { return "GetRegionRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegionRequestValidationError{}

// Validate checks the field values on GetRegionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRegionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRegionResponseMultiError, or nil if none found.
func (m *GetRegionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRegionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRegionResponseValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRegionResponseValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRegionResponseValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRegionResponseMultiError(errors)
	}

	return nil
}

// GetRegionResponseMultiError is an error wrapping multiple validation errors
// returned by GetRegionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRegionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRegionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRegionResponseMultiError) AllErrors() []error { return m }

// GetRegionResponseValidationError is the validation error returned by
// GetRegionResponse.Validate if the designated constraints aren't met.
type GetRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRegionResponseValidationError) ErrorName() string {
	return "GetRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRegionResponseValidationError{}

// Validate checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsRequestMultiError, or nil if none found.
func (m *ListRegionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListRegionsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListRegionsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListRegionsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListRegionsRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListRegionsRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListRegionsRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListRegionsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListRegionsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for ShowTotalSites

	if len(errors) > 0 {
		return ListRegionsRequestMultiError(errors)
	}

	return nil
}

// ListRegionsRequestMultiError is an error wrapping multiple validation errors
// returned by ListRegionsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRegionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsRequestMultiError) AllErrors() []error { return m }

// ListRegionsRequestValidationError is the validation error returned by
// ListRegionsRequest.Validate if the designated constraints aren't met.
type ListRegionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsRequestValidationError) ErrorName() string {
	return "ListRegionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsRequestValidationError{}

var _ListRegionsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListRegionsRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRegionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRegionsResponseMultiError, or nil if none found.
func (m *ListRegionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRegionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRegions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRegionsResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRegionsResponseValidationError{
						field:  fmt.Sprintf("Regions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRegionsResponseValidationError{
					field:  fmt.Sprintf("Regions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListRegionsResponseMultiError(errors)
	}

	return nil
}

// ListRegionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListRegionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListRegionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRegionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRegionsResponseMultiError) AllErrors() []error { return m }

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on UpdateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRegionRequestMultiError, or nil if none found.
func (m *UpdateRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRegionRequestValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRegionRequestValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionRequestValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRegionRequestMultiError(errors)
	}

	return nil
}

// UpdateRegionRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRegionRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRegionRequestMultiError) AllErrors() []error { return m }

// UpdateRegionRequestValidationError is the validation error returned by
// UpdateRegionRequest.Validate if the designated constraints aren't met.
type UpdateRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRegionRequestValidationError) ErrorName() string {
	return "UpdateRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRegionRequestValidationError{}

// Validate checks the field values on PatchRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchRegionRequestMultiError, or nil if none found.
func (m *PatchRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchRegionRequestValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchRegionRequestValidationError{
					field:  "Region",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchRegionRequestValidationError{
				field:  "Region",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchRegionRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchRegionRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchRegionRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchRegionRequestMultiError(errors)
	}

	return nil
}

// PatchRegionRequestMultiError is an error wrapping multiple validation errors
// returned by PatchRegionRequest.ValidateAll() if the designated constraints
// aren't met.
type PatchRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchRegionRequestMultiError) AllErrors() []error { return m }

// PatchRegionRequestValidationError is the validation error returned by
// PatchRegionRequest.Validate if the designated constraints aren't met.
type PatchRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchRegionRequestValidationError) ErrorName() string {
	return "PatchRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchRegionRequestValidationError{}

// Validate checks the field values on DeleteRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRegionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRegionRequestMultiError, or nil if none found.
func (m *DeleteRegionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRegionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteRegionRequestMultiError(errors)
	}

	return nil
}

// DeleteRegionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRegionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRegionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRegionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRegionRequestMultiError) AllErrors() []error { return m }

// DeleteRegionRequestValidationError is the validation error returned by
// DeleteRegionRequest.Validate if the designated constraints aren't met.
type DeleteRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegionRequestValidationError) ErrorName() string {
	return "DeleteRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegionRequestValidationError{}

// Validate checks the field values on DeleteRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRegionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRegionResponseMultiError, or nil if none found.
func (m *DeleteRegionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRegionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRegionResponseMultiError(errors)
	}

	return nil
}

// DeleteRegionResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteRegionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteRegionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRegionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRegionResponseMultiError) AllErrors() []error { return m }

// DeleteRegionResponseValidationError is the validation error returned by
// DeleteRegionResponse.Validate if the designated constraints aren't met.
type DeleteRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegionResponseValidationError) ErrorName() string {
	return "DeleteRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegionResponseValidationError{}

// Validate checks the field values on CreateSiteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSiteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSiteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSiteRequestMultiError, or nil if none found.
func (m *CreateSiteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSiteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSiteRequestValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSiteRequestValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSiteRequestValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSiteRequestMultiError(errors)
	}

	return nil
}

// CreateSiteRequestMultiError is an error wrapping multiple validation errors
// returned by CreateSiteRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateSiteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSiteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSiteRequestMultiError) AllErrors() []error { return m }

// CreateSiteRequestValidationError is the validation error returned by
// CreateSiteRequest.Validate if the designated constraints aren't met.
type CreateSiteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSiteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSiteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSiteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSiteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSiteRequestValidationError) ErrorName() string {
	return "CreateSiteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSiteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSiteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSiteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSiteRequestValidationError{}

// Validate checks the field values on CreateSiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSiteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSiteResponseMultiError, or nil if none found.
func (m *CreateSiteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSiteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSiteResponseValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSiteResponseValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSiteResponseValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSiteResponseMultiError(errors)
	}

	return nil
}

// CreateSiteResponseMultiError is an error wrapping multiple validation errors
// returned by CreateSiteResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateSiteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSiteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSiteResponseMultiError) AllErrors() []error { return m }

// CreateSiteResponseValidationError is the validation error returned by
// CreateSiteResponse.Validate if the designated constraints aren't met.
type CreateSiteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSiteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSiteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSiteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSiteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSiteResponseValidationError) ErrorName() string {
	return "CreateSiteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSiteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSiteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSiteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSiteResponseValidationError{}

// Validate checks the field values on GetSiteRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSiteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSiteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSiteRequestMultiError,
// or nil if none found.
func (m *GetSiteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSiteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetSiteRequestMultiError(errors)
	}

	return nil
}

// GetSiteRequestMultiError is an error wrapping multiple validation errors
// returned by GetSiteRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSiteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSiteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSiteRequestMultiError) AllErrors() []error { return m }

// GetSiteRequestValidationError is the validation error returned by
// GetSiteRequest.Validate if the designated constraints aren't met.
type GetSiteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSiteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSiteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSiteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSiteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSiteRequestValidationError) ErrorName() string { return "GetSiteRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSiteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSiteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSiteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSiteRequestValidationError{}

// Validate checks the field values on GetSiteResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSiteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSiteResponseMultiError, or nil if none found.
func (m *GetSiteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSiteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSiteResponseValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSiteResponseValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSiteResponseValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSiteResponseMultiError(errors)
	}

	return nil
}

// GetSiteResponseMultiError is an error wrapping multiple validation errors
// returned by GetSiteResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSiteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSiteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSiteResponseMultiError) AllErrors() []error { return m }

// GetSiteResponseValidationError is the validation error returned by
// GetSiteResponse.Validate if the designated constraints aren't met.
type GetSiteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSiteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSiteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSiteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSiteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSiteResponseValidationError) ErrorName() string { return "GetSiteResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSiteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSiteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSiteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSiteResponseValidationError{}

// Validate checks the field values on ListSitesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSitesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSitesRequestMultiError, or nil if none found.
func (m *ListSitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListSitesRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListSitesRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListSitesRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListSitesRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListSitesRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListSitesRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListSitesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListSitesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListSitesRequestMultiError(errors)
	}

	return nil
}

// ListSitesRequestMultiError is an error wrapping multiple validation errors
// returned by ListSitesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSitesRequestMultiError) AllErrors() []error { return m }

// ListSitesRequestValidationError is the validation error returned by
// ListSitesRequest.Validate if the designated constraints aren't met.
type ListSitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSitesRequestValidationError) ErrorName() string { return "ListSitesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListSitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSitesRequestValidationError{}

var _ListSitesRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListSitesRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListSitesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSitesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSitesResponseMultiError, or nil if none found.
func (m *ListSitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSitesResponseValidationError{
						field:  fmt.Sprintf("Sites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSitesResponseValidationError{
						field:  fmt.Sprintf("Sites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSitesResponseValidationError{
					field:  fmt.Sprintf("Sites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListSitesResponseMultiError(errors)
	}

	return nil
}

// ListSitesResponseMultiError is an error wrapping multiple validation errors
// returned by ListSitesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListSitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSitesResponseMultiError) AllErrors() []error { return m }

// ListSitesResponseValidationError is the validation error returned by
// ListSitesResponse.Validate if the designated constraints aren't met.
type ListSitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSitesResponseValidationError) ErrorName() string {
	return "ListSitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSitesResponseValidationError{}

// Validate checks the field values on UpdateSiteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSiteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSiteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSiteRequestMultiError, or nil if none found.
func (m *UpdateSiteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSiteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSiteRequestValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSiteRequestValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSiteRequestValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSiteRequestMultiError(errors)
	}

	return nil
}

// UpdateSiteRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateSiteRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateSiteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSiteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSiteRequestMultiError) AllErrors() []error { return m }

// UpdateSiteRequestValidationError is the validation error returned by
// UpdateSiteRequest.Validate if the designated constraints aren't met.
type UpdateSiteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSiteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSiteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSiteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSiteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSiteRequestValidationError) ErrorName() string {
	return "UpdateSiteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSiteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSiteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSiteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSiteRequestValidationError{}

// Validate checks the field values on PatchSiteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchSiteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchSiteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchSiteRequestMultiError, or nil if none found.
func (m *PatchSiteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchSiteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchSiteRequestValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchSiteRequestValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchSiteRequestValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchSiteRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchSiteRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchSiteRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchSiteRequestMultiError(errors)
	}

	return nil
}

// PatchSiteRequestMultiError is an error wrapping multiple validation errors
// returned by PatchSiteRequest.ValidateAll() if the designated constraints
// aren't met.
type PatchSiteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchSiteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchSiteRequestMultiError) AllErrors() []error { return m }

// PatchSiteRequestValidationError is the validation error returned by
// PatchSiteRequest.Validate if the designated constraints aren't met.
type PatchSiteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchSiteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchSiteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchSiteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchSiteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchSiteRequestValidationError) ErrorName() string { return "PatchSiteRequestValidationError" }

// Error satisfies the builtin error interface
func (e PatchSiteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchSiteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchSiteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchSiteRequestValidationError{}

// Validate checks the field values on DeleteSiteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSiteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSiteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSiteRequestMultiError, or nil if none found.
func (m *DeleteSiteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSiteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteSiteRequestMultiError(errors)
	}

	return nil
}

// DeleteSiteRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteSiteRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteSiteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSiteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSiteRequestMultiError) AllErrors() []error { return m }

// DeleteSiteRequestValidationError is the validation error returned by
// DeleteSiteRequest.Validate if the designated constraints aren't met.
type DeleteSiteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSiteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSiteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSiteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSiteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSiteRequestValidationError) ErrorName() string {
	return "DeleteSiteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSiteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSiteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSiteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSiteRequestValidationError{}

// Validate checks the field values on DeleteSiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSiteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSiteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSiteResponseMultiError, or nil if none found.
func (m *DeleteSiteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSiteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSiteResponseMultiError(errors)
	}

	return nil
}

// DeleteSiteResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteSiteResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteSiteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSiteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSiteResponseMultiError) AllErrors() []error { return m }

// DeleteSiteResponseValidationError is the validation error returned by
// DeleteSiteResponse.Validate if the designated constraints aren't met.
type DeleteSiteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSiteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSiteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSiteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSiteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSiteResponseValidationError) ErrorName() string {
	return "DeleteSiteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSiteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSiteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSiteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSiteResponseValidationError{}

// Validate checks the field values on ListLocationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationsRequestMultiError, or nil if none found.
func (m *ListLocationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 50 {
		err := ListLocationsRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListLocationsRequest_Name_Pattern.MatchString(m.GetName()) {
		err := ListLocationsRequestValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9./: ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShowSites

	// no validation rules for ShowRegions

	if len(errors) > 0 {
		return ListLocationsRequestMultiError(errors)
	}

	return nil
}

// ListLocationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListLocationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLocationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationsRequestMultiError) AllErrors() []error { return m }

// ListLocationsRequestValidationError is the validation error returned by
// ListLocationsRequest.Validate if the designated constraints aren't met.
type ListLocationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationsRequestValidationError) ErrorName() string {
	return "ListLocationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationsRequestValidationError{}

var _ListLocationsRequest_Name_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9./: ]+$")

// Validate checks the field values on ListLocationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocationsResponseMultiError, or nil if none found.
func (m *ListLocationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLocationsResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLocationsResponseValidationError{
						field:  fmt.Sprintf("Nodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLocationsResponseValidationError{
					field:  fmt.Sprintf("Nodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for OutputElements

	if len(errors) > 0 {
		return ListLocationsResponseMultiError(errors)
	}

	return nil
}

// ListLocationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListLocationsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLocationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationsResponseMultiError) AllErrors() []error { return m }

// ListLocationsResponseValidationError is the validation error returned by
// ListLocationsResponse.Validate if the designated constraints aren't met.
type ListLocationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationsResponseValidationError) ErrorName() string {
	return "ListLocationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationsResponseValidationError{}

// Validate checks the field values on GetHostSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHostSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostSummaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHostSummaryRequestMultiError, or nil if none found.
func (m *GetHostSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := GetHostSummaryRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_GetHostSummaryRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := GetHostSummaryRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetHostSummaryRequestMultiError(errors)
	}

	return nil
}

// GetHostSummaryRequestMultiError is an error wrapping multiple validation
// errors returned by GetHostSummaryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetHostSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostSummaryRequestMultiError) AllErrors() []error { return m }

// GetHostSummaryRequestValidationError is the validation error returned by
// GetHostSummaryRequest.Validate if the designated constraints aren't met.
type GetHostSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostSummaryRequestValidationError) ErrorName() string {
	return "GetHostSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHostSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostSummaryRequestValidationError{}

var _GetHostSummaryRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on GetHostSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetHostSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostSummaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHostSummaryResponseMultiError, or nil if none found.
func (m *GetHostSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Error

	// no validation rules for Running

	// no validation rules for Unallocated

	if len(errors) > 0 {
		return GetHostSummaryResponseMultiError(errors)
	}

	return nil
}

// GetHostSummaryResponseMultiError is an error wrapping multiple validation
// errors returned by GetHostSummaryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetHostSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostSummaryResponseMultiError) AllErrors() []error { return m }

// GetHostSummaryResponseValidationError is the validation error returned by
// GetHostSummaryResponse.Validate if the designated constraints aren't met.
type GetHostSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostSummaryResponseValidationError) ErrorName() string {
	return "GetHostSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHostSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostSummaryResponseValidationError{}

// Validate checks the field values on CreateHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHostRequestMultiError, or nil if none found.
func (m *CreateHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHostRequestValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateHostRequestMultiError(errors)
	}

	return nil
}

// CreateHostRequestMultiError is an error wrapping multiple validation errors
// returned by CreateHostRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHostRequestMultiError) AllErrors() []error { return m }

// CreateHostRequestValidationError is the validation error returned by
// CreateHostRequest.Validate if the designated constraints aren't met.
type CreateHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHostRequestValidationError) ErrorName() string {
	return "CreateHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHostRequestValidationError{}

// Validate checks the field values on CreateHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateHostResponseMultiError, or nil if none found.
func (m *CreateHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateHostResponseValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateHostResponseValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateHostResponseValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateHostResponseMultiError(errors)
	}

	return nil
}

// CreateHostResponseMultiError is an error wrapping multiple validation errors
// returned by CreateHostResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateHostResponseMultiError) AllErrors() []error { return m }

// CreateHostResponseValidationError is the validation error returned by
// CreateHostResponse.Validate if the designated constraints aren't met.
type CreateHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateHostResponseValidationError) ErrorName() string {
	return "CreateHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateHostResponseValidationError{}

// Validate checks the field values on GetHostRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetHostRequestMultiError,
// or nil if none found.
func (m *GetHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetHostRequestMultiError(errors)
	}

	return nil
}

// GetHostRequestMultiError is an error wrapping multiple validation errors
// returned by GetHostRequest.ValidateAll() if the designated constraints
// aren't met.
type GetHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostRequestMultiError) AllErrors() []error { return m }

// GetHostRequestValidationError is the validation error returned by
// GetHostRequest.Validate if the designated constraints aren't met.
type GetHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostRequestValidationError) ErrorName() string { return "GetHostRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostRequestValidationError{}

// Validate checks the field values on GetHostResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetHostResponseMultiError, or nil if none found.
func (m *GetHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetHostResponseValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetHostResponseValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHostResponseValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetHostResponseMultiError(errors)
	}

	return nil
}

// GetHostResponseMultiError is an error wrapping multiple validation errors
// returned by GetHostResponse.ValidateAll() if the designated constraints
// aren't met.
type GetHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetHostResponseMultiError) AllErrors() []error { return m }

// GetHostResponseValidationError is the validation error returned by
// GetHostResponse.Validate if the designated constraints aren't met.
type GetHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHostResponseValidationError) ErrorName() string { return "GetHostResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHostResponseValidationError{}

// Validate checks the field values on ListHostsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHostsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHostsRequestMultiError, or nil if none found.
func (m *ListHostsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListHostsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListHostsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListHostsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListHostsRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListHostsRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListHostsRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListHostsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListHostsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListHostsRequestMultiError(errors)
	}

	return nil
}

// ListHostsRequestMultiError is an error wrapping multiple validation errors
// returned by ListHostsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListHostsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostsRequestMultiError) AllErrors() []error { return m }

// ListHostsRequestValidationError is the validation error returned by
// ListHostsRequest.Validate if the designated constraints aren't met.
type ListHostsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostsRequestValidationError) ErrorName() string { return "ListHostsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListHostsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostsRequestValidationError{}

var _ListHostsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListHostsRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListHostsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListHostsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListHostsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListHostsResponseMultiError, or nil if none found.
func (m *ListHostsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListHostsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListHostsResponseValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListHostsResponseValidationError{
						field:  fmt.Sprintf("Hosts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHostsResponseValidationError{
					field:  fmt.Sprintf("Hosts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListHostsResponseMultiError(errors)
	}

	return nil
}

// ListHostsResponseMultiError is an error wrapping multiple validation errors
// returned by ListHostsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListHostsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListHostsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListHostsResponseMultiError) AllErrors() []error { return m }

// ListHostsResponseValidationError is the validation error returned by
// ListHostsResponse.Validate if the designated constraints aren't met.
type ListHostsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHostsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHostsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHostsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHostsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHostsResponseValidationError) ErrorName() string {
	return "ListHostsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHostsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHostsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHostsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHostsResponseValidationError{}

// Validate checks the field values on UpdateHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateHostRequestMultiError, or nil if none found.
func (m *UpdateHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHostRequestValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateHostRequestMultiError(errors)
	}

	return nil
}

// UpdateHostRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateHostRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateHostRequestMultiError) AllErrors() []error { return m }

// UpdateHostRequestValidationError is the validation error returned by
// UpdateHostRequest.Validate if the designated constraints aren't met.
type UpdateHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHostRequestValidationError) ErrorName() string {
	return "UpdateHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHostRequestValidationError{}

// Validate checks the field values on PatchHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PatchHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchHostRequestMultiError, or nil if none found.
func (m *PatchHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchHostRequestValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchHostRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchHostRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchHostRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchHostRequestMultiError(errors)
	}

	return nil
}

// PatchHostRequestMultiError is an error wrapping multiple validation errors
// returned by PatchHostRequest.ValidateAll() if the designated constraints
// aren't met.
type PatchHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchHostRequestMultiError) AllErrors() []error { return m }

// PatchHostRequestValidationError is the validation error returned by
// PatchHostRequest.Validate if the designated constraints aren't met.
type PatchHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchHostRequestValidationError) ErrorName() string { return "PatchHostRequestValidationError" }

// Error satisfies the builtin error interface
func (e PatchHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchHostRequestValidationError{}

// Validate checks the field values on DeleteHostRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHostRequestMultiError, or nil if none found.
func (m *DeleteHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteHostRequestMultiError(errors)
	}

	return nil
}

// DeleteHostRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteHostRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHostRequestMultiError) AllErrors() []error { return m }

// DeleteHostRequestValidationError is the validation error returned by
// DeleteHostRequest.Validate if the designated constraints aren't met.
type DeleteHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHostRequestValidationError) ErrorName() string {
	return "DeleteHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHostRequestValidationError{}

// Validate checks the field values on DeleteHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteHostResponseMultiError, or nil if none found.
func (m *DeleteHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteHostResponseMultiError(errors)
	}

	return nil
}

// DeleteHostResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteHostResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteHostResponseMultiError) AllErrors() []error { return m }

// DeleteHostResponseValidationError is the validation error returned by
// DeleteHostResponse.Validate if the designated constraints aren't met.
type DeleteHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteHostResponseValidationError) ErrorName() string {
	return "DeleteHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteHostResponseValidationError{}

// Validate checks the field values on InvalidateHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateHostRequestMultiError, or nil if none found.
func (m *InvalidateHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetResourceId()) > 13 {
		err := InvalidateHostRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_InvalidateHostRequest_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := InvalidateHostRequestValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNote()); l < 1 || l > 512 {
		err := InvalidateHostRequestValidationError{
			field:  "Note",
			reason: "value length must be between 1 and 512 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_InvalidateHostRequest_Note_Pattern.MatchString(m.GetNote()) {
		err := InvalidateHostRequestValidationError{
			field:  "Note",
			reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\\\" ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InvalidateHostRequestMultiError(errors)
	}

	return nil
}

// InvalidateHostRequestMultiError is an error wrapping multiple validation
// errors returned by InvalidateHostRequest.ValidateAll() if the designated
// constraints aren't met.
type InvalidateHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateHostRequestMultiError) AllErrors() []error { return m }

// InvalidateHostRequestValidationError is the validation error returned by
// InvalidateHostRequest.Validate if the designated constraints aren't met.
type InvalidateHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateHostRequestValidationError) ErrorName() string {
	return "InvalidateHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateHostRequestValidationError{}

var _InvalidateHostRequest_ResourceId_Pattern = regexp.MustCompile("^host-[0-9a-f]{8}$")

var _InvalidateHostRequest_Note_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\" ]+$")

// Validate checks the field values on InvalidateHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateHostResponseMultiError, or nil if none found.
func (m *InvalidateHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateHostResponseMultiError(errors)
	}

	return nil
}

// InvalidateHostResponseMultiError is an error wrapping multiple validation
// errors returned by InvalidateHostResponse.ValidateAll() if the designated
// constraints aren't met.
type InvalidateHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateHostResponseMultiError) AllErrors() []error { return m }

// InvalidateHostResponseValidationError is the validation error returned by
// InvalidateHostResponse.Validate if the designated constraints aren't met.
type InvalidateHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateHostResponseValidationError) ErrorName() string {
	return "InvalidateHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateHostResponseValidationError{}

// Validate checks the field values on HostRegister with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HostRegister) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostRegister with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HostRegisterMultiError, or
// nil if none found.
func (m *HostRegister) ValidateAll() error {
	return m.validate(true)
}

func (m *HostRegister) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 20 {
		err := HostRegisterValidationError{
			field:  "Name",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_HostRegister_Name_Pattern.MatchString(m.GetName()) {
		err := HostRegisterValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9./: ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_HostRegister_SerialNumber_Pattern.MatchString(m.GetSerialNumber()) {
		err := HostRegisterValidationError{
			field:  "SerialNumber",
			reason: "value does not match regex pattern \"^([A-Za-z0-9]{5,20})?$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUuid()); l < 0 || l > 36 {
		err := HostRegisterValidationError{
			field:  "Uuid",
			reason: "value length must be between 0 and 36 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_HostRegister_Uuid_Pattern.MatchString(m.GetUuid()) {
		err := HostRegisterValidationError{
			field:  "Uuid",
			reason: "value does not match regex pattern \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AutoOnboard

	if len(errors) > 0 {
		return HostRegisterMultiError(errors)
	}

	return nil
}

// HostRegisterMultiError is an error wrapping multiple validation errors
// returned by HostRegister.ValidateAll() if the designated constraints aren't met.
type HostRegisterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostRegisterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostRegisterMultiError) AllErrors() []error { return m }

// HostRegisterValidationError is the validation error returned by
// HostRegister.Validate if the designated constraints aren't met.
type HostRegisterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostRegisterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostRegisterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostRegisterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostRegisterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostRegisterValidationError) ErrorName() string { return "HostRegisterValidationError" }

// Error satisfies the builtin error interface
func (e HostRegisterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostRegister.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostRegisterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostRegisterValidationError{}

var _HostRegister_Name_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9./: ]+$")

var _HostRegister_SerialNumber_Pattern = regexp.MustCompile("^([A-Za-z0-9]{5,20})?$")

var _HostRegister_Uuid_Pattern = regexp.MustCompile("[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}")

// Validate checks the field values on RegisterHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterHostRequestMultiError, or nil if none found.
func (m *RegisterHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetResourceId()) > 13 {
		err := RegisterHostRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RegisterHostRequest_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := RegisterHostRequestValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterHostRequestValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterHostRequestValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterHostRequestMultiError(errors)
	}

	return nil
}

// RegisterHostRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterHostRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterHostRequestMultiError) AllErrors() []error { return m }

// RegisterHostRequestValidationError is the validation error returned by
// RegisterHostRequest.Validate if the designated constraints aren't met.
type RegisterHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterHostRequestValidationError) ErrorName() string {
	return "RegisterHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterHostRequestValidationError{}

var _RegisterHostRequest_ResourceId_Pattern = regexp.MustCompile("^host-[0-9a-f]{8}$")

// Validate checks the field values on OnboardHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnboardHostRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnboardHostRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnboardHostRequestMultiError, or nil if none found.
func (m *OnboardHostRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OnboardHostRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetResourceId()) > 13 {
		err := OnboardHostRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_OnboardHostRequest_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := OnboardHostRequestValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OnboardHostRequestMultiError(errors)
	}

	return nil
}

// OnboardHostRequestMultiError is an error wrapping multiple validation errors
// returned by OnboardHostRequest.ValidateAll() if the designated constraints
// aren't met.
type OnboardHostRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnboardHostRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnboardHostRequestMultiError) AllErrors() []error { return m }

// OnboardHostRequestValidationError is the validation error returned by
// OnboardHostRequest.Validate if the designated constraints aren't met.
type OnboardHostRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnboardHostRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnboardHostRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnboardHostRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnboardHostRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnboardHostRequestValidationError) ErrorName() string {
	return "OnboardHostRequestValidationError"
}

// Error satisfies the builtin error interface
func (e OnboardHostRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnboardHostRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnboardHostRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnboardHostRequestValidationError{}

var _OnboardHostRequest_ResourceId_Pattern = regexp.MustCompile("^host-[0-9a-f]{8}$")

// Validate checks the field values on OnboardHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OnboardHostResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnboardHostResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OnboardHostResponseMultiError, or nil if none found.
func (m *OnboardHostResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OnboardHostResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OnboardHostResponseMultiError(errors)
	}

	return nil
}

// OnboardHostResponseMultiError is an error wrapping multiple validation
// errors returned by OnboardHostResponse.ValidateAll() if the designated
// constraints aren't met.
type OnboardHostResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnboardHostResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnboardHostResponseMultiError) AllErrors() []error { return m }

// OnboardHostResponseValidationError is the validation error returned by
// OnboardHostResponse.Validate if the designated constraints aren't met.
type OnboardHostResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnboardHostResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnboardHostResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnboardHostResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnboardHostResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnboardHostResponseValidationError) ErrorName() string {
	return "OnboardHostResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OnboardHostResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnboardHostResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnboardHostResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnboardHostResponseValidationError{}

// Validate checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstanceRequestMultiError, or nil if none found.
func (m *CreateInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstanceRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstanceRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequestValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInstanceRequestMultiError(errors)
	}

	return nil
}

// CreateInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstanceRequestMultiError) AllErrors() []error { return m }

// CreateInstanceRequestValidationError is the validation error returned by
// CreateInstanceRequest.Validate if the designated constraints aren't met.
type CreateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequestValidationError) ErrorName() string {
	return "CreateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequestValidationError{}

// Validate checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstanceResponseMultiError, or nil if none found.
func (m *CreateInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInstanceResponseMultiError(errors)
	}

	return nil
}

// CreateInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstanceResponseMultiError) AllErrors() []error { return m }

// CreateInstanceResponseValidationError is the validation error returned by
// CreateInstanceResponse.Validate if the designated constraints aren't met.
type CreateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceResponseValidationError) ErrorName() string {
	return "CreateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceResponseValidationError{}

// Validate checks the field values on GetInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstanceRequestMultiError, or nil if none found.
func (m *GetInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetInstanceRequestMultiError(errors)
	}

	return nil
}

// GetInstanceRequestMultiError is an error wrapping multiple validation errors
// returned by GetInstanceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceRequestMultiError) AllErrors() []error { return m }

// GetInstanceRequestValidationError is the validation error returned by
// GetInstanceRequest.Validate if the designated constraints aren't met.
type GetInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceRequestValidationError) ErrorName() string {
	return "GetInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceRequestValidationError{}

// Validate checks the field values on GetInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstanceResponseMultiError, or nil if none found.
func (m *GetInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInstanceResponseMultiError(errors)
	}

	return nil
}

// GetInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceResponseMultiError) AllErrors() []error { return m }

// GetInstanceResponseValidationError is the validation error returned by
// GetInstanceResponse.Validate if the designated constraints aren't met.
type GetInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceResponseValidationError) ErrorName() string {
	return "GetInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesRequestMultiError, or nil if none found.
func (m *ListInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListInstancesRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListInstancesRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListInstancesRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListInstancesRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListInstancesRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListInstancesRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListInstancesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListInstancesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListInstancesRequestMultiError(errors)
	}

	return nil
}

// ListInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesRequestMultiError) AllErrors() []error { return m }

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

var _ListInstancesRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListInstancesRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponseMultiError, or nil if none found.
func (m *ListInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListInstancesResponseMultiError(errors)
	}

	return nil
}

// ListInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponseMultiError) AllErrors() []error { return m }

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on UpdateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateInstanceRequestMultiError, or nil if none found.
func (m *UpdateInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateInstanceRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateInstanceRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInstanceRequestValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateInstanceRequestMultiError(errors)
	}

	return nil
}

// UpdateInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateInstanceRequestMultiError) AllErrors() []error { return m }

// UpdateInstanceRequestValidationError is the validation error returned by
// UpdateInstanceRequest.Validate if the designated constraints aren't met.
type UpdateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstanceRequestValidationError) ErrorName() string {
	return "UpdateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstanceRequestValidationError{}

// Validate checks the field values on PatchInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchInstanceRequestMultiError, or nil if none found.
func (m *PatchInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchInstanceRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchInstanceRequestValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchInstanceRequestValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchInstanceRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchInstanceRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchInstanceRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchInstanceRequestMultiError(errors)
	}

	return nil
}

// PatchInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by PatchInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchInstanceRequestMultiError) AllErrors() []error { return m }

// PatchInstanceRequestValidationError is the validation error returned by
// PatchInstanceRequest.Validate if the designated constraints aren't met.
type PatchInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchInstanceRequestValidationError) ErrorName() string {
	return "PatchInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchInstanceRequestValidationError{}

// Validate checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstanceRequestMultiError, or nil if none found.
func (m *DeleteInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteInstanceRequestMultiError(errors)
	}

	return nil
}

// DeleteInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstanceRequestMultiError) AllErrors() []error { return m }

// DeleteInstanceRequestValidationError is the validation error returned by
// DeleteInstanceRequest.Validate if the designated constraints aren't met.
type DeleteInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceRequestValidationError) ErrorName() string {
	return "DeleteInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceRequestValidationError{}

// Validate checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstanceResponseMultiError, or nil if none found.
func (m *DeleteInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInstanceResponseMultiError(errors)
	}

	return nil
}

// DeleteInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstanceResponseMultiError) AllErrors() []error { return m }

// DeleteInstanceResponseValidationError is the validation error returned by
// DeleteInstanceResponse.Validate if the designated constraints aren't met.
type DeleteInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceResponseValidationError) ErrorName() string {
	return "DeleteInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceResponseValidationError{}

// Validate checks the field values on InvalidateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateInstanceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateInstanceRequestMultiError, or nil if none found.
func (m *InvalidateInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetResourceId()) > 13 {
		err := InvalidateInstanceRequestValidationError{
			field:  "ResourceId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_InvalidateInstanceRequest_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := InvalidateInstanceRequestValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^inst-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return InvalidateInstanceRequestMultiError(errors)
	}

	return nil
}

// InvalidateInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by InvalidateInstanceRequest.ValidateAll() if the
// designated constraints aren't met.
type InvalidateInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateInstanceRequestMultiError) AllErrors() []error { return m }

// InvalidateInstanceRequestValidationError is the validation error returned by
// InvalidateInstanceRequest.Validate if the designated constraints aren't met.
type InvalidateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateInstanceRequestValidationError) ErrorName() string {
	return "InvalidateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateInstanceRequestValidationError{}

var _InvalidateInstanceRequest_ResourceId_Pattern = regexp.MustCompile("^inst-[0-9a-f]{8}$")

// Validate checks the field values on InvalidateInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InvalidateInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InvalidateInstanceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InvalidateInstanceResponseMultiError, or nil if none found.
func (m *InvalidateInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InvalidateInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return InvalidateInstanceResponseMultiError(errors)
	}

	return nil
}

// InvalidateInstanceResponseMultiError is an error wrapping multiple
// validation errors returned by InvalidateInstanceResponse.ValidateAll() if
// the designated constraints aren't met.
type InvalidateInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InvalidateInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InvalidateInstanceResponseMultiError) AllErrors() []error { return m }

// InvalidateInstanceResponseValidationError is the validation error returned
// by InvalidateInstanceResponse.Validate if the designated constraints aren't met.
type InvalidateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InvalidateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InvalidateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InvalidateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InvalidateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InvalidateInstanceResponseValidationError) ErrorName() string {
	return "InvalidateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InvalidateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInvalidateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InvalidateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InvalidateInstanceResponseValidationError{}

// Validate checks the field values on CreateOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatingSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOperatingSystemRequestMultiError, or nil if none found.
func (m *CreateOperatingSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatingSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOperatingSystemRequestValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOperatingSystemRequestValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOperatingSystemRequestValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOperatingSystemRequestMultiError(errors)
	}

	return nil
}

// CreateOperatingSystemRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOperatingSystemRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateOperatingSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatingSystemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatingSystemRequestMultiError) AllErrors() []error { return m }

// CreateOperatingSystemRequestValidationError is the validation error returned
// by CreateOperatingSystemRequest.Validate if the designated constraints
// aren't met.
type CreateOperatingSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatingSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatingSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatingSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatingSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatingSystemRequestValidationError) ErrorName() string {
	return "CreateOperatingSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatingSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatingSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatingSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatingSystemRequestValidationError{}

// Validate checks the field values on CreateOperatingSystemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOperatingSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOperatingSystemResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOperatingSystemResponseMultiError, or nil if none found.
func (m *CreateOperatingSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOperatingSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOperatingSystemResponseValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOperatingSystemResponseValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOperatingSystemResponseValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOperatingSystemResponseMultiError(errors)
	}

	return nil
}

// CreateOperatingSystemResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOperatingSystemResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOperatingSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOperatingSystemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOperatingSystemResponseMultiError) AllErrors() []error { return m }

// CreateOperatingSystemResponseValidationError is the validation error
// returned by CreateOperatingSystemResponse.Validate if the designated
// constraints aren't met.
type CreateOperatingSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOperatingSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOperatingSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOperatingSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOperatingSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOperatingSystemResponseValidationError) ErrorName() string {
	return "CreateOperatingSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOperatingSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOperatingSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOperatingSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOperatingSystemResponseValidationError{}

// Validate checks the field values on GetOperatingSystemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatingSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatingSystemRequestMultiError, or nil if none found.
func (m *GetOperatingSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatingSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetOperatingSystemRequestMultiError(errors)
	}

	return nil
}

// GetOperatingSystemRequestMultiError is an error wrapping multiple validation
// errors returned by GetOperatingSystemRequest.ValidateAll() if the
// designated constraints aren't met.
type GetOperatingSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatingSystemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatingSystemRequestMultiError) AllErrors() []error { return m }

// GetOperatingSystemRequestValidationError is the validation error returned by
// GetOperatingSystemRequest.Validate if the designated constraints aren't met.
type GetOperatingSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatingSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatingSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatingSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatingSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatingSystemRequestValidationError) ErrorName() string {
	return "GetOperatingSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatingSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatingSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatingSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatingSystemRequestValidationError{}

// Validate checks the field values on GetOperatingSystemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOperatingSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOperatingSystemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOperatingSystemResponseMultiError, or nil if none found.
func (m *GetOperatingSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOperatingSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOperatingSystemResponseValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOperatingSystemResponseValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOperatingSystemResponseValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOperatingSystemResponseMultiError(errors)
	}

	return nil
}

// GetOperatingSystemResponseMultiError is an error wrapping multiple
// validation errors returned by GetOperatingSystemResponse.ValidateAll() if
// the designated constraints aren't met.
type GetOperatingSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOperatingSystemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOperatingSystemResponseMultiError) AllErrors() []error { return m }

// GetOperatingSystemResponseValidationError is the validation error returned
// by GetOperatingSystemResponse.Validate if the designated constraints aren't met.
type GetOperatingSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOperatingSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOperatingSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOperatingSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOperatingSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOperatingSystemResponseValidationError) ErrorName() string {
	return "GetOperatingSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOperatingSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOperatingSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOperatingSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOperatingSystemResponseValidationError{}

// Validate checks the field values on ListOperatingSystemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatingSystemsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatingSystemsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatingSystemsRequestMultiError, or nil if none found.
func (m *ListOperatingSystemsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatingSystemsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListOperatingSystemsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListOperatingSystemsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListOperatingSystemsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListOperatingSystemsRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListOperatingSystemsRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListOperatingSystemsRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListOperatingSystemsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListOperatingSystemsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListOperatingSystemsRequestMultiError(errors)
	}

	return nil
}

// ListOperatingSystemsRequestMultiError is an error wrapping multiple
// validation errors returned by ListOperatingSystemsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListOperatingSystemsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatingSystemsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatingSystemsRequestMultiError) AllErrors() []error { return m }

// ListOperatingSystemsRequestValidationError is the validation error returned
// by ListOperatingSystemsRequest.Validate if the designated constraints
// aren't met.
type ListOperatingSystemsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatingSystemsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatingSystemsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatingSystemsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatingSystemsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatingSystemsRequestValidationError) ErrorName() string {
	return "ListOperatingSystemsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatingSystemsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatingSystemsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatingSystemsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatingSystemsRequestValidationError{}

var _ListOperatingSystemsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListOperatingSystemsRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListOperatingSystemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOperatingSystemsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOperatingSystemsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOperatingSystemsResponseMultiError, or nil if none found.
func (m *ListOperatingSystemsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOperatingSystemsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOperatingSystemResources() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOperatingSystemsResponseValidationError{
						field:  fmt.Sprintf("OperatingSystemResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOperatingSystemsResponseValidationError{
						field:  fmt.Sprintf("OperatingSystemResources[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOperatingSystemsResponseValidationError{
					field:  fmt.Sprintf("OperatingSystemResources[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListOperatingSystemsResponseMultiError(errors)
	}

	return nil
}

// ListOperatingSystemsResponseMultiError is an error wrapping multiple
// validation errors returned by ListOperatingSystemsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListOperatingSystemsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOperatingSystemsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOperatingSystemsResponseMultiError) AllErrors() []error { return m }

// ListOperatingSystemsResponseValidationError is the validation error returned
// by ListOperatingSystemsResponse.Validate if the designated constraints
// aren't met.
type ListOperatingSystemsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOperatingSystemsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOperatingSystemsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOperatingSystemsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOperatingSystemsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOperatingSystemsResponseValidationError) ErrorName() string {
	return "ListOperatingSystemsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOperatingSystemsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOperatingSystemsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOperatingSystemsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOperatingSystemsResponseValidationError{}

// Validate checks the field values on UpdateOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOperatingSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOperatingSystemRequestMultiError, or nil if none found.
func (m *UpdateOperatingSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOperatingSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOperatingSystemRequestValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOperatingSystemRequestValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOperatingSystemRequestValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOperatingSystemRequestMultiError(errors)
	}

	return nil
}

// UpdateOperatingSystemRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOperatingSystemRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateOperatingSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOperatingSystemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOperatingSystemRequestMultiError) AllErrors() []error { return m }

// UpdateOperatingSystemRequestValidationError is the validation error returned
// by UpdateOperatingSystemRequest.Validate if the designated constraints
// aren't met.
type UpdateOperatingSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOperatingSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOperatingSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOperatingSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOperatingSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOperatingSystemRequestValidationError) ErrorName() string {
	return "UpdateOperatingSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOperatingSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOperatingSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOperatingSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOperatingSystemRequestValidationError{}

// Validate checks the field values on PatchOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchOperatingSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchOperatingSystemRequestMultiError, or nil if none found.
func (m *PatchOperatingSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchOperatingSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchOperatingSystemRequestValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchOperatingSystemRequestValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchOperatingSystemRequestValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchOperatingSystemRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchOperatingSystemRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchOperatingSystemRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchOperatingSystemRequestMultiError(errors)
	}

	return nil
}

// PatchOperatingSystemRequestMultiError is an error wrapping multiple
// validation errors returned by PatchOperatingSystemRequest.ValidateAll() if
// the designated constraints aren't met.
type PatchOperatingSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchOperatingSystemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchOperatingSystemRequestMultiError) AllErrors() []error { return m }

// PatchOperatingSystemRequestValidationError is the validation error returned
// by PatchOperatingSystemRequest.Validate if the designated constraints
// aren't met.
type PatchOperatingSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchOperatingSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchOperatingSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchOperatingSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchOperatingSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchOperatingSystemRequestValidationError) ErrorName() string {
	return "PatchOperatingSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchOperatingSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchOperatingSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchOperatingSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchOperatingSystemRequestValidationError{}

// Validate checks the field values on DeleteOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatingSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatingSystemRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOperatingSystemRequestMultiError, or nil if none found.
func (m *DeleteOperatingSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatingSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteOperatingSystemRequestMultiError(errors)
	}

	return nil
}

// DeleteOperatingSystemRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOperatingSystemRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteOperatingSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatingSystemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatingSystemRequestMultiError) AllErrors() []error { return m }

// DeleteOperatingSystemRequestValidationError is the validation error returned
// by DeleteOperatingSystemRequest.Validate if the designated constraints
// aren't met.
type DeleteOperatingSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatingSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatingSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatingSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatingSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatingSystemRequestValidationError) ErrorName() string {
	return "DeleteOperatingSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatingSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatingSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatingSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatingSystemRequestValidationError{}

// Validate checks the field values on DeleteOperatingSystemResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOperatingSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOperatingSystemResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOperatingSystemResponseMultiError, or nil if none found.
func (m *DeleteOperatingSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOperatingSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOperatingSystemResponseMultiError(errors)
	}

	return nil
}

// DeleteOperatingSystemResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOperatingSystemResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOperatingSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOperatingSystemResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOperatingSystemResponseMultiError) AllErrors() []error { return m }

// DeleteOperatingSystemResponseValidationError is the validation error
// returned by DeleteOperatingSystemResponse.Validate if the designated
// constraints aren't met.
type DeleteOperatingSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOperatingSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOperatingSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOperatingSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOperatingSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOperatingSystemResponseValidationError) ErrorName() string {
	return "DeleteOperatingSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOperatingSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOperatingSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOperatingSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOperatingSystemResponseValidationError{}

// Validate checks the field values on CreateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProviderRequestMultiError, or nil if none found.
func (m *CreateProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProviderRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProviderRequestValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProviderRequestValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProviderRequestMultiError(errors)
	}

	return nil
}

// CreateProviderRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProviderRequestMultiError) AllErrors() []error { return m }

// CreateProviderRequestValidationError is the validation error returned by
// CreateProviderRequest.Validate if the designated constraints aren't met.
type CreateProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderRequestValidationError) ErrorName() string {
	return "CreateProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderRequestValidationError{}

// Validate checks the field values on CreateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProviderResponseMultiError, or nil if none found.
func (m *CreateProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProviderResponseMultiError(errors)
	}

	return nil
}

// CreateProviderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProviderResponseMultiError) AllErrors() []error { return m }

// CreateProviderResponseValidationError is the validation error returned by
// CreateProviderResponse.Validate if the designated constraints aren't met.
type CreateProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProviderResponseValidationError) ErrorName() string {
	return "CreateProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProviderResponseValidationError{}

// Validate checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderRequestMultiError, or nil if none found.
func (m *GetProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetProviderRequestMultiError(errors)
	}

	return nil
}

// GetProviderRequestMultiError is an error wrapping multiple validation errors
// returned by GetProviderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderRequestMultiError) AllErrors() []error { return m }

// GetProviderRequestValidationError is the validation error returned by
// GetProviderRequest.Validate if the designated constraints aren't met.
type GetProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderRequestValidationError) ErrorName() string {
	return "GetProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderRequestValidationError{}

// Validate checks the field values on GetProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProviderResponseMultiError, or nil if none found.
func (m *GetProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProviderResponseValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProviderResponseMultiError(errors)
	}

	return nil
}

// GetProviderResponseMultiError is an error wrapping multiple validation
// errors returned by GetProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type GetProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProviderResponseMultiError) AllErrors() []error { return m }

// GetProviderResponseValidationError is the validation error returned by
// GetProviderResponse.Validate if the designated constraints aren't met.
type GetProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderResponseValidationError) ErrorName() string {
	return "GetProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderResponseValidationError{}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersRequestMultiError, or nil if none found.
func (m *ListProvidersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListProvidersRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListProvidersRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListProvidersRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListProvidersRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListProvidersRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListProvidersRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListProvidersRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListProvidersRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListProvidersRequestMultiError(errors)
	}

	return nil
}

// ListProvidersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProvidersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersRequestMultiError) AllErrors() []error { return m }

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

var _ListProvidersRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListProvidersRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProvidersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProvidersResponseMultiError, or nil if none found.
func (m *ListProvidersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProvidersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProvidersResponseValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListProvidersResponseMultiError(errors)
	}

	return nil
}

// ListProvidersResponseMultiError is an error wrapping multiple validation
// errors returned by ListProvidersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProvidersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProvidersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProvidersResponseMultiError) AllErrors() []error { return m }

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderRequestMultiError, or nil if none found.
func (m *DeleteProviderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteProviderRequestMultiError(errors)
	}

	return nil
}

// DeleteProviderRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProviderRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProviderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderRequestMultiError) AllErrors() []error { return m }

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProviderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProviderResponseMultiError, or nil if none found.
func (m *DeleteProviderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProviderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProviderResponseMultiError(errors)
	}

	return nil
}

// DeleteProviderResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProviderResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProviderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProviderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProviderResponseMultiError) AllErrors() []error { return m }

// DeleteProviderResponseValidationError is the validation error returned by
// DeleteProviderResponse.Validate if the designated constraints aren't met.
type DeleteProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderResponseValidationError) ErrorName() string {
	return "DeleteProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderResponseValidationError{}

// Validate checks the field values on CreateWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkloadRequestMultiError, or nil if none found.
func (m *CreateWorkloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkloadRequestValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkloadRequestValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkloadRequestValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkloadRequestMultiError(errors)
	}

	return nil
}

// CreateWorkloadRequestMultiError is an error wrapping multiple validation
// errors returned by CreateWorkloadRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkloadRequestMultiError) AllErrors() []error { return m }

// CreateWorkloadRequestValidationError is the validation error returned by
// CreateWorkloadRequest.Validate if the designated constraints aren't met.
type CreateWorkloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkloadRequestValidationError) ErrorName() string {
	return "CreateWorkloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkloadRequestValidationError{}

// Validate checks the field values on CreateWorkloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkloadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkloadResponseMultiError, or nil if none found.
func (m *CreateWorkloadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkloadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkloadResponseValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkloadResponseValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkloadResponseValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkloadResponseMultiError(errors)
	}

	return nil
}

// CreateWorkloadResponseMultiError is an error wrapping multiple validation
// errors returned by CreateWorkloadResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateWorkloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkloadResponseMultiError) AllErrors() []error { return m }

// CreateWorkloadResponseValidationError is the validation error returned by
// CreateWorkloadResponse.Validate if the designated constraints aren't met.
type CreateWorkloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkloadResponseValidationError) ErrorName() string {
	return "CreateWorkloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkloadResponseValidationError{}

// Validate checks the field values on GetWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadRequestMultiError, or nil if none found.
func (m *GetWorkloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetWorkloadRequestMultiError(errors)
	}

	return nil
}

// GetWorkloadRequestMultiError is an error wrapping multiple validation errors
// returned by GetWorkloadRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWorkloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadRequestMultiError) AllErrors() []error { return m }

// GetWorkloadRequestValidationError is the validation error returned by
// GetWorkloadRequest.Validate if the designated constraints aren't met.
type GetWorkloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadRequestValidationError) ErrorName() string {
	return "GetWorkloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadRequestValidationError{}

// Validate checks the field values on GetWorkloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadResponseMultiError, or nil if none found.
func (m *GetWorkloadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkloadResponseValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkloadResponseValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkloadResponseValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkloadResponseMultiError(errors)
	}

	return nil
}

// GetWorkloadResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkloadResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWorkloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadResponseMultiError) AllErrors() []error { return m }

// GetWorkloadResponseValidationError is the validation error returned by
// GetWorkloadResponse.Validate if the designated constraints aren't met.
type GetWorkloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadResponseValidationError) ErrorName() string {
	return "GetWorkloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadResponseValidationError{}

// Validate checks the field values on ListWorkloadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkloadsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkloadsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkloadsRequestMultiError, or nil if none found.
func (m *ListWorkloadsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkloadsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListWorkloadsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListWorkloadsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListWorkloadsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListWorkloadsRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListWorkloadsRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListWorkloadsRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListWorkloadsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListWorkloadsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListWorkloadsRequestMultiError(errors)
	}

	return nil
}

// ListWorkloadsRequestMultiError is an error wrapping multiple validation
// errors returned by ListWorkloadsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListWorkloadsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkloadsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkloadsRequestMultiError) AllErrors() []error { return m }

// ListWorkloadsRequestValidationError is the validation error returned by
// ListWorkloadsRequest.Validate if the designated constraints aren't met.
type ListWorkloadsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkloadsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkloadsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkloadsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkloadsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkloadsRequestValidationError) ErrorName() string {
	return "ListWorkloadsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkloadsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkloadsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkloadsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkloadsRequestValidationError{}

var _ListWorkloadsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListWorkloadsRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListWorkloadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkloadsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkloadsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkloadsResponseMultiError, or nil if none found.
func (m *ListWorkloadsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkloadsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkloads() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkloadsResponseValidationError{
						field:  fmt.Sprintf("Workloads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkloadsResponseValidationError{
						field:  fmt.Sprintf("Workloads[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkloadsResponseValidationError{
					field:  fmt.Sprintf("Workloads[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListWorkloadsResponseMultiError(errors)
	}

	return nil
}

// ListWorkloadsResponseMultiError is an error wrapping multiple validation
// errors returned by ListWorkloadsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListWorkloadsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkloadsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkloadsResponseMultiError) AllErrors() []error { return m }

// ListWorkloadsResponseValidationError is the validation error returned by
// ListWorkloadsResponse.Validate if the designated constraints aren't met.
type ListWorkloadsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkloadsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkloadsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkloadsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkloadsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkloadsResponseValidationError) ErrorName() string {
	return "ListWorkloadsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkloadsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkloadsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkloadsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkloadsResponseValidationError{}

// Validate checks the field values on UpdateWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateWorkloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateWorkloadRequestMultiError, or nil if none found.
func (m *UpdateWorkloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateWorkloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateWorkloadRequestValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateWorkloadRequestValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateWorkloadRequestValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateWorkloadRequestMultiError(errors)
	}

	return nil
}

// UpdateWorkloadRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateWorkloadRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateWorkloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateWorkloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateWorkloadRequestMultiError) AllErrors() []error { return m }

// UpdateWorkloadRequestValidationError is the validation error returned by
// UpdateWorkloadRequest.Validate if the designated constraints aren't met.
type UpdateWorkloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateWorkloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateWorkloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateWorkloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateWorkloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateWorkloadRequestValidationError) ErrorName() string {
	return "UpdateWorkloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateWorkloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateWorkloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateWorkloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateWorkloadRequestValidationError{}

// Validate checks the field values on PatchWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchWorkloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchWorkloadRequestMultiError, or nil if none found.
func (m *PatchWorkloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchWorkloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchWorkloadRequestValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchWorkloadRequestValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchWorkloadRequestValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchWorkloadRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchWorkloadRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchWorkloadRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchWorkloadRequestMultiError(errors)
	}

	return nil
}

// PatchWorkloadRequestMultiError is an error wrapping multiple validation
// errors returned by PatchWorkloadRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchWorkloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchWorkloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchWorkloadRequestMultiError) AllErrors() []error { return m }

// PatchWorkloadRequestValidationError is the validation error returned by
// PatchWorkloadRequest.Validate if the designated constraints aren't met.
type PatchWorkloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchWorkloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchWorkloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchWorkloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchWorkloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchWorkloadRequestValidationError) ErrorName() string {
	return "PatchWorkloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchWorkloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchWorkloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchWorkloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchWorkloadRequestValidationError{}

// Validate checks the field values on DeleteWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkloadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkloadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkloadRequestMultiError, or nil if none found.
func (m *DeleteWorkloadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkloadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteWorkloadRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkloadRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkloadRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkloadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkloadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkloadRequestMultiError) AllErrors() []error { return m }

// DeleteWorkloadRequestValidationError is the validation error returned by
// DeleteWorkloadRequest.Validate if the designated constraints aren't met.
type DeleteWorkloadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkloadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkloadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkloadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkloadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkloadRequestValidationError) ErrorName() string {
	return "DeleteWorkloadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkloadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkloadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkloadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkloadRequestValidationError{}

// Validate checks the field values on DeleteWorkloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkloadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkloadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkloadResponseMultiError, or nil if none found.
func (m *DeleteWorkloadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkloadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWorkloadResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkloadResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteWorkloadResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteWorkloadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkloadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkloadResponseMultiError) AllErrors() []error { return m }

// DeleteWorkloadResponseValidationError is the validation error returned by
// DeleteWorkloadResponse.Validate if the designated constraints aren't met.
type DeleteWorkloadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkloadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkloadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkloadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkloadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkloadResponseValidationError) ErrorName() string {
	return "DeleteWorkloadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkloadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkloadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkloadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkloadResponseValidationError{}

// Validate checks the field values on CreateWorkloadMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkloadMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkloadMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkloadMemberRequestMultiError, or nil if none found.
func (m *CreateWorkloadMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkloadMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkloadMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkloadMemberRequestValidationError{
					field:  "WorkloadMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkloadMemberRequestValidationError{
					field:  "WorkloadMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkloadMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkloadMemberRequestValidationError{
				field:  "WorkloadMember",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkloadMemberRequestMultiError(errors)
	}

	return nil
}

// CreateWorkloadMemberRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWorkloadMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateWorkloadMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkloadMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkloadMemberRequestMultiError) AllErrors() []error { return m }

// CreateWorkloadMemberRequestValidationError is the validation error returned
// by CreateWorkloadMemberRequest.Validate if the designated constraints
// aren't met.
type CreateWorkloadMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkloadMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkloadMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkloadMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkloadMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkloadMemberRequestValidationError) ErrorName() string {
	return "CreateWorkloadMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkloadMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkloadMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkloadMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkloadMemberRequestValidationError{}

// Validate checks the field values on CreateWorkloadMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWorkloadMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWorkloadMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateWorkloadMemberResponseMultiError, or nil if none found.
func (m *CreateWorkloadMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWorkloadMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkloadMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateWorkloadMemberResponseValidationError{
					field:  "WorkloadMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateWorkloadMemberResponseValidationError{
					field:  "WorkloadMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkloadMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateWorkloadMemberResponseValidationError{
				field:  "WorkloadMember",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateWorkloadMemberResponseMultiError(errors)
	}

	return nil
}

// CreateWorkloadMemberResponseMultiError is an error wrapping multiple
// validation errors returned by CreateWorkloadMemberResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateWorkloadMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWorkloadMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWorkloadMemberResponseMultiError) AllErrors() []error { return m }

// CreateWorkloadMemberResponseValidationError is the validation error returned
// by CreateWorkloadMemberResponse.Validate if the designated constraints
// aren't met.
type CreateWorkloadMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWorkloadMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWorkloadMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWorkloadMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWorkloadMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWorkloadMemberResponseValidationError) ErrorName() string {
	return "CreateWorkloadMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWorkloadMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWorkloadMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWorkloadMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWorkloadMemberResponseValidationError{}

// Validate checks the field values on GetWorkloadMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadMemberRequestMultiError, or nil if none found.
func (m *GetWorkloadMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetWorkloadMemberRequestMultiError(errors)
	}

	return nil
}

// GetWorkloadMemberRequestMultiError is an error wrapping multiple validation
// errors returned by GetWorkloadMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWorkloadMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadMemberRequestMultiError) AllErrors() []error { return m }

// GetWorkloadMemberRequestValidationError is the validation error returned by
// GetWorkloadMemberRequest.Validate if the designated constraints aren't met.
type GetWorkloadMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadMemberRequestValidationError) ErrorName() string {
	return "GetWorkloadMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadMemberRequestValidationError{}

// Validate checks the field values on GetWorkloadMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWorkloadMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWorkloadMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWorkloadMemberResponseMultiError, or nil if none found.
func (m *GetWorkloadMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWorkloadMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWorkloadMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetWorkloadMemberResponseValidationError{
					field:  "WorkloadMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetWorkloadMemberResponseValidationError{
					field:  "WorkloadMember",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkloadMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetWorkloadMemberResponseValidationError{
				field:  "WorkloadMember",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetWorkloadMemberResponseMultiError(errors)
	}

	return nil
}

// GetWorkloadMemberResponseMultiError is an error wrapping multiple validation
// errors returned by GetWorkloadMemberResponse.ValidateAll() if the
// designated constraints aren't met.
type GetWorkloadMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWorkloadMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWorkloadMemberResponseMultiError) AllErrors() []error { return m }

// GetWorkloadMemberResponseValidationError is the validation error returned by
// GetWorkloadMemberResponse.Validate if the designated constraints aren't met.
type GetWorkloadMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWorkloadMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWorkloadMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWorkloadMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWorkloadMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWorkloadMemberResponseValidationError) ErrorName() string {
	return "GetWorkloadMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWorkloadMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWorkloadMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWorkloadMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWorkloadMemberResponseValidationError{}

// Validate checks the field values on ListWorkloadMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkloadMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkloadMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkloadMembersRequestMultiError, or nil if none found.
func (m *ListWorkloadMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkloadMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListWorkloadMembersRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListWorkloadMembersRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListWorkloadMembersRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListWorkloadMembersRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListWorkloadMembersRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListWorkloadMembersRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListWorkloadMembersRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListWorkloadMembersRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListWorkloadMembersRequestMultiError(errors)
	}

	return nil
}

// ListWorkloadMembersRequestMultiError is an error wrapping multiple
// validation errors returned by ListWorkloadMembersRequest.ValidateAll() if
// the designated constraints aren't met.
type ListWorkloadMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkloadMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkloadMembersRequestMultiError) AllErrors() []error { return m }

// ListWorkloadMembersRequestValidationError is the validation error returned
// by ListWorkloadMembersRequest.Validate if the designated constraints aren't met.
type ListWorkloadMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkloadMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkloadMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkloadMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkloadMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkloadMembersRequestValidationError) ErrorName() string {
	return "ListWorkloadMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkloadMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkloadMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkloadMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkloadMembersRequestValidationError{}

var _ListWorkloadMembersRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListWorkloadMembersRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListWorkloadMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWorkloadMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWorkloadMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWorkloadMembersResponseMultiError, or nil if none found.
func (m *ListWorkloadMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWorkloadMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWorkloadMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWorkloadMembersResponseValidationError{
						field:  fmt.Sprintf("WorkloadMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWorkloadMembersResponseValidationError{
						field:  fmt.Sprintf("WorkloadMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWorkloadMembersResponseValidationError{
					field:  fmt.Sprintf("WorkloadMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListWorkloadMembersResponseMultiError(errors)
	}

	return nil
}

// ListWorkloadMembersResponseMultiError is an error wrapping multiple
// validation errors returned by ListWorkloadMembersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListWorkloadMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWorkloadMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWorkloadMembersResponseMultiError) AllErrors() []error { return m }

// ListWorkloadMembersResponseValidationError is the validation error returned
// by ListWorkloadMembersResponse.Validate if the designated constraints
// aren't met.
type ListWorkloadMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWorkloadMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWorkloadMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWorkloadMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWorkloadMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWorkloadMembersResponseValidationError) ErrorName() string {
	return "ListWorkloadMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWorkloadMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWorkloadMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWorkloadMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWorkloadMembersResponseValidationError{}

// Validate checks the field values on DeleteWorkloadMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkloadMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkloadMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkloadMemberRequestMultiError, or nil if none found.
func (m *DeleteWorkloadMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkloadMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteWorkloadMemberRequestMultiError(errors)
	}

	return nil
}

// DeleteWorkloadMemberRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkloadMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteWorkloadMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkloadMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkloadMemberRequestMultiError) AllErrors() []error { return m }

// DeleteWorkloadMemberRequestValidationError is the validation error returned
// by DeleteWorkloadMemberRequest.Validate if the designated constraints
// aren't met.
type DeleteWorkloadMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkloadMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkloadMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkloadMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkloadMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkloadMemberRequestValidationError) ErrorName() string {
	return "DeleteWorkloadMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkloadMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkloadMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkloadMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkloadMemberRequestValidationError{}

// Validate checks the field values on DeleteWorkloadMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteWorkloadMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteWorkloadMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteWorkloadMemberResponseMultiError, or nil if none found.
func (m *DeleteWorkloadMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteWorkloadMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteWorkloadMemberResponseMultiError(errors)
	}

	return nil
}

// DeleteWorkloadMemberResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteWorkloadMemberResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteWorkloadMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteWorkloadMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteWorkloadMemberResponseMultiError) AllErrors() []error { return m }

// DeleteWorkloadMemberResponseValidationError is the validation error returned
// by DeleteWorkloadMemberResponse.Validate if the designated constraints
// aren't met.
type DeleteWorkloadMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteWorkloadMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteWorkloadMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteWorkloadMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteWorkloadMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteWorkloadMemberResponseValidationError) ErrorName() string {
	return "DeleteWorkloadMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteWorkloadMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteWorkloadMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteWorkloadMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteWorkloadMemberResponseValidationError{}

// Validate checks the field values on ListSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSchedulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSchedulesRequestMultiError, or nil if none found.
func (m *ListSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListSchedulesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListSchedulesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetHostId()) > 13 {
		err := ListSchedulesRequestValidationError{
			field:  "HostId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSchedulesRequest_HostId_Pattern.MatchString(m.GetHostId()) {
		err := ListSchedulesRequestValidationError{
			field:  "HostId",
			reason: "value does not match regex pattern \"^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSiteId()) > 13 {
		err := ListSchedulesRequestValidationError{
			field:  "SiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSchedulesRequest_SiteId_Pattern.MatchString(m.GetSiteId()) {
		err := ListSchedulesRequestValidationError{
			field:  "SiteId",
			reason: "value does not match regex pattern \"^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegionId()) > 15 {
		err := ListSchedulesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSchedulesRequest_RegionId_Pattern.MatchString(m.GetRegionId()) {
		err := ListSchedulesRequestValidationError{
			field:  "RegionId",
			reason: "value does not match regex pattern \"^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSchedulesRequest_UnixEpoch_Pattern.MatchString(m.GetUnixEpoch()) {
		err := ListSchedulesRequestValidationError{
			field:  "UnixEpoch",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSchedulesRequestMultiError(errors)
	}

	return nil
}

// ListSchedulesRequestMultiError is an error wrapping multiple validation
// errors returned by ListSchedulesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSchedulesRequestMultiError) AllErrors() []error { return m }

// ListSchedulesRequestValidationError is the validation error returned by
// ListSchedulesRequest.Validate if the designated constraints aren't met.
type ListSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSchedulesRequestValidationError) ErrorName() string {
	return "ListSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSchedulesRequestValidationError{}

var _ListSchedulesRequest_HostId_Pattern = regexp.MustCompile("^host-[0-9a-f]{8}$")

var _ListSchedulesRequest_SiteId_Pattern = regexp.MustCompile("^site-[0-9a-f]{8}$")

var _ListSchedulesRequest_RegionId_Pattern = regexp.MustCompile("^region-[0-9a-f]{8}$")

var _ListSchedulesRequest_UnixEpoch_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on ListSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSchedulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSchedulesResponseMultiError, or nil if none found.
func (m *ListSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSingleSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("SingleSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("SingleSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSchedulesResponseValidationError{
					field:  fmt.Sprintf("SingleSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRepeatedSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSchedulesResponseValidationError{
						field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSchedulesResponseValidationError{
					field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListSchedulesResponseMultiError(errors)
	}

	return nil
}

// ListSchedulesResponseMultiError is an error wrapping multiple validation
// errors returned by ListSchedulesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSchedulesResponseMultiError) AllErrors() []error { return m }

// ListSchedulesResponseValidationError is the validation error returned by
// ListSchedulesResponse.Validate if the designated constraints aren't met.
type ListSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSchedulesResponseValidationError) ErrorName() string {
	return "ListSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSchedulesResponseValidationError{}

// Validate checks the field values on CreateSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSingleScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSingleScheduleRequestMultiError, or nil if none found.
func (m *CreateSingleScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingleScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSingleSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSingleScheduleRequestValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSingleScheduleRequestValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSingleScheduleRequestValidationError{
				field:  "SingleSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSingleScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateSingleScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateSingleScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type CreateSingleScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingleScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingleScheduleRequestMultiError) AllErrors() []error { return m }

// CreateSingleScheduleRequestValidationError is the validation error returned
// by CreateSingleScheduleRequest.Validate if the designated constraints
// aren't met.
type CreateSingleScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingleScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingleScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingleScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingleScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingleScheduleRequestValidationError) ErrorName() string {
	return "CreateSingleScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingleScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingleScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingleScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingleScheduleRequestValidationError{}

// Validate checks the field values on CreateSingleScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSingleScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSingleScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSingleScheduleResponseMultiError, or nil if none found.
func (m *CreateSingleScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSingleScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSingleSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSingleScheduleResponseValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSingleScheduleResponseValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSingleScheduleResponseValidationError{
				field:  "SingleSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSingleScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateSingleScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateSingleScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateSingleScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSingleScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSingleScheduleResponseMultiError) AllErrors() []error { return m }

// CreateSingleScheduleResponseValidationError is the validation error returned
// by CreateSingleScheduleResponse.Validate if the designated constraints
// aren't met.
type CreateSingleScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSingleScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSingleScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSingleScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSingleScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSingleScheduleResponseValidationError) ErrorName() string {
	return "CreateSingleScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSingleScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSingleScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSingleScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSingleScheduleResponseValidationError{}

// Validate checks the field values on GetSingleScheduleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingleScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingleScheduleRequestMultiError, or nil if none found.
func (m *GetSingleScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetSingleScheduleRequestMultiError(errors)
	}

	return nil
}

// GetSingleScheduleRequestMultiError is an error wrapping multiple validation
// errors returned by GetSingleScheduleRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSingleScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleScheduleRequestMultiError) AllErrors() []error { return m }

// GetSingleScheduleRequestValidationError is the validation error returned by
// GetSingleScheduleRequest.Validate if the designated constraints aren't met.
type GetSingleScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleScheduleRequestValidationError) ErrorName() string {
	return "GetSingleScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleScheduleRequestValidationError{}

// Validate checks the field values on GetSingleScheduleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSingleScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSingleScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSingleScheduleResponseMultiError, or nil if none found.
func (m *GetSingleScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSingleScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSingleSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSingleScheduleResponseValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSingleScheduleResponseValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSingleScheduleResponseValidationError{
				field:  "SingleSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSingleScheduleResponseMultiError(errors)
	}

	return nil
}

// GetSingleScheduleResponseMultiError is an error wrapping multiple validation
// errors returned by GetSingleScheduleResponse.ValidateAll() if the
// designated constraints aren't met.
type GetSingleScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSingleScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSingleScheduleResponseMultiError) AllErrors() []error { return m }

// GetSingleScheduleResponseValidationError is the validation error returned by
// GetSingleScheduleResponse.Validate if the designated constraints aren't met.
type GetSingleScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSingleScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSingleScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSingleScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSingleScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSingleScheduleResponseValidationError) ErrorName() string {
	return "GetSingleScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSingleScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSingleScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSingleScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSingleScheduleResponseValidationError{}

// Validate checks the field values on ListSingleSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSingleSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSingleSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSingleSchedulesRequestMultiError, or nil if none found.
func (m *ListSingleSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSingleSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListSingleSchedulesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListSingleSchedulesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetHostId()) > 13 {
		err := ListSingleSchedulesRequestValidationError{
			field:  "HostId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSingleSchedulesRequest_HostId_Pattern.MatchString(m.GetHostId()) {
		err := ListSingleSchedulesRequestValidationError{
			field:  "HostId",
			reason: "value does not match regex pattern \"^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSiteId()) > 13 {
		err := ListSingleSchedulesRequestValidationError{
			field:  "SiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSingleSchedulesRequest_SiteId_Pattern.MatchString(m.GetSiteId()) {
		err := ListSingleSchedulesRequestValidationError{
			field:  "SiteId",
			reason: "value does not match regex pattern \"^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegionId()) > 15 {
		err := ListSingleSchedulesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSingleSchedulesRequest_RegionId_Pattern.MatchString(m.GetRegionId()) {
		err := ListSingleSchedulesRequestValidationError{
			field:  "RegionId",
			reason: "value does not match regex pattern \"^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListSingleSchedulesRequest_UnixEpoch_Pattern.MatchString(m.GetUnixEpoch()) {
		err := ListSingleSchedulesRequestValidationError{
			field:  "UnixEpoch",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSingleSchedulesRequestMultiError(errors)
	}

	return nil
}

// ListSingleSchedulesRequestMultiError is an error wrapping multiple
// validation errors returned by ListSingleSchedulesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListSingleSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSingleSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSingleSchedulesRequestMultiError) AllErrors() []error { return m }

// ListSingleSchedulesRequestValidationError is the validation error returned
// by ListSingleSchedulesRequest.Validate if the designated constraints aren't met.
type ListSingleSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSingleSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSingleSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSingleSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSingleSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSingleSchedulesRequestValidationError) ErrorName() string {
	return "ListSingleSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSingleSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSingleSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSingleSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSingleSchedulesRequestValidationError{}

var _ListSingleSchedulesRequest_HostId_Pattern = regexp.MustCompile("^host-[0-9a-f]{8}$")

var _ListSingleSchedulesRequest_SiteId_Pattern = regexp.MustCompile("^site-[0-9a-f]{8}$")

var _ListSingleSchedulesRequest_RegionId_Pattern = regexp.MustCompile("^region-[0-9a-f]{8}$")

var _ListSingleSchedulesRequest_UnixEpoch_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on ListSingleSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSingleSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSingleSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSingleSchedulesResponseMultiError, or nil if none found.
func (m *ListSingleSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSingleSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSingleSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSingleSchedulesResponseValidationError{
						field:  fmt.Sprintf("SingleSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSingleSchedulesResponseValidationError{
						field:  fmt.Sprintf("SingleSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSingleSchedulesResponseValidationError{
					field:  fmt.Sprintf("SingleSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListSingleSchedulesResponseMultiError(errors)
	}

	return nil
}

// ListSingleSchedulesResponseMultiError is an error wrapping multiple
// validation errors returned by ListSingleSchedulesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListSingleSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSingleSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSingleSchedulesResponseMultiError) AllErrors() []error { return m }

// ListSingleSchedulesResponseValidationError is the validation error returned
// by ListSingleSchedulesResponse.Validate if the designated constraints
// aren't met.
type ListSingleSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSingleSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSingleSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSingleSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSingleSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSingleSchedulesResponseValidationError) ErrorName() string {
	return "ListSingleSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSingleSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSingleSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSingleSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSingleSchedulesResponseValidationError{}

// Validate checks the field values on UpdateSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSingleScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSingleScheduleRequestMultiError, or nil if none found.
func (m *UpdateSingleScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSingleScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetSingleSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSingleScheduleRequestValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSingleScheduleRequestValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSingleScheduleRequestValidationError{
				field:  "SingleSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSingleScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateSingleScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateSingleScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateSingleScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSingleScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSingleScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateSingleScheduleRequestValidationError is the validation error returned
// by UpdateSingleScheduleRequest.Validate if the designated constraints
// aren't met.
type UpdateSingleScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSingleScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSingleScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSingleScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSingleScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSingleScheduleRequestValidationError) ErrorName() string {
	return "UpdateSingleScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSingleScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSingleScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSingleScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSingleScheduleRequestValidationError{}

// Validate checks the field values on PatchSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchSingleScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchSingleScheduleRequestMultiError, or nil if none found.
func (m *PatchSingleScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchSingleScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetSingleSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchSingleScheduleRequestValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchSingleScheduleRequestValidationError{
					field:  "SingleSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSingleSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchSingleScheduleRequestValidationError{
				field:  "SingleSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchSingleScheduleRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchSingleScheduleRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchSingleScheduleRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchSingleScheduleRequestMultiError(errors)
	}

	return nil
}

// PatchSingleScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by PatchSingleScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type PatchSingleScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchSingleScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchSingleScheduleRequestMultiError) AllErrors() []error { return m }

// PatchSingleScheduleRequestValidationError is the validation error returned
// by PatchSingleScheduleRequest.Validate if the designated constraints aren't met.
type PatchSingleScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchSingleScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchSingleScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchSingleScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchSingleScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchSingleScheduleRequestValidationError) ErrorName() string {
	return "PatchSingleScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchSingleScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchSingleScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchSingleScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchSingleScheduleRequestValidationError{}

// Validate checks the field values on DeleteSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSingleScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSingleScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSingleScheduleRequestMultiError, or nil if none found.
func (m *DeleteSingleScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSingleScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteSingleScheduleRequestMultiError(errors)
	}

	return nil
}

// DeleteSingleScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteSingleScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteSingleScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSingleScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSingleScheduleRequestMultiError) AllErrors() []error { return m }

// DeleteSingleScheduleRequestValidationError is the validation error returned
// by DeleteSingleScheduleRequest.Validate if the designated constraints
// aren't met.
type DeleteSingleScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSingleScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSingleScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSingleScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSingleScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSingleScheduleRequestValidationError) ErrorName() string {
	return "DeleteSingleScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSingleScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSingleScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSingleScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSingleScheduleRequestValidationError{}

// Validate checks the field values on DeleteSingleScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSingleScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSingleScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSingleScheduleResponseMultiError, or nil if none found.
func (m *DeleteSingleScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSingleScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteSingleScheduleResponseMultiError(errors)
	}

	return nil
}

// DeleteSingleScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteSingleScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteSingleScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSingleScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSingleScheduleResponseMultiError) AllErrors() []error { return m }

// DeleteSingleScheduleResponseValidationError is the validation error returned
// by DeleteSingleScheduleResponse.Validate if the designated constraints
// aren't met.
type DeleteSingleScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSingleScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSingleScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSingleScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSingleScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSingleScheduleResponseValidationError) ErrorName() string {
	return "DeleteSingleScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSingleScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSingleScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSingleScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSingleScheduleResponseValidationError{}

// Validate checks the field values on CreateRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRepeatedScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRepeatedScheduleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateRepeatedScheduleRequestMultiError, or nil if none found.
func (m *CreateRepeatedScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRepeatedScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRepeatedSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRepeatedScheduleRequestValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRepeatedScheduleRequestValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatedSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRepeatedScheduleRequestValidationError{
				field:  "RepeatedSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRepeatedScheduleRequestMultiError(errors)
	}

	return nil
}

// CreateRepeatedScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by CreateRepeatedScheduleRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateRepeatedScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRepeatedScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRepeatedScheduleRequestMultiError) AllErrors() []error { return m }

// CreateRepeatedScheduleRequestValidationError is the validation error
// returned by CreateRepeatedScheduleRequest.Validate if the designated
// constraints aren't met.
type CreateRepeatedScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepeatedScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepeatedScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepeatedScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepeatedScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepeatedScheduleRequestValidationError) ErrorName() string {
	return "CreateRepeatedScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepeatedScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepeatedScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepeatedScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepeatedScheduleRequestValidationError{}

// Validate checks the field values on CreateRepeatedScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRepeatedScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRepeatedScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateRepeatedScheduleResponseMultiError, or nil if none found.
func (m *CreateRepeatedScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRepeatedScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRepeatedSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRepeatedScheduleResponseValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRepeatedScheduleResponseValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatedSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRepeatedScheduleResponseValidationError{
				field:  "RepeatedSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRepeatedScheduleResponseMultiError(errors)
	}

	return nil
}

// CreateRepeatedScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by CreateRepeatedScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateRepeatedScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRepeatedScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRepeatedScheduleResponseMultiError) AllErrors() []error { return m }

// CreateRepeatedScheduleResponseValidationError is the validation error
// returned by CreateRepeatedScheduleResponse.Validate if the designated
// constraints aren't met.
type CreateRepeatedScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepeatedScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepeatedScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepeatedScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepeatedScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepeatedScheduleResponseValidationError) ErrorName() string {
	return "CreateRepeatedScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepeatedScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepeatedScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepeatedScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepeatedScheduleResponseValidationError{}

// Validate checks the field values on GetRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRepeatedScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRepeatedScheduleRequestMultiError, or nil if none found.
func (m *GetRepeatedScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepeatedScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetRepeatedScheduleRequestMultiError(errors)
	}

	return nil
}

// GetRepeatedScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by GetRepeatedScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type GetRepeatedScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepeatedScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepeatedScheduleRequestMultiError) AllErrors() []error { return m }

// GetRepeatedScheduleRequestValidationError is the validation error returned
// by GetRepeatedScheduleRequest.Validate if the designated constraints aren't met.
type GetRepeatedScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepeatedScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepeatedScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepeatedScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepeatedScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepeatedScheduleRequestValidationError) ErrorName() string {
	return "GetRepeatedScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepeatedScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepeatedScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepeatedScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepeatedScheduleRequestValidationError{}

// Validate checks the field values on GetRepeatedScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRepeatedScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepeatedScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRepeatedScheduleResponseMultiError, or nil if none found.
func (m *GetRepeatedScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepeatedScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRepeatedSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRepeatedScheduleResponseValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRepeatedScheduleResponseValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatedSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRepeatedScheduleResponseValidationError{
				field:  "RepeatedSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRepeatedScheduleResponseMultiError(errors)
	}

	return nil
}

// GetRepeatedScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by GetRepeatedScheduleResponse.ValidateAll() if
// the designated constraints aren't met.
type GetRepeatedScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepeatedScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepeatedScheduleResponseMultiError) AllErrors() []error { return m }

// GetRepeatedScheduleResponseValidationError is the validation error returned
// by GetRepeatedScheduleResponse.Validate if the designated constraints
// aren't met.
type GetRepeatedScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepeatedScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepeatedScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepeatedScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepeatedScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepeatedScheduleResponseValidationError) ErrorName() string {
	return "GetRepeatedScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRepeatedScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepeatedScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepeatedScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepeatedScheduleResponseValidationError{}

// Validate checks the field values on ListRepeatedSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRepeatedSchedulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRepeatedSchedulesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRepeatedSchedulesRequestMultiError, or nil if none found.
func (m *ListRepeatedSchedulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRepeatedSchedulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListRepeatedSchedulesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListRepeatedSchedulesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetHostId()) > 13 {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "HostId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListRepeatedSchedulesRequest_HostId_Pattern.MatchString(m.GetHostId()) {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "HostId",
			reason: "value does not match regex pattern \"^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSiteId()) > 13 {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "SiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListRepeatedSchedulesRequest_SiteId_Pattern.MatchString(m.GetSiteId()) {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "SiteId",
			reason: "value does not match regex pattern \"^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegionId()) > 15 {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListRepeatedSchedulesRequest_RegionId_Pattern.MatchString(m.GetRegionId()) {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "RegionId",
			reason: "value does not match regex pattern \"^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListRepeatedSchedulesRequest_UnixEpoch_Pattern.MatchString(m.GetUnixEpoch()) {
		err := ListRepeatedSchedulesRequestValidationError{
			field:  "UnixEpoch",
			reason: "value does not match regex pattern \"^[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListRepeatedSchedulesRequestMultiError(errors)
	}

	return nil
}

// ListRepeatedSchedulesRequestMultiError is an error wrapping multiple
// validation errors returned by ListRepeatedSchedulesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListRepeatedSchedulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRepeatedSchedulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRepeatedSchedulesRequestMultiError) AllErrors() []error { return m }

// ListRepeatedSchedulesRequestValidationError is the validation error returned
// by ListRepeatedSchedulesRequest.Validate if the designated constraints
// aren't met.
type ListRepeatedSchedulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepeatedSchedulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepeatedSchedulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepeatedSchedulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepeatedSchedulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepeatedSchedulesRequestValidationError) ErrorName() string {
	return "ListRepeatedSchedulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepeatedSchedulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepeatedSchedulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepeatedSchedulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepeatedSchedulesRequestValidationError{}

var _ListRepeatedSchedulesRequest_HostId_Pattern = regexp.MustCompile("^host-[0-9a-f]{8}$")

var _ListRepeatedSchedulesRequest_SiteId_Pattern = regexp.MustCompile("^site-[0-9a-f]{8}$")

var _ListRepeatedSchedulesRequest_RegionId_Pattern = regexp.MustCompile("^region-[0-9a-f]{8}$")

var _ListRepeatedSchedulesRequest_UnixEpoch_Pattern = regexp.MustCompile("^[0-9]+$")

// Validate checks the field values on ListRepeatedSchedulesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListRepeatedSchedulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRepeatedSchedulesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListRepeatedSchedulesResponseMultiError, or nil if none found.
func (m *ListRepeatedSchedulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRepeatedSchedulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRepeatedSchedules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRepeatedSchedulesResponseValidationError{
						field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRepeatedSchedulesResponseValidationError{
						field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRepeatedSchedulesResponseValidationError{
					field:  fmt.Sprintf("RepeatedSchedules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListRepeatedSchedulesResponseMultiError(errors)
	}

	return nil
}

// ListRepeatedSchedulesResponseMultiError is an error wrapping multiple
// validation errors returned by ListRepeatedSchedulesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListRepeatedSchedulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRepeatedSchedulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRepeatedSchedulesResponseMultiError) AllErrors() []error { return m }

// ListRepeatedSchedulesResponseValidationError is the validation error
// returned by ListRepeatedSchedulesResponse.Validate if the designated
// constraints aren't met.
type ListRepeatedSchedulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepeatedSchedulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepeatedSchedulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepeatedSchedulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepeatedSchedulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepeatedSchedulesResponseValidationError) ErrorName() string {
	return "ListRepeatedSchedulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepeatedSchedulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepeatedSchedulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepeatedSchedulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepeatedSchedulesResponseValidationError{}

// Validate checks the field values on UpdateRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRepeatedScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRepeatedScheduleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateRepeatedScheduleRequestMultiError, or nil if none found.
func (m *UpdateRepeatedScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRepeatedScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetRepeatedSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRepeatedScheduleRequestValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRepeatedScheduleRequestValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatedSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRepeatedScheduleRequestValidationError{
				field:  "RepeatedSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRepeatedScheduleRequestMultiError(errors)
	}

	return nil
}

// UpdateRepeatedScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateRepeatedScheduleRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateRepeatedScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRepeatedScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRepeatedScheduleRequestMultiError) AllErrors() []error { return m }

// UpdateRepeatedScheduleRequestValidationError is the validation error
// returned by UpdateRepeatedScheduleRequest.Validate if the designated
// constraints aren't met.
type UpdateRepeatedScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepeatedScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepeatedScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepeatedScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepeatedScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepeatedScheduleRequestValidationError) ErrorName() string {
	return "UpdateRepeatedScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRepeatedScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepeatedScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepeatedScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepeatedScheduleRequestValidationError{}

// Validate checks the field values on PatchRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PatchRepeatedScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PatchRepeatedScheduleRequestMultiError, or nil if none found.
func (m *PatchRepeatedScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchRepeatedScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetRepeatedSchedule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchRepeatedScheduleRequestValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchRepeatedScheduleRequestValidationError{
					field:  "RepeatedSchedule",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeatedSchedule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchRepeatedScheduleRequestValidationError{
				field:  "RepeatedSchedule",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchRepeatedScheduleRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchRepeatedScheduleRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchRepeatedScheduleRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchRepeatedScheduleRequestMultiError(errors)
	}

	return nil
}

// PatchRepeatedScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by PatchRepeatedScheduleRequest.ValidateAll() if
// the designated constraints aren't met.
type PatchRepeatedScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchRepeatedScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchRepeatedScheduleRequestMultiError) AllErrors() []error { return m }

// PatchRepeatedScheduleRequestValidationError is the validation error returned
// by PatchRepeatedScheduleRequest.Validate if the designated constraints
// aren't met.
type PatchRepeatedScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchRepeatedScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchRepeatedScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchRepeatedScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchRepeatedScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchRepeatedScheduleRequestValidationError) ErrorName() string {
	return "PatchRepeatedScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchRepeatedScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchRepeatedScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchRepeatedScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchRepeatedScheduleRequestValidationError{}

// Validate checks the field values on DeleteRepeatedScheduleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRepeatedScheduleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRepeatedScheduleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteRepeatedScheduleRequestMultiError, or nil if none found.
func (m *DeleteRepeatedScheduleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRepeatedScheduleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteRepeatedScheduleRequestMultiError(errors)
	}

	return nil
}

// DeleteRepeatedScheduleRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteRepeatedScheduleRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteRepeatedScheduleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRepeatedScheduleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRepeatedScheduleRequestMultiError) AllErrors() []error { return m }

// DeleteRepeatedScheduleRequestValidationError is the validation error
// returned by DeleteRepeatedScheduleRequest.Validate if the designated
// constraints aren't met.
type DeleteRepeatedScheduleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepeatedScheduleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepeatedScheduleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepeatedScheduleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepeatedScheduleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepeatedScheduleRequestValidationError) ErrorName() string {
	return "DeleteRepeatedScheduleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRepeatedScheduleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepeatedScheduleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepeatedScheduleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepeatedScheduleRequestValidationError{}

// Validate checks the field values on DeleteRepeatedScheduleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRepeatedScheduleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRepeatedScheduleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteRepeatedScheduleResponseMultiError, or nil if none found.
func (m *DeleteRepeatedScheduleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRepeatedScheduleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRepeatedScheduleResponseMultiError(errors)
	}

	return nil
}

// DeleteRepeatedScheduleResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteRepeatedScheduleResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteRepeatedScheduleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRepeatedScheduleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRepeatedScheduleResponseMultiError) AllErrors() []error { return m }

// DeleteRepeatedScheduleResponseValidationError is the validation error
// returned by DeleteRepeatedScheduleResponse.Validate if the designated
// constraints aren't met.
type DeleteRepeatedScheduleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepeatedScheduleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepeatedScheduleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepeatedScheduleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepeatedScheduleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepeatedScheduleResponseValidationError) ErrorName() string {
	return "DeleteRepeatedScheduleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRepeatedScheduleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepeatedScheduleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepeatedScheduleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepeatedScheduleResponseValidationError{}

// Validate checks the field values on CreateTelemetryLogsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTelemetryLogsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryLogsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTelemetryLogsGroupRequestMultiError, or nil if none found.
func (m *CreateTelemetryLogsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryLogsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryLogsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryLogsGroupRequestValidationError{
					field:  "TelemetryLogsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryLogsGroupRequestValidationError{
					field:  "TelemetryLogsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryLogsGroupRequestValidationError{
				field:  "TelemetryLogsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryLogsGroupRequestMultiError(errors)
	}

	return nil
}

// CreateTelemetryLogsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by CreateTelemetryLogsGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateTelemetryLogsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryLogsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryLogsGroupRequestMultiError) AllErrors() []error { return m }

// CreateTelemetryLogsGroupRequestValidationError is the validation error
// returned by CreateTelemetryLogsGroupRequest.Validate if the designated
// constraints aren't met.
type CreateTelemetryLogsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryLogsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryLogsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryLogsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryLogsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryLogsGroupRequestValidationError) ErrorName() string {
	return "CreateTelemetryLogsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryLogsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryLogsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryLogsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryLogsGroupRequestValidationError{}

// Validate checks the field values on CreateTelemetryLogsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTelemetryLogsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryLogsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateTelemetryLogsGroupResponseMultiError, or nil if none found.
func (m *CreateTelemetryLogsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryLogsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryLogsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryLogsGroupResponseValidationError{
					field:  "TelemetryLogsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryLogsGroupResponseValidationError{
					field:  "TelemetryLogsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryLogsGroupResponseValidationError{
				field:  "TelemetryLogsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryLogsGroupResponseMultiError(errors)
	}

	return nil
}

// CreateTelemetryLogsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateTelemetryLogsGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryLogsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryLogsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryLogsGroupResponseMultiError) AllErrors() []error { return m }

// CreateTelemetryLogsGroupResponseValidationError is the validation error
// returned by CreateTelemetryLogsGroupResponse.Validate if the designated
// constraints aren't met.
type CreateTelemetryLogsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryLogsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryLogsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryLogsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryLogsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryLogsGroupResponseValidationError) ErrorName() string {
	return "CreateTelemetryLogsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryLogsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryLogsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryLogsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryLogsGroupResponseValidationError{}

// Validate checks the field values on GetTelemetryLogsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryLogsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryLogsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTelemetryLogsGroupRequestMultiError, or nil if none found.
func (m *GetTelemetryLogsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryLogsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetTelemetryLogsGroupRequestMultiError(errors)
	}

	return nil
}

// GetTelemetryLogsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryLogsGroupRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTelemetryLogsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryLogsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryLogsGroupRequestMultiError) AllErrors() []error { return m }

// GetTelemetryLogsGroupRequestValidationError is the validation error returned
// by GetTelemetryLogsGroupRequest.Validate if the designated constraints
// aren't met.
type GetTelemetryLogsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryLogsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryLogsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryLogsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryLogsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryLogsGroupRequestValidationError) ErrorName() string {
	return "GetTelemetryLogsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryLogsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryLogsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryLogsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryLogsGroupRequestValidationError{}

// Validate checks the field values on GetTelemetryLogsGroupResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryLogsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryLogsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTelemetryLogsGroupResponseMultiError, or nil if none found.
func (m *GetTelemetryLogsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryLogsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryLogsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTelemetryLogsGroupResponseValidationError{
					field:  "TelemetryLogsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTelemetryLogsGroupResponseValidationError{
					field:  "TelemetryLogsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTelemetryLogsGroupResponseValidationError{
				field:  "TelemetryLogsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTelemetryLogsGroupResponseMultiError(errors)
	}

	return nil
}

// GetTelemetryLogsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryLogsGroupResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTelemetryLogsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryLogsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryLogsGroupResponseMultiError) AllErrors() []error { return m }

// GetTelemetryLogsGroupResponseValidationError is the validation error
// returned by GetTelemetryLogsGroupResponse.Validate if the designated
// constraints aren't met.
type GetTelemetryLogsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryLogsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryLogsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryLogsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryLogsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryLogsGroupResponseValidationError) ErrorName() string {
	return "GetTelemetryLogsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryLogsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryLogsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryLogsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryLogsGroupResponseValidationError{}

// Validate checks the field values on ListTelemetryLogsGroupsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTelemetryLogsGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryLogsGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTelemetryLogsGroupsRequestMultiError, or nil if none found.
func (m *ListTelemetryLogsGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryLogsGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListTelemetryLogsGroupsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListTelemetryLogsGroupsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListTelemetryLogsGroupsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListTelemetryLogsGroupsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListTelemetryLogsGroupsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTelemetryLogsGroupsRequestMultiError(errors)
	}

	return nil
}

// ListTelemetryLogsGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by ListTelemetryLogsGroupsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListTelemetryLogsGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryLogsGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryLogsGroupsRequestMultiError) AllErrors() []error { return m }

// ListTelemetryLogsGroupsRequestValidationError is the validation error
// returned by ListTelemetryLogsGroupsRequest.Validate if the designated
// constraints aren't met.
type ListTelemetryLogsGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryLogsGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryLogsGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryLogsGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryLogsGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryLogsGroupsRequestValidationError) ErrorName() string {
	return "ListTelemetryLogsGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryLogsGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryLogsGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryLogsGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryLogsGroupsRequestValidationError{}

var _ListTelemetryLogsGroupsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

// Validate checks the field values on ListTelemetryLogsGroupsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTelemetryLogsGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryLogsGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTelemetryLogsGroupsResponseMultiError, or nil if none found.
func (m *ListTelemetryLogsGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryLogsGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTelemetryLogsGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTelemetryLogsGroupsResponseValidationError{
						field:  fmt.Sprintf("TelemetryLogsGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTelemetryLogsGroupsResponseValidationError{
						field:  fmt.Sprintf("TelemetryLogsGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTelemetryLogsGroupsResponseValidationError{
					field:  fmt.Sprintf("TelemetryLogsGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListTelemetryLogsGroupsResponseMultiError(errors)
	}

	return nil
}

// ListTelemetryLogsGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by ListTelemetryLogsGroupsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListTelemetryLogsGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryLogsGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryLogsGroupsResponseMultiError) AllErrors() []error { return m }

// ListTelemetryLogsGroupsResponseValidationError is the validation error
// returned by ListTelemetryLogsGroupsResponse.Validate if the designated
// constraints aren't met.
type ListTelemetryLogsGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryLogsGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryLogsGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryLogsGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryLogsGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryLogsGroupsResponseValidationError) ErrorName() string {
	return "ListTelemetryLogsGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryLogsGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryLogsGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryLogsGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryLogsGroupsResponseValidationError{}

// Validate checks the field values on DeleteTelemetryLogsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTelemetryLogsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryLogsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryLogsGroupRequestMultiError, or nil if none found.
func (m *DeleteTelemetryLogsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryLogsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteTelemetryLogsGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteTelemetryLogsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteTelemetryLogsGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteTelemetryLogsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryLogsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryLogsGroupRequestMultiError) AllErrors() []error { return m }

// DeleteTelemetryLogsGroupRequestValidationError is the validation error
// returned by DeleteTelemetryLogsGroupRequest.Validate if the designated
// constraints aren't met.
type DeleteTelemetryLogsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryLogsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryLogsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryLogsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryLogsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryLogsGroupRequestValidationError) ErrorName() string {
	return "DeleteTelemetryLogsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryLogsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryLogsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryLogsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryLogsGroupRequestValidationError{}

// Validate checks the field values on DeleteTelemetryLogsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteTelemetryLogsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryLogsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryLogsGroupResponseMultiError, or nil if none found.
func (m *DeleteTelemetryLogsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryLogsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTelemetryLogsGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteTelemetryLogsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteTelemetryLogsGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryLogsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryLogsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryLogsGroupResponseMultiError) AllErrors() []error { return m }

// DeleteTelemetryLogsGroupResponseValidationError is the validation error
// returned by DeleteTelemetryLogsGroupResponse.Validate if the designated
// constraints aren't met.
type DeleteTelemetryLogsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryLogsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryLogsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryLogsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryLogsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryLogsGroupResponseValidationError) ErrorName() string {
	return "DeleteTelemetryLogsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryLogsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryLogsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryLogsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryLogsGroupResponseValidationError{}

// Validate checks the field values on CreateTelemetryMetricsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTelemetryMetricsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryMetricsGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTelemetryMetricsGroupRequestMultiError, or nil if none found.
func (m *CreateTelemetryMetricsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryMetricsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryMetricsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryMetricsGroupRequestValidationError{
					field:  "TelemetryMetricsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryMetricsGroupRequestValidationError{
					field:  "TelemetryMetricsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryMetricsGroupRequestValidationError{
				field:  "TelemetryMetricsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryMetricsGroupRequestMultiError(errors)
	}

	return nil
}

// CreateTelemetryMetricsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateTelemetryMetricsGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryMetricsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryMetricsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryMetricsGroupRequestMultiError) AllErrors() []error { return m }

// CreateTelemetryMetricsGroupRequestValidationError is the validation error
// returned by CreateTelemetryMetricsGroupRequest.Validate if the designated
// constraints aren't met.
type CreateTelemetryMetricsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryMetricsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryMetricsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryMetricsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryMetricsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryMetricsGroupRequestValidationError) ErrorName() string {
	return "CreateTelemetryMetricsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryMetricsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryMetricsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryMetricsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryMetricsGroupRequestValidationError{}

// Validate checks the field values on CreateTelemetryMetricsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTelemetryMetricsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryMetricsGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTelemetryMetricsGroupResponseMultiError, or nil if none found.
func (m *CreateTelemetryMetricsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryMetricsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryMetricsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryMetricsGroupResponseValidationError{
					field:  "TelemetryMetricsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryMetricsGroupResponseValidationError{
					field:  "TelemetryMetricsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryMetricsGroupResponseValidationError{
				field:  "TelemetryMetricsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryMetricsGroupResponseMultiError(errors)
	}

	return nil
}

// CreateTelemetryMetricsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateTelemetryMetricsGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryMetricsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryMetricsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryMetricsGroupResponseMultiError) AllErrors() []error { return m }

// CreateTelemetryMetricsGroupResponseValidationError is the validation error
// returned by CreateTelemetryMetricsGroupResponse.Validate if the designated
// constraints aren't met.
type CreateTelemetryMetricsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryMetricsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryMetricsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryMetricsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryMetricsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryMetricsGroupResponseValidationError) ErrorName() string {
	return "CreateTelemetryMetricsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryMetricsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryMetricsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryMetricsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryMetricsGroupResponseValidationError{}

// Validate checks the field values on GetTelemetryMetricsGroupRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryMetricsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryMetricsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTelemetryMetricsGroupRequestMultiError, or nil if none found.
func (m *GetTelemetryMetricsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryMetricsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetTelemetryMetricsGroupRequestMultiError(errors)
	}

	return nil
}

// GetTelemetryMetricsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryMetricsGroupRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTelemetryMetricsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryMetricsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryMetricsGroupRequestMultiError) AllErrors() []error { return m }

// GetTelemetryMetricsGroupRequestValidationError is the validation error
// returned by GetTelemetryMetricsGroupRequest.Validate if the designated
// constraints aren't met.
type GetTelemetryMetricsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryMetricsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryMetricsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryMetricsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryMetricsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryMetricsGroupRequestValidationError) ErrorName() string {
	return "GetTelemetryMetricsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryMetricsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryMetricsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryMetricsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryMetricsGroupRequestValidationError{}

// Validate checks the field values on GetTelemetryMetricsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTelemetryMetricsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryMetricsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTelemetryMetricsGroupResponseMultiError, or nil if none found.
func (m *GetTelemetryMetricsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryMetricsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryMetricsGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTelemetryMetricsGroupResponseValidationError{
					field:  "TelemetryMetricsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTelemetryMetricsGroupResponseValidationError{
					field:  "TelemetryMetricsGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTelemetryMetricsGroupResponseValidationError{
				field:  "TelemetryMetricsGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTelemetryMetricsGroupResponseMultiError(errors)
	}

	return nil
}

// GetTelemetryMetricsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTelemetryMetricsGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTelemetryMetricsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryMetricsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryMetricsGroupResponseMultiError) AllErrors() []error { return m }

// GetTelemetryMetricsGroupResponseValidationError is the validation error
// returned by GetTelemetryMetricsGroupResponse.Validate if the designated
// constraints aren't met.
type GetTelemetryMetricsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryMetricsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryMetricsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryMetricsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryMetricsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryMetricsGroupResponseValidationError) ErrorName() string {
	return "GetTelemetryMetricsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryMetricsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryMetricsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryMetricsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryMetricsGroupResponseValidationError{}

// Validate checks the field values on ListTelemetryMetricsGroupsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTelemetryMetricsGroupsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryMetricsGroupsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTelemetryMetricsGroupsRequestMultiError, or nil if none found.
func (m *ListTelemetryMetricsGroupsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryMetricsGroupsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListTelemetryMetricsGroupsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListTelemetryMetricsGroupsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListTelemetryMetricsGroupsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListTelemetryMetricsGroupsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListTelemetryMetricsGroupsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListTelemetryMetricsGroupsRequestMultiError(errors)
	}

	return nil
}

// ListTelemetryMetricsGroupsRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTelemetryMetricsGroupsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTelemetryMetricsGroupsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryMetricsGroupsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryMetricsGroupsRequestMultiError) AllErrors() []error { return m }

// ListTelemetryMetricsGroupsRequestValidationError is the validation error
// returned by ListTelemetryMetricsGroupsRequest.Validate if the designated
// constraints aren't met.
type ListTelemetryMetricsGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryMetricsGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryMetricsGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryMetricsGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryMetricsGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryMetricsGroupsRequestValidationError) ErrorName() string {
	return "ListTelemetryMetricsGroupsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryMetricsGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryMetricsGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryMetricsGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryMetricsGroupsRequestValidationError{}

var _ListTelemetryMetricsGroupsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

// Validate checks the field values on ListTelemetryMetricsGroupsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTelemetryMetricsGroupsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryMetricsGroupsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTelemetryMetricsGroupsResponseMultiError, or nil if none found.
func (m *ListTelemetryMetricsGroupsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryMetricsGroupsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTelemetryMetricsGroups() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTelemetryMetricsGroupsResponseValidationError{
						field:  fmt.Sprintf("TelemetryMetricsGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTelemetryMetricsGroupsResponseValidationError{
						field:  fmt.Sprintf("TelemetryMetricsGroups[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTelemetryMetricsGroupsResponseValidationError{
					field:  fmt.Sprintf("TelemetryMetricsGroups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListTelemetryMetricsGroupsResponseMultiError(errors)
	}

	return nil
}

// ListTelemetryMetricsGroupsResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTelemetryMetricsGroupsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTelemetryMetricsGroupsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryMetricsGroupsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryMetricsGroupsResponseMultiError) AllErrors() []error { return m }

// ListTelemetryMetricsGroupsResponseValidationError is the validation error
// returned by ListTelemetryMetricsGroupsResponse.Validate if the designated
// constraints aren't met.
type ListTelemetryMetricsGroupsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryMetricsGroupsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryMetricsGroupsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryMetricsGroupsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryMetricsGroupsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryMetricsGroupsResponseValidationError) ErrorName() string {
	return "ListTelemetryMetricsGroupsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryMetricsGroupsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryMetricsGroupsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryMetricsGroupsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryMetricsGroupsResponseValidationError{}

// Validate checks the field values on DeleteTelemetryMetricsGroupRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteTelemetryMetricsGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryMetricsGroupRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryMetricsGroupRequestMultiError, or nil if none found.
func (m *DeleteTelemetryMetricsGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryMetricsGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteTelemetryMetricsGroupRequestMultiError(errors)
	}

	return nil
}

// DeleteTelemetryMetricsGroupRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteTelemetryMetricsGroupRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryMetricsGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryMetricsGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryMetricsGroupRequestMultiError) AllErrors() []error { return m }

// DeleteTelemetryMetricsGroupRequestValidationError is the validation error
// returned by DeleteTelemetryMetricsGroupRequest.Validate if the designated
// constraints aren't met.
type DeleteTelemetryMetricsGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryMetricsGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryMetricsGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryMetricsGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryMetricsGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryMetricsGroupRequestValidationError) ErrorName() string {
	return "DeleteTelemetryMetricsGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryMetricsGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryMetricsGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryMetricsGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryMetricsGroupRequestValidationError{}

// Validate checks the field values on DeleteTelemetryMetricsGroupResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteTelemetryMetricsGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryMetricsGroupResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryMetricsGroupResponseMultiError, or nil if none found.
func (m *DeleteTelemetryMetricsGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryMetricsGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTelemetryMetricsGroupResponseMultiError(errors)
	}

	return nil
}

// DeleteTelemetryMetricsGroupResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteTelemetryMetricsGroupResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryMetricsGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryMetricsGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryMetricsGroupResponseMultiError) AllErrors() []error { return m }

// DeleteTelemetryMetricsGroupResponseValidationError is the validation error
// returned by DeleteTelemetryMetricsGroupResponse.Validate if the designated
// constraints aren't met.
type DeleteTelemetryMetricsGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryMetricsGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryMetricsGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryMetricsGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryMetricsGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryMetricsGroupResponseValidationError) ErrorName() string {
	return "DeleteTelemetryMetricsGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryMetricsGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryMetricsGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryMetricsGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryMetricsGroupResponseValidationError{}

// Validate checks the field values on CreateTelemetryLogsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTelemetryLogsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryLogsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTelemetryLogsProfileRequestMultiError, or nil if none found.
func (m *CreateTelemetryLogsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryLogsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryLogsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryLogsProfileRequestValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryLogsProfileRequestValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryLogsProfileRequestValidationError{
				field:  "TelemetryLogsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryLogsProfileRequestMultiError(errors)
	}

	return nil
}

// CreateTelemetryLogsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateTelemetryLogsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryLogsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryLogsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryLogsProfileRequestMultiError) AllErrors() []error { return m }

// CreateTelemetryLogsProfileRequestValidationError is the validation error
// returned by CreateTelemetryLogsProfileRequest.Validate if the designated
// constraints aren't met.
type CreateTelemetryLogsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryLogsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryLogsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryLogsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryLogsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryLogsProfileRequestValidationError) ErrorName() string {
	return "CreateTelemetryLogsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryLogsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryLogsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryLogsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryLogsProfileRequestValidationError{}

// Validate checks the field values on CreateTelemetryLogsProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateTelemetryLogsProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryLogsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTelemetryLogsProfileResponseMultiError, or nil if none found.
func (m *CreateTelemetryLogsProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryLogsProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryLogsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryLogsProfileResponseValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryLogsProfileResponseValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryLogsProfileResponseValidationError{
				field:  "TelemetryLogsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryLogsProfileResponseMultiError(errors)
	}

	return nil
}

// CreateTelemetryLogsProfileResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateTelemetryLogsProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryLogsProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryLogsProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryLogsProfileResponseMultiError) AllErrors() []error { return m }

// CreateTelemetryLogsProfileResponseValidationError is the validation error
// returned by CreateTelemetryLogsProfileResponse.Validate if the designated
// constraints aren't met.
type CreateTelemetryLogsProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryLogsProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryLogsProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryLogsProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryLogsProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryLogsProfileResponseValidationError) ErrorName() string {
	return "CreateTelemetryLogsProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryLogsProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryLogsProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryLogsProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryLogsProfileResponseValidationError{}

// Validate checks the field values on GetTelemetryLogsProfileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryLogsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryLogsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTelemetryLogsProfileRequestMultiError, or nil if none found.
func (m *GetTelemetryLogsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryLogsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetTelemetryLogsProfileRequestMultiError(errors)
	}

	return nil
}

// GetTelemetryLogsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryLogsProfileRequest.ValidateAll()
// if the designated constraints aren't met.
type GetTelemetryLogsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryLogsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryLogsProfileRequestMultiError) AllErrors() []error { return m }

// GetTelemetryLogsProfileRequestValidationError is the validation error
// returned by GetTelemetryLogsProfileRequest.Validate if the designated
// constraints aren't met.
type GetTelemetryLogsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryLogsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryLogsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryLogsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryLogsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryLogsProfileRequestValidationError) ErrorName() string {
	return "GetTelemetryLogsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryLogsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryLogsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryLogsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryLogsProfileRequestValidationError{}

// Validate checks the field values on GetTelemetryLogsProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTelemetryLogsProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryLogsProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetTelemetryLogsProfileResponseMultiError, or nil if none found.
func (m *GetTelemetryLogsProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryLogsProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryLogsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTelemetryLogsProfileResponseValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTelemetryLogsProfileResponseValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTelemetryLogsProfileResponseValidationError{
				field:  "TelemetryLogsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTelemetryLogsProfileResponseMultiError(errors)
	}

	return nil
}

// GetTelemetryLogsProfileResponseMultiError is an error wrapping multiple
// validation errors returned by GetTelemetryLogsProfileResponse.ValidateAll()
// if the designated constraints aren't met.
type GetTelemetryLogsProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryLogsProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryLogsProfileResponseMultiError) AllErrors() []error { return m }

// GetTelemetryLogsProfileResponseValidationError is the validation error
// returned by GetTelemetryLogsProfileResponse.Validate if the designated
// constraints aren't met.
type GetTelemetryLogsProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryLogsProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryLogsProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryLogsProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryLogsProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryLogsProfileResponseValidationError) ErrorName() string {
	return "GetTelemetryLogsProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryLogsProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryLogsProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryLogsProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryLogsProfileResponseValidationError{}

// Validate checks the field values on ListTelemetryLogsProfilesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTelemetryLogsProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryLogsProfilesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListTelemetryLogsProfilesRequestMultiError, or nil if none found.
func (m *ListTelemetryLogsProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryLogsProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListTelemetryLogsProfilesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListTelemetryLogsProfilesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListTelemetryLogsProfilesRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListTelemetryLogsProfilesRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListTelemetryLogsProfilesRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetInstanceId()) > 13 {
		err := ListTelemetryLogsProfilesRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTelemetryLogsProfilesRequest_InstanceId_Pattern.MatchString(m.GetInstanceId()) {
		err := ListTelemetryLogsProfilesRequestValidationError{
			field:  "InstanceId",
			reason: "value does not match regex pattern \"^inst-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSiteId()) > 13 {
		err := ListTelemetryLogsProfilesRequestValidationError{
			field:  "SiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTelemetryLogsProfilesRequest_SiteId_Pattern.MatchString(m.GetSiteId()) {
		err := ListTelemetryLogsProfilesRequestValidationError{
			field:  "SiteId",
			reason: "value does not match regex pattern \"^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegionId()) > 15 {
		err := ListTelemetryLogsProfilesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTelemetryLogsProfilesRequest_RegionId_Pattern.MatchString(m.GetRegionId()) {
		err := ListTelemetryLogsProfilesRequestValidationError{
			field:  "RegionId",
			reason: "value does not match regex pattern \"^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShowInherited

	if len(errors) > 0 {
		return ListTelemetryLogsProfilesRequestMultiError(errors)
	}

	return nil
}

// ListTelemetryLogsProfilesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTelemetryLogsProfilesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTelemetryLogsProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryLogsProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryLogsProfilesRequestMultiError) AllErrors() []error { return m }

// ListTelemetryLogsProfilesRequestValidationError is the validation error
// returned by ListTelemetryLogsProfilesRequest.Validate if the designated
// constraints aren't met.
type ListTelemetryLogsProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryLogsProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryLogsProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryLogsProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryLogsProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryLogsProfilesRequestValidationError) ErrorName() string {
	return "ListTelemetryLogsProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryLogsProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryLogsProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryLogsProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryLogsProfilesRequestValidationError{}

var _ListTelemetryLogsProfilesRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListTelemetryLogsProfilesRequest_InstanceId_Pattern = regexp.MustCompile("^inst-[0-9a-f]{8}$")

var _ListTelemetryLogsProfilesRequest_SiteId_Pattern = regexp.MustCompile("^site-[0-9a-f]{8}$")

var _ListTelemetryLogsProfilesRequest_RegionId_Pattern = regexp.MustCompile("^region-[0-9a-f]{8}$")

// Validate checks the field values on ListTelemetryLogsProfilesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTelemetryLogsProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryLogsProfilesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTelemetryLogsProfilesResponseMultiError, or nil if none found.
func (m *ListTelemetryLogsProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryLogsProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTelemetryLogsProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTelemetryLogsProfilesResponseValidationError{
						field:  fmt.Sprintf("TelemetryLogsProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTelemetryLogsProfilesResponseValidationError{
						field:  fmt.Sprintf("TelemetryLogsProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTelemetryLogsProfilesResponseValidationError{
					field:  fmt.Sprintf("TelemetryLogsProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListTelemetryLogsProfilesResponseMultiError(errors)
	}

	return nil
}

// ListTelemetryLogsProfilesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTelemetryLogsProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTelemetryLogsProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryLogsProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryLogsProfilesResponseMultiError) AllErrors() []error { return m }

// ListTelemetryLogsProfilesResponseValidationError is the validation error
// returned by ListTelemetryLogsProfilesResponse.Validate if the designated
// constraints aren't met.
type ListTelemetryLogsProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryLogsProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryLogsProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryLogsProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryLogsProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryLogsProfilesResponseValidationError) ErrorName() string {
	return "ListTelemetryLogsProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryLogsProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryLogsProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryLogsProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryLogsProfilesResponseValidationError{}

// Validate checks the field values on UpdateTelemetryLogsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *UpdateTelemetryLogsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTelemetryLogsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateTelemetryLogsProfileRequestMultiError, or nil if none found.
func (m *UpdateTelemetryLogsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTelemetryLogsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetTelemetryLogsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTelemetryLogsProfileRequestValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTelemetryLogsProfileRequestValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTelemetryLogsProfileRequestValidationError{
				field:  "TelemetryLogsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTelemetryLogsProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateTelemetryLogsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTelemetryLogsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTelemetryLogsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTelemetryLogsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTelemetryLogsProfileRequestMultiError) AllErrors() []error { return m }

// UpdateTelemetryLogsProfileRequestValidationError is the validation error
// returned by UpdateTelemetryLogsProfileRequest.Validate if the designated
// constraints aren't met.
type UpdateTelemetryLogsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTelemetryLogsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTelemetryLogsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTelemetryLogsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTelemetryLogsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTelemetryLogsProfileRequestValidationError) ErrorName() string {
	return "UpdateTelemetryLogsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTelemetryLogsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTelemetryLogsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTelemetryLogsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTelemetryLogsProfileRequestValidationError{}

// Validate checks the field values on PatchTelemetryLogsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PatchTelemetryLogsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchTelemetryLogsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// PatchTelemetryLogsProfileRequestMultiError, or nil if none found.
func (m *PatchTelemetryLogsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchTelemetryLogsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetTelemetryLogsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchTelemetryLogsProfileRequestValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchTelemetryLogsProfileRequestValidationError{
					field:  "TelemetryLogsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryLogsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchTelemetryLogsProfileRequestValidationError{
				field:  "TelemetryLogsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchTelemetryLogsProfileRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchTelemetryLogsProfileRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchTelemetryLogsProfileRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchTelemetryLogsProfileRequestMultiError(errors)
	}

	return nil
}

// PatchTelemetryLogsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// PatchTelemetryLogsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchTelemetryLogsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchTelemetryLogsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchTelemetryLogsProfileRequestMultiError) AllErrors() []error { return m }

// PatchTelemetryLogsProfileRequestValidationError is the validation error
// returned by PatchTelemetryLogsProfileRequest.Validate if the designated
// constraints aren't met.
type PatchTelemetryLogsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchTelemetryLogsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchTelemetryLogsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchTelemetryLogsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchTelemetryLogsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchTelemetryLogsProfileRequestValidationError) ErrorName() string {
	return "PatchTelemetryLogsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchTelemetryLogsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchTelemetryLogsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchTelemetryLogsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchTelemetryLogsProfileRequestValidationError{}

// Validate checks the field values on DeleteTelemetryLogsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteTelemetryLogsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryLogsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryLogsProfileRequestMultiError, or nil if none found.
func (m *DeleteTelemetryLogsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryLogsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteTelemetryLogsProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteTelemetryLogsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteTelemetryLogsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryLogsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryLogsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryLogsProfileRequestMultiError) AllErrors() []error { return m }

// DeleteTelemetryLogsProfileRequestValidationError is the validation error
// returned by DeleteTelemetryLogsProfileRequest.Validate if the designated
// constraints aren't met.
type DeleteTelemetryLogsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryLogsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryLogsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryLogsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryLogsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryLogsProfileRequestValidationError) ErrorName() string {
	return "DeleteTelemetryLogsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryLogsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryLogsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryLogsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryLogsProfileRequestValidationError{}

// Validate checks the field values on DeleteTelemetryLogsProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *DeleteTelemetryLogsProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryLogsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryLogsProfileResponseMultiError, or nil if none found.
func (m *DeleteTelemetryLogsProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryLogsProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTelemetryLogsProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteTelemetryLogsProfileResponseMultiError is an error wrapping multiple
// validation errors returned by
// DeleteTelemetryLogsProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryLogsProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryLogsProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryLogsProfileResponseMultiError) AllErrors() []error { return m }

// DeleteTelemetryLogsProfileResponseValidationError is the validation error
// returned by DeleteTelemetryLogsProfileResponse.Validate if the designated
// constraints aren't met.
type DeleteTelemetryLogsProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryLogsProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryLogsProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryLogsProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryLogsProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryLogsProfileResponseValidationError) ErrorName() string {
	return "DeleteTelemetryLogsProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryLogsProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryLogsProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryLogsProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryLogsProfileResponseValidationError{}

// Validate checks the field values on CreateTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTelemetryMetricsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTelemetryMetricsProfileRequestMultiError, or nil if none found.
func (m *CreateTelemetryMetricsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryMetricsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryMetricsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryMetricsProfileRequestValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryMetricsProfileRequestValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryMetricsProfileRequestValidationError{
				field:  "TelemetryMetricsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryMetricsProfileRequestMultiError(errors)
	}

	return nil
}

// CreateTelemetryMetricsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateTelemetryMetricsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryMetricsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryMetricsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryMetricsProfileRequestMultiError) AllErrors() []error { return m }

// CreateTelemetryMetricsProfileRequestValidationError is the validation error
// returned by CreateTelemetryMetricsProfileRequest.Validate if the designated
// constraints aren't met.
type CreateTelemetryMetricsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryMetricsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryMetricsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryMetricsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryMetricsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryMetricsProfileRequestValidationError) ErrorName() string {
	return "CreateTelemetryMetricsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryMetricsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryMetricsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryMetricsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryMetricsProfileRequestValidationError{}

// Validate checks the field values on CreateTelemetryMetricsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *CreateTelemetryMetricsProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTelemetryMetricsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateTelemetryMetricsProfileResponseMultiError, or nil if none found.
func (m *CreateTelemetryMetricsProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTelemetryMetricsProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryMetricsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTelemetryMetricsProfileResponseValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTelemetryMetricsProfileResponseValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTelemetryMetricsProfileResponseValidationError{
				field:  "TelemetryMetricsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTelemetryMetricsProfileResponseMultiError(errors)
	}

	return nil
}

// CreateTelemetryMetricsProfileResponseMultiError is an error wrapping
// multiple validation errors returned by
// CreateTelemetryMetricsProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTelemetryMetricsProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTelemetryMetricsProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTelemetryMetricsProfileResponseMultiError) AllErrors() []error { return m }

// CreateTelemetryMetricsProfileResponseValidationError is the validation error
// returned by CreateTelemetryMetricsProfileResponse.Validate if the
// designated constraints aren't met.
type CreateTelemetryMetricsProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTelemetryMetricsProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTelemetryMetricsProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTelemetryMetricsProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTelemetryMetricsProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTelemetryMetricsProfileResponseValidationError) ErrorName() string {
	return "CreateTelemetryMetricsProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTelemetryMetricsProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTelemetryMetricsProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTelemetryMetricsProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTelemetryMetricsProfileResponseValidationError{}

// Validate checks the field values on GetTelemetryMetricsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTelemetryMetricsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTelemetryMetricsProfileRequestMultiError, or nil if none found.
func (m *GetTelemetryMetricsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryMetricsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetTelemetryMetricsProfileRequestMultiError(errors)
	}

	return nil
}

// GetTelemetryMetricsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetTelemetryMetricsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTelemetryMetricsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryMetricsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryMetricsProfileRequestMultiError) AllErrors() []error { return m }

// GetTelemetryMetricsProfileRequestValidationError is the validation error
// returned by GetTelemetryMetricsProfileRequest.Validate if the designated
// constraints aren't met.
type GetTelemetryMetricsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryMetricsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryMetricsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryMetricsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryMetricsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryMetricsProfileRequestValidationError) ErrorName() string {
	return "GetTelemetryMetricsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryMetricsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryMetricsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryMetricsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryMetricsProfileRequestValidationError{}

// Validate checks the field values on GetTelemetryMetricsProfileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetTelemetryMetricsProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTelemetryMetricsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetTelemetryMetricsProfileResponseMultiError, or nil if none found.
func (m *GetTelemetryMetricsProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTelemetryMetricsProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTelemetryMetricsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTelemetryMetricsProfileResponseValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTelemetryMetricsProfileResponseValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTelemetryMetricsProfileResponseValidationError{
				field:  "TelemetryMetricsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTelemetryMetricsProfileResponseMultiError(errors)
	}

	return nil
}

// GetTelemetryMetricsProfileResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetTelemetryMetricsProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTelemetryMetricsProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTelemetryMetricsProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTelemetryMetricsProfileResponseMultiError) AllErrors() []error { return m }

// GetTelemetryMetricsProfileResponseValidationError is the validation error
// returned by GetTelemetryMetricsProfileResponse.Validate if the designated
// constraints aren't met.
type GetTelemetryMetricsProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTelemetryMetricsProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTelemetryMetricsProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTelemetryMetricsProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTelemetryMetricsProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTelemetryMetricsProfileResponseValidationError) ErrorName() string {
	return "GetTelemetryMetricsProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTelemetryMetricsProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTelemetryMetricsProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTelemetryMetricsProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTelemetryMetricsProfileResponseValidationError{}

// Validate checks the field values on ListTelemetryMetricsProfilesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListTelemetryMetricsProfilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryMetricsProfilesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTelemetryMetricsProfilesRequestMultiError, or nil if none found.
func (m *ListTelemetryMetricsProfilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryMetricsProfilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListTelemetryMetricsProfilesRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListTelemetryMetricsProfilesRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListTelemetryMetricsProfilesRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListTelemetryMetricsProfilesRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListTelemetryMetricsProfilesRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetInstanceId()) > 13 {
		err := ListTelemetryMetricsProfilesRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTelemetryMetricsProfilesRequest_InstanceId_Pattern.MatchString(m.GetInstanceId()) {
		err := ListTelemetryMetricsProfilesRequestValidationError{
			field:  "InstanceId",
			reason: "value does not match regex pattern \"^inst-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetSiteId()) > 13 {
		err := ListTelemetryMetricsProfilesRequestValidationError{
			field:  "SiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTelemetryMetricsProfilesRequest_SiteId_Pattern.MatchString(m.GetSiteId()) {
		err := ListTelemetryMetricsProfilesRequestValidationError{
			field:  "SiteId",
			reason: "value does not match regex pattern \"^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRegionId()) > 15 {
		err := ListTelemetryMetricsProfilesRequestValidationError{
			field:  "RegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ListTelemetryMetricsProfilesRequest_RegionId_Pattern.MatchString(m.GetRegionId()) {
		err := ListTelemetryMetricsProfilesRequestValidationError{
			field:  "RegionId",
			reason: "value does not match regex pattern \"^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ShowInherited

	if len(errors) > 0 {
		return ListTelemetryMetricsProfilesRequestMultiError(errors)
	}

	return nil
}

// ListTelemetryMetricsProfilesRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListTelemetryMetricsProfilesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTelemetryMetricsProfilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryMetricsProfilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryMetricsProfilesRequestMultiError) AllErrors() []error { return m }

// ListTelemetryMetricsProfilesRequestValidationError is the validation error
// returned by ListTelemetryMetricsProfilesRequest.Validate if the designated
// constraints aren't met.
type ListTelemetryMetricsProfilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryMetricsProfilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryMetricsProfilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryMetricsProfilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryMetricsProfilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryMetricsProfilesRequestValidationError) ErrorName() string {
	return "ListTelemetryMetricsProfilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryMetricsProfilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryMetricsProfilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryMetricsProfilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryMetricsProfilesRequestValidationError{}

var _ListTelemetryMetricsProfilesRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListTelemetryMetricsProfilesRequest_InstanceId_Pattern = regexp.MustCompile("^inst-[0-9a-f]{8}$")

var _ListTelemetryMetricsProfilesRequest_SiteId_Pattern = regexp.MustCompile("^site-[0-9a-f]{8}$")

var _ListTelemetryMetricsProfilesRequest_RegionId_Pattern = regexp.MustCompile("^region-[0-9a-f]{8}$")

// Validate checks the field values on ListTelemetryMetricsProfilesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *ListTelemetryMetricsProfilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTelemetryMetricsProfilesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListTelemetryMetricsProfilesResponseMultiError, or nil if none found.
func (m *ListTelemetryMetricsProfilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTelemetryMetricsProfilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTelemetryMetricsProfiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTelemetryMetricsProfilesResponseValidationError{
						field:  fmt.Sprintf("TelemetryMetricsProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTelemetryMetricsProfilesResponseValidationError{
						field:  fmt.Sprintf("TelemetryMetricsProfiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTelemetryMetricsProfilesResponseValidationError{
					field:  fmt.Sprintf("TelemetryMetricsProfiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListTelemetryMetricsProfilesResponseMultiError(errors)
	}

	return nil
}

// ListTelemetryMetricsProfilesResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListTelemetryMetricsProfilesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTelemetryMetricsProfilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTelemetryMetricsProfilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTelemetryMetricsProfilesResponseMultiError) AllErrors() []error { return m }

// ListTelemetryMetricsProfilesResponseValidationError is the validation error
// returned by ListTelemetryMetricsProfilesResponse.Validate if the designated
// constraints aren't met.
type ListTelemetryMetricsProfilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTelemetryMetricsProfilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTelemetryMetricsProfilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTelemetryMetricsProfilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTelemetryMetricsProfilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTelemetryMetricsProfilesResponseValidationError) ErrorName() string {
	return "ListTelemetryMetricsProfilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTelemetryMetricsProfilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTelemetryMetricsProfilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTelemetryMetricsProfilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTelemetryMetricsProfilesResponseValidationError{}

// Validate checks the field values on UpdateTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *UpdateTelemetryMetricsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// UpdateTelemetryMetricsProfileRequestMultiError, or nil if none found.
func (m *UpdateTelemetryMetricsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTelemetryMetricsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetTelemetryMetricsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTelemetryMetricsProfileRequestValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTelemetryMetricsProfileRequestValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTelemetryMetricsProfileRequestValidationError{
				field:  "TelemetryMetricsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTelemetryMetricsProfileRequestMultiError(errors)
	}

	return nil
}

// UpdateTelemetryMetricsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// UpdateTelemetryMetricsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTelemetryMetricsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTelemetryMetricsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTelemetryMetricsProfileRequestMultiError) AllErrors() []error { return m }

// UpdateTelemetryMetricsProfileRequestValidationError is the validation error
// returned by UpdateTelemetryMetricsProfileRequest.Validate if the designated
// constraints aren't met.
type UpdateTelemetryMetricsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTelemetryMetricsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTelemetryMetricsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTelemetryMetricsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTelemetryMetricsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTelemetryMetricsProfileRequestValidationError) ErrorName() string {
	return "UpdateTelemetryMetricsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTelemetryMetricsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTelemetryMetricsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTelemetryMetricsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTelemetryMetricsProfileRequestValidationError{}

// Validate checks the field values on PatchTelemetryMetricsProfileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *PatchTelemetryMetricsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PatchTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// PatchTelemetryMetricsProfileRequestMultiError, or nil if none found.
func (m *PatchTelemetryMetricsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PatchTelemetryMetricsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if all {
		switch v := interface{}(m.GetTelemetryMetricsProfile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchTelemetryMetricsProfileRequestValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchTelemetryMetricsProfileRequestValidationError{
					field:  "TelemetryMetricsProfile",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTelemetryMetricsProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchTelemetryMetricsProfileRequestValidationError{
				field:  "TelemetryMetricsProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFieldMask()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PatchTelemetryMetricsProfileRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PatchTelemetryMetricsProfileRequestValidationError{
					field:  "FieldMask",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PatchTelemetryMetricsProfileRequestValidationError{
				field:  "FieldMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PatchTelemetryMetricsProfileRequestMultiError(errors)
	}

	return nil
}

// PatchTelemetryMetricsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// PatchTelemetryMetricsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type PatchTelemetryMetricsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PatchTelemetryMetricsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PatchTelemetryMetricsProfileRequestMultiError) AllErrors() []error { return m }

// PatchTelemetryMetricsProfileRequestValidationError is the validation error
// returned by PatchTelemetryMetricsProfileRequest.Validate if the designated
// constraints aren't met.
type PatchTelemetryMetricsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PatchTelemetryMetricsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PatchTelemetryMetricsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PatchTelemetryMetricsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PatchTelemetryMetricsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PatchTelemetryMetricsProfileRequestValidationError) ErrorName() string {
	return "PatchTelemetryMetricsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PatchTelemetryMetricsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPatchTelemetryMetricsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PatchTelemetryMetricsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PatchTelemetryMetricsProfileRequestValidationError{}

// Validate checks the field values on DeleteTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteTelemetryMetricsProfileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryMetricsProfileRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryMetricsProfileRequestMultiError, or nil if none found.
func (m *DeleteTelemetryMetricsProfileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryMetricsProfileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteTelemetryMetricsProfileRequestMultiError(errors)
	}

	return nil
}

// DeleteTelemetryMetricsProfileRequestMultiError is an error wrapping multiple
// validation errors returned by
// DeleteTelemetryMetricsProfileRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryMetricsProfileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryMetricsProfileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryMetricsProfileRequestMultiError) AllErrors() []error { return m }

// DeleteTelemetryMetricsProfileRequestValidationError is the validation error
// returned by DeleteTelemetryMetricsProfileRequest.Validate if the designated
// constraints aren't met.
type DeleteTelemetryMetricsProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryMetricsProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryMetricsProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryMetricsProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryMetricsProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryMetricsProfileRequestValidationError) ErrorName() string {
	return "DeleteTelemetryMetricsProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryMetricsProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryMetricsProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryMetricsProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryMetricsProfileRequestValidationError{}

// Validate checks the field values on DeleteTelemetryMetricsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *DeleteTelemetryMetricsProfileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTelemetryMetricsProfileResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// DeleteTelemetryMetricsProfileResponseMultiError, or nil if none found.
func (m *DeleteTelemetryMetricsProfileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTelemetryMetricsProfileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTelemetryMetricsProfileResponseMultiError(errors)
	}

	return nil
}

// DeleteTelemetryMetricsProfileResponseMultiError is an error wrapping
// multiple validation errors returned by
// DeleteTelemetryMetricsProfileResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTelemetryMetricsProfileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTelemetryMetricsProfileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTelemetryMetricsProfileResponseMultiError) AllErrors() []error { return m }

// DeleteTelemetryMetricsProfileResponseValidationError is the validation error
// returned by DeleteTelemetryMetricsProfileResponse.Validate if the
// designated constraints aren't met.
type DeleteTelemetryMetricsProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTelemetryMetricsProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTelemetryMetricsProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTelemetryMetricsProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTelemetryMetricsProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTelemetryMetricsProfileResponseValidationError) ErrorName() string {
	return "DeleteTelemetryMetricsProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTelemetryMetricsProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTelemetryMetricsProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTelemetryMetricsProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTelemetryMetricsProfileResponseValidationError{}

// Validate checks the field values on CreateLocalAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocalAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocalAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocalAccountRequestMultiError, or nil if none found.
func (m *CreateLocalAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocalAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocalAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLocalAccountRequestValidationError{
					field:  "LocalAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLocalAccountRequestValidationError{
					field:  "LocalAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLocalAccountRequestValidationError{
				field:  "LocalAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLocalAccountRequestMultiError(errors)
	}

	return nil
}

// CreateLocalAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateLocalAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateLocalAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocalAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocalAccountRequestMultiError) AllErrors() []error { return m }

// CreateLocalAccountRequestValidationError is the validation error returned by
// CreateLocalAccountRequest.Validate if the designated constraints aren't met.
type CreateLocalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocalAccountRequestValidationError) ErrorName() string {
	return "CreateLocalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocalAccountRequestValidationError{}

// Validate checks the field values on CreateLocalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateLocalAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLocalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLocalAccountResponseMultiError, or nil if none found.
func (m *CreateLocalAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLocalAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocalAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLocalAccountResponseValidationError{
					field:  "LocalAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLocalAccountResponseValidationError{
					field:  "LocalAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLocalAccountResponseValidationError{
				field:  "LocalAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLocalAccountResponseMultiError(errors)
	}

	return nil
}

// CreateLocalAccountResponseMultiError is an error wrapping multiple
// validation errors returned by CreateLocalAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateLocalAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLocalAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLocalAccountResponseMultiError) AllErrors() []error { return m }

// CreateLocalAccountResponseValidationError is the validation error returned
// by CreateLocalAccountResponse.Validate if the designated constraints aren't met.
type CreateLocalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLocalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLocalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLocalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLocalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLocalAccountResponseValidationError) ErrorName() string {
	return "CreateLocalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLocalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLocalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLocalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLocalAccountResponseValidationError{}

// Validate checks the field values on GetLocalAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocalAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocalAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocalAccountRequestMultiError, or nil if none found.
func (m *GetLocalAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocalAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return GetLocalAccountRequestMultiError(errors)
	}

	return nil
}

// GetLocalAccountRequestMultiError is an error wrapping multiple validation
// errors returned by GetLocalAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetLocalAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocalAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocalAccountRequestMultiError) AllErrors() []error { return m }

// GetLocalAccountRequestValidationError is the validation error returned by
// GetLocalAccountRequest.Validate if the designated constraints aren't met.
type GetLocalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocalAccountRequestValidationError) ErrorName() string {
	return "GetLocalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocalAccountRequestValidationError{}

// Validate checks the field values on GetLocalAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetLocalAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetLocalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetLocalAccountResponseMultiError, or nil if none found.
func (m *GetLocalAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetLocalAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLocalAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetLocalAccountResponseValidationError{
					field:  "LocalAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetLocalAccountResponseValidationError{
					field:  "LocalAccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLocalAccountResponseValidationError{
				field:  "LocalAccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetLocalAccountResponseMultiError(errors)
	}

	return nil
}

// GetLocalAccountResponseMultiError is an error wrapping multiple validation
// errors returned by GetLocalAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetLocalAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetLocalAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetLocalAccountResponseMultiError) AllErrors() []error { return m }

// GetLocalAccountResponseValidationError is the validation error returned by
// GetLocalAccountResponse.Validate if the designated constraints aren't met.
type GetLocalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLocalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLocalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLocalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLocalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLocalAccountResponseValidationError) ErrorName() string {
	return "GetLocalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLocalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLocalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLocalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLocalAccountResponseValidationError{}

// Validate checks the field values on ListLocalAccountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocalAccountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocalAccountsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocalAccountsRequestMultiError, or nil if none found.
func (m *ListLocalAccountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocalAccountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderBy() != "" {

		if utf8.RuneCountInString(m.GetOrderBy()) > 1000 {
			err := ListLocalAccountsRequestValidationError{
				field:  "OrderBy",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListLocalAccountsRequest_OrderBy_Pattern.MatchString(m.GetOrderBy()) {
			err := ListLocalAccountsRequestValidationError{
				field:  "OrderBy",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9., ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetFilter() != "" {

		if utf8.RuneCountInString(m.GetFilter()) > 1000 {
			err := ListLocalAccountsRequestValidationError{
				field:  "Filter",
				reason: "value length must be at most 1000 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ListLocalAccountsRequest_Filter_Pattern.MatchString(m.GetFilter()) {
			err := ListLocalAccountsRequestValidationError{
				field:  "Filter",
				reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9.,:/=*(){}\\\"' ]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetPageSize() != 0 {

		if val := m.GetPageSize(); val < 1 || val > 100 {
			err := ListLocalAccountsRequestValidationError{
				field:  "PageSize",
				reason: "value must be inside range [1, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.GetOffset() != 0 {

		if val := m.GetOffset(); val < 0 || val > 10000 {
			err := ListLocalAccountsRequestValidationError{
				field:  "Offset",
				reason: "value must be inside range [0, 10000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListLocalAccountsRequestMultiError(errors)
	}

	return nil
}

// ListLocalAccountsRequestMultiError is an error wrapping multiple validation
// errors returned by ListLocalAccountsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLocalAccountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocalAccountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocalAccountsRequestMultiError) AllErrors() []error { return m }

// ListLocalAccountsRequestValidationError is the validation error returned by
// ListLocalAccountsRequest.Validate if the designated constraints aren't met.
type ListLocalAccountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocalAccountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocalAccountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocalAccountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocalAccountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocalAccountsRequestValidationError) ErrorName() string {
	return "ListLocalAccountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocalAccountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocalAccountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocalAccountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocalAccountsRequestValidationError{}

var _ListLocalAccountsRequest_OrderBy_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9., ]+$")

var _ListLocalAccountsRequest_Filter_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9.,:/=*(){}\"' ]+$")

// Validate checks the field values on ListLocalAccountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLocalAccountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocalAccountsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLocalAccountsResponseMultiError, or nil if none found.
func (m *ListLocalAccountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocalAccountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLocalAccounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLocalAccountsResponseValidationError{
						field:  fmt.Sprintf("LocalAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLocalAccountsResponseValidationError{
						field:  fmt.Sprintf("LocalAccounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLocalAccountsResponseValidationError{
					field:  fmt.Sprintf("LocalAccounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalElements

	// no validation rules for HasNext

	if len(errors) > 0 {
		return ListLocalAccountsResponseMultiError(errors)
	}

	return nil
}

// ListLocalAccountsResponseMultiError is an error wrapping multiple validation
// errors returned by ListLocalAccountsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListLocalAccountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocalAccountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocalAccountsResponseMultiError) AllErrors() []error { return m }

// ListLocalAccountsResponseValidationError is the validation error returned by
// ListLocalAccountsResponse.Validate if the designated constraints aren't met.
type ListLocalAccountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocalAccountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocalAccountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocalAccountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocalAccountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocalAccountsResponseValidationError) ErrorName() string {
	return "ListLocalAccountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocalAccountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocalAccountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocalAccountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocalAccountsResponseValidationError{}

// Validate checks the field values on DeleteLocalAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLocalAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLocalAccountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLocalAccountRequestMultiError, or nil if none found.
func (m *DeleteLocalAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLocalAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	if len(errors) > 0 {
		return DeleteLocalAccountRequestMultiError(errors)
	}

	return nil
}

// DeleteLocalAccountRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteLocalAccountRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteLocalAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLocalAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLocalAccountRequestMultiError) AllErrors() []error { return m }

// DeleteLocalAccountRequestValidationError is the validation error returned by
// DeleteLocalAccountRequest.Validate if the designated constraints aren't met.
type DeleteLocalAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLocalAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLocalAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLocalAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLocalAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLocalAccountRequestValidationError) ErrorName() string {
	return "DeleteLocalAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLocalAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLocalAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLocalAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLocalAccountRequestValidationError{}

// Validate checks the field values on DeleteLocalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteLocalAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteLocalAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteLocalAccountResponseMultiError, or nil if none found.
func (m *DeleteLocalAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteLocalAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteLocalAccountResponseMultiError(errors)
	}

	return nil
}

// DeleteLocalAccountResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteLocalAccountResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteLocalAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteLocalAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteLocalAccountResponseMultiError) AllErrors() []error { return m }

// DeleteLocalAccountResponseValidationError is the validation error returned
// by DeleteLocalAccountResponse.Validate if the designated constraints aren't met.
type DeleteLocalAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteLocalAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteLocalAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteLocalAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteLocalAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteLocalAccountResponseValidationError) ErrorName() string {
	return "DeleteLocalAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteLocalAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteLocalAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteLocalAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteLocalAccountResponseValidationError{}

// Validate checks the field values on ListLocationsResponse_LocationNode with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListLocationsResponse_LocationNode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLocationsResponse_LocationNode
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListLocationsResponse_LocationNodeMultiError, or nil if none found.
func (m *ListLocationsResponse_LocationNode) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLocationsResponse_LocationNode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ParentId

	// no validation rules for Name

	// no validation rules for Type

	if len(errors) > 0 {
		return ListLocationsResponse_LocationNodeMultiError(errors)
	}

	return nil
}

// ListLocationsResponse_LocationNodeMultiError is an error wrapping multiple
// validation errors returned by
// ListLocationsResponse_LocationNode.ValidateAll() if the designated
// constraints aren't met.
type ListLocationsResponse_LocationNodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLocationsResponse_LocationNodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLocationsResponse_LocationNodeMultiError) AllErrors() []error { return m }

// ListLocationsResponse_LocationNodeValidationError is the validation error
// returned by ListLocationsResponse_LocationNode.Validate if the designated
// constraints aren't met.
type ListLocationsResponse_LocationNodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLocationsResponse_LocationNodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLocationsResponse_LocationNodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLocationsResponse_LocationNodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLocationsResponse_LocationNodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLocationsResponse_LocationNodeValidationError) ErrorName() string {
	return "ListLocationsResponse_LocationNodeValidationError"
}

// Error satisfies the builtin error interface
func (e ListLocationsResponse_LocationNodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLocationsResponse_LocationNode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLocationsResponse_LocationNodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLocationsResponse_LocationNodeValidationError{}
