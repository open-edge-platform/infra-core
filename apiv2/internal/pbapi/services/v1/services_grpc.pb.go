// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: services/v1/services.proto

package servicesv1

import (
	context "context"
	v11 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/compute/v1"
	v16 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/localaccount/v1"
	v1 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/location/v1"
	v12 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/os/v1"
	v13 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/provider/v1"
	v14 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/schedule/v1"
	v15 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/telemetry/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegionServiceClient is the client API for RegionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegionServiceClient interface {
	// Create a region.
	CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error)
	// Get a list of regions.
	ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
	// Get a specific region.
	GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error)
	// Update a region.
	UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error)
	// Patch a region.
	PatchRegion(ctx context.Context, in *PatchRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error)
	// Delete a region.
	DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error)
}

type regionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegionServiceClient(cc grpc.ClientConnInterface) RegionServiceClient {
	return &regionServiceClient{cc}
}

func (c *regionServiceClient) CreateRegion(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error) {
	out := new(v1.RegionResource)
	err := c.cc.Invoke(ctx, "/services.v1.RegionService/CreateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) ListRegions(ctx context.Context, in *ListRegionsRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.RegionService/ListRegions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) GetRegion(ctx context.Context, in *GetRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error) {
	out := new(v1.RegionResource)
	err := c.cc.Invoke(ctx, "/services.v1.RegionService/GetRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) UpdateRegion(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error) {
	out := new(v1.RegionResource)
	err := c.cc.Invoke(ctx, "/services.v1.RegionService/UpdateRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) PatchRegion(ctx context.Context, in *PatchRegionRequest, opts ...grpc.CallOption) (*v1.RegionResource, error) {
	out := new(v1.RegionResource)
	err := c.cc.Invoke(ctx, "/services.v1.RegionService/PatchRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionServiceClient) DeleteRegion(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error) {
	out := new(DeleteRegionResponse)
	err := c.cc.Invoke(ctx, "/services.v1.RegionService/DeleteRegion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegionServiceServer is the server API for RegionService service.
// All implementations should embed UnimplementedRegionServiceServer
// for forward compatibility
type RegionServiceServer interface {
	// Create a region.
	CreateRegion(context.Context, *CreateRegionRequest) (*v1.RegionResource, error)
	// Get a list of regions.
	ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error)
	// Get a specific region.
	GetRegion(context.Context, *GetRegionRequest) (*v1.RegionResource, error)
	// Update a region.
	UpdateRegion(context.Context, *UpdateRegionRequest) (*v1.RegionResource, error)
	// Patch a region.
	PatchRegion(context.Context, *PatchRegionRequest) (*v1.RegionResource, error)
	// Delete a region.
	DeleteRegion(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error)
}

// UnimplementedRegionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRegionServiceServer struct {
}

func (UnimplementedRegionServiceServer) CreateRegion(context.Context, *CreateRegionRequest) (*v1.RegionResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegion not implemented")
}
func (UnimplementedRegionServiceServer) ListRegions(context.Context, *ListRegionsRequest) (*ListRegionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRegions not implemented")
}
func (UnimplementedRegionServiceServer) GetRegion(context.Context, *GetRegionRequest) (*v1.RegionResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegion not implemented")
}
func (UnimplementedRegionServiceServer) UpdateRegion(context.Context, *UpdateRegionRequest) (*v1.RegionResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegion not implemented")
}
func (UnimplementedRegionServiceServer) PatchRegion(context.Context, *PatchRegionRequest) (*v1.RegionResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRegion not implemented")
}
func (UnimplementedRegionServiceServer) DeleteRegion(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegion not implemented")
}

// UnsafeRegionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegionServiceServer will
// result in compilation errors.
type UnsafeRegionServiceServer interface {
	mustEmbedUnimplementedRegionServiceServer()
}

func RegisterRegionServiceServer(s grpc.ServiceRegistrar, srv RegionServiceServer) {
	s.RegisterService(&RegionService_ServiceDesc, srv)
}

func _RegionService_CreateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).CreateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.RegionService/CreateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).CreateRegion(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_ListRegions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).ListRegions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.RegionService/ListRegions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).ListRegions(ctx, req.(*ListRegionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_GetRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).GetRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.RegionService/GetRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).GetRegion(ctx, req.(*GetRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_UpdateRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).UpdateRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.RegionService/UpdateRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).UpdateRegion(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_PatchRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).PatchRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.RegionService/PatchRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).PatchRegion(ctx, req.(*PatchRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegionService_DeleteRegion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionServiceServer).DeleteRegion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.RegionService/DeleteRegion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionServiceServer).DeleteRegion(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegionService_ServiceDesc is the grpc.ServiceDesc for RegionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.RegionService",
	HandlerType: (*RegionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegion",
			Handler:    _RegionService_CreateRegion_Handler,
		},
		{
			MethodName: "ListRegions",
			Handler:    _RegionService_ListRegions_Handler,
		},
		{
			MethodName: "GetRegion",
			Handler:    _RegionService_GetRegion_Handler,
		},
		{
			MethodName: "UpdateRegion",
			Handler:    _RegionService_UpdateRegion_Handler,
		},
		{
			MethodName: "PatchRegion",
			Handler:    _RegionService_PatchRegion_Handler,
		},
		{
			MethodName: "DeleteRegion",
			Handler:    _RegionService_DeleteRegion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// SiteServiceClient is the client API for SiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SiteServiceClient interface {
	// Create a site.
	CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error)
	// Get a list of sites.
	ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error)
	// Get a specific site.
	GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error)
	// Update a site.
	UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error)
	// Patch a site.
	PatchSite(ctx context.Context, in *PatchSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error)
	// Delete a site.
	DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteResponse, error)
}

type siteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSiteServiceClient(cc grpc.ClientConnInterface) SiteServiceClient {
	return &siteServiceClient{cc}
}

func (c *siteServiceClient) CreateSite(ctx context.Context, in *CreateSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error) {
	out := new(v1.SiteResource)
	err := c.cc.Invoke(ctx, "/services.v1.SiteService/CreateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) ListSites(ctx context.Context, in *ListSitesRequest, opts ...grpc.CallOption) (*ListSitesResponse, error) {
	out := new(ListSitesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.SiteService/ListSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) GetSite(ctx context.Context, in *GetSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error) {
	out := new(v1.SiteResource)
	err := c.cc.Invoke(ctx, "/services.v1.SiteService/GetSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) UpdateSite(ctx context.Context, in *UpdateSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error) {
	out := new(v1.SiteResource)
	err := c.cc.Invoke(ctx, "/services.v1.SiteService/UpdateSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) PatchSite(ctx context.Context, in *PatchSiteRequest, opts ...grpc.CallOption) (*v1.SiteResource, error) {
	out := new(v1.SiteResource)
	err := c.cc.Invoke(ctx, "/services.v1.SiteService/PatchSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *siteServiceClient) DeleteSite(ctx context.Context, in *DeleteSiteRequest, opts ...grpc.CallOption) (*DeleteSiteResponse, error) {
	out := new(DeleteSiteResponse)
	err := c.cc.Invoke(ctx, "/services.v1.SiteService/DeleteSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteServiceServer is the server API for SiteService service.
// All implementations should embed UnimplementedSiteServiceServer
// for forward compatibility
type SiteServiceServer interface {
	// Create a site.
	CreateSite(context.Context, *CreateSiteRequest) (*v1.SiteResource, error)
	// Get a list of sites.
	ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error)
	// Get a specific site.
	GetSite(context.Context, *GetSiteRequest) (*v1.SiteResource, error)
	// Update a site.
	UpdateSite(context.Context, *UpdateSiteRequest) (*v1.SiteResource, error)
	// Patch a site.
	PatchSite(context.Context, *PatchSiteRequest) (*v1.SiteResource, error)
	// Delete a site.
	DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteResponse, error)
}

// UnimplementedSiteServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSiteServiceServer struct {
}

func (UnimplementedSiteServiceServer) CreateSite(context.Context, *CreateSiteRequest) (*v1.SiteResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSite not implemented")
}
func (UnimplementedSiteServiceServer) ListSites(context.Context, *ListSitesRequest) (*ListSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSites not implemented")
}
func (UnimplementedSiteServiceServer) GetSite(context.Context, *GetSiteRequest) (*v1.SiteResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSite not implemented")
}
func (UnimplementedSiteServiceServer) UpdateSite(context.Context, *UpdateSiteRequest) (*v1.SiteResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSite not implemented")
}
func (UnimplementedSiteServiceServer) PatchSite(context.Context, *PatchSiteRequest) (*v1.SiteResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSite not implemented")
}
func (UnimplementedSiteServiceServer) DeleteSite(context.Context, *DeleteSiteRequest) (*DeleteSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSite not implemented")
}

// UnsafeSiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SiteServiceServer will
// result in compilation errors.
type UnsafeSiteServiceServer interface {
	mustEmbedUnimplementedSiteServiceServer()
}

func RegisterSiteServiceServer(s grpc.ServiceRegistrar, srv SiteServiceServer) {
	s.RegisterService(&SiteService_ServiceDesc, srv)
}

func _SiteService_CreateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).CreateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.SiteService/CreateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).CreateSite(ctx, req.(*CreateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_ListSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).ListSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.SiteService/ListSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).ListSites(ctx, req.(*ListSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_GetSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).GetSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.SiteService/GetSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).GetSite(ctx, req.(*GetSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_UpdateSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).UpdateSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.SiteService/UpdateSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).UpdateSite(ctx, req.(*UpdateSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_PatchSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).PatchSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.SiteService/PatchSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).PatchSite(ctx, req.(*PatchSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SiteService_DeleteSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteServiceServer).DeleteSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.SiteService/DeleteSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteServiceServer).DeleteSite(ctx, req.(*DeleteSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SiteService_ServiceDesc is the grpc.ServiceDesc for SiteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SiteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.SiteService",
	HandlerType: (*SiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSite",
			Handler:    _SiteService_CreateSite_Handler,
		},
		{
			MethodName: "ListSites",
			Handler:    _SiteService_ListSites_Handler,
		},
		{
			MethodName: "GetSite",
			Handler:    _SiteService_GetSite_Handler,
		},
		{
			MethodName: "UpdateSite",
			Handler:    _SiteService_UpdateSite_Handler,
		},
		{
			MethodName: "PatchSite",
			Handler:    _SiteService_PatchSite_Handler,
		},
		{
			MethodName: "DeleteSite",
			Handler:    _SiteService_DeleteSite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationServiceClient interface {
	// Get a list of locations.
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
}

type locationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationServiceClient(cc grpc.ClientConnInterface) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.LocationService/ListLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
// All implementations should embed UnimplementedLocationServiceServer
// for forward compatibility
type LocationServiceServer interface {
	// Get a list of locations.
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
}

// UnimplementedLocationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLocationServiceServer struct {
}

func (UnimplementedLocationServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}

// UnsafeLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationServiceServer will
// result in compilation errors.
type UnsafeLocationServiceServer interface {
	mustEmbedUnimplementedLocationServiceServer()
}

func RegisterLocationServiceServer(s grpc.ServiceRegistrar, srv LocationServiceServer) {
	s.RegisterService(&LocationService_ServiceDesc, srv)
}

func _LocationService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.LocationService/ListLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationService_ServiceDesc is the grpc.ServiceDesc for LocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLocations",
			Handler:    _LocationService_ListLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostServiceClient interface {
	// Get a summary of the hosts status.
	GetHostsSummary(ctx context.Context, in *GetHostSummaryRequest, opts ...grpc.CallOption) (*GetHostSummaryResponse, error)
	// Create a host.
	CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error)
	// Get a list of hosts.
	ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error)
	// Get a specific host.
	GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error)
	// Update a host.
	UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error)
	// Patch a host.
	PatchHost(ctx context.Context, in *PatchHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error)
	// Delete a host.
	DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*DeleteHostResponse, error)
	// Invalidate a host.
	InvalidateHost(ctx context.Context, in *InvalidateHostRequest, opts ...grpc.CallOption) (*InvalidateHostResponse, error)
	// Register a host.
	RegisterHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error)
	// Update a host register.
	RegisterUpdateHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error)
	// Onboard a host.
	OnboardHost(ctx context.Context, in *OnboardHostRequest, opts ...grpc.CallOption) (*OnboardHostResponse, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) GetHostsSummary(ctx context.Context, in *GetHostSummaryRequest, opts ...grpc.CallOption) (*GetHostSummaryResponse, error) {
	out := new(GetHostSummaryResponse)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/GetHostsSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) CreateHost(ctx context.Context, in *CreateHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error) {
	out := new(v11.HostResource)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/CreateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) ListHosts(ctx context.Context, in *ListHostsRequest, opts ...grpc.CallOption) (*ListHostsResponse, error) {
	out := new(ListHostsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/ListHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) GetHost(ctx context.Context, in *GetHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error) {
	out := new(v11.HostResource)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/GetHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateHost(ctx context.Context, in *UpdateHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error) {
	out := new(v11.HostResource)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/UpdateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) PatchHost(ctx context.Context, in *PatchHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error) {
	out := new(v11.HostResource)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/PatchHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) DeleteHost(ctx context.Context, in *DeleteHostRequest, opts ...grpc.CallOption) (*DeleteHostResponse, error) {
	out := new(DeleteHostResponse)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/DeleteHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) InvalidateHost(ctx context.Context, in *InvalidateHostRequest, opts ...grpc.CallOption) (*InvalidateHostResponse, error) {
	out := new(InvalidateHostResponse)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/InvalidateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) RegisterHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error) {
	out := new(v11.HostResource)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/RegisterHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) RegisterUpdateHost(ctx context.Context, in *RegisterHostRequest, opts ...grpc.CallOption) (*v11.HostResource, error) {
	out := new(v11.HostResource)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/RegisterUpdateHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) OnboardHost(ctx context.Context, in *OnboardHostRequest, opts ...grpc.CallOption) (*OnboardHostResponse, error) {
	out := new(OnboardHostResponse)
	err := c.cc.Invoke(ctx, "/services.v1.HostService/OnboardHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations should embed UnimplementedHostServiceServer
// for forward compatibility
type HostServiceServer interface {
	// Get a summary of the hosts status.
	GetHostsSummary(context.Context, *GetHostSummaryRequest) (*GetHostSummaryResponse, error)
	// Create a host.
	CreateHost(context.Context, *CreateHostRequest) (*v11.HostResource, error)
	// Get a list of hosts.
	ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error)
	// Get a specific host.
	GetHost(context.Context, *GetHostRequest) (*v11.HostResource, error)
	// Update a host.
	UpdateHost(context.Context, *UpdateHostRequest) (*v11.HostResource, error)
	// Patch a host.
	PatchHost(context.Context, *PatchHostRequest) (*v11.HostResource, error)
	// Delete a host.
	DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error)
	// Invalidate a host.
	InvalidateHost(context.Context, *InvalidateHostRequest) (*InvalidateHostResponse, error)
	// Register a host.
	RegisterHost(context.Context, *RegisterHostRequest) (*v11.HostResource, error)
	// Update a host register.
	RegisterUpdateHost(context.Context, *RegisterHostRequest) (*v11.HostResource, error)
	// Onboard a host.
	OnboardHost(context.Context, *OnboardHostRequest) (*OnboardHostResponse, error)
}

// UnimplementedHostServiceServer should be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) GetHostsSummary(context.Context, *GetHostSummaryRequest) (*GetHostSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostsSummary not implemented")
}
func (UnimplementedHostServiceServer) CreateHost(context.Context, *CreateHostRequest) (*v11.HostResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHost not implemented")
}
func (UnimplementedHostServiceServer) ListHosts(context.Context, *ListHostsRequest) (*ListHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHosts not implemented")
}
func (UnimplementedHostServiceServer) GetHost(context.Context, *GetHostRequest) (*v11.HostResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHost not implemented")
}
func (UnimplementedHostServiceServer) UpdateHost(context.Context, *UpdateHostRequest) (*v11.HostResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedHostServiceServer) PatchHost(context.Context, *PatchHostRequest) (*v11.HostResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchHost not implemented")
}
func (UnimplementedHostServiceServer) DeleteHost(context.Context, *DeleteHostRequest) (*DeleteHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHost not implemented")
}
func (UnimplementedHostServiceServer) InvalidateHost(context.Context, *InvalidateHostRequest) (*InvalidateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateHost not implemented")
}
func (UnimplementedHostServiceServer) RegisterHost(context.Context, *RegisterHostRequest) (*v11.HostResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHost not implemented")
}
func (UnimplementedHostServiceServer) RegisterUpdateHost(context.Context, *RegisterHostRequest) (*v11.HostResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUpdateHost not implemented")
}
func (UnimplementedHostServiceServer) OnboardHost(context.Context, *OnboardHostRequest) (*OnboardHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnboardHost not implemented")
}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&HostService_ServiceDesc, srv)
}

func _HostService_GetHostsSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHostsSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/GetHostsSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHostsSummary(ctx, req.(*GetHostSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_CreateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).CreateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/CreateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).CreateHost(ctx, req.(*CreateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_ListHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).ListHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/ListHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).ListHosts(ctx, req.(*ListHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_GetHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).GetHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/GetHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).GetHost(ctx, req.(*GetHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/UpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateHost(ctx, req.(*UpdateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_PatchHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).PatchHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/PatchHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).PatchHost(ctx, req.(*PatchHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_DeleteHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).DeleteHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/DeleteHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).DeleteHost(ctx, req.(*DeleteHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_InvalidateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).InvalidateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/InvalidateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).InvalidateHost(ctx, req.(*InvalidateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_RegisterHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).RegisterHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/RegisterHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).RegisterHost(ctx, req.(*RegisterHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_RegisterUpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).RegisterUpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/RegisterUpdateHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).RegisterUpdateHost(ctx, req.(*RegisterHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_OnboardHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnboardHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).OnboardHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.HostService/OnboardHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).OnboardHost(ctx, req.(*OnboardHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HostService_ServiceDesc is the grpc.ServiceDesc for HostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostsSummary",
			Handler:    _HostService_GetHostsSummary_Handler,
		},
		{
			MethodName: "CreateHost",
			Handler:    _HostService_CreateHost_Handler,
		},
		{
			MethodName: "ListHosts",
			Handler:    _HostService_ListHosts_Handler,
		},
		{
			MethodName: "GetHost",
			Handler:    _HostService_GetHost_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _HostService_UpdateHost_Handler,
		},
		{
			MethodName: "PatchHost",
			Handler:    _HostService_PatchHost_Handler,
		},
		{
			MethodName: "DeleteHost",
			Handler:    _HostService_DeleteHost_Handler,
		},
		{
			MethodName: "InvalidateHost",
			Handler:    _HostService_InvalidateHost_Handler,
		},
		{
			MethodName: "RegisterHost",
			Handler:    _HostService_RegisterHost_Handler,
		},
		{
			MethodName: "RegisterUpdateHost",
			Handler:    _HostService_RegisterUpdateHost_Handler,
		},
		{
			MethodName: "OnboardHost",
			Handler:    _HostService_OnboardHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// InstanceServiceClient is the client API for InstanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceServiceClient interface {
	// Create a instance.
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error)
	// Get a list of instances.
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// Get a specific instance.
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error)
	// Update a instance.
	UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error)
	// Patch a instance.
	PatchInstance(ctx context.Context, in *PatchInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error)
	// Delete a instance.
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error)
	// Invalidate a instance.
	InvalidateInstance(ctx context.Context, in *InvalidateInstanceRequest, opts ...grpc.CallOption) (*InvalidateInstanceResponse, error)
}

type instanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceServiceClient(cc grpc.ClientConnInterface) InstanceServiceClient {
	return &instanceServiceClient{cc}
}

func (c *instanceServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error) {
	out := new(v11.InstanceResource)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error) {
	out := new(v11.InstanceResource)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/GetInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) UpdateInstance(ctx context.Context, in *UpdateInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error) {
	out := new(v11.InstanceResource)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/UpdateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) PatchInstance(ctx context.Context, in *PatchInstanceRequest, opts ...grpc.CallOption) (*v11.InstanceResource, error) {
	out := new(v11.InstanceResource)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/PatchInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error) {
	out := new(DeleteInstanceResponse)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/DeleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceServiceClient) InvalidateInstance(ctx context.Context, in *InvalidateInstanceRequest, opts ...grpc.CallOption) (*InvalidateInstanceResponse, error) {
	out := new(InvalidateInstanceResponse)
	err := c.cc.Invoke(ctx, "/services.v1.InstanceService/InvalidateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceServiceServer is the server API for InstanceService service.
// All implementations should embed UnimplementedInstanceServiceServer
// for forward compatibility
type InstanceServiceServer interface {
	// Create a instance.
	CreateInstance(context.Context, *CreateInstanceRequest) (*v11.InstanceResource, error)
	// Get a list of instances.
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// Get a specific instance.
	GetInstance(context.Context, *GetInstanceRequest) (*v11.InstanceResource, error)
	// Update a instance.
	UpdateInstance(context.Context, *UpdateInstanceRequest) (*v11.InstanceResource, error)
	// Patch a instance.
	PatchInstance(context.Context, *PatchInstanceRequest) (*v11.InstanceResource, error)
	// Delete a instance.
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	// Invalidate a instance.
	InvalidateInstance(context.Context, *InvalidateInstanceRequest) (*InvalidateInstanceResponse, error)
}

// UnimplementedInstanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInstanceServiceServer struct {
}

func (UnimplementedInstanceServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*v11.InstanceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedInstanceServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedInstanceServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*v11.InstanceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedInstanceServiceServer) UpdateInstance(context.Context, *UpdateInstanceRequest) (*v11.InstanceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInstance not implemented")
}
func (UnimplementedInstanceServiceServer) PatchInstance(context.Context, *PatchInstanceRequest) (*v11.InstanceResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchInstance not implemented")
}
func (UnimplementedInstanceServiceServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedInstanceServiceServer) InvalidateInstance(context.Context, *InvalidateInstanceRequest) (*InvalidateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateInstance not implemented")
}

// UnsafeInstanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceServiceServer will
// result in compilation errors.
type UnsafeInstanceServiceServer interface {
	mustEmbedUnimplementedInstanceServiceServer()
}

func RegisterInstanceServiceServer(s grpc.ServiceRegistrar, srv InstanceServiceServer) {
	s.RegisterService(&InstanceService_ServiceDesc, srv)
}

func _InstanceService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/GetInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_UpdateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).UpdateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/UpdateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).UpdateInstance(ctx, req.(*UpdateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_PatchInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).PatchInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/PatchInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).PatchInstance(ctx, req.(*PatchInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/DeleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceService_InvalidateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvalidateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceServiceServer).InvalidateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.InstanceService/InvalidateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceServiceServer).InvalidateInstance(ctx, req.(*InvalidateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceService_ServiceDesc is the grpc.ServiceDesc for InstanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.InstanceService",
	HandlerType: (*InstanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInstance",
			Handler:    _InstanceService_CreateInstance_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _InstanceService_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _InstanceService_GetInstance_Handler,
		},
		{
			MethodName: "UpdateInstance",
			Handler:    _InstanceService_UpdateInstance_Handler,
		},
		{
			MethodName: "PatchInstance",
			Handler:    _InstanceService_PatchInstance_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _InstanceService_DeleteInstance_Handler,
		},
		{
			MethodName: "InvalidateInstance",
			Handler:    _InstanceService_InvalidateInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// OperatingSystemServiceClient is the client API for OperatingSystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OperatingSystemServiceClient interface {
	// Create an OS
	CreateOperatingSystem(ctx context.Context, in *CreateOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error)
	// Get a list of OSs.
	ListOperatingSystems(ctx context.Context, in *ListOperatingSystemsRequest, opts ...grpc.CallOption) (*ListOperatingSystemsResponse, error)
	// Get a specific OS.
	GetOperatingSystem(ctx context.Context, in *GetOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error)
	// Update an OS.
	UpdateOperatingSystem(ctx context.Context, in *UpdateOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error)
	// Patch an OS.
	PatchOperatingSystem(ctx context.Context, in *PatchOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error)
	// Delete an OS.
	DeleteOperatingSystem(ctx context.Context, in *DeleteOperatingSystemRequest, opts ...grpc.CallOption) (*DeleteOperatingSystemResponse, error)
}

type operatingSystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperatingSystemServiceClient(cc grpc.ClientConnInterface) OperatingSystemServiceClient {
	return &operatingSystemServiceClient{cc}
}

func (c *operatingSystemServiceClient) CreateOperatingSystem(ctx context.Context, in *CreateOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error) {
	out := new(v12.OperatingSystemResource)
	err := c.cc.Invoke(ctx, "/services.v1.OperatingSystemService/CreateOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatingSystemServiceClient) ListOperatingSystems(ctx context.Context, in *ListOperatingSystemsRequest, opts ...grpc.CallOption) (*ListOperatingSystemsResponse, error) {
	out := new(ListOperatingSystemsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.OperatingSystemService/ListOperatingSystems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatingSystemServiceClient) GetOperatingSystem(ctx context.Context, in *GetOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error) {
	out := new(v12.OperatingSystemResource)
	err := c.cc.Invoke(ctx, "/services.v1.OperatingSystemService/GetOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatingSystemServiceClient) UpdateOperatingSystem(ctx context.Context, in *UpdateOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error) {
	out := new(v12.OperatingSystemResource)
	err := c.cc.Invoke(ctx, "/services.v1.OperatingSystemService/UpdateOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatingSystemServiceClient) PatchOperatingSystem(ctx context.Context, in *PatchOperatingSystemRequest, opts ...grpc.CallOption) (*v12.OperatingSystemResource, error) {
	out := new(v12.OperatingSystemResource)
	err := c.cc.Invoke(ctx, "/services.v1.OperatingSystemService/PatchOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operatingSystemServiceClient) DeleteOperatingSystem(ctx context.Context, in *DeleteOperatingSystemRequest, opts ...grpc.CallOption) (*DeleteOperatingSystemResponse, error) {
	out := new(DeleteOperatingSystemResponse)
	err := c.cc.Invoke(ctx, "/services.v1.OperatingSystemService/DeleteOperatingSystem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperatingSystemServiceServer is the server API for OperatingSystemService service.
// All implementations should embed UnimplementedOperatingSystemServiceServer
// for forward compatibility
type OperatingSystemServiceServer interface {
	// Create an OS
	CreateOperatingSystem(context.Context, *CreateOperatingSystemRequest) (*v12.OperatingSystemResource, error)
	// Get a list of OSs.
	ListOperatingSystems(context.Context, *ListOperatingSystemsRequest) (*ListOperatingSystemsResponse, error)
	// Get a specific OS.
	GetOperatingSystem(context.Context, *GetOperatingSystemRequest) (*v12.OperatingSystemResource, error)
	// Update an OS.
	UpdateOperatingSystem(context.Context, *UpdateOperatingSystemRequest) (*v12.OperatingSystemResource, error)
	// Patch an OS.
	PatchOperatingSystem(context.Context, *PatchOperatingSystemRequest) (*v12.OperatingSystemResource, error)
	// Delete an OS.
	DeleteOperatingSystem(context.Context, *DeleteOperatingSystemRequest) (*DeleteOperatingSystemResponse, error)
}

// UnimplementedOperatingSystemServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOperatingSystemServiceServer struct {
}

func (UnimplementedOperatingSystemServiceServer) CreateOperatingSystem(context.Context, *CreateOperatingSystemRequest) (*v12.OperatingSystemResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperatingSystem not implemented")
}
func (UnimplementedOperatingSystemServiceServer) ListOperatingSystems(context.Context, *ListOperatingSystemsRequest) (*ListOperatingSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperatingSystems not implemented")
}
func (UnimplementedOperatingSystemServiceServer) GetOperatingSystem(context.Context, *GetOperatingSystemRequest) (*v12.OperatingSystemResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperatingSystem not implemented")
}
func (UnimplementedOperatingSystemServiceServer) UpdateOperatingSystem(context.Context, *UpdateOperatingSystemRequest) (*v12.OperatingSystemResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperatingSystem not implemented")
}
func (UnimplementedOperatingSystemServiceServer) PatchOperatingSystem(context.Context, *PatchOperatingSystemRequest) (*v12.OperatingSystemResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchOperatingSystem not implemented")
}
func (UnimplementedOperatingSystemServiceServer) DeleteOperatingSystem(context.Context, *DeleteOperatingSystemRequest) (*DeleteOperatingSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOperatingSystem not implemented")
}

// UnsafeOperatingSystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperatingSystemServiceServer will
// result in compilation errors.
type UnsafeOperatingSystemServiceServer interface {
	mustEmbedUnimplementedOperatingSystemServiceServer()
}

func RegisterOperatingSystemServiceServer(s grpc.ServiceRegistrar, srv OperatingSystemServiceServer) {
	s.RegisterService(&OperatingSystemService_ServiceDesc, srv)
}

func _OperatingSystemService_CreateOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingSystemServiceServer).CreateOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.OperatingSystemService/CreateOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingSystemServiceServer).CreateOperatingSystem(ctx, req.(*CreateOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatingSystemService_ListOperatingSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperatingSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingSystemServiceServer).ListOperatingSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.OperatingSystemService/ListOperatingSystems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingSystemServiceServer).ListOperatingSystems(ctx, req.(*ListOperatingSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatingSystemService_GetOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingSystemServiceServer).GetOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.OperatingSystemService/GetOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingSystemServiceServer).GetOperatingSystem(ctx, req.(*GetOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatingSystemService_UpdateOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingSystemServiceServer).UpdateOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.OperatingSystemService/UpdateOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingSystemServiceServer).UpdateOperatingSystem(ctx, req.(*UpdateOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatingSystemService_PatchOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingSystemServiceServer).PatchOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.OperatingSystemService/PatchOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingSystemServiceServer).PatchOperatingSystem(ctx, req.(*PatchOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperatingSystemService_DeleteOperatingSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOperatingSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperatingSystemServiceServer).DeleteOperatingSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.OperatingSystemService/DeleteOperatingSystem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperatingSystemServiceServer).DeleteOperatingSystem(ctx, req.(*DeleteOperatingSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperatingSystemService_ServiceDesc is the grpc.ServiceDesc for OperatingSystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperatingSystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.OperatingSystemService",
	HandlerType: (*OperatingSystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOperatingSystem",
			Handler:    _OperatingSystemService_CreateOperatingSystem_Handler,
		},
		{
			MethodName: "ListOperatingSystems",
			Handler:    _OperatingSystemService_ListOperatingSystems_Handler,
		},
		{
			MethodName: "GetOperatingSystem",
			Handler:    _OperatingSystemService_GetOperatingSystem_Handler,
		},
		{
			MethodName: "UpdateOperatingSystem",
			Handler:    _OperatingSystemService_UpdateOperatingSystem_Handler,
		},
		{
			MethodName: "PatchOperatingSystem",
			Handler:    _OperatingSystemService_PatchOperatingSystem_Handler,
		},
		{
			MethodName: "DeleteOperatingSystem",
			Handler:    _OperatingSystemService_DeleteOperatingSystem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// ProviderServiceClient is the client API for ProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderServiceClient interface {
	// Create a provider.
	CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*v13.ProviderResource, error)
	// Get a list of providers.
	ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error)
	// Get a specific provider.
	GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*v13.ProviderResource, error)
	// Delete a provider.
	DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error)
}

type providerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderServiceClient(cc grpc.ClientConnInterface) ProviderServiceClient {
	return &providerServiceClient{cc}
}

func (c *providerServiceClient) CreateProvider(ctx context.Context, in *CreateProviderRequest, opts ...grpc.CallOption) (*v13.ProviderResource, error) {
	out := new(v13.ProviderResource)
	err := c.cc.Invoke(ctx, "/services.v1.ProviderService/CreateProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) ListProviders(ctx context.Context, in *ListProvidersRequest, opts ...grpc.CallOption) (*ListProvidersResponse, error) {
	out := new(ListProvidersResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ProviderService/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) GetProvider(ctx context.Context, in *GetProviderRequest, opts ...grpc.CallOption) (*v13.ProviderResource, error) {
	out := new(v13.ProviderResource)
	err := c.cc.Invoke(ctx, "/services.v1.ProviderService/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerServiceClient) DeleteProvider(ctx context.Context, in *DeleteProviderRequest, opts ...grpc.CallOption) (*DeleteProviderResponse, error) {
	out := new(DeleteProviderResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ProviderService/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServiceServer is the server API for ProviderService service.
// All implementations should embed UnimplementedProviderServiceServer
// for forward compatibility
type ProviderServiceServer interface {
	// Create a provider.
	CreateProvider(context.Context, *CreateProviderRequest) (*v13.ProviderResource, error)
	// Get a list of providers.
	ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error)
	// Get a specific provider.
	GetProvider(context.Context, *GetProviderRequest) (*v13.ProviderResource, error)
	// Delete a provider.
	DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error)
}

// UnimplementedProviderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProviderServiceServer struct {
}

func (UnimplementedProviderServiceServer) CreateProvider(context.Context, *CreateProviderRequest) (*v13.ProviderResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvider not implemented")
}
func (UnimplementedProviderServiceServer) ListProviders(context.Context, *ListProvidersRequest) (*ListProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedProviderServiceServer) GetProvider(context.Context, *GetProviderRequest) (*v13.ProviderResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedProviderServiceServer) DeleteProvider(context.Context, *DeleteProviderRequest) (*DeleteProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}

// UnsafeProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderServiceServer will
// result in compilation errors.
type UnsafeProviderServiceServer interface {
	mustEmbedUnimplementedProviderServiceServer()
}

func RegisterProviderServiceServer(s grpc.ServiceRegistrar, srv ProviderServiceServer) {
	s.RegisterService(&ProviderService_ServiceDesc, srv)
}

func _ProviderService_CreateProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).CreateProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ProviderService/CreateProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).CreateProvider(ctx, req.(*CreateProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ProviderService/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).ListProviders(ctx, req.(*ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ProviderService/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).GetProvider(ctx, req.(*GetProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderService_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServiceServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ProviderService/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServiceServer).DeleteProvider(ctx, req.(*DeleteProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderService_ServiceDesc is the grpc.ServiceDesc for ProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.ProviderService",
	HandlerType: (*ProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProvider",
			Handler:    _ProviderService_CreateProvider_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _ProviderService_ListProviders_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _ProviderService_GetProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ProviderService_DeleteProvider_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// WorkloadServiceClient is the client API for WorkloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadServiceClient interface {
	// Create a workload.
	CreateWorkload(ctx context.Context, in *CreateWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error)
	// Get a list of workloads.
	ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error)
	// Get a specific workload.
	GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error)
	// Update a workload.
	UpdateWorkload(ctx context.Context, in *UpdateWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error)
	// Patch a workload.
	PatchWorkload(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error)
	// Delete a workload.
	DeleteWorkload(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*DeleteWorkloadResponse, error)
}

type workloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadServiceClient(cc grpc.ClientConnInterface) WorkloadServiceClient {
	return &workloadServiceClient{cc}
}

func (c *workloadServiceClient) CreateWorkload(ctx context.Context, in *CreateWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error) {
	out := new(v11.WorkloadResource)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadService/CreateWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadServiceClient) ListWorkloads(ctx context.Context, in *ListWorkloadsRequest, opts ...grpc.CallOption) (*ListWorkloadsResponse, error) {
	out := new(ListWorkloadsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadService/ListWorkloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadServiceClient) GetWorkload(ctx context.Context, in *GetWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error) {
	out := new(v11.WorkloadResource)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadService/GetWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadServiceClient) UpdateWorkload(ctx context.Context, in *UpdateWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error) {
	out := new(v11.WorkloadResource)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadService/UpdateWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadServiceClient) PatchWorkload(ctx context.Context, in *PatchWorkloadRequest, opts ...grpc.CallOption) (*v11.WorkloadResource, error) {
	out := new(v11.WorkloadResource)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadService/PatchWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadServiceClient) DeleteWorkload(ctx context.Context, in *DeleteWorkloadRequest, opts ...grpc.CallOption) (*DeleteWorkloadResponse, error) {
	out := new(DeleteWorkloadResponse)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadService/DeleteWorkload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadServiceServer is the server API for WorkloadService service.
// All implementations should embed UnimplementedWorkloadServiceServer
// for forward compatibility
type WorkloadServiceServer interface {
	// Create a workload.
	CreateWorkload(context.Context, *CreateWorkloadRequest) (*v11.WorkloadResource, error)
	// Get a list of workloads.
	ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error)
	// Get a specific workload.
	GetWorkload(context.Context, *GetWorkloadRequest) (*v11.WorkloadResource, error)
	// Update a workload.
	UpdateWorkload(context.Context, *UpdateWorkloadRequest) (*v11.WorkloadResource, error)
	// Patch a workload.
	PatchWorkload(context.Context, *PatchWorkloadRequest) (*v11.WorkloadResource, error)
	// Delete a workload.
	DeleteWorkload(context.Context, *DeleteWorkloadRequest) (*DeleteWorkloadResponse, error)
}

// UnimplementedWorkloadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkloadServiceServer struct {
}

func (UnimplementedWorkloadServiceServer) CreateWorkload(context.Context, *CreateWorkloadRequest) (*v11.WorkloadResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkload not implemented")
}
func (UnimplementedWorkloadServiceServer) ListWorkloads(context.Context, *ListWorkloadsRequest) (*ListWorkloadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloads not implemented")
}
func (UnimplementedWorkloadServiceServer) GetWorkload(context.Context, *GetWorkloadRequest) (*v11.WorkloadResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkload not implemented")
}
func (UnimplementedWorkloadServiceServer) UpdateWorkload(context.Context, *UpdateWorkloadRequest) (*v11.WorkloadResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkload not implemented")
}
func (UnimplementedWorkloadServiceServer) PatchWorkload(context.Context, *PatchWorkloadRequest) (*v11.WorkloadResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchWorkload not implemented")
}
func (UnimplementedWorkloadServiceServer) DeleteWorkload(context.Context, *DeleteWorkloadRequest) (*DeleteWorkloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkload not implemented")
}

// UnsafeWorkloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadServiceServer will
// result in compilation errors.
type UnsafeWorkloadServiceServer interface {
	mustEmbedUnimplementedWorkloadServiceServer()
}

func RegisterWorkloadServiceServer(s grpc.ServiceRegistrar, srv WorkloadServiceServer) {
	s.RegisterService(&WorkloadService_ServiceDesc, srv)
}

func _WorkloadService_CreateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServiceServer).CreateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadService/CreateWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServiceServer).CreateWorkload(ctx, req.(*CreateWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadService_ListWorkloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServiceServer).ListWorkloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadService/ListWorkloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServiceServer).ListWorkloads(ctx, req.(*ListWorkloadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadService_GetWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServiceServer).GetWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadService/GetWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServiceServer).GetWorkload(ctx, req.(*GetWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadService_UpdateWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServiceServer).UpdateWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadService/UpdateWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServiceServer).UpdateWorkload(ctx, req.(*UpdateWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadService_PatchWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServiceServer).PatchWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadService/PatchWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServiceServer).PatchWorkload(ctx, req.(*PatchWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadService_DeleteWorkload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServiceServer).DeleteWorkload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadService/DeleteWorkload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServiceServer).DeleteWorkload(ctx, req.(*DeleteWorkloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadService_ServiceDesc is the grpc.ServiceDesc for WorkloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.WorkloadService",
	HandlerType: (*WorkloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkload",
			Handler:    _WorkloadService_CreateWorkload_Handler,
		},
		{
			MethodName: "ListWorkloads",
			Handler:    _WorkloadService_ListWorkloads_Handler,
		},
		{
			MethodName: "GetWorkload",
			Handler:    _WorkloadService_GetWorkload_Handler,
		},
		{
			MethodName: "UpdateWorkload",
			Handler:    _WorkloadService_UpdateWorkload_Handler,
		},
		{
			MethodName: "PatchWorkload",
			Handler:    _WorkloadService_PatchWorkload_Handler,
		},
		{
			MethodName: "DeleteWorkload",
			Handler:    _WorkloadService_DeleteWorkload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// WorkloadMemberServiceClient is the client API for WorkloadMemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkloadMemberServiceClient interface {
	// Create a workload_member.
	CreateWorkloadMember(ctx context.Context, in *CreateWorkloadMemberRequest, opts ...grpc.CallOption) (*v11.WorkloadMember, error)
	// Get a list of workload_members.
	ListWorkloadMembers(ctx context.Context, in *ListWorkloadMembersRequest, opts ...grpc.CallOption) (*ListWorkloadMembersResponse, error)
	// Get a specific workload_member.
	GetWorkloadMember(ctx context.Context, in *GetWorkloadMemberRequest, opts ...grpc.CallOption) (*v11.WorkloadMember, error)
	// Delete a workload_member.
	DeleteWorkloadMember(ctx context.Context, in *DeleteWorkloadMemberRequest, opts ...grpc.CallOption) (*DeleteWorkloadMemberResponse, error)
}

type workloadMemberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkloadMemberServiceClient(cc grpc.ClientConnInterface) WorkloadMemberServiceClient {
	return &workloadMemberServiceClient{cc}
}

func (c *workloadMemberServiceClient) CreateWorkloadMember(ctx context.Context, in *CreateWorkloadMemberRequest, opts ...grpc.CallOption) (*v11.WorkloadMember, error) {
	out := new(v11.WorkloadMember)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadMemberService/CreateWorkloadMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadMemberServiceClient) ListWorkloadMembers(ctx context.Context, in *ListWorkloadMembersRequest, opts ...grpc.CallOption) (*ListWorkloadMembersResponse, error) {
	out := new(ListWorkloadMembersResponse)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadMemberService/ListWorkloadMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadMemberServiceClient) GetWorkloadMember(ctx context.Context, in *GetWorkloadMemberRequest, opts ...grpc.CallOption) (*v11.WorkloadMember, error) {
	out := new(v11.WorkloadMember)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadMemberService/GetWorkloadMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadMemberServiceClient) DeleteWorkloadMember(ctx context.Context, in *DeleteWorkloadMemberRequest, opts ...grpc.CallOption) (*DeleteWorkloadMemberResponse, error) {
	out := new(DeleteWorkloadMemberResponse)
	err := c.cc.Invoke(ctx, "/services.v1.WorkloadMemberService/DeleteWorkloadMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkloadMemberServiceServer is the server API for WorkloadMemberService service.
// All implementations should embed UnimplementedWorkloadMemberServiceServer
// for forward compatibility
type WorkloadMemberServiceServer interface {
	// Create a workload_member.
	CreateWorkloadMember(context.Context, *CreateWorkloadMemberRequest) (*v11.WorkloadMember, error)
	// Get a list of workload_members.
	ListWorkloadMembers(context.Context, *ListWorkloadMembersRequest) (*ListWorkloadMembersResponse, error)
	// Get a specific workload_member.
	GetWorkloadMember(context.Context, *GetWorkloadMemberRequest) (*v11.WorkloadMember, error)
	// Delete a workload_member.
	DeleteWorkloadMember(context.Context, *DeleteWorkloadMemberRequest) (*DeleteWorkloadMemberResponse, error)
}

// UnimplementedWorkloadMemberServiceServer should be embedded to have forward compatible implementations.
type UnimplementedWorkloadMemberServiceServer struct {
}

func (UnimplementedWorkloadMemberServiceServer) CreateWorkloadMember(context.Context, *CreateWorkloadMemberRequest) (*v11.WorkloadMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkloadMember not implemented")
}
func (UnimplementedWorkloadMemberServiceServer) ListWorkloadMembers(context.Context, *ListWorkloadMembersRequest) (*ListWorkloadMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkloadMembers not implemented")
}
func (UnimplementedWorkloadMemberServiceServer) GetWorkloadMember(context.Context, *GetWorkloadMemberRequest) (*v11.WorkloadMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkloadMember not implemented")
}
func (UnimplementedWorkloadMemberServiceServer) DeleteWorkloadMember(context.Context, *DeleteWorkloadMemberRequest) (*DeleteWorkloadMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkloadMember not implemented")
}

// UnsafeWorkloadMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkloadMemberServiceServer will
// result in compilation errors.
type UnsafeWorkloadMemberServiceServer interface {
	mustEmbedUnimplementedWorkloadMemberServiceServer()
}

func RegisterWorkloadMemberServiceServer(s grpc.ServiceRegistrar, srv WorkloadMemberServiceServer) {
	s.RegisterService(&WorkloadMemberService_ServiceDesc, srv)
}

func _WorkloadMemberService_CreateWorkloadMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkloadMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadMemberServiceServer).CreateWorkloadMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadMemberService/CreateWorkloadMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadMemberServiceServer).CreateWorkloadMember(ctx, req.(*CreateWorkloadMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadMemberService_ListWorkloadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkloadMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadMemberServiceServer).ListWorkloadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadMemberService/ListWorkloadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadMemberServiceServer).ListWorkloadMembers(ctx, req.(*ListWorkloadMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadMemberService_GetWorkloadMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkloadMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadMemberServiceServer).GetWorkloadMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadMemberService/GetWorkloadMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadMemberServiceServer).GetWorkloadMember(ctx, req.(*GetWorkloadMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadMemberService_DeleteWorkloadMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkloadMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadMemberServiceServer).DeleteWorkloadMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.WorkloadMemberService/DeleteWorkloadMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadMemberServiceServer).DeleteWorkloadMember(ctx, req.(*DeleteWorkloadMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkloadMemberService_ServiceDesc is the grpc.ServiceDesc for WorkloadMemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkloadMemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.WorkloadMemberService",
	HandlerType: (*WorkloadMemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkloadMember",
			Handler:    _WorkloadMemberService_CreateWorkloadMember_Handler,
		},
		{
			MethodName: "ListWorkloadMembers",
			Handler:    _WorkloadMemberService_ListWorkloadMembers_Handler,
		},
		{
			MethodName: "GetWorkloadMember",
			Handler:    _WorkloadMemberService_GetWorkloadMember_Handler,
		},
		{
			MethodName: "DeleteWorkloadMember",
			Handler:    _WorkloadMemberService_DeleteWorkloadMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// ScheduleServiceClient is the client API for ScheduleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleServiceClient interface {
	// Get a list of schedules (single/repeated).
	ListSchedules(ctx context.Context, in *ListSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error)
	// Create a single_schedule.
	CreateSingleSchedule(ctx context.Context, in *CreateSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error)
	// Get a list of singleSchedules.
	ListSingleSchedules(ctx context.Context, in *ListSingleSchedulesRequest, opts ...grpc.CallOption) (*ListSingleSchedulesResponse, error)
	// Get a specific single_schedule.
	GetSingleSchedule(ctx context.Context, in *GetSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error)
	// Update a single_schedule.
	UpdateSingleSchedule(ctx context.Context, in *UpdateSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error)
	// Patch a single_schedule.
	PatchSingleSchedule(ctx context.Context, in *PatchSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error)
	// Delete a single_schedule.
	DeleteSingleSchedule(ctx context.Context, in *DeleteSingleScheduleRequest, opts ...grpc.CallOption) (*DeleteSingleScheduleResponse, error)
	// Create a repeated_schedule.
	CreateRepeatedSchedule(ctx context.Context, in *CreateRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error)
	// Get a list of repeatedSchedules.
	ListRepeatedSchedules(ctx context.Context, in *ListRepeatedSchedulesRequest, opts ...grpc.CallOption) (*ListRepeatedSchedulesResponse, error)
	// Get a specific repeated_schedule.
	GetRepeatedSchedule(ctx context.Context, in *GetRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error)
	// Update a repeated_schedule.
	UpdateRepeatedSchedule(ctx context.Context, in *UpdateRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error)
	// Patch a repeated_schedule.
	PatchRepeatedSchedule(ctx context.Context, in *PatchRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error)
	// Delete a repeated_schedule.
	DeleteRepeatedSchedule(ctx context.Context, in *DeleteRepeatedScheduleRequest, opts ...grpc.CallOption) (*DeleteRepeatedScheduleResponse, error)
}

type scheduleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleServiceClient(cc grpc.ClientConnInterface) ScheduleServiceClient {
	return &scheduleServiceClient{cc}
}

func (c *scheduleServiceClient) ListSchedules(ctx context.Context, in *ListSchedulesRequest, opts ...grpc.CallOption) (*ListSchedulesResponse, error) {
	out := new(ListSchedulesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/ListSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CreateSingleSchedule(ctx context.Context, in *CreateSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error) {
	out := new(v14.SingleScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/CreateSingleSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListSingleSchedules(ctx context.Context, in *ListSingleSchedulesRequest, opts ...grpc.CallOption) (*ListSingleSchedulesResponse, error) {
	out := new(ListSingleSchedulesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/ListSingleSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetSingleSchedule(ctx context.Context, in *GetSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error) {
	out := new(v14.SingleScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/GetSingleSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateSingleSchedule(ctx context.Context, in *UpdateSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error) {
	out := new(v14.SingleScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/UpdateSingleSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) PatchSingleSchedule(ctx context.Context, in *PatchSingleScheduleRequest, opts ...grpc.CallOption) (*v14.SingleScheduleResource, error) {
	out := new(v14.SingleScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/PatchSingleSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteSingleSchedule(ctx context.Context, in *DeleteSingleScheduleRequest, opts ...grpc.CallOption) (*DeleteSingleScheduleResponse, error) {
	out := new(DeleteSingleScheduleResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/DeleteSingleSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) CreateRepeatedSchedule(ctx context.Context, in *CreateRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error) {
	out := new(v14.RepeatedScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/CreateRepeatedSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) ListRepeatedSchedules(ctx context.Context, in *ListRepeatedSchedulesRequest, opts ...grpc.CallOption) (*ListRepeatedSchedulesResponse, error) {
	out := new(ListRepeatedSchedulesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/ListRepeatedSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) GetRepeatedSchedule(ctx context.Context, in *GetRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error) {
	out := new(v14.RepeatedScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/GetRepeatedSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) UpdateRepeatedSchedule(ctx context.Context, in *UpdateRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error) {
	out := new(v14.RepeatedScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/UpdateRepeatedSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) PatchRepeatedSchedule(ctx context.Context, in *PatchRepeatedScheduleRequest, opts ...grpc.CallOption) (*v14.RepeatedScheduleResource, error) {
	out := new(v14.RepeatedScheduleResource)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/PatchRepeatedSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleServiceClient) DeleteRepeatedSchedule(ctx context.Context, in *DeleteRepeatedScheduleRequest, opts ...grpc.CallOption) (*DeleteRepeatedScheduleResponse, error) {
	out := new(DeleteRepeatedScheduleResponse)
	err := c.cc.Invoke(ctx, "/services.v1.ScheduleService/DeleteRepeatedSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduleServiceServer is the server API for ScheduleService service.
// All implementations should embed UnimplementedScheduleServiceServer
// for forward compatibility
type ScheduleServiceServer interface {
	// Get a list of schedules (single/repeated).
	ListSchedules(context.Context, *ListSchedulesRequest) (*ListSchedulesResponse, error)
	// Create a single_schedule.
	CreateSingleSchedule(context.Context, *CreateSingleScheduleRequest) (*v14.SingleScheduleResource, error)
	// Get a list of singleSchedules.
	ListSingleSchedules(context.Context, *ListSingleSchedulesRequest) (*ListSingleSchedulesResponse, error)
	// Get a specific single_schedule.
	GetSingleSchedule(context.Context, *GetSingleScheduleRequest) (*v14.SingleScheduleResource, error)
	// Update a single_schedule.
	UpdateSingleSchedule(context.Context, *UpdateSingleScheduleRequest) (*v14.SingleScheduleResource, error)
	// Patch a single_schedule.
	PatchSingleSchedule(context.Context, *PatchSingleScheduleRequest) (*v14.SingleScheduleResource, error)
	// Delete a single_schedule.
	DeleteSingleSchedule(context.Context, *DeleteSingleScheduleRequest) (*DeleteSingleScheduleResponse, error)
	// Create a repeated_schedule.
	CreateRepeatedSchedule(context.Context, *CreateRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error)
	// Get a list of repeatedSchedules.
	ListRepeatedSchedules(context.Context, *ListRepeatedSchedulesRequest) (*ListRepeatedSchedulesResponse, error)
	// Get a specific repeated_schedule.
	GetRepeatedSchedule(context.Context, *GetRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error)
	// Update a repeated_schedule.
	UpdateRepeatedSchedule(context.Context, *UpdateRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error)
	// Patch a repeated_schedule.
	PatchRepeatedSchedule(context.Context, *PatchRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error)
	// Delete a repeated_schedule.
	DeleteRepeatedSchedule(context.Context, *DeleteRepeatedScheduleRequest) (*DeleteRepeatedScheduleResponse, error)
}

// UnimplementedScheduleServiceServer should be embedded to have forward compatible implementations.
type UnimplementedScheduleServiceServer struct {
}

func (UnimplementedScheduleServiceServer) ListSchedules(context.Context, *ListSchedulesRequest) (*ListSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) CreateSingleSchedule(context.Context, *CreateSingleScheduleRequest) (*v14.SingleScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSingleSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) ListSingleSchedules(context.Context, *ListSingleSchedulesRequest) (*ListSingleSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSingleSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) GetSingleSchedule(context.Context, *GetSingleScheduleRequest) (*v14.SingleScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateSingleSchedule(context.Context, *UpdateSingleScheduleRequest) (*v14.SingleScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSingleSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) PatchSingleSchedule(context.Context, *PatchSingleScheduleRequest) (*v14.SingleScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchSingleSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteSingleSchedule(context.Context, *DeleteSingleScheduleRequest) (*DeleteSingleScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSingleSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) CreateRepeatedSchedule(context.Context, *CreateRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepeatedSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) ListRepeatedSchedules(context.Context, *ListRepeatedSchedulesRequest) (*ListRepeatedSchedulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepeatedSchedules not implemented")
}
func (UnimplementedScheduleServiceServer) GetRepeatedSchedule(context.Context, *GetRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepeatedSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) UpdateRepeatedSchedule(context.Context, *UpdateRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepeatedSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) PatchRepeatedSchedule(context.Context, *PatchRepeatedScheduleRequest) (*v14.RepeatedScheduleResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchRepeatedSchedule not implemented")
}
func (UnimplementedScheduleServiceServer) DeleteRepeatedSchedule(context.Context, *DeleteRepeatedScheduleRequest) (*DeleteRepeatedScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepeatedSchedule not implemented")
}

// UnsafeScheduleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServiceServer will
// result in compilation errors.
type UnsafeScheduleServiceServer interface {
	mustEmbedUnimplementedScheduleServiceServer()
}

func RegisterScheduleServiceServer(s grpc.ServiceRegistrar, srv ScheduleServiceServer) {
	s.RegisterService(&ScheduleService_ServiceDesc, srv)
}

func _ScheduleService_ListSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/ListSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListSchedules(ctx, req.(*ListSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CreateSingleSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSingleScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateSingleSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/CreateSingleSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateSingleSchedule(ctx, req.(*CreateSingleScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListSingleSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSingleSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListSingleSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/ListSingleSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListSingleSchedules(ctx, req.(*ListSingleSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetSingleSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetSingleSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/GetSingleSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetSingleSchedule(ctx, req.(*GetSingleScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateSingleSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSingleScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateSingleSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/UpdateSingleSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateSingleSchedule(ctx, req.(*UpdateSingleScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_PatchSingleSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchSingleScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).PatchSingleSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/PatchSingleSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).PatchSingleSchedule(ctx, req.(*PatchSingleScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteSingleSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSingleScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteSingleSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/DeleteSingleSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteSingleSchedule(ctx, req.(*DeleteSingleScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_CreateRepeatedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepeatedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).CreateRepeatedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/CreateRepeatedSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).CreateRepeatedSchedule(ctx, req.(*CreateRepeatedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_ListRepeatedSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepeatedSchedulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).ListRepeatedSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/ListRepeatedSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).ListRepeatedSchedules(ctx, req.(*ListRepeatedSchedulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_GetRepeatedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepeatedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).GetRepeatedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/GetRepeatedSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).GetRepeatedSchedule(ctx, req.(*GetRepeatedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_UpdateRepeatedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepeatedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).UpdateRepeatedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/UpdateRepeatedSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).UpdateRepeatedSchedule(ctx, req.(*UpdateRepeatedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_PatchRepeatedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchRepeatedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).PatchRepeatedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/PatchRepeatedSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).PatchRepeatedSchedule(ctx, req.(*PatchRepeatedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduleService_DeleteRepeatedSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepeatedScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServiceServer).DeleteRepeatedSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.ScheduleService/DeleteRepeatedSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServiceServer).DeleteRepeatedSchedule(ctx, req.(*DeleteRepeatedScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScheduleService_ServiceDesc is the grpc.ServiceDesc for ScheduleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScheduleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.ScheduleService",
	HandlerType: (*ScheduleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSchedules",
			Handler:    _ScheduleService_ListSchedules_Handler,
		},
		{
			MethodName: "CreateSingleSchedule",
			Handler:    _ScheduleService_CreateSingleSchedule_Handler,
		},
		{
			MethodName: "ListSingleSchedules",
			Handler:    _ScheduleService_ListSingleSchedules_Handler,
		},
		{
			MethodName: "GetSingleSchedule",
			Handler:    _ScheduleService_GetSingleSchedule_Handler,
		},
		{
			MethodName: "UpdateSingleSchedule",
			Handler:    _ScheduleService_UpdateSingleSchedule_Handler,
		},
		{
			MethodName: "PatchSingleSchedule",
			Handler:    _ScheduleService_PatchSingleSchedule_Handler,
		},
		{
			MethodName: "DeleteSingleSchedule",
			Handler:    _ScheduleService_DeleteSingleSchedule_Handler,
		},
		{
			MethodName: "CreateRepeatedSchedule",
			Handler:    _ScheduleService_CreateRepeatedSchedule_Handler,
		},
		{
			MethodName: "ListRepeatedSchedules",
			Handler:    _ScheduleService_ListRepeatedSchedules_Handler,
		},
		{
			MethodName: "GetRepeatedSchedule",
			Handler:    _ScheduleService_GetRepeatedSchedule_Handler,
		},
		{
			MethodName: "UpdateRepeatedSchedule",
			Handler:    _ScheduleService_UpdateRepeatedSchedule_Handler,
		},
		{
			MethodName: "PatchRepeatedSchedule",
			Handler:    _ScheduleService_PatchRepeatedSchedule_Handler,
		},
		{
			MethodName: "DeleteRepeatedSchedule",
			Handler:    _ScheduleService_DeleteRepeatedSchedule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// TelemetryLogsGroupServiceClient is the client API for TelemetryLogsGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryLogsGroupServiceClient interface {
	// Create a telemetry_logs_group.
	CreateTelemetryLogsGroup(ctx context.Context, in *CreateTelemetryLogsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsGroupResource, error)
	// Get a list of telemetry_logs_groups.
	ListTelemetryLogsGroups(ctx context.Context, in *ListTelemetryLogsGroupsRequest, opts ...grpc.CallOption) (*ListTelemetryLogsGroupsResponse, error)
	// Get a specific telemetry_logs_group.
	GetTelemetryLogsGroup(ctx context.Context, in *GetTelemetryLogsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsGroupResource, error)
	// Delete a telemetry_logs_group.
	DeleteTelemetryLogsGroup(ctx context.Context, in *DeleteTelemetryLogsGroupRequest, opts ...grpc.CallOption) (*DeleteTelemetryLogsGroupResponse, error)
}

type telemetryLogsGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryLogsGroupServiceClient(cc grpc.ClientConnInterface) TelemetryLogsGroupServiceClient {
	return &telemetryLogsGroupServiceClient{cc}
}

func (c *telemetryLogsGroupServiceClient) CreateTelemetryLogsGroup(ctx context.Context, in *CreateTelemetryLogsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsGroupResource, error) {
	out := new(v15.TelemetryLogsGroupResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsGroupService/CreateTelemetryLogsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsGroupServiceClient) ListTelemetryLogsGroups(ctx context.Context, in *ListTelemetryLogsGroupsRequest, opts ...grpc.CallOption) (*ListTelemetryLogsGroupsResponse, error) {
	out := new(ListTelemetryLogsGroupsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsGroupService/ListTelemetryLogsGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsGroupServiceClient) GetTelemetryLogsGroup(ctx context.Context, in *GetTelemetryLogsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsGroupResource, error) {
	out := new(v15.TelemetryLogsGroupResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsGroupService/GetTelemetryLogsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsGroupServiceClient) DeleteTelemetryLogsGroup(ctx context.Context, in *DeleteTelemetryLogsGroupRequest, opts ...grpc.CallOption) (*DeleteTelemetryLogsGroupResponse, error) {
	out := new(DeleteTelemetryLogsGroupResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsGroupService/DeleteTelemetryLogsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryLogsGroupServiceServer is the server API for TelemetryLogsGroupService service.
// All implementations should embed UnimplementedTelemetryLogsGroupServiceServer
// for forward compatibility
type TelemetryLogsGroupServiceServer interface {
	// Create a telemetry_logs_group.
	CreateTelemetryLogsGroup(context.Context, *CreateTelemetryLogsGroupRequest) (*v15.TelemetryLogsGroupResource, error)
	// Get a list of telemetry_logs_groups.
	ListTelemetryLogsGroups(context.Context, *ListTelemetryLogsGroupsRequest) (*ListTelemetryLogsGroupsResponse, error)
	// Get a specific telemetry_logs_group.
	GetTelemetryLogsGroup(context.Context, *GetTelemetryLogsGroupRequest) (*v15.TelemetryLogsGroupResource, error)
	// Delete a telemetry_logs_group.
	DeleteTelemetryLogsGroup(context.Context, *DeleteTelemetryLogsGroupRequest) (*DeleteTelemetryLogsGroupResponse, error)
}

// UnimplementedTelemetryLogsGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTelemetryLogsGroupServiceServer struct {
}

func (UnimplementedTelemetryLogsGroupServiceServer) CreateTelemetryLogsGroup(context.Context, *CreateTelemetryLogsGroupRequest) (*v15.TelemetryLogsGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelemetryLogsGroup not implemented")
}
func (UnimplementedTelemetryLogsGroupServiceServer) ListTelemetryLogsGroups(context.Context, *ListTelemetryLogsGroupsRequest) (*ListTelemetryLogsGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTelemetryLogsGroups not implemented")
}
func (UnimplementedTelemetryLogsGroupServiceServer) GetTelemetryLogsGroup(context.Context, *GetTelemetryLogsGroupRequest) (*v15.TelemetryLogsGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryLogsGroup not implemented")
}
func (UnimplementedTelemetryLogsGroupServiceServer) DeleteTelemetryLogsGroup(context.Context, *DeleteTelemetryLogsGroupRequest) (*DeleteTelemetryLogsGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelemetryLogsGroup not implemented")
}

// UnsafeTelemetryLogsGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryLogsGroupServiceServer will
// result in compilation errors.
type UnsafeTelemetryLogsGroupServiceServer interface {
	mustEmbedUnimplementedTelemetryLogsGroupServiceServer()
}

func RegisterTelemetryLogsGroupServiceServer(s grpc.ServiceRegistrar, srv TelemetryLogsGroupServiceServer) {
	s.RegisterService(&TelemetryLogsGroupService_ServiceDesc, srv)
}

func _TelemetryLogsGroupService_CreateTelemetryLogsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelemetryLogsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsGroupServiceServer).CreateTelemetryLogsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsGroupService/CreateTelemetryLogsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsGroupServiceServer).CreateTelemetryLogsGroup(ctx, req.(*CreateTelemetryLogsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsGroupService_ListTelemetryLogsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTelemetryLogsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsGroupServiceServer).ListTelemetryLogsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsGroupService/ListTelemetryLogsGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsGroupServiceServer).ListTelemetryLogsGroups(ctx, req.(*ListTelemetryLogsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsGroupService_GetTelemetryLogsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryLogsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsGroupServiceServer).GetTelemetryLogsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsGroupService/GetTelemetryLogsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsGroupServiceServer).GetTelemetryLogsGroup(ctx, req.(*GetTelemetryLogsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsGroupService_DeleteTelemetryLogsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTelemetryLogsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsGroupServiceServer).DeleteTelemetryLogsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsGroupService/DeleteTelemetryLogsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsGroupServiceServer).DeleteTelemetryLogsGroup(ctx, req.(*DeleteTelemetryLogsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryLogsGroupService_ServiceDesc is the grpc.ServiceDesc for TelemetryLogsGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryLogsGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.TelemetryLogsGroupService",
	HandlerType: (*TelemetryLogsGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTelemetryLogsGroup",
			Handler:    _TelemetryLogsGroupService_CreateTelemetryLogsGroup_Handler,
		},
		{
			MethodName: "ListTelemetryLogsGroups",
			Handler:    _TelemetryLogsGroupService_ListTelemetryLogsGroups_Handler,
		},
		{
			MethodName: "GetTelemetryLogsGroup",
			Handler:    _TelemetryLogsGroupService_GetTelemetryLogsGroup_Handler,
		},
		{
			MethodName: "DeleteTelemetryLogsGroup",
			Handler:    _TelemetryLogsGroupService_DeleteTelemetryLogsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// TelemetryMetricsGroupServiceClient is the client API for TelemetryMetricsGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryMetricsGroupServiceClient interface {
	// Create a telemetry_metrics_group.
	CreateTelemetryMetricsGroup(ctx context.Context, in *CreateTelemetryMetricsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsGroupResource, error)
	// Get a list of telemetryMetricsGroups.
	ListTelemetryMetricsGroups(ctx context.Context, in *ListTelemetryMetricsGroupsRequest, opts ...grpc.CallOption) (*ListTelemetryMetricsGroupsResponse, error)
	// Get a specific telemetry_metrics_group.
	GetTelemetryMetricsGroup(ctx context.Context, in *GetTelemetryMetricsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsGroupResource, error)
	// Delete a telemetry_metrics_group.
	DeleteTelemetryMetricsGroup(ctx context.Context, in *DeleteTelemetryMetricsGroupRequest, opts ...grpc.CallOption) (*DeleteTelemetryMetricsGroupResponse, error)
}

type telemetryMetricsGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryMetricsGroupServiceClient(cc grpc.ClientConnInterface) TelemetryMetricsGroupServiceClient {
	return &telemetryMetricsGroupServiceClient{cc}
}

func (c *telemetryMetricsGroupServiceClient) CreateTelemetryMetricsGroup(ctx context.Context, in *CreateTelemetryMetricsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsGroupResource, error) {
	out := new(v15.TelemetryMetricsGroupResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsGroupService/CreateTelemetryMetricsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsGroupServiceClient) ListTelemetryMetricsGroups(ctx context.Context, in *ListTelemetryMetricsGroupsRequest, opts ...grpc.CallOption) (*ListTelemetryMetricsGroupsResponse, error) {
	out := new(ListTelemetryMetricsGroupsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsGroupService/ListTelemetryMetricsGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsGroupServiceClient) GetTelemetryMetricsGroup(ctx context.Context, in *GetTelemetryMetricsGroupRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsGroupResource, error) {
	out := new(v15.TelemetryMetricsGroupResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsGroupService/GetTelemetryMetricsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsGroupServiceClient) DeleteTelemetryMetricsGroup(ctx context.Context, in *DeleteTelemetryMetricsGroupRequest, opts ...grpc.CallOption) (*DeleteTelemetryMetricsGroupResponse, error) {
	out := new(DeleteTelemetryMetricsGroupResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsGroupService/DeleteTelemetryMetricsGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryMetricsGroupServiceServer is the server API for TelemetryMetricsGroupService service.
// All implementations should embed UnimplementedTelemetryMetricsGroupServiceServer
// for forward compatibility
type TelemetryMetricsGroupServiceServer interface {
	// Create a telemetry_metrics_group.
	CreateTelemetryMetricsGroup(context.Context, *CreateTelemetryMetricsGroupRequest) (*v15.TelemetryMetricsGroupResource, error)
	// Get a list of telemetryMetricsGroups.
	ListTelemetryMetricsGroups(context.Context, *ListTelemetryMetricsGroupsRequest) (*ListTelemetryMetricsGroupsResponse, error)
	// Get a specific telemetry_metrics_group.
	GetTelemetryMetricsGroup(context.Context, *GetTelemetryMetricsGroupRequest) (*v15.TelemetryMetricsGroupResource, error)
	// Delete a telemetry_metrics_group.
	DeleteTelemetryMetricsGroup(context.Context, *DeleteTelemetryMetricsGroupRequest) (*DeleteTelemetryMetricsGroupResponse, error)
}

// UnimplementedTelemetryMetricsGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTelemetryMetricsGroupServiceServer struct {
}

func (UnimplementedTelemetryMetricsGroupServiceServer) CreateTelemetryMetricsGroup(context.Context, *CreateTelemetryMetricsGroupRequest) (*v15.TelemetryMetricsGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelemetryMetricsGroup not implemented")
}
func (UnimplementedTelemetryMetricsGroupServiceServer) ListTelemetryMetricsGroups(context.Context, *ListTelemetryMetricsGroupsRequest) (*ListTelemetryMetricsGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTelemetryMetricsGroups not implemented")
}
func (UnimplementedTelemetryMetricsGroupServiceServer) GetTelemetryMetricsGroup(context.Context, *GetTelemetryMetricsGroupRequest) (*v15.TelemetryMetricsGroupResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryMetricsGroup not implemented")
}
func (UnimplementedTelemetryMetricsGroupServiceServer) DeleteTelemetryMetricsGroup(context.Context, *DeleteTelemetryMetricsGroupRequest) (*DeleteTelemetryMetricsGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelemetryMetricsGroup not implemented")
}

// UnsafeTelemetryMetricsGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryMetricsGroupServiceServer will
// result in compilation errors.
type UnsafeTelemetryMetricsGroupServiceServer interface {
	mustEmbedUnimplementedTelemetryMetricsGroupServiceServer()
}

func RegisterTelemetryMetricsGroupServiceServer(s grpc.ServiceRegistrar, srv TelemetryMetricsGroupServiceServer) {
	s.RegisterService(&TelemetryMetricsGroupService_ServiceDesc, srv)
}

func _TelemetryMetricsGroupService_CreateTelemetryMetricsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelemetryMetricsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsGroupServiceServer).CreateTelemetryMetricsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsGroupService/CreateTelemetryMetricsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsGroupServiceServer).CreateTelemetryMetricsGroup(ctx, req.(*CreateTelemetryMetricsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsGroupService_ListTelemetryMetricsGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTelemetryMetricsGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsGroupServiceServer).ListTelemetryMetricsGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsGroupService/ListTelemetryMetricsGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsGroupServiceServer).ListTelemetryMetricsGroups(ctx, req.(*ListTelemetryMetricsGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsGroupService_GetTelemetryMetricsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryMetricsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsGroupServiceServer).GetTelemetryMetricsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsGroupService/GetTelemetryMetricsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsGroupServiceServer).GetTelemetryMetricsGroup(ctx, req.(*GetTelemetryMetricsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsGroupService_DeleteTelemetryMetricsGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTelemetryMetricsGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsGroupServiceServer).DeleteTelemetryMetricsGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsGroupService/DeleteTelemetryMetricsGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsGroupServiceServer).DeleteTelemetryMetricsGroup(ctx, req.(*DeleteTelemetryMetricsGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryMetricsGroupService_ServiceDesc is the grpc.ServiceDesc for TelemetryMetricsGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryMetricsGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.TelemetryMetricsGroupService",
	HandlerType: (*TelemetryMetricsGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTelemetryMetricsGroup",
			Handler:    _TelemetryMetricsGroupService_CreateTelemetryMetricsGroup_Handler,
		},
		{
			MethodName: "ListTelemetryMetricsGroups",
			Handler:    _TelemetryMetricsGroupService_ListTelemetryMetricsGroups_Handler,
		},
		{
			MethodName: "GetTelemetryMetricsGroup",
			Handler:    _TelemetryMetricsGroupService_GetTelemetryMetricsGroup_Handler,
		},
		{
			MethodName: "DeleteTelemetryMetricsGroup",
			Handler:    _TelemetryMetricsGroupService_DeleteTelemetryMetricsGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// TelemetryLogsProfileServiceClient is the client API for TelemetryLogsProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryLogsProfileServiceClient interface {
	// Create a telemetry_logs_profile.
	CreateTelemetryLogsProfile(ctx context.Context, in *CreateTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error)
	// Get a list of telemetryLogsProfiles.
	ListTelemetryLogsProfiles(ctx context.Context, in *ListTelemetryLogsProfilesRequest, opts ...grpc.CallOption) (*ListTelemetryLogsProfilesResponse, error)
	// Get a specific telemetry_logs_profile.
	GetTelemetryLogsProfile(ctx context.Context, in *GetTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error)
	// Update a telemetry_logs_profile.
	UpdateTelemetryLogsProfile(ctx context.Context, in *UpdateTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error)
	// Patch a telemetry_logs_profile.
	PatchTelemetryLogsProfile(ctx context.Context, in *PatchTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error)
	// Delete a telemetry_logs_profile.
	DeleteTelemetryLogsProfile(ctx context.Context, in *DeleteTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*DeleteTelemetryLogsProfileResponse, error)
}

type telemetryLogsProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryLogsProfileServiceClient(cc grpc.ClientConnInterface) TelemetryLogsProfileServiceClient {
	return &telemetryLogsProfileServiceClient{cc}
}

func (c *telemetryLogsProfileServiceClient) CreateTelemetryLogsProfile(ctx context.Context, in *CreateTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error) {
	out := new(v15.TelemetryLogsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsProfileService/CreateTelemetryLogsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsProfileServiceClient) ListTelemetryLogsProfiles(ctx context.Context, in *ListTelemetryLogsProfilesRequest, opts ...grpc.CallOption) (*ListTelemetryLogsProfilesResponse, error) {
	out := new(ListTelemetryLogsProfilesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsProfileService/ListTelemetryLogsProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsProfileServiceClient) GetTelemetryLogsProfile(ctx context.Context, in *GetTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error) {
	out := new(v15.TelemetryLogsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsProfileService/GetTelemetryLogsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsProfileServiceClient) UpdateTelemetryLogsProfile(ctx context.Context, in *UpdateTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error) {
	out := new(v15.TelemetryLogsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsProfileService/UpdateTelemetryLogsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsProfileServiceClient) PatchTelemetryLogsProfile(ctx context.Context, in *PatchTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryLogsProfileResource, error) {
	out := new(v15.TelemetryLogsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsProfileService/PatchTelemetryLogsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryLogsProfileServiceClient) DeleteTelemetryLogsProfile(ctx context.Context, in *DeleteTelemetryLogsProfileRequest, opts ...grpc.CallOption) (*DeleteTelemetryLogsProfileResponse, error) {
	out := new(DeleteTelemetryLogsProfileResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryLogsProfileService/DeleteTelemetryLogsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryLogsProfileServiceServer is the server API for TelemetryLogsProfileService service.
// All implementations should embed UnimplementedTelemetryLogsProfileServiceServer
// for forward compatibility
type TelemetryLogsProfileServiceServer interface {
	// Create a telemetry_logs_profile.
	CreateTelemetryLogsProfile(context.Context, *CreateTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error)
	// Get a list of telemetryLogsProfiles.
	ListTelemetryLogsProfiles(context.Context, *ListTelemetryLogsProfilesRequest) (*ListTelemetryLogsProfilesResponse, error)
	// Get a specific telemetry_logs_profile.
	GetTelemetryLogsProfile(context.Context, *GetTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error)
	// Update a telemetry_logs_profile.
	UpdateTelemetryLogsProfile(context.Context, *UpdateTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error)
	// Patch a telemetry_logs_profile.
	PatchTelemetryLogsProfile(context.Context, *PatchTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error)
	// Delete a telemetry_logs_profile.
	DeleteTelemetryLogsProfile(context.Context, *DeleteTelemetryLogsProfileRequest) (*DeleteTelemetryLogsProfileResponse, error)
}

// UnimplementedTelemetryLogsProfileServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTelemetryLogsProfileServiceServer struct {
}

func (UnimplementedTelemetryLogsProfileServiceServer) CreateTelemetryLogsProfile(context.Context, *CreateTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelemetryLogsProfile not implemented")
}
func (UnimplementedTelemetryLogsProfileServiceServer) ListTelemetryLogsProfiles(context.Context, *ListTelemetryLogsProfilesRequest) (*ListTelemetryLogsProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTelemetryLogsProfiles not implemented")
}
func (UnimplementedTelemetryLogsProfileServiceServer) GetTelemetryLogsProfile(context.Context, *GetTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryLogsProfile not implemented")
}
func (UnimplementedTelemetryLogsProfileServiceServer) UpdateTelemetryLogsProfile(context.Context, *UpdateTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelemetryLogsProfile not implemented")
}
func (UnimplementedTelemetryLogsProfileServiceServer) PatchTelemetryLogsProfile(context.Context, *PatchTelemetryLogsProfileRequest) (*v15.TelemetryLogsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTelemetryLogsProfile not implemented")
}
func (UnimplementedTelemetryLogsProfileServiceServer) DeleteTelemetryLogsProfile(context.Context, *DeleteTelemetryLogsProfileRequest) (*DeleteTelemetryLogsProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelemetryLogsProfile not implemented")
}

// UnsafeTelemetryLogsProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryLogsProfileServiceServer will
// result in compilation errors.
type UnsafeTelemetryLogsProfileServiceServer interface {
	mustEmbedUnimplementedTelemetryLogsProfileServiceServer()
}

func RegisterTelemetryLogsProfileServiceServer(s grpc.ServiceRegistrar, srv TelemetryLogsProfileServiceServer) {
	s.RegisterService(&TelemetryLogsProfileService_ServiceDesc, srv)
}

func _TelemetryLogsProfileService_CreateTelemetryLogsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelemetryLogsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsProfileServiceServer).CreateTelemetryLogsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsProfileService/CreateTelemetryLogsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsProfileServiceServer).CreateTelemetryLogsProfile(ctx, req.(*CreateTelemetryLogsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsProfileService_ListTelemetryLogsProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTelemetryLogsProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsProfileServiceServer).ListTelemetryLogsProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsProfileService/ListTelemetryLogsProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsProfileServiceServer).ListTelemetryLogsProfiles(ctx, req.(*ListTelemetryLogsProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsProfileService_GetTelemetryLogsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryLogsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsProfileServiceServer).GetTelemetryLogsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsProfileService/GetTelemetryLogsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsProfileServiceServer).GetTelemetryLogsProfile(ctx, req.(*GetTelemetryLogsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsProfileService_UpdateTelemetryLogsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTelemetryLogsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsProfileServiceServer).UpdateTelemetryLogsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsProfileService/UpdateTelemetryLogsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsProfileServiceServer).UpdateTelemetryLogsProfile(ctx, req.(*UpdateTelemetryLogsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsProfileService_PatchTelemetryLogsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTelemetryLogsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsProfileServiceServer).PatchTelemetryLogsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsProfileService/PatchTelemetryLogsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsProfileServiceServer).PatchTelemetryLogsProfile(ctx, req.(*PatchTelemetryLogsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryLogsProfileService_DeleteTelemetryLogsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTelemetryLogsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryLogsProfileServiceServer).DeleteTelemetryLogsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryLogsProfileService/DeleteTelemetryLogsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryLogsProfileServiceServer).DeleteTelemetryLogsProfile(ctx, req.(*DeleteTelemetryLogsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryLogsProfileService_ServiceDesc is the grpc.ServiceDesc for TelemetryLogsProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryLogsProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.TelemetryLogsProfileService",
	HandlerType: (*TelemetryLogsProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTelemetryLogsProfile",
			Handler:    _TelemetryLogsProfileService_CreateTelemetryLogsProfile_Handler,
		},
		{
			MethodName: "ListTelemetryLogsProfiles",
			Handler:    _TelemetryLogsProfileService_ListTelemetryLogsProfiles_Handler,
		},
		{
			MethodName: "GetTelemetryLogsProfile",
			Handler:    _TelemetryLogsProfileService_GetTelemetryLogsProfile_Handler,
		},
		{
			MethodName: "UpdateTelemetryLogsProfile",
			Handler:    _TelemetryLogsProfileService_UpdateTelemetryLogsProfile_Handler,
		},
		{
			MethodName: "PatchTelemetryLogsProfile",
			Handler:    _TelemetryLogsProfileService_PatchTelemetryLogsProfile_Handler,
		},
		{
			MethodName: "DeleteTelemetryLogsProfile",
			Handler:    _TelemetryLogsProfileService_DeleteTelemetryLogsProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// TelemetryMetricsProfileServiceClient is the client API for TelemetryMetricsProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryMetricsProfileServiceClient interface {
	// Create a telemetry_metrics_profile.
	CreateTelemetryMetricsProfile(ctx context.Context, in *CreateTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error)
	// Get a list of telemetryMetricsProfiles.
	ListTelemetryMetricsProfiles(ctx context.Context, in *ListTelemetryMetricsProfilesRequest, opts ...grpc.CallOption) (*ListTelemetryMetricsProfilesResponse, error)
	// Get a specific telemetry_metrics_profile.
	GetTelemetryMetricsProfile(ctx context.Context, in *GetTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error)
	// Update a telemetry_metrics_profile.
	UpdateTelemetryMetricsProfile(ctx context.Context, in *UpdateTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error)
	// Patch a telemetry_metrics_profile.
	PatchTelemetryMetricsProfile(ctx context.Context, in *PatchTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error)
	// Delete a telemetry_metrics_profile.
	DeleteTelemetryMetricsProfile(ctx context.Context, in *DeleteTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*DeleteTelemetryMetricsProfileResponse, error)
}

type telemetryMetricsProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryMetricsProfileServiceClient(cc grpc.ClientConnInterface) TelemetryMetricsProfileServiceClient {
	return &telemetryMetricsProfileServiceClient{cc}
}

func (c *telemetryMetricsProfileServiceClient) CreateTelemetryMetricsProfile(ctx context.Context, in *CreateTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error) {
	out := new(v15.TelemetryMetricsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsProfileService/CreateTelemetryMetricsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsProfileServiceClient) ListTelemetryMetricsProfiles(ctx context.Context, in *ListTelemetryMetricsProfilesRequest, opts ...grpc.CallOption) (*ListTelemetryMetricsProfilesResponse, error) {
	out := new(ListTelemetryMetricsProfilesResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsProfileService/ListTelemetryMetricsProfiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsProfileServiceClient) GetTelemetryMetricsProfile(ctx context.Context, in *GetTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error) {
	out := new(v15.TelemetryMetricsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsProfileService/GetTelemetryMetricsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsProfileServiceClient) UpdateTelemetryMetricsProfile(ctx context.Context, in *UpdateTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error) {
	out := new(v15.TelemetryMetricsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsProfileService/UpdateTelemetryMetricsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsProfileServiceClient) PatchTelemetryMetricsProfile(ctx context.Context, in *PatchTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*v15.TelemetryMetricsProfileResource, error) {
	out := new(v15.TelemetryMetricsProfileResource)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsProfileService/PatchTelemetryMetricsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryMetricsProfileServiceClient) DeleteTelemetryMetricsProfile(ctx context.Context, in *DeleteTelemetryMetricsProfileRequest, opts ...grpc.CallOption) (*DeleteTelemetryMetricsProfileResponse, error) {
	out := new(DeleteTelemetryMetricsProfileResponse)
	err := c.cc.Invoke(ctx, "/services.v1.TelemetryMetricsProfileService/DeleteTelemetryMetricsProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryMetricsProfileServiceServer is the server API for TelemetryMetricsProfileService service.
// All implementations should embed UnimplementedTelemetryMetricsProfileServiceServer
// for forward compatibility
type TelemetryMetricsProfileServiceServer interface {
	// Create a telemetry_metrics_profile.
	CreateTelemetryMetricsProfile(context.Context, *CreateTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error)
	// Get a list of telemetryMetricsProfiles.
	ListTelemetryMetricsProfiles(context.Context, *ListTelemetryMetricsProfilesRequest) (*ListTelemetryMetricsProfilesResponse, error)
	// Get a specific telemetry_metrics_profile.
	GetTelemetryMetricsProfile(context.Context, *GetTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error)
	// Update a telemetry_metrics_profile.
	UpdateTelemetryMetricsProfile(context.Context, *UpdateTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error)
	// Patch a telemetry_metrics_profile.
	PatchTelemetryMetricsProfile(context.Context, *PatchTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error)
	// Delete a telemetry_metrics_profile.
	DeleteTelemetryMetricsProfile(context.Context, *DeleteTelemetryMetricsProfileRequest) (*DeleteTelemetryMetricsProfileResponse, error)
}

// UnimplementedTelemetryMetricsProfileServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTelemetryMetricsProfileServiceServer struct {
}

func (UnimplementedTelemetryMetricsProfileServiceServer) CreateTelemetryMetricsProfile(context.Context, *CreateTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTelemetryMetricsProfile not implemented")
}
func (UnimplementedTelemetryMetricsProfileServiceServer) ListTelemetryMetricsProfiles(context.Context, *ListTelemetryMetricsProfilesRequest) (*ListTelemetryMetricsProfilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTelemetryMetricsProfiles not implemented")
}
func (UnimplementedTelemetryMetricsProfileServiceServer) GetTelemetryMetricsProfile(context.Context, *GetTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelemetryMetricsProfile not implemented")
}
func (UnimplementedTelemetryMetricsProfileServiceServer) UpdateTelemetryMetricsProfile(context.Context, *UpdateTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTelemetryMetricsProfile not implemented")
}
func (UnimplementedTelemetryMetricsProfileServiceServer) PatchTelemetryMetricsProfile(context.Context, *PatchTelemetryMetricsProfileRequest) (*v15.TelemetryMetricsProfileResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchTelemetryMetricsProfile not implemented")
}
func (UnimplementedTelemetryMetricsProfileServiceServer) DeleteTelemetryMetricsProfile(context.Context, *DeleteTelemetryMetricsProfileRequest) (*DeleteTelemetryMetricsProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTelemetryMetricsProfile not implemented")
}

// UnsafeTelemetryMetricsProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryMetricsProfileServiceServer will
// result in compilation errors.
type UnsafeTelemetryMetricsProfileServiceServer interface {
	mustEmbedUnimplementedTelemetryMetricsProfileServiceServer()
}

func RegisterTelemetryMetricsProfileServiceServer(s grpc.ServiceRegistrar, srv TelemetryMetricsProfileServiceServer) {
	s.RegisterService(&TelemetryMetricsProfileService_ServiceDesc, srv)
}

func _TelemetryMetricsProfileService_CreateTelemetryMetricsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelemetryMetricsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsProfileServiceServer).CreateTelemetryMetricsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsProfileService/CreateTelemetryMetricsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsProfileServiceServer).CreateTelemetryMetricsProfile(ctx, req.(*CreateTelemetryMetricsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsProfileService_ListTelemetryMetricsProfiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTelemetryMetricsProfilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsProfileServiceServer).ListTelemetryMetricsProfiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsProfileService/ListTelemetryMetricsProfiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsProfileServiceServer).ListTelemetryMetricsProfiles(ctx, req.(*ListTelemetryMetricsProfilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsProfileService_GetTelemetryMetricsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTelemetryMetricsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsProfileServiceServer).GetTelemetryMetricsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsProfileService/GetTelemetryMetricsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsProfileServiceServer).GetTelemetryMetricsProfile(ctx, req.(*GetTelemetryMetricsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsProfileService_UpdateTelemetryMetricsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTelemetryMetricsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsProfileServiceServer).UpdateTelemetryMetricsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsProfileService/UpdateTelemetryMetricsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsProfileServiceServer).UpdateTelemetryMetricsProfile(ctx, req.(*UpdateTelemetryMetricsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsProfileService_PatchTelemetryMetricsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchTelemetryMetricsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsProfileServiceServer).PatchTelemetryMetricsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsProfileService/PatchTelemetryMetricsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsProfileServiceServer).PatchTelemetryMetricsProfile(ctx, req.(*PatchTelemetryMetricsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryMetricsProfileService_DeleteTelemetryMetricsProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTelemetryMetricsProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryMetricsProfileServiceServer).DeleteTelemetryMetricsProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.TelemetryMetricsProfileService/DeleteTelemetryMetricsProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryMetricsProfileServiceServer).DeleteTelemetryMetricsProfile(ctx, req.(*DeleteTelemetryMetricsProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryMetricsProfileService_ServiceDesc is the grpc.ServiceDesc for TelemetryMetricsProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryMetricsProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.TelemetryMetricsProfileService",
	HandlerType: (*TelemetryMetricsProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTelemetryMetricsProfile",
			Handler:    _TelemetryMetricsProfileService_CreateTelemetryMetricsProfile_Handler,
		},
		{
			MethodName: "ListTelemetryMetricsProfiles",
			Handler:    _TelemetryMetricsProfileService_ListTelemetryMetricsProfiles_Handler,
		},
		{
			MethodName: "GetTelemetryMetricsProfile",
			Handler:    _TelemetryMetricsProfileService_GetTelemetryMetricsProfile_Handler,
		},
		{
			MethodName: "UpdateTelemetryMetricsProfile",
			Handler:    _TelemetryMetricsProfileService_UpdateTelemetryMetricsProfile_Handler,
		},
		{
			MethodName: "PatchTelemetryMetricsProfile",
			Handler:    _TelemetryMetricsProfileService_PatchTelemetryMetricsProfile_Handler,
		},
		{
			MethodName: "DeleteTelemetryMetricsProfile",
			Handler:    _TelemetryMetricsProfileService_DeleteTelemetryMetricsProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}

// LocalAccountServiceClient is the client API for LocalAccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalAccountServiceClient interface {
	// Create a localAccount.
	CreateLocalAccount(ctx context.Context, in *CreateLocalAccountRequest, opts ...grpc.CallOption) (*v16.LocalAccountResource, error)
	// Get a list of providers.
	ListLocalAccounts(ctx context.Context, in *ListLocalAccountsRequest, opts ...grpc.CallOption) (*ListLocalAccountsResponse, error)
	// Get a specific provider.
	GetLocalAccount(ctx context.Context, in *GetLocalAccountRequest, opts ...grpc.CallOption) (*v16.LocalAccountResource, error)
	// Delete a provider.
	DeleteLocalAccount(ctx context.Context, in *DeleteLocalAccountRequest, opts ...grpc.CallOption) (*DeleteLocalAccountResponse, error)
}

type localAccountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalAccountServiceClient(cc grpc.ClientConnInterface) LocalAccountServiceClient {
	return &localAccountServiceClient{cc}
}

func (c *localAccountServiceClient) CreateLocalAccount(ctx context.Context, in *CreateLocalAccountRequest, opts ...grpc.CallOption) (*v16.LocalAccountResource, error) {
	out := new(v16.LocalAccountResource)
	err := c.cc.Invoke(ctx, "/services.v1.LocalAccountService/CreateLocalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localAccountServiceClient) ListLocalAccounts(ctx context.Context, in *ListLocalAccountsRequest, opts ...grpc.CallOption) (*ListLocalAccountsResponse, error) {
	out := new(ListLocalAccountsResponse)
	err := c.cc.Invoke(ctx, "/services.v1.LocalAccountService/ListLocalAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localAccountServiceClient) GetLocalAccount(ctx context.Context, in *GetLocalAccountRequest, opts ...grpc.CallOption) (*v16.LocalAccountResource, error) {
	out := new(v16.LocalAccountResource)
	err := c.cc.Invoke(ctx, "/services.v1.LocalAccountService/GetLocalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localAccountServiceClient) DeleteLocalAccount(ctx context.Context, in *DeleteLocalAccountRequest, opts ...grpc.CallOption) (*DeleteLocalAccountResponse, error) {
	out := new(DeleteLocalAccountResponse)
	err := c.cc.Invoke(ctx, "/services.v1.LocalAccountService/DeleteLocalAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalAccountServiceServer is the server API for LocalAccountService service.
// All implementations should embed UnimplementedLocalAccountServiceServer
// for forward compatibility
type LocalAccountServiceServer interface {
	// Create a localAccount.
	CreateLocalAccount(context.Context, *CreateLocalAccountRequest) (*v16.LocalAccountResource, error)
	// Get a list of providers.
	ListLocalAccounts(context.Context, *ListLocalAccountsRequest) (*ListLocalAccountsResponse, error)
	// Get a specific provider.
	GetLocalAccount(context.Context, *GetLocalAccountRequest) (*v16.LocalAccountResource, error)
	// Delete a provider.
	DeleteLocalAccount(context.Context, *DeleteLocalAccountRequest) (*DeleteLocalAccountResponse, error)
}

// UnimplementedLocalAccountServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLocalAccountServiceServer struct {
}

func (UnimplementedLocalAccountServiceServer) CreateLocalAccount(context.Context, *CreateLocalAccountRequest) (*v16.LocalAccountResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocalAccount not implemented")
}
func (UnimplementedLocalAccountServiceServer) ListLocalAccounts(context.Context, *ListLocalAccountsRequest) (*ListLocalAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocalAccounts not implemented")
}
func (UnimplementedLocalAccountServiceServer) GetLocalAccount(context.Context, *GetLocalAccountRequest) (*v16.LocalAccountResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalAccount not implemented")
}
func (UnimplementedLocalAccountServiceServer) DeleteLocalAccount(context.Context, *DeleteLocalAccountRequest) (*DeleteLocalAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLocalAccount not implemented")
}

// UnsafeLocalAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalAccountServiceServer will
// result in compilation errors.
type UnsafeLocalAccountServiceServer interface {
	mustEmbedUnimplementedLocalAccountServiceServer()
}

func RegisterLocalAccountServiceServer(s grpc.ServiceRegistrar, srv LocalAccountServiceServer) {
	s.RegisterService(&LocalAccountService_ServiceDesc, srv)
}

func _LocalAccountService_CreateLocalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAccountServiceServer).CreateLocalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.LocalAccountService/CreateLocalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAccountServiceServer).CreateLocalAccount(ctx, req.(*CreateLocalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalAccountService_ListLocalAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocalAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAccountServiceServer).ListLocalAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.LocalAccountService/ListLocalAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAccountServiceServer).ListLocalAccounts(ctx, req.(*ListLocalAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalAccountService_GetLocalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAccountServiceServer).GetLocalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.LocalAccountService/GetLocalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAccountServiceServer).GetLocalAccount(ctx, req.(*GetLocalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalAccountService_DeleteLocalAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLocalAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalAccountServiceServer).DeleteLocalAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/services.v1.LocalAccountService/DeleteLocalAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalAccountServiceServer).DeleteLocalAccount(ctx, req.(*DeleteLocalAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalAccountService_ServiceDesc is the grpc.ServiceDesc for LocalAccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalAccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.v1.LocalAccountService",
	HandlerType: (*LocalAccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLocalAccount",
			Handler:    _LocalAccountService_CreateLocalAccount_Handler,
		},
		{
			MethodName: "ListLocalAccounts",
			Handler:    _LocalAccountService_ListLocalAccounts_Handler,
		},
		{
			MethodName: "GetLocalAccount",
			Handler:    _LocalAccountService_GetLocalAccount_Handler,
		},
		{
			MethodName: "DeleteLocalAccount",
			Handler:    _LocalAccountService_DeleteLocalAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/v1/services.proto",
}
