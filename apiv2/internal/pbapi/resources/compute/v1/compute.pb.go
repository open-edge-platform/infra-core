// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: resources/compute/v1/compute.proto

package computev1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v12 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/common/v1"
	v14 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/localaccount/v1"
	v1 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/location/v1"
	v13 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/os/v1"
	v11 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/status/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// States of the host.
type HostState int32

const (
	HostState_HOST_STATE_UNSPECIFIED HostState = 0
	HostState_HOST_STATE_DELETING    HostState = 1
	HostState_HOST_STATE_DELETED     HostState = 2
	HostState_HOST_STATE_ONBOARDED   HostState = 3
	HostState_HOST_STATE_UNTRUSTED   HostState = 4
	HostState_HOST_STATE_REGISTERED  HostState = 5
)

// Enum value maps for HostState.
var (
	HostState_name = map[int32]string{
		0: "HOST_STATE_UNSPECIFIED",
		1: "HOST_STATE_DELETING",
		2: "HOST_STATE_DELETED",
		3: "HOST_STATE_ONBOARDED",
		4: "HOST_STATE_UNTRUSTED",
		5: "HOST_STATE_REGISTERED",
	}
	HostState_value = map[string]int32{
		"HOST_STATE_UNSPECIFIED": 0,
		"HOST_STATE_DELETING":    1,
		"HOST_STATE_DELETED":     2,
		"HOST_STATE_ONBOARDED":   3,
		"HOST_STATE_UNTRUSTED":   4,
		"HOST_STATE_REGISTERED":  5,
	}
)

func (x HostState) Enum() *HostState {
	p := new(HostState)
	*p = x
	return p
}

func (x HostState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostState) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[0].Descriptor()
}

func (HostState) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[0]
}

func (x HostState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostState.Descriptor instead.
func (HostState) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{0}
}

// The type of BMC.
type BaremetalControllerKind int32

const (
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_UNSPECIFIED BaremetalControllerKind = 0
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_NONE        BaremetalControllerKind = 1
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_IPMI        BaremetalControllerKind = 2
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_VPRO        BaremetalControllerKind = 3
	BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_PDU         BaremetalControllerKind = 4
)

// Enum value maps for BaremetalControllerKind.
var (
	BaremetalControllerKind_name = map[int32]string{
		0: "BAREMETAL_CONTROLLER_KIND_UNSPECIFIED",
		1: "BAREMETAL_CONTROLLER_KIND_NONE",
		2: "BAREMETAL_CONTROLLER_KIND_IPMI",
		3: "BAREMETAL_CONTROLLER_KIND_VPRO",
		4: "BAREMETAL_CONTROLLER_KIND_PDU",
	}
	BaremetalControllerKind_value = map[string]int32{
		"BAREMETAL_CONTROLLER_KIND_UNSPECIFIED": 0,
		"BAREMETAL_CONTROLLER_KIND_NONE":        1,
		"BAREMETAL_CONTROLLER_KIND_IPMI":        2,
		"BAREMETAL_CONTROLLER_KIND_VPRO":        3,
		"BAREMETAL_CONTROLLER_KIND_PDU":         4,
	}
)

func (x BaremetalControllerKind) Enum() *BaremetalControllerKind {
	p := new(BaremetalControllerKind)
	*p = x
	return p
}

func (x BaremetalControllerKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BaremetalControllerKind) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[1].Descriptor()
}

func (BaremetalControllerKind) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[1]
}

func (x BaremetalControllerKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BaremetalControllerKind.Descriptor instead.
func (BaremetalControllerKind) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{1}
}

// The state of the Host component.
type HostComponentState int32

const (
	HostComponentState_HOST_COMPONENT_STATE_UNSPECIFIED HostComponentState = 0
	HostComponentState_HOST_COMPONENT_STATE_ERROR       HostComponentState = 1
	HostComponentState_HOST_COMPONENT_STATE_DELETED     HostComponentState = 2
	HostComponentState_HOST_COMPONENT_STATE_EXISTS      HostComponentState = 3
)

// Enum value maps for HostComponentState.
var (
	HostComponentState_name = map[int32]string{
		0: "HOST_COMPONENT_STATE_UNSPECIFIED",
		1: "HOST_COMPONENT_STATE_ERROR",
		2: "HOST_COMPONENT_STATE_DELETED",
		3: "HOST_COMPONENT_STATE_EXISTS",
	}
	HostComponentState_value = map[string]int32{
		"HOST_COMPONENT_STATE_UNSPECIFIED": 0,
		"HOST_COMPONENT_STATE_ERROR":       1,
		"HOST_COMPONENT_STATE_DELETED":     2,
		"HOST_COMPONENT_STATE_EXISTS":      3,
	}
)

func (x HostComponentState) Enum() *HostComponentState {
	p := new(HostComponentState)
	*p = x
	return p
}

func (x HostComponentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HostComponentState) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[2].Descriptor()
}

func (HostComponentState) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[2]
}

func (x HostComponentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HostComponentState.Descriptor instead.
func (HostComponentState) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{2}
}

// The state of the network interface.
type NetworkInterfaceLinkState int32

const (
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED NetworkInterfaceLinkState = 0
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UP          NetworkInterfaceLinkState = 1
	NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_DOWN        NetworkInterfaceLinkState = 2
)

// Enum value maps for NetworkInterfaceLinkState.
var (
	NetworkInterfaceLinkState_name = map[int32]string{
		0: "NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED",
		1: "NETWORK_INTERFACE_LINK_STATE_UP",
		2: "NETWORK_INTERFACE_LINK_STATE_DOWN",
	}
	NetworkInterfaceLinkState_value = map[string]int32{
		"NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED": 0,
		"NETWORK_INTERFACE_LINK_STATE_UP":          1,
		"NETWORK_INTERFACE_LINK_STATE_DOWN":        2,
	}
)

func (x NetworkInterfaceLinkState) Enum() *NetworkInterfaceLinkState {
	p := new(NetworkInterfaceLinkState)
	*p = x
	return p
}

func (x NetworkInterfaceLinkState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInterfaceLinkState) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[3].Descriptor()
}

func (NetworkInterfaceLinkState) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[3]
}

func (x NetworkInterfaceLinkState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkInterfaceLinkState.Descriptor instead.
func (NetworkInterfaceLinkState) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{3}
}

// The Instance States.
type InstanceState int32

const (
	// unconfigured
	InstanceState_INSTANCE_STATE_UNSPECIFIED InstanceState = 0
	// OS is Running
	InstanceState_INSTANCE_STATE_RUNNING InstanceState = 1
	// OS should be Deleted
	InstanceState_INSTANCE_STATE_DELETED InstanceState = 2
	// OS should not be trusted anymore
	InstanceState_INSTANCE_STATE_UNTRUSTED InstanceState = 3
)

// Enum value maps for InstanceState.
var (
	InstanceState_name = map[int32]string{
		0: "INSTANCE_STATE_UNSPECIFIED",
		1: "INSTANCE_STATE_RUNNING",
		2: "INSTANCE_STATE_DELETED",
		3: "INSTANCE_STATE_UNTRUSTED",
	}
	InstanceState_value = map[string]int32{
		"INSTANCE_STATE_UNSPECIFIED": 0,
		"INSTANCE_STATE_RUNNING":     1,
		"INSTANCE_STATE_DELETED":     2,
		"INSTANCE_STATE_UNTRUSTED":   3,
	}
)

func (x InstanceState) Enum() *InstanceState {
	p := new(InstanceState)
	*p = x
	return p
}

func (x InstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[4].Descriptor()
}

func (InstanceState) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[4]
}

func (x InstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceState.Descriptor instead.
func (InstanceState) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{4}
}

// The Instance kind.
type InstanceKind int32

const (
	InstanceKind_INSTANCE_KIND_UNSPECIFIED InstanceKind = 0
	// INSTANCE_KIND_VM = 1;
	InstanceKind_INSTANCE_KIND_METAL InstanceKind = 2
)

// Enum value maps for InstanceKind.
var (
	InstanceKind_name = map[int32]string{
		0: "INSTANCE_KIND_UNSPECIFIED",
		2: "INSTANCE_KIND_METAL",
	}
	InstanceKind_value = map[string]int32{
		"INSTANCE_KIND_UNSPECIFIED": 0,
		"INSTANCE_KIND_METAL":       2,
	}
)

func (x InstanceKind) Enum() *InstanceKind {
	p := new(InstanceKind)
	*p = x
	return p
}

func (x InstanceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[5].Descriptor()
}

func (InstanceKind) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[5]
}

func (x InstanceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceKind.Descriptor instead.
func (InstanceKind) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{5}
}

// Represents the Workload state, used for both current and desired state.
type WorkloadState int32

const (
	WorkloadState_WORKLOAD_STATE_UNSPECIFIED WorkloadState = 0
	WorkloadState_WORKLOAD_STATE_ERROR       WorkloadState = 1
	WorkloadState_WORKLOAD_STATE_DELETING    WorkloadState = 2
	WorkloadState_WORKLOAD_STATE_DELETED     WorkloadState = 3
	WorkloadState_WORKLOAD_STATE_PROVISIONED WorkloadState = 4
)

// Enum value maps for WorkloadState.
var (
	WorkloadState_name = map[int32]string{
		0: "WORKLOAD_STATE_UNSPECIFIED",
		1: "WORKLOAD_STATE_ERROR",
		2: "WORKLOAD_STATE_DELETING",
		3: "WORKLOAD_STATE_DELETED",
		4: "WORKLOAD_STATE_PROVISIONED",
	}
	WorkloadState_value = map[string]int32{
		"WORKLOAD_STATE_UNSPECIFIED": 0,
		"WORKLOAD_STATE_ERROR":       1,
		"WORKLOAD_STATE_DELETING":    2,
		"WORKLOAD_STATE_DELETED":     3,
		"WORKLOAD_STATE_PROVISIONED": 4,
	}
)

func (x WorkloadState) Enum() *WorkloadState {
	p := new(WorkloadState)
	*p = x
	return p
}

func (x WorkloadState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadState) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[6].Descriptor()
}

func (WorkloadState) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[6]
}

func (x WorkloadState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadState.Descriptor instead.
func (WorkloadState) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{6}
}

// Represents the type of workload.
type WorkloadKind int32

const (
	// Should never be used.
	WorkloadKind_WORKLOAD_KIND_UNSPECIFIED WorkloadKind = 0
	// Cluster workload.
	WorkloadKind_WORKLOAD_KIND_CLUSTER WorkloadKind = 1
	// currently unused, but useful to test 2-phase delete.
	WorkloadKind_WORKLOAD_KIND_DHCP WorkloadKind = 2
)

// Enum value maps for WorkloadKind.
var (
	WorkloadKind_name = map[int32]string{
		0: "WORKLOAD_KIND_UNSPECIFIED",
		1: "WORKLOAD_KIND_CLUSTER",
		2: "WORKLOAD_KIND_DHCP",
	}
	WorkloadKind_value = map[string]int32{
		"WORKLOAD_KIND_UNSPECIFIED": 0,
		"WORKLOAD_KIND_CLUSTER":     1,
		"WORKLOAD_KIND_DHCP":        2,
	}
)

func (x WorkloadKind) Enum() *WorkloadKind {
	p := new(WorkloadKind)
	*p = x
	return p
}

func (x WorkloadKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadKind) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[7].Descriptor()
}

func (WorkloadKind) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[7]
}

func (x WorkloadKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadKind.Descriptor instead.
func (WorkloadKind) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{7}
}

// Represents the type of the workload member.
type WorkloadMemberKind int32

const (
	// Should never be used.
	WorkloadMemberKind_WORKLOAD_MEMBER_KIND_UNSPECIFIED WorkloadMemberKind = 0
	// Node of a cluster workload.
	WorkloadMemberKind_WORKLOAD_MEMBER_KIND_CLUSTER_NODE WorkloadMemberKind = 1
)

// Enum value maps for WorkloadMemberKind.
var (
	WorkloadMemberKind_name = map[int32]string{
		0: "WORKLOAD_MEMBER_KIND_UNSPECIFIED",
		1: "WORKLOAD_MEMBER_KIND_CLUSTER_NODE",
	}
	WorkloadMemberKind_value = map[string]int32{
		"WORKLOAD_MEMBER_KIND_UNSPECIFIED":  0,
		"WORKLOAD_MEMBER_KIND_CLUSTER_NODE": 1,
	}
)

func (x WorkloadMemberKind) Enum() *WorkloadMemberKind {
	p := new(WorkloadMemberKind)
	*p = x
	return p
}

func (x WorkloadMemberKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkloadMemberKind) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_compute_v1_compute_proto_enumTypes[8].Descriptor()
}

func (WorkloadMemberKind) Type() protoreflect.EnumType {
	return &file_resources_compute_v1_compute_proto_enumTypes[8]
}

func (x WorkloadMemberKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkloadMemberKind.Descriptor instead.
func (WorkloadMemberKind) EnumDescriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{8}
}

// A Host resource.
type HostResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, generated on Create.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The host name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The desired state of the Host.
	DesiredState HostState `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=resources.compute.v1.HostState" json:"desired_state,omitempty"`
	// The current state of the Host.
	CurrentState HostState `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=resources.compute.v1.HostState" json:"current_state,omitempty"`
	// The site resource associated with the host.
	Site *v1.SiteResource `protobuf:"bytes,8,opt,name=site,proto3" json:"site,omitempty"`
	// The note associated with the host.
	Note string `protobuf:"bytes,13,opt,name=note,proto3" json:"note,omitempty"`
	// SMBIOS device serial number.
	SerialNumber string `protobuf:"bytes,16,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// The host UUID identifier; UUID is unique and immutable.
	Uuid string `protobuf:"bytes,17,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Quantity of memory (RAM) in the system in bytes.
	MemoryBytes string `protobuf:"bytes,18,opt,name=memory_bytes,json=memoryBytes,proto3" json:"memory_bytes,omitempty"`
	// CPU model of the Host.
	CpuModel string `protobuf:"bytes,19,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	// Number of physical CPU sockets.
	CpuSockets uint32 `protobuf:"varint,20,opt,name=cpu_sockets,json=cpuSockets,proto3" json:"cpu_sockets,omitempty"`
	// Number of CPU cores.
	CpuCores uint32 `protobuf:"varint,21,opt,name=cpu_cores,json=cpuCores,proto3" json:"cpu_cores,omitempty"`
	// String list of all CPU capabilities (possibly JSON).
	CpuCapabilities string `protobuf:"bytes,22,opt,name=cpu_capabilities,json=cpuCapabilities,proto3" json:"cpu_capabilities,omitempty"`
	// Architecture of the CPU model, e.g. x86_64.
	CpuArchitecture string `protobuf:"bytes,23,opt,name=cpu_architecture,json=cpuArchitecture,proto3" json:"cpu_architecture,omitempty"`
	// Total Number of threads supported by the CPU.
	CpuThreads uint32 `protobuf:"varint,24,opt,name=cpu_threads,json=cpuThreads,proto3" json:"cpu_threads,omitempty"`
	// JSON field storing the CPU topology, refer to HDA/HRM docs for the JSON schema.
	CpuTopology string `protobuf:"bytes,25,opt,name=cpu_topology,json=cpuTopology,proto3" json:"cpu_topology,omitempty"`
	// Kind of BMC.
	BmcKind BaremetalControllerKind `protobuf:"varint,34,opt,name=bmc_kind,json=bmcKind,proto3,enum=resources.compute.v1.BaremetalControllerKind" json:"bmc_kind,omitempty"`
	// BMC IP address, such as "192.0.0.1".
	BmcIp string `protobuf:"bytes,35,opt,name=bmc_ip,json=bmcIp,proto3" json:"bmc_ip,omitempty"`
	// Hostname.
	Hostname string `protobuf:"bytes,43,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// System Product Name.
	ProductName string `protobuf:"bytes,44,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// BIOS Version.
	BiosVersion string `protobuf:"bytes,46,opt,name=bios_version,json=biosVersion,proto3" json:"bios_version,omitempty"`
	// BIOS Release Date.
	BiosReleaseDate string `protobuf:"bytes,47,opt,name=bios_release_date,json=biosReleaseDate,proto3" json:"bios_release_date,omitempty"`
	// BIOS Vendor.
	BiosVendor string `protobuf:"bytes,48,opt,name=bios_vendor,json=biosVendor,proto3" json:"bios_vendor,omitempty"`
	// textual message that describes the runtime status of Host. Set by RMs only.
	HostStatus string `protobuf:"bytes,60,opt,name=host_status,json=hostStatus,proto3" json:"host_status,omitempty"`
	// Indicates interpretation of host_status. Set by RMs only.
	HostStatusIndicator v11.StatusIndication `protobuf:"varint,61,opt,name=host_status_indicator,json=hostStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"host_status_indicator,omitempty"`
	// UTC timestamp when host_status was last changed. Set by RMs only.
	HostStatusTimestamp string `protobuf:"bytes,62,opt,name=host_status_timestamp,json=hostStatusTimestamp,proto3" json:"host_status_timestamp,omitempty"`
	// textual message that describes the onboarding status of Host. Set by RMs only.
	OnboardingStatus string `protobuf:"bytes,63,opt,name=onboarding_status,json=onboardingStatus,proto3" json:"onboarding_status,omitempty"`
	// Indicates interpretation of onboarding_status. Set by RMs only.
	OnboardingStatusIndicator v11.StatusIndication `protobuf:"varint,64,opt,name=onboarding_status_indicator,json=onboardingStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"onboarding_status_indicator,omitempty"`
	// UTC timestamp when onboarding_status was last changed. Set by RMs only.
	OnboardingStatusTimestamp string `protobuf:"bytes,65,opt,name=onboarding_status_timestamp,json=onboardingStatusTimestamp,proto3" json:"onboarding_status_timestamp,omitempty"`
	// textual message that describes the onboarding status of Host. Set by RMs only.
	RegistrationStatus string `protobuf:"bytes,66,opt,name=registration_status,json=registrationStatus,proto3" json:"registration_status,omitempty"`
	// Indicates interpretation of registration_status. Set by RMs only.
	RegistrationStatusIndicator v11.StatusIndication `protobuf:"varint,67,opt,name=registration_status_indicator,json=registrationStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"registration_status_indicator,omitempty"`
	// UTC timestamp when registration_status was last changed. Set by RMs only.
	RegistrationStatusTimestamp string `protobuf:"bytes,68,opt,name=registration_status_timestamp,json=registrationStatusTimestamp,proto3" json:"registration_status_timestamp,omitempty"`
	// Back-reference to attached host storage resources.
	HostStorages []*HoststorageResource `protobuf:"bytes,70,rep,name=host_storages,json=hostStorages,proto3" json:"host_storages,omitempty"`
	// Back-reference to attached host NIC resources.
	HostNics []*HostnicResource `protobuf:"bytes,71,rep,name=host_nics,json=hostNics,proto3" json:"host_nics,omitempty"`
	// Back-reference to attached host USB resources.
	HostUsbs []*HostusbResource `protobuf:"bytes,72,rep,name=host_usbs,json=hostUsbs,proto3" json:"host_usbs,omitempty"`
	// Back-reference to attached host GPU resources.
	HostGpus []*HostgpuResource `protobuf:"bytes,73,rep,name=host_gpus,json=hostGpus,proto3" json:"host_gpus,omitempty"`
	// The instance associated with the host.
	Instance *InstanceResource `protobuf:"bytes,90,opt,name=instance,proto3" json:"instance,omitempty"`
	// Resource ID, generated on Create.
	HostId string `protobuf:"bytes,5001,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// The site where the host is located.
	SiteId string `protobuf:"bytes,5002,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// The metadata associated with the host, represented by a list of key:value pairs.
	Metadata []*v12.MetadataItem `protobuf:"bytes,5003,rep,name=metadata,proto3" json:"metadata,omitempty"`
	// The metadata inherited by the host, represented by a list of key:value pairs, rendered by location and logical structures.
	InheritedMetadata []*v12.MetadataItem `protobuf:"bytes,5004,rep,name=inherited_metadata,json=inheritedMetadata,proto3" json:"inherited_metadata,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *HostResource) Reset() {
	*x = HostResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostResource) ProtoMessage() {}

func (x *HostResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostResource.ProtoReflect.Descriptor instead.
func (*HostResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{0}
}

func (x *HostResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HostResource) GetDesiredState() HostState {
	if x != nil {
		return x.DesiredState
	}
	return HostState_HOST_STATE_UNSPECIFIED
}

func (x *HostResource) GetCurrentState() HostState {
	if x != nil {
		return x.CurrentState
	}
	return HostState_HOST_STATE_UNSPECIFIED
}

func (x *HostResource) GetSite() *v1.SiteResource {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *HostResource) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *HostResource) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *HostResource) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *HostResource) GetMemoryBytes() string {
	if x != nil {
		return x.MemoryBytes
	}
	return ""
}

func (x *HostResource) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *HostResource) GetCpuSockets() uint32 {
	if x != nil {
		return x.CpuSockets
	}
	return 0
}

func (x *HostResource) GetCpuCores() uint32 {
	if x != nil {
		return x.CpuCores
	}
	return 0
}

func (x *HostResource) GetCpuCapabilities() string {
	if x != nil {
		return x.CpuCapabilities
	}
	return ""
}

func (x *HostResource) GetCpuArchitecture() string {
	if x != nil {
		return x.CpuArchitecture
	}
	return ""
}

func (x *HostResource) GetCpuThreads() uint32 {
	if x != nil {
		return x.CpuThreads
	}
	return 0
}

func (x *HostResource) GetCpuTopology() string {
	if x != nil {
		return x.CpuTopology
	}
	return ""
}

func (x *HostResource) GetBmcKind() BaremetalControllerKind {
	if x != nil {
		return x.BmcKind
	}
	return BaremetalControllerKind_BAREMETAL_CONTROLLER_KIND_UNSPECIFIED
}

func (x *HostResource) GetBmcIp() string {
	if x != nil {
		return x.BmcIp
	}
	return ""
}

func (x *HostResource) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *HostResource) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *HostResource) GetBiosVersion() string {
	if x != nil {
		return x.BiosVersion
	}
	return ""
}

func (x *HostResource) GetBiosReleaseDate() string {
	if x != nil {
		return x.BiosReleaseDate
	}
	return ""
}

func (x *HostResource) GetBiosVendor() string {
	if x != nil {
		return x.BiosVendor
	}
	return ""
}

func (x *HostResource) GetHostStatus() string {
	if x != nil {
		return x.HostStatus
	}
	return ""
}

func (x *HostResource) GetHostStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.HostStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *HostResource) GetHostStatusTimestamp() string {
	if x != nil {
		return x.HostStatusTimestamp
	}
	return ""
}

func (x *HostResource) GetOnboardingStatus() string {
	if x != nil {
		return x.OnboardingStatus
	}
	return ""
}

func (x *HostResource) GetOnboardingStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.OnboardingStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *HostResource) GetOnboardingStatusTimestamp() string {
	if x != nil {
		return x.OnboardingStatusTimestamp
	}
	return ""
}

func (x *HostResource) GetRegistrationStatus() string {
	if x != nil {
		return x.RegistrationStatus
	}
	return ""
}

func (x *HostResource) GetRegistrationStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.RegistrationStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *HostResource) GetRegistrationStatusTimestamp() string {
	if x != nil {
		return x.RegistrationStatusTimestamp
	}
	return ""
}

func (x *HostResource) GetHostStorages() []*HoststorageResource {
	if x != nil {
		return x.HostStorages
	}
	return nil
}

func (x *HostResource) GetHostNics() []*HostnicResource {
	if x != nil {
		return x.HostNics
	}
	return nil
}

func (x *HostResource) GetHostUsbs() []*HostusbResource {
	if x != nil {
		return x.HostUsbs
	}
	return nil
}

func (x *HostResource) GetHostGpus() []*HostgpuResource {
	if x != nil {
		return x.HostGpus
	}
	return nil
}

func (x *HostResource) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *HostResource) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HostResource) GetSiteId() string {
	if x != nil {
		return x.SiteId
	}
	return ""
}

func (x *HostResource) GetMetadata() []*v12.MetadataItem {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HostResource) GetInheritedMetadata() []*v12.MetadataItem {
	if x != nil {
		return x.InheritedMetadata
	}
	return nil
}

func (x *HostResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// The set of available host storage capabilities.
type HoststorageResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The storage device unique identifier.
	Wwid string `protobuf:"bytes,16,opt,name=wwid,proto3" json:"wwid,omitempty"`
	// The storage device unique serial number.
	Serial string `protobuf:"bytes,17,opt,name=serial,proto3" json:"serial,omitempty"`
	// The Storage device vendor.
	Vendor string `protobuf:"bytes,18,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// The storage device model.
	Model string `protobuf:"bytes,19,opt,name=model,proto3" json:"model,omitempty"`
	// The storage device Capacity (size) in bytes.
	CapacityBytes string `protobuf:"bytes,20,opt,name=capacity_bytes,json=capacityBytes,proto3" json:"capacity_bytes,omitempty"`
	// The storage device device name (OS provided, like sda, sdb, etc.)
	DeviceName string `protobuf:"bytes,21,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *HoststorageResource) Reset() {
	*x = HoststorageResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoststorageResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoststorageResource) ProtoMessage() {}

func (x *HoststorageResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoststorageResource.ProtoReflect.Descriptor instead.
func (*HoststorageResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{1}
}

func (x *HoststorageResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HoststorageResource) GetWwid() string {
	if x != nil {
		return x.Wwid
	}
	return ""
}

func (x *HoststorageResource) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *HoststorageResource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HoststorageResource) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *HoststorageResource) GetCapacityBytes() string {
	if x != nil {
		return x.CapacityBytes
	}
	return ""
}

func (x *HoststorageResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HoststorageResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HoststorageResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// The set of available host interfaces.
type HostnicResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The device name (OS provided, like eth0, enp1s0, etc.).
	DeviceName string `protobuf:"bytes,16,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// PCI identifier string for this network interface.
	PciIdentifier string `protobuf:"bytes,17,opt,name=pci_identifier,json=pciIdentifier,proto3" json:"pci_identifier,omitempty"`
	// The interface MAC address.
	MacAddr string `protobuf:"bytes,18,opt,name=mac_addr,json=macAddr,proto3" json:"mac_addr,omitempty"`
	// If the interface has SRIOV enabled.
	SriovEnabled bool `protobuf:"varint,19,opt,name=sriov_enabled,json=sriovEnabled,proto3" json:"sriov_enabled,omitempty"`
	// The number of VFs currently provisioned on the interface, if SR-IOV is supported.
	SriovVfsNum uint32 `protobuf:"varint,20,opt,name=sriov_vfs_num,json=sriovVfsNum,proto3" json:"sriov_vfs_num,omitempty"`
	// The maximum number of VFs the interface supports, if SR-IOV is supported.
	SriovVfsTotal uint32 `protobuf:"varint,31,opt,name=sriov_vfs_total,json=sriovVfsTotal,proto3" json:"sriov_vfs_total,omitempty"`
	// The features of this interface, comma separated.
	Features string `protobuf:"bytes,30,opt,name=features,proto3" json:"features,omitempty"`
	// Maximum transmission unit of the interface.
	Mtu uint32 `protobuf:"varint,40,opt,name=mtu,proto3" json:"mtu,omitempty"`
	// Link state of this interface.
	LinkState NetworkInterfaceLinkState `protobuf:"varint,41,opt,name=link_state,json=linkState,proto3,enum=resources.compute.v1.NetworkInterfaceLinkState" json:"link_state,omitempty"`
	// Whether this is a bmc interface or not.
	BmcInterface bool `protobuf:"varint,43,opt,name=bmc_interface,json=bmcInterface,proto3" json:"bmc_interface,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *HostnicResource) Reset() {
	*x = HostnicResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostnicResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostnicResource) ProtoMessage() {}

func (x *HostnicResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostnicResource.ProtoReflect.Descriptor instead.
func (*HostnicResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{2}
}

func (x *HostnicResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostnicResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostnicResource) GetPciIdentifier() string {
	if x != nil {
		return x.PciIdentifier
	}
	return ""
}

func (x *HostnicResource) GetMacAddr() string {
	if x != nil {
		return x.MacAddr
	}
	return ""
}

func (x *HostnicResource) GetSriovEnabled() bool {
	if x != nil {
		return x.SriovEnabled
	}
	return false
}

func (x *HostnicResource) GetSriovVfsNum() uint32 {
	if x != nil {
		return x.SriovVfsNum
	}
	return 0
}

func (x *HostnicResource) GetSriovVfsTotal() uint32 {
	if x != nil {
		return x.SriovVfsTotal
	}
	return 0
}

func (x *HostnicResource) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *HostnicResource) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

func (x *HostnicResource) GetLinkState() NetworkInterfaceLinkState {
	if x != nil {
		return x.LinkState
	}
	return NetworkInterfaceLinkState_NETWORK_INTERFACE_LINK_STATE_UNSPECIFIED
}

func (x *HostnicResource) GetBmcInterface() bool {
	if x != nil {
		return x.BmcInterface
	}
	return false
}

func (x *HostnicResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostnicResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// The set of host USB resources.
type HostusbResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Hexadecimal number representing ID of the USB device vendor.
	Idvendor string `protobuf:"bytes,10,opt,name=idvendor,proto3" json:"idvendor,omitempty"`
	// Hexadecimal number representing ID of the USB device product.
	Idproduct string `protobuf:"bytes,11,opt,name=idproduct,proto3" json:"idproduct,omitempty"`
	// Bus number of device connected with.
	Bus uint32 `protobuf:"varint,12,opt,name=bus,proto3" json:"bus,omitempty"`
	// USB Device number assigned by OS.
	Addr uint32 `protobuf:"varint,13,opt,name=addr,proto3" json:"addr,omitempty"`
	// class defined by USB-IF.
	Class string `protobuf:"bytes,20,opt,name=class,proto3" json:"class,omitempty"`
	// Serial number of device.
	Serial string `protobuf:"bytes,21,opt,name=serial,proto3" json:"serial,omitempty"`
	// the OS-provided device name.
	DeviceName string `protobuf:"bytes,22,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *HostusbResource) Reset() {
	*x = HostusbResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostusbResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostusbResource) ProtoMessage() {}

func (x *HostusbResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostusbResource.ProtoReflect.Descriptor instead.
func (*HostusbResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{3}
}

func (x *HostusbResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostusbResource) GetIdvendor() string {
	if x != nil {
		return x.Idvendor
	}
	return ""
}

func (x *HostusbResource) GetIdproduct() string {
	if x != nil {
		return x.Idproduct
	}
	return ""
}

func (x *HostusbResource) GetBus() uint32 {
	if x != nil {
		return x.Bus
	}
	return 0
}

func (x *HostusbResource) GetAddr() uint32 {
	if x != nil {
		return x.Addr
	}
	return 0
}

func (x *HostusbResource) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *HostusbResource) GetSerial() string {
	if x != nil {
		return x.Serial
	}
	return ""
}

func (x *HostusbResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostusbResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostusbResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// The set of available host GPU cards.
type HostgpuResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The GPU device PCI identifier.
	PciId string `protobuf:"bytes,20,opt,name=pci_id,json=pciId,proto3" json:"pci_id,omitempty"`
	// The GPU device model.
	Product string `protobuf:"bytes,21,opt,name=product,proto3" json:"product,omitempty"`
	// The GPU device vendor.
	Vendor string `protobuf:"bytes,22,opt,name=vendor,proto3" json:"vendor,omitempty"`
	// The human-readable GPU device description.
	Description string `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	// GPU name as reported by OS.
	DeviceName string `protobuf:"bytes,24,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// The features of this GPU device, comma separated.
	Features string `protobuf:"bytes,25,opt,name=features,proto3" json:"features,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *HostgpuResource) Reset() {
	*x = HostgpuResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostgpuResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostgpuResource) ProtoMessage() {}

func (x *HostgpuResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostgpuResource.ProtoReflect.Descriptor instead.
func (*HostgpuResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{4}
}

func (x *HostgpuResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *HostgpuResource) GetPciId() string {
	if x != nil {
		return x.PciId
	}
	return ""
}

func (x *HostgpuResource) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *HostgpuResource) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *HostgpuResource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *HostgpuResource) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HostgpuResource) GetFeatures() string {
	if x != nil {
		return x.Features
	}
	return ""
}

func (x *HostgpuResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *HostgpuResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// InstanceResource describes an instantiated OS install, running on either a
// host or hypervisor.
type InstanceResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, generated on Create.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Kind of resource. Frequently tied to Provider.
	Kind InstanceKind `protobuf:"varint,2,opt,name=kind,proto3,enum=resources.compute.v1.InstanceKind" json:"kind,omitempty"`
	// The instance's human-readable name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The Instance desired state.
	DesiredState InstanceState `protobuf:"varint,4,opt,name=desired_state,json=desiredState,proto3,enum=resources.compute.v1.InstanceState" json:"desired_state,omitempty"`
	// The Instance current state.
	CurrentState InstanceState `protobuf:"varint,5,opt,name=current_state,json=currentState,proto3,enum=resources.compute.v1.InstanceState" json:"current_state,omitempty"`
	// Host this Instance is placed on. Only applicable to baremetal instances.
	Host *HostResource `protobuf:"bytes,9,opt,name=host,proto3" json:"host,omitempty"`
	// OS resource that should be installed to this Instance.
	DesiredOs *v13.OperatingSystemResource `protobuf:"bytes,11,opt,name=desired_os,json=desiredOs,proto3" json:"desired_os,omitempty"`
	// OS resource that is currently installed for this Instance.
	CurrentOs *v13.OperatingSystemResource `protobuf:"bytes,25,opt,name=current_os,json=currentOs,proto3" json:"current_os,omitempty"`
	// Select to enable security features such as Secure Boot (SB) and Full Disk Encryption (FDE).
	SecurityFeature v13.SecurityFeature `protobuf:"varint,14,opt,name=security_feature,json=securityFeature,proto3,enum=resources.os.v1.SecurityFeature" json:"security_feature,omitempty"`
	// textual message that describes the current instance status. Set by RMs only.
	InstanceStatus string `protobuf:"bytes,15,opt,name=instance_status,json=instanceStatus,proto3" json:"instance_status,omitempty"`
	// Indicates interpretation of instance_status. Set by RMs only.
	InstanceStatusIndicator v11.StatusIndication `protobuf:"varint,16,opt,name=instance_status_indicator,json=instanceStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"instance_status_indicator,omitempty"`
	// UTC timestamp when instance_status was last changed. Set by RMs only.
	InstanceStatusTimestamp string `protobuf:"bytes,17,opt,name=instance_status_timestamp,json=instanceStatusTimestamp,proto3" json:"instance_status_timestamp,omitempty"`
	// textual message that describes the provisioning status of Instance. Set by RMs only.
	ProvisioningStatus string `protobuf:"bytes,18,opt,name=provisioning_status,json=provisioningStatus,proto3" json:"provisioning_status,omitempty"`
	// Indicates interpretation of provisioning_status. Set by RMs only.
	ProvisioningStatusIndicator v11.StatusIndication `protobuf:"varint,19,opt,name=provisioning_status_indicator,json=provisioningStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"provisioning_status_indicator,omitempty"`
	// UTC timestamp when provisioning_status was last changed. Set by RMs only.
	ProvisioningStatusTimestamp string `protobuf:"bytes,20,opt,name=provisioning_status_timestamp,json=provisioningStatusTimestamp,proto3" json:"provisioning_status_timestamp,omitempty"`
	// textual message that describes the update status of Instance. Set by RMs only.
	UpdateStatus string `protobuf:"bytes,21,opt,name=update_status,json=updateStatus,proto3" json:"update_status,omitempty"`
	// Indicates interpretation of update_status. Set by RMs only.
	UpdateStatusIndicator v11.StatusIndication `protobuf:"varint,22,opt,name=update_status_indicator,json=updateStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"update_status_indicator,omitempty"`
	// UTC timestamp when update_status was last changed. Set by RMs only.
	UpdateStatusTimestamp string `protobuf:"bytes,23,opt,name=update_status_timestamp,json=updateStatusTimestamp,proto3" json:"update_status_timestamp,omitempty"`
	// JSON field storing details of Instance update status. Set by RMs only. Beta, subject to change.
	UpdateStatusDetail string `protobuf:"bytes,24,opt,name=update_status_detail,json=updateStatusDetail,proto3" json:"update_status_detail,omitempty"`
	// textual message that describes the trusted_attestation status of Instance. Set by RMs only.
	TrustedAttestationStatus string `protobuf:"bytes,26,opt,name=trusted_attestation_status,json=trustedAttestationStatus,proto3" json:"trusted_attestation_status,omitempty"`
	// Indicates interpretation of trusted_attestation_status. Set by RMs only.
	TrustedAttestationStatusIndicator v11.StatusIndication `protobuf:"varint,27,opt,name=trusted_attestation_status_indicator,json=trustedAttestationStatusIndicator,proto3,enum=resources.status.v1.StatusIndication" json:"trusted_attestation_status_indicator,omitempty"`
	// UTC timestamp when trusted_attestation_status was last changed. Set by RMs only.
	TrustedAttestationStatusTimestamp string `protobuf:"bytes,28,opt,name=trusted_attestation_status_timestamp,json=trustedAttestationStatusTimestamp,proto3" json:"trusted_attestation_status_timestamp,omitempty"`
	// The workload members associated with the instance.
	WorkloadMembers []*WorkloadMember `protobuf:"bytes,30,rep,name=workload_members,json=workloadMembers,proto3" json:"workload_members,omitempty"` // back-reference to the Workload Members associated to this Instance
	// Local Account associated with this Instance
	Localaccount *v14.LocalAccountResource `protobuf:"bytes,41,opt,name=localaccount,proto3" json:"localaccount,omitempty"`
	// The instance's unique identifier. Alias of resourceID.
	InstanceId string `protobuf:"bytes,5001,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// The host's unique identifier associated with the instance.
	HostId string `protobuf:"bytes,5002,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// The unique identifier of OS resource that must be installed on the instance.
	OsId string `protobuf:"bytes,5003,opt,name=os_id,json=osId,proto3" json:"os_id,omitempty"`
	// The unique identifier of local account will be associated with the instance.
	LocalAccountId string `protobuf:"bytes,5004,opt,name=local_account_id,json=localAccountId,proto3" json:"local_account_id,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *InstanceResource) Reset() {
	*x = InstanceResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceResource) ProtoMessage() {}

func (x *InstanceResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceResource.ProtoReflect.Descriptor instead.
func (*InstanceResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{5}
}

func (x *InstanceResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *InstanceResource) GetKind() InstanceKind {
	if x != nil {
		return x.Kind
	}
	return InstanceKind_INSTANCE_KIND_UNSPECIFIED
}

func (x *InstanceResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceResource) GetDesiredState() InstanceState {
	if x != nil {
		return x.DesiredState
	}
	return InstanceState_INSTANCE_STATE_UNSPECIFIED
}

func (x *InstanceResource) GetCurrentState() InstanceState {
	if x != nil {
		return x.CurrentState
	}
	return InstanceState_INSTANCE_STATE_UNSPECIFIED
}

func (x *InstanceResource) GetHost() *HostResource {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *InstanceResource) GetDesiredOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.DesiredOs
	}
	return nil
}

func (x *InstanceResource) GetCurrentOs() *v13.OperatingSystemResource {
	if x != nil {
		return x.CurrentOs
	}
	return nil
}

func (x *InstanceResource) GetSecurityFeature() v13.SecurityFeature {
	if x != nil {
		return x.SecurityFeature
	}
	return v13.SecurityFeature(0)
}

func (x *InstanceResource) GetInstanceStatus() string {
	if x != nil {
		return x.InstanceStatus
	}
	return ""
}

func (x *InstanceResource) GetInstanceStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.InstanceStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *InstanceResource) GetInstanceStatusTimestamp() string {
	if x != nil {
		return x.InstanceStatusTimestamp
	}
	return ""
}

func (x *InstanceResource) GetProvisioningStatus() string {
	if x != nil {
		return x.ProvisioningStatus
	}
	return ""
}

func (x *InstanceResource) GetProvisioningStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.ProvisioningStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *InstanceResource) GetProvisioningStatusTimestamp() string {
	if x != nil {
		return x.ProvisioningStatusTimestamp
	}
	return ""
}

func (x *InstanceResource) GetUpdateStatus() string {
	if x != nil {
		return x.UpdateStatus
	}
	return ""
}

func (x *InstanceResource) GetUpdateStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.UpdateStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *InstanceResource) GetUpdateStatusTimestamp() string {
	if x != nil {
		return x.UpdateStatusTimestamp
	}
	return ""
}

func (x *InstanceResource) GetUpdateStatusDetail() string {
	if x != nil {
		return x.UpdateStatusDetail
	}
	return ""
}

func (x *InstanceResource) GetTrustedAttestationStatus() string {
	if x != nil {
		return x.TrustedAttestationStatus
	}
	return ""
}

func (x *InstanceResource) GetTrustedAttestationStatusIndicator() v11.StatusIndication {
	if x != nil {
		return x.TrustedAttestationStatusIndicator
	}
	return v11.StatusIndication(0)
}

func (x *InstanceResource) GetTrustedAttestationStatusTimestamp() string {
	if x != nil {
		return x.TrustedAttestationStatusTimestamp
	}
	return ""
}

func (x *InstanceResource) GetWorkloadMembers() []*WorkloadMember {
	if x != nil {
		return x.WorkloadMembers
	}
	return nil
}

func (x *InstanceResource) GetLocalaccount() *v14.LocalAccountResource {
	if x != nil {
		return x.Localaccount
	}
	return nil
}

func (x *InstanceResource) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *InstanceResource) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *InstanceResource) GetOsId() string {
	if x != nil {
		return x.OsId
	}
	return ""
}

func (x *InstanceResource) GetLocalAccountId() string {
	if x != nil {
		return x.LocalAccountId
	}
	return ""
}

func (x *InstanceResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *InstanceResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// A generic way to group compute resources to obtain a workload.
type WorkloadResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// resource ID, generated by the inventory on Create.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Type of workload.
	Kind WorkloadKind `protobuf:"varint,2,opt,name=kind,proto3,enum=resources.compute.v1.WorkloadKind" json:"kind,omitempty"`
	// Human-readable name for the workload.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The ID of the external resource, used to link to resources outside the realm of Edge Infrastructure Manager.
	ExternalId string `protobuf:"bytes,5,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	// Human-readable status of the workload.
	Status string `protobuf:"bytes,15,opt,name=status,proto3" json:"status,omitempty"`
	// The members of the workload.
	Members []*WorkloadMember `protobuf:"bytes,20,rep,name=members,proto3" json:"members,omitempty"`
	// The workload unique identifier. Alias of resourceId.
	WorkloadId string `protobuf:"bytes,5001,opt,name=workload_id,json=workloadId,proto3" json:"workload_id,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *WorkloadResource) Reset() {
	*x = WorkloadResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadResource) ProtoMessage() {}

func (x *WorkloadResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadResource.ProtoReflect.Descriptor instead.
func (*WorkloadResource) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{6}
}

func (x *WorkloadResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *WorkloadResource) GetKind() WorkloadKind {
	if x != nil {
		return x.Kind
	}
	return WorkloadKind_WORKLOAD_KIND_UNSPECIFIED
}

func (x *WorkloadResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadResource) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *WorkloadResource) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkloadResource) GetMembers() []*WorkloadMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *WorkloadResource) GetWorkloadId() string {
	if x != nil {
		return x.WorkloadId
	}
	return ""
}

func (x *WorkloadResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkloadResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// Intermediate resource to represent a relation between a workload and a compute resource (i.e., instance).
type WorkloadMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resource ID, generated by the inventory on Create.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The kind of the workload member.
	Kind WorkloadMemberKind `protobuf:"varint,2,opt,name=kind,proto3,enum=resources.compute.v1.WorkloadMemberKind" json:"kind,omitempty"`
	// The workload resource associated with the workload member.
	Workload *WorkloadResource `protobuf:"bytes,10,opt,name=workload,proto3" json:"workload,omitempty"`
	// The instance resource associated with the workload member.
	Instance *InstanceResource `protobuf:"bytes,11,opt,name=instance,proto3" json:"instance,omitempty"`
	// The workload unique identifier. Alias of resourceId.
	WorkloadMemberId string `protobuf:"bytes,5001,opt,name=workload_member_id,json=workloadMemberId,proto3" json:"workload_member_id,omitempty"`
	// The reference of the Instance member of the workload.
	Member *InstanceResource `protobuf:"bytes,5002,opt,name=member,proto3" json:"member,omitempty"`
	// The workload unique identifier.
	WorkloadId string `protobuf:"bytes,5003,opt,name=workload_id,json=workloadId,proto3" json:"workload_id,omitempty"`
	// The unique identifier of the instance.
	InstanceId string `protobuf:"bytes,5004,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *WorkloadMember) Reset() {
	*x = WorkloadMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_compute_v1_compute_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkloadMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadMember) ProtoMessage() {}

func (x *WorkloadMember) ProtoReflect() protoreflect.Message {
	mi := &file_resources_compute_v1_compute_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadMember.ProtoReflect.Descriptor instead.
func (*WorkloadMember) Descriptor() ([]byte, []int) {
	return file_resources_compute_v1_compute_proto_rawDescGZIP(), []int{7}
}

func (x *WorkloadMember) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *WorkloadMember) GetKind() WorkloadMemberKind {
	if x != nil {
		return x.Kind
	}
	return WorkloadMemberKind_WORKLOAD_MEMBER_KIND_UNSPECIFIED
}

func (x *WorkloadMember) GetWorkload() *WorkloadResource {
	if x != nil {
		return x.Workload
	}
	return nil
}

func (x *WorkloadMember) GetInstance() *InstanceResource {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *WorkloadMember) GetWorkloadMemberId() string {
	if x != nil {
		return x.WorkloadMemberId
	}
	return ""
}

func (x *WorkloadMember) GetMember() *InstanceResource {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *WorkloadMember) GetWorkloadId() string {
	if x != nil {
		return x.WorkloadId
	}
	return ""
}

func (x *WorkloadMember) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *WorkloadMember) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *WorkloadMember) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_resources_compute_v1_compute_proto protoreflect.FileDescriptor

var file_resources_compute_v1_compute_proto_rawDesc = []byte{
	0x0a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6f,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x13, 0x0a, 0x0c, 0x48, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41,
	0x03, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28, 0x0d, 0x32, 0x12, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x1d, 0x72, 0x1b,
	0x18, 0x32, 0x32, 0x17, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d,
	0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x20, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0xe0, 0x41, 0x01, 0xe0,
	0x41, 0x03, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x2d, 0x72, 0x2b,
	0x10, 0x01, 0x18, 0x80, 0x04, 0x32, 0x24, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23,
	0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x22, 0x20, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xe0, 0x41, 0x01, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x28, 0x24, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x0a, 0x63, 0x70, 0x75, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x63,
	0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x10, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x63, 0x70,
	0x75, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x10, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x63, 0x70,
	0x75, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x63, 0x70, 0x75, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x4d, 0x0a, 0x08, 0x62,
	0x6d, 0x63, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x72, 0x65, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x07, 0x62, 0x6d, 0x63, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x06, 0x62, 0x6d,
	0x63, 0x5f, 0x69, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x05, 0x62, 0x6d, 0x63, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x26, 0x0a, 0x0c, 0x62, 0x69, 0x6f, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x11, 0x62, 0x69, 0x6f, 0x73, 0x5f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x62, 0x69, 0x6f, 0x73, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x73,
	0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x29,
	0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08, 0x52, 0x0a, 0x68,
	0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a, 0x15, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x13, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x3e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x11, 0x6f, 0x6e, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08, 0x52, 0x10, 0x6f,
	0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x65, 0x0a, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x40,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x1b, 0x6f, 0x6e, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6f, 0x6e, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x42, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08, 0x52, 0x12, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x69, 0x0a, 0x1d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x1b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x1d,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x44, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x53, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x73, 0x12, 0x47,
	0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x62, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x62,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x55, 0x73, 0x62, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x70, 0x75, 0x73, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x70, 0x75, 0x73,
	0x12, 0x47, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x03,
	0xfa, 0x42, 0x18, 0x72, 0x16, 0x28, 0x0d, 0x32, 0x12, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x06, 0x68, 0x6f, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8a,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x04, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28,
	0x0d, 0x32, 0x15, 0x5e, 0x24, 0x7c, 0x5e, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x8b, 0x27, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x56, 0x0a, 0x12, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74,
	0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x8c, 0x27, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x68, 0x65,
	0x72, 0x69, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe9, 0x02, 0x0a, 0x13, 0x48, 0x6f,
	0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x46, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x1f, 0x72, 0x1d,
	0x28, 0x14, 0x32, 0x19, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x77, 0x77, 0x69,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x77, 0x77,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xca, 0x04, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21,
	0xe0, 0x41, 0x03, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28, 0x10, 0x32, 0x15, 0x5e, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x69, 0x63, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x63, 0x69, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x70, 0x63, 0x69, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x28, 0x0a, 0x0d, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x73, 0x72, 0x69,
	0x6f, 0x76, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x73, 0x72, 0x69,
	0x6f, 0x76, 0x5f, 0x76, 0x66, 0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x56, 0x66, 0x73, 0x4e,
	0x75, 0x6d, 0x12, 0x2b, 0x0a, 0x0f, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x5f, 0x76, 0x66, 0x73, 0x5f,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x73, 0x72, 0x69, 0x6f, 0x76, 0x56, 0x66, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x15, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x12, 0x53, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0d,
	0x62, 0x6d, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x62, 0x6d, 0x63, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xf3, 0x02, 0x0a, 0x0f, 0x48, 0x6f, 0x73, 0x74, 0x75, 0x73, 0x62, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x03,
	0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28, 0x14, 0x32, 0x15, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x75, 0x73,
	0x62, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x69, 0x64,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x69, 0x64, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x09, 0x69,
	0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x09, 0x69, 0x64, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x15,
	0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12, 0x19,
	0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x0f, 0x48, 0x6f, 0x73,
	0x74, 0x67, 0x70, 0x75, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x21, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28, 0x10, 0x32, 0x15, 0x5e,
	0x68, 0x6f, 0x73, 0x74, 0x67, 0x70, 0x75, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x06, 0x70, 0x63, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x05, 0x70, 0x63, 0x69, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x8b, 0x11, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41,
	0x03, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28, 0x0d, 0x32, 0x12, 0x5e, 0x69, 0x6e, 0x73, 0x74, 0x2d,
	0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x32, 0x32, 0x17, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d,
	0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x20, 0x5d, 0x2b, 0x24,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x4c, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x4f, 0x73, 0x12,
	0x4c, 0x0a, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x73, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x73, 0x12, 0x4b, 0x0a,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x6f, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x28, 0x80, 0x08,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x66, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x17, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x05, 0x72, 0x03,
	0x28, 0x80, 0x08, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x30, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x28, 0x80, 0x08, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x15, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x28, 0xa0, 0x8d, 0x06, 0x52,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x49, 0x0a, 0x1a, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x05, 0x72,
	0x03, 0x28, 0x80, 0x08, 0x52, 0x18, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x7b,
	0x0a, 0x24, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x21, 0x74, 0x72, 0x75, 0x73, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x54, 0x0a, 0x24, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x21,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x54, 0x0a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x89, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x18, 0x72,
	0x16, 0x28, 0x0d, 0x32, 0x12, 0x5e, 0x69, 0x6e, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x8a,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xe0, 0x41, 0x04, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28,
	0x0d, 0x32, 0x12, 0x5e, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x05, 0x6f, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x8b, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xe0,
	0x41, 0x04, 0xfa, 0x42, 0x16, 0x72, 0x14, 0x28, 0x0b, 0x32, 0x10, 0x5e, 0x6f, 0x73, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x04, 0x6f, 0x73, 0x49,
	0x64, 0x12, 0x51, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x8c, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xe0, 0x41,
	0x04, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x28, 0x15, 0x32, 0x1a, 0x5e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d,
	0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xae, 0x04, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x03, 0xfa,
	0x42, 0x1c, 0x72, 0x1a, 0x28, 0x11, 0x32, 0x16, 0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61,
	0x64, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x34, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x32, 0x32, 0x17,
	0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39,
	0x2e, 0x2f, 0x3a, 0x20, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x28, 0x28, 0x32, 0x17, 0x5e, 0x24, 0x7c,
	0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a,
	0x20, 0x5d, 0x2b, 0x24, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64,
	0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xfa, 0x42, 0x2a, 0x72, 0x28, 0x28, 0xf4, 0x03, 0x32, 0x23, 0x5e, 0x24, 0x7c, 0x5e,
	0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b,
	0x3d, 0x3f, 0x40, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x20, 0x5d, 0x2b, 0x24, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x06,
	0xe0, 0x41, 0x02, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x44, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x89,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x28,
	0x11, 0x32, 0x16, 0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xa9, 0x05, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x03, 0xfa, 0x42,
	0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b,
	0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x41, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x89, 0x27, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e,
	0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x10, 0x77, 0x6f, 0x72,
	0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x8a, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x8b, 0x27, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xe0, 0x41, 0x02, 0xe0, 0x41,
	0x04, 0xfa, 0x42, 0x1c, 0x72, 0x1a, 0x28, 0x11, 0x32, 0x16, 0x5e, 0x77, 0x6f, 0x72, 0x6b, 0x6c,
	0x6f, 0x61, 0x64, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0b,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8c, 0x27, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x21, 0xe0, 0x41, 0x02, 0xe0, 0x41, 0x04, 0xfa, 0x42, 0x18, 0x72, 0x16, 0x28,
	0x0d, 0x32, 0x12, 0x5e, 0x69, 0x6e, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0xa7, 0x01,
	0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x48,
	0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x48, 0x4f, 0x53, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x42, 0x4f, 0x41, 0x52, 0x44, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x05, 0x2a, 0xd3, 0x01, 0x0a, 0x17, 0x42, 0x61, 0x72, 0x65,
	0x6d, 0x65, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x25, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22,
	0x0a, 0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f,
	0x49, 0x50, 0x4d, 0x49, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x41, 0x52, 0x45, 0x4d, 0x45,
	0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x56, 0x50, 0x52, 0x4f, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x42, 0x41,
	0x52, 0x45, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c,
	0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x44, 0x55, 0x10, 0x04, 0x2a, 0x9d, 0x01,
	0x0a, 0x12, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x4f,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b,
	0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x03, 0x2a, 0x95, 0x01,
	0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x28, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x45, 0x54,
	0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x46, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x19, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xa2, 0x01, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f, 0x52, 0x4b, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x4f,
	0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x60, 0x0a, 0x0c, 0x57, 0x6f,
	0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f,
	0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52,
	0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44,
	0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x48, 0x43, 0x50, 0x10, 0x02, 0x2a, 0x61, 0x0a, 0x12,
	0x57, 0x6f, 0x72, 0x6b, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x4f, 0x52, 0x4b, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d,
	0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x4f, 0x52, 0x4b,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x42,
	0x61, 0x5a, 0x5f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x2d, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x76, 0x32, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62,
	0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resources_compute_v1_compute_proto_rawDescOnce sync.Once
	file_resources_compute_v1_compute_proto_rawDescData = file_resources_compute_v1_compute_proto_rawDesc
)

func file_resources_compute_v1_compute_proto_rawDescGZIP() []byte {
	file_resources_compute_v1_compute_proto_rawDescOnce.Do(func() {
		file_resources_compute_v1_compute_proto_rawDescData = protoimpl.X.CompressGZIP(file_resources_compute_v1_compute_proto_rawDescData)
	})
	return file_resources_compute_v1_compute_proto_rawDescData
}

var file_resources_compute_v1_compute_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_resources_compute_v1_compute_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_resources_compute_v1_compute_proto_goTypes = []interface{}{
	(HostState)(0),                      // 0: resources.compute.v1.HostState
	(BaremetalControllerKind)(0),        // 1: resources.compute.v1.BaremetalControllerKind
	(HostComponentState)(0),             // 2: resources.compute.v1.HostComponentState
	(NetworkInterfaceLinkState)(0),      // 3: resources.compute.v1.NetworkInterfaceLinkState
	(InstanceState)(0),                  // 4: resources.compute.v1.InstanceState
	(InstanceKind)(0),                   // 5: resources.compute.v1.InstanceKind
	(WorkloadState)(0),                  // 6: resources.compute.v1.WorkloadState
	(WorkloadKind)(0),                   // 7: resources.compute.v1.WorkloadKind
	(WorkloadMemberKind)(0),             // 8: resources.compute.v1.WorkloadMemberKind
	(*HostResource)(nil),                // 9: resources.compute.v1.HostResource
	(*HoststorageResource)(nil),         // 10: resources.compute.v1.HoststorageResource
	(*HostnicResource)(nil),             // 11: resources.compute.v1.HostnicResource
	(*HostusbResource)(nil),             // 12: resources.compute.v1.HostusbResource
	(*HostgpuResource)(nil),             // 13: resources.compute.v1.HostgpuResource
	(*InstanceResource)(nil),            // 14: resources.compute.v1.InstanceResource
	(*WorkloadResource)(nil),            // 15: resources.compute.v1.WorkloadResource
	(*WorkloadMember)(nil),              // 16: resources.compute.v1.WorkloadMember
	(*v1.SiteResource)(nil),             // 17: resources.location.v1.SiteResource
	(v11.StatusIndication)(0),           // 18: resources.status.v1.StatusIndication
	(*v12.MetadataItem)(nil),            // 19: resources.common.v1.MetadataItem
	(*v13.OperatingSystemResource)(nil), // 20: resources.os.v1.OperatingSystemResource
	(v13.SecurityFeature)(0),            // 21: resources.os.v1.SecurityFeature
	(*v14.LocalAccountResource)(nil),    // 22: resources.localaccount.v1.LocalAccountResource
}
var file_resources_compute_v1_compute_proto_depIdxs = []int32{
	0,  // 0: resources.compute.v1.HostResource.desired_state:type_name -> resources.compute.v1.HostState
	0,  // 1: resources.compute.v1.HostResource.current_state:type_name -> resources.compute.v1.HostState
	17, // 2: resources.compute.v1.HostResource.site:type_name -> resources.location.v1.SiteResource
	1,  // 3: resources.compute.v1.HostResource.bmc_kind:type_name -> resources.compute.v1.BaremetalControllerKind
	18, // 4: resources.compute.v1.HostResource.host_status_indicator:type_name -> resources.status.v1.StatusIndication
	18, // 5: resources.compute.v1.HostResource.onboarding_status_indicator:type_name -> resources.status.v1.StatusIndication
	18, // 6: resources.compute.v1.HostResource.registration_status_indicator:type_name -> resources.status.v1.StatusIndication
	10, // 7: resources.compute.v1.HostResource.host_storages:type_name -> resources.compute.v1.HoststorageResource
	11, // 8: resources.compute.v1.HostResource.host_nics:type_name -> resources.compute.v1.HostnicResource
	12, // 9: resources.compute.v1.HostResource.host_usbs:type_name -> resources.compute.v1.HostusbResource
	13, // 10: resources.compute.v1.HostResource.host_gpus:type_name -> resources.compute.v1.HostgpuResource
	14, // 11: resources.compute.v1.HostResource.instance:type_name -> resources.compute.v1.InstanceResource
	19, // 12: resources.compute.v1.HostResource.metadata:type_name -> resources.common.v1.MetadataItem
	19, // 13: resources.compute.v1.HostResource.inherited_metadata:type_name -> resources.common.v1.MetadataItem
	3,  // 14: resources.compute.v1.HostnicResource.link_state:type_name -> resources.compute.v1.NetworkInterfaceLinkState
	5,  // 15: resources.compute.v1.InstanceResource.kind:type_name -> resources.compute.v1.InstanceKind
	4,  // 16: resources.compute.v1.InstanceResource.desired_state:type_name -> resources.compute.v1.InstanceState
	4,  // 17: resources.compute.v1.InstanceResource.current_state:type_name -> resources.compute.v1.InstanceState
	9,  // 18: resources.compute.v1.InstanceResource.host:type_name -> resources.compute.v1.HostResource
	20, // 19: resources.compute.v1.InstanceResource.desired_os:type_name -> resources.os.v1.OperatingSystemResource
	20, // 20: resources.compute.v1.InstanceResource.current_os:type_name -> resources.os.v1.OperatingSystemResource
	21, // 21: resources.compute.v1.InstanceResource.security_feature:type_name -> resources.os.v1.SecurityFeature
	18, // 22: resources.compute.v1.InstanceResource.instance_status_indicator:type_name -> resources.status.v1.StatusIndication
	18, // 23: resources.compute.v1.InstanceResource.provisioning_status_indicator:type_name -> resources.status.v1.StatusIndication
	18, // 24: resources.compute.v1.InstanceResource.update_status_indicator:type_name -> resources.status.v1.StatusIndication
	18, // 25: resources.compute.v1.InstanceResource.trusted_attestation_status_indicator:type_name -> resources.status.v1.StatusIndication
	16, // 26: resources.compute.v1.InstanceResource.workload_members:type_name -> resources.compute.v1.WorkloadMember
	22, // 27: resources.compute.v1.InstanceResource.localaccount:type_name -> resources.localaccount.v1.LocalAccountResource
	7,  // 28: resources.compute.v1.WorkloadResource.kind:type_name -> resources.compute.v1.WorkloadKind
	16, // 29: resources.compute.v1.WorkloadResource.members:type_name -> resources.compute.v1.WorkloadMember
	8,  // 30: resources.compute.v1.WorkloadMember.kind:type_name -> resources.compute.v1.WorkloadMemberKind
	15, // 31: resources.compute.v1.WorkloadMember.workload:type_name -> resources.compute.v1.WorkloadResource
	14, // 32: resources.compute.v1.WorkloadMember.instance:type_name -> resources.compute.v1.InstanceResource
	14, // 33: resources.compute.v1.WorkloadMember.member:type_name -> resources.compute.v1.InstanceResource
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_resources_compute_v1_compute_proto_init() }
func file_resources_compute_v1_compute_proto_init() {
	if File_resources_compute_v1_compute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resources_compute_v1_compute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoststorageResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostnicResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostusbResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostgpuResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_compute_v1_compute_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkloadMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resources_compute_v1_compute_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_compute_v1_compute_proto_goTypes,
		DependencyIndexes: file_resources_compute_v1_compute_proto_depIdxs,
		EnumInfos:         file_resources_compute_v1_compute_proto_enumTypes,
		MessageInfos:      file_resources_compute_v1_compute_proto_msgTypes,
	}.Build()
	File_resources_compute_v1_compute_proto = out.File
	file_resources_compute_v1_compute_proto_rawDesc = nil
	file_resources_compute_v1_compute_proto_goTypes = nil
	file_resources_compute_v1_compute_proto_depIdxs = nil
}
