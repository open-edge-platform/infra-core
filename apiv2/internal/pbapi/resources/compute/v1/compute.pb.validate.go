// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/compute/v1/compute.proto

package computev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	osv1 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/os/v1"

	statusv1 "github.com/open-edge-platform/infra-core/apiv2/v2/internal/pbapi/resources/status/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = osv1.SecurityFeature(0)

	_ = statusv1.StatusIndication(0)
)

// Validate checks the field values on HostResource with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HostResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HostResourceMultiError, or
// nil if none found.
func (m *HostResource) ValidateAll() error {
	return m.validate(true)
}

func (m *HostResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for Name

	// no validation rules for DesiredState

	// no validation rules for CurrentState

	if all {
		switch v := interface{}(m.GetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Site",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostResourceValidationError{
				field:  "Site",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProvider()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Provider",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostResourceValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Note

	// no validation rules for SerialNumber

	// no validation rules for Uuid

	// no validation rules for MemoryBytes

	// no validation rules for CpuModel

	// no validation rules for CpuSockets

	// no validation rules for CpuCores

	// no validation rules for CpuCapabilities

	// no validation rules for CpuArchitecture

	// no validation rules for CpuThreads

	// no validation rules for CpuTopology

	// no validation rules for BmcKind

	// no validation rules for BmcIp

	// no validation rules for Hostname

	// no validation rules for ProductName

	// no validation rules for BiosVersion

	// no validation rules for BiosReleaseDate

	// no validation rules for BiosVendor

	// no validation rules for CurrentPowerState

	// no validation rules for DesiredPowerState

	// no validation rules for HostStatus

	// no validation rules for HostStatusIndicator

	// no validation rules for HostStatusTimestamp

	// no validation rules for OnboardingStatus

	// no validation rules for OnboardingStatusIndicator

	// no validation rules for OnboardingStatusTimestamp

	// no validation rules for RegistrationStatus

	// no validation rules for RegistrationStatusIndicator

	// no validation rules for RegistrationStatusTimestamp

	for idx, item := range m.GetHostStorages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostStorages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostStorages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostResourceValidationError{
					field:  fmt.Sprintf("HostStorages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHostNics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostNics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostNics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostResourceValidationError{
					field:  fmt.Sprintf("HostNics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHostUsbs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostUsbs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostUsbs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostResourceValidationError{
					field:  fmt.Sprintf("HostUsbs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHostGpus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostGpus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("HostGpus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostResourceValidationError{
					field:  fmt.Sprintf("HostGpus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostResourceValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SiteId

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("Metadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostResourceValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInheritedMetadata() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("InheritedMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostResourceValidationError{
						field:  fmt.Sprintf("InheritedMetadata[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostResourceValidationError{
					field:  fmt.Sprintf("InheritedMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HostResourceMultiError(errors)
	}

	return nil
}

// HostResourceMultiError is an error wrapping multiple validation errors
// returned by HostResource.ValidateAll() if the designated constraints aren't met.
type HostResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostResourceMultiError) AllErrors() []error { return m }

// HostResourceValidationError is the validation error returned by
// HostResource.Validate if the designated constraints aren't met.
type HostResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostResourceValidationError) ErrorName() string { return "HostResourceValidationError" }

// Error satisfies the builtin error interface
func (e HostResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostResourceValidationError{}

// Validate checks the field values on HoststorageResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HoststorageResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HoststorageResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HoststorageResourceMultiError, or nil if none found.
func (m *HoststorageResource) ValidateAll() error {
	return m.validate(true)
}

func (m *HoststorageResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wwid

	// no validation rules for Serial

	// no validation rules for Vendor

	// no validation rules for Model

	// no validation rules for CapacityBytes

	// no validation rules for DeviceName

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HoststorageResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HoststorageResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HoststorageResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HoststorageResourceMultiError(errors)
	}

	return nil
}

// HoststorageResourceMultiError is an error wrapping multiple validation
// errors returned by HoststorageResource.ValidateAll() if the designated
// constraints aren't met.
type HoststorageResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HoststorageResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HoststorageResourceMultiError) AllErrors() []error { return m }

// HoststorageResourceValidationError is the validation error returned by
// HoststorageResource.Validate if the designated constraints aren't met.
type HoststorageResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HoststorageResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HoststorageResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HoststorageResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HoststorageResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HoststorageResourceValidationError) ErrorName() string {
	return "HoststorageResourceValidationError"
}

// Error satisfies the builtin error interface
func (e HoststorageResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHoststorageResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HoststorageResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HoststorageResourceValidationError{}

// Validate checks the field values on NetworkInterfaceLinkState with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NetworkInterfaceLinkState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetworkInterfaceLinkState with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetworkInterfaceLinkStateMultiError, or nil if none found.
func (m *NetworkInterfaceLinkState) ValidateAll() error {
	return m.validate(true)
}

func (m *NetworkInterfaceLinkState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NetworkInterfaceLinkStateValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NetworkInterfaceLinkStateValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NetworkInterfaceLinkStateValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NetworkInterfaceLinkStateMultiError(errors)
	}

	return nil
}

// NetworkInterfaceLinkStateMultiError is an error wrapping multiple validation
// errors returned by NetworkInterfaceLinkState.ValidateAll() if the
// designated constraints aren't met.
type NetworkInterfaceLinkStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetworkInterfaceLinkStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetworkInterfaceLinkStateMultiError) AllErrors() []error { return m }

// NetworkInterfaceLinkStateValidationError is the validation error returned by
// NetworkInterfaceLinkState.Validate if the designated constraints aren't met.
type NetworkInterfaceLinkStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetworkInterfaceLinkStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetworkInterfaceLinkStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetworkInterfaceLinkStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetworkInterfaceLinkStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetworkInterfaceLinkStateValidationError) ErrorName() string {
	return "NetworkInterfaceLinkStateValidationError"
}

// Error satisfies the builtin error interface
func (e NetworkInterfaceLinkStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetworkInterfaceLinkState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetworkInterfaceLinkStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetworkInterfaceLinkStateValidationError{}

// Validate checks the field values on HostnicResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HostnicResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostnicResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostnicResourceMultiError, or nil if none found.
func (m *HostnicResource) ValidateAll() error {
	return m.validate(true)
}

func (m *HostnicResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeviceName

	// no validation rules for PciIdentifier

	// no validation rules for MacAddr

	// no validation rules for SriovEnabled

	// no validation rules for SriovVfsNum

	// no validation rules for SriovVfsTotal

	// no validation rules for Mtu

	if all {
		switch v := interface{}(m.GetLinkState()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostnicResourceValidationError{
					field:  "LinkState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostnicResourceValidationError{
					field:  "LinkState",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinkState()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostnicResourceValidationError{
				field:  "LinkState",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for BmcInterface

	for idx, item := range m.GetIpaddresses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HostnicResourceValidationError{
						field:  fmt.Sprintf("Ipaddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HostnicResourceValidationError{
						field:  fmt.Sprintf("Ipaddresses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HostnicResourceValidationError{
					field:  fmt.Sprintf("Ipaddresses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostnicResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostnicResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostnicResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HostnicResourceMultiError(errors)
	}

	return nil
}

// HostnicResourceMultiError is an error wrapping multiple validation errors
// returned by HostnicResource.ValidateAll() if the designated constraints
// aren't met.
type HostnicResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostnicResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostnicResourceMultiError) AllErrors() []error { return m }

// HostnicResourceValidationError is the validation error returned by
// HostnicResource.Validate if the designated constraints aren't met.
type HostnicResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostnicResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostnicResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostnicResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostnicResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostnicResourceValidationError) ErrorName() string { return "HostnicResourceValidationError" }

// Error satisfies the builtin error interface
func (e HostnicResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostnicResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostnicResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostnicResourceValidationError{}

// Validate checks the field values on HostusbResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HostusbResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostusbResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostusbResourceMultiError, or nil if none found.
func (m *HostusbResource) ValidateAll() error {
	return m.validate(true)
}

func (m *HostusbResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IdVendor

	// no validation rules for IdProduct

	// no validation rules for Bus

	// no validation rules for Addr

	// no validation rules for Class

	// no validation rules for Serial

	// no validation rules for DeviceName

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostusbResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostusbResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostusbResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HostusbResourceMultiError(errors)
	}

	return nil
}

// HostusbResourceMultiError is an error wrapping multiple validation errors
// returned by HostusbResource.ValidateAll() if the designated constraints
// aren't met.
type HostusbResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostusbResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostusbResourceMultiError) AllErrors() []error { return m }

// HostusbResourceValidationError is the validation error returned by
// HostusbResource.Validate if the designated constraints aren't met.
type HostusbResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostusbResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostusbResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostusbResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostusbResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostusbResourceValidationError) ErrorName() string { return "HostusbResourceValidationError" }

// Error satisfies the builtin error interface
func (e HostusbResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostusbResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostusbResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostusbResourceValidationError{}

// Validate checks the field values on HostgpuResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HostgpuResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HostgpuResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HostgpuResourceMultiError, or nil if none found.
func (m *HostgpuResource) ValidateAll() error {
	return m.validate(true)
}

func (m *HostgpuResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PciId

	// no validation rules for Product

	// no validation rules for Vendor

	// no validation rules for Description

	// no validation rules for DeviceName

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HostgpuResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HostgpuResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HostgpuResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HostgpuResourceMultiError(errors)
	}

	return nil
}

// HostgpuResourceMultiError is an error wrapping multiple validation errors
// returned by HostgpuResource.ValidateAll() if the designated constraints
// aren't met.
type HostgpuResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HostgpuResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HostgpuResourceMultiError) AllErrors() []error { return m }

// HostgpuResourceValidationError is the validation error returned by
// HostgpuResource.Validate if the designated constraints aren't met.
type HostgpuResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HostgpuResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HostgpuResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HostgpuResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HostgpuResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HostgpuResourceValidationError) ErrorName() string { return "HostgpuResourceValidationError" }

// Error satisfies the builtin error interface
func (e HostgpuResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHostgpuResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HostgpuResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HostgpuResourceValidationError{}

// Validate checks the field values on InstanceResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *InstanceResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InstanceResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InstanceResourceMultiError, or nil if none found.
func (m *InstanceResource) ValidateAll() error {
	return m.validate(true)
}

func (m *InstanceResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for DesiredState

	// no validation rules for CurrentState

	if all {
		switch v := interface{}(m.GetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Host",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceResourceValidationError{
				field:  "Host",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Os",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceResourceValidationError{
				field:  "Os",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDesiredOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "DesiredOs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "DesiredOs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDesiredOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceResourceValidationError{
				field:  "DesiredOs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCurrentOs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "CurrentOs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "CurrentOs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCurrentOs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceResourceValidationError{
				field:  "CurrentOs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SecurityFeature

	// no validation rules for InstanceStatus

	// no validation rules for InstanceStatusIndicator

	// no validation rules for InstanceStatusTimestamp

	// no validation rules for ProvisioningStatus

	// no validation rules for ProvisioningStatusIndicator

	// no validation rules for ProvisioningStatusTimestamp

	// no validation rules for UpdateStatus

	// no validation rules for UpdateStatusIndicator

	// no validation rules for UpdateStatusTimestamp

	// no validation rules for UpdateStatusDetail

	// no validation rules for TrustedAttestationStatus

	// no validation rules for TrustedAttestationStatusIndicator

	// no validation rules for TrustedAttestationStatusTimestamp

	for idx, item := range m.GetWorkloadMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, InstanceResourceValidationError{
						field:  fmt.Sprintf("WorkloadMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, InstanceResourceValidationError{
						field:  fmt.Sprintf("WorkloadMembers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return InstanceResourceValidationError{
					field:  fmt.Sprintf("WorkloadMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetLocalaccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Localaccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Localaccount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocalaccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceResourceValidationError{
				field:  "Localaccount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceID

	// no validation rules for HostID

	// no validation rules for OsID

	// no validation rules for LocalAccountID

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InstanceResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InstanceResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InstanceResourceMultiError(errors)
	}

	return nil
}

// InstanceResourceMultiError is an error wrapping multiple validation errors
// returned by InstanceResource.ValidateAll() if the designated constraints
// aren't met.
type InstanceResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceResourceMultiError) AllErrors() []error { return m }

// InstanceResourceValidationError is the validation error returned by
// InstanceResource.Validate if the designated constraints aren't met.
type InstanceResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceResourceValidationError) ErrorName() string { return "InstanceResourceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstanceResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceResourceValidationError{}

// Validate checks the field values on WorkloadResource with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WorkloadResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkloadResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WorkloadResourceMultiError, or nil if none found.
func (m *WorkloadResource) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkloadResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for Kind

	// no validation rules for Name

	// no validation rules for ExternalId

	// no validation rules for Status

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WorkloadResourceValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WorkloadResourceValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WorkloadResourceValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for WorkloadId

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkloadResourceMultiError(errors)
	}

	return nil
}

// WorkloadResourceMultiError is an error wrapping multiple validation errors
// returned by WorkloadResource.ValidateAll() if the designated constraints
// aren't met.
type WorkloadResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkloadResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkloadResourceMultiError) AllErrors() []error { return m }

// WorkloadResourceValidationError is the validation error returned by
// WorkloadResource.Validate if the designated constraints aren't met.
type WorkloadResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadResourceValidationError) ErrorName() string { return "WorkloadResourceValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadResourceValidationError{}

// Validate checks the field values on WorkloadMember with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WorkloadMember) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WorkloadMember with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WorkloadMemberMultiError,
// or nil if none found.
func (m *WorkloadMember) ValidateAll() error {
	return m.validate(true)
}

func (m *WorkloadMember) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for Kind

	if all {
		switch v := interface{}(m.GetWorkload()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Workload",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWorkload()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMemberValidationError{
				field:  "Workload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMemberValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkloadMemberId

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMemberValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for WorkloadId

	// no validation rules for InstanceId

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WorkloadMemberValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WorkloadMemberValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WorkloadMemberMultiError(errors)
	}

	return nil
}

// WorkloadMemberMultiError is an error wrapping multiple validation errors
// returned by WorkloadMember.ValidateAll() if the designated constraints
// aren't met.
type WorkloadMemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WorkloadMemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WorkloadMemberMultiError) AllErrors() []error { return m }

// WorkloadMemberValidationError is the validation error returned by
// WorkloadMember.Validate if the designated constraints aren't met.
type WorkloadMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WorkloadMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WorkloadMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WorkloadMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WorkloadMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WorkloadMemberValidationError) ErrorName() string { return "WorkloadMemberValidationError" }

// Error satisfies the builtin error interface
func (e WorkloadMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWorkloadMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WorkloadMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WorkloadMemberValidationError{}
