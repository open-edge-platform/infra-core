// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/schedule/v1/schedule.proto

package schedulev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SingleScheduleResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleScheduleResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleScheduleResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleScheduleResourceMultiError, or nil if none found.
func (m *SingleScheduleResource) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleScheduleResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ScheduleStatus

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetTargetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "TargetSite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "TargetSite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleScheduleResourceValidationError{
				field:  "TargetSite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "TargetHost",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "TargetHost",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleScheduleResourceValidationError{
				field:  "TargetHost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "TargetRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "TargetRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleScheduleResourceValidationError{
				field:  "TargetRegion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StartSeconds

	// no validation rules for EndSeconds

	// no validation rules for SingleScheduleID

	// no validation rules for TargetHostId

	// no validation rules for TargetSiteId

	// no validation rules for TargetRegionId

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SingleScheduleResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SingleScheduleResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SingleScheduleResourceMultiError(errors)
	}

	return nil
}

// SingleScheduleResourceMultiError is an error wrapping multiple validation
// errors returned by SingleScheduleResource.ValidateAll() if the designated
// constraints aren't met.
type SingleScheduleResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleScheduleResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleScheduleResourceMultiError) AllErrors() []error { return m }

// SingleScheduleResourceValidationError is the validation error returned by
// SingleScheduleResource.Validate if the designated constraints aren't met.
type SingleScheduleResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleScheduleResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleScheduleResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleScheduleResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleScheduleResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleScheduleResourceValidationError) ErrorName() string {
	return "SingleScheduleResourceValidationError"
}

// Error satisfies the builtin error interface
func (e SingleScheduleResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleScheduleResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleScheduleResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleScheduleResourceValidationError{}

// Validate checks the field values on RepeatedScheduleResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedScheduleResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedScheduleResource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedScheduleResourceMultiError, or nil if none found.
func (m *RepeatedScheduleResource) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedScheduleResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceId

	// no validation rules for ScheduleStatus

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetTargetSite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "TargetSite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "TargetSite",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetSite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepeatedScheduleResourceValidationError{
				field:  "TargetSite",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetHost()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "TargetHost",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "TargetHost",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetHost()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepeatedScheduleResourceValidationError{
				field:  "TargetHost",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTargetRegion()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "TargetRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "TargetRegion",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetRegion()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepeatedScheduleResourceValidationError{
				field:  "TargetRegion",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DurationSeconds

	// no validation rules for CronMinutes

	// no validation rules for CronHours

	// no validation rules for CronDayMonth

	// no validation rules for CronMonth

	// no validation rules for CronDayWeek

	// no validation rules for RepeatedScheduleID

	// no validation rules for TargetHostId

	// no validation rules for TargetSiteId

	// no validation rules for TargetRegionId

	if all {
		switch v := interface{}(m.GetTimestamps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepeatedScheduleResourceValidationError{
					field:  "Timestamps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepeatedScheduleResourceValidationError{
				field:  "Timestamps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RepeatedScheduleResourceMultiError(errors)
	}

	return nil
}

// RepeatedScheduleResourceMultiError is an error wrapping multiple validation
// errors returned by RepeatedScheduleResource.ValidateAll() if the designated
// constraints aren't met.
type RepeatedScheduleResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatedScheduleResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatedScheduleResourceMultiError) AllErrors() []error { return m }

// RepeatedScheduleResourceValidationError is the validation error returned by
// RepeatedScheduleResource.Validate if the designated constraints aren't met.
type RepeatedScheduleResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedScheduleResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedScheduleResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedScheduleResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedScheduleResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedScheduleResourceValidationError) ErrorName() string {
	return "RepeatedScheduleResourceValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedScheduleResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedScheduleResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedScheduleResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedScheduleResourceValidationError{}
