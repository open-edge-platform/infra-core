// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/schedule/v1/schedule.proto

package schedulev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SingleScheduleResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SingleScheduleResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SingleScheduleResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SingleScheduleResourceMultiError, or nil if none found.
func (m *SingleScheduleResource) ValidateAll() error {
	return m.validate(true)
}

func (m *SingleScheduleResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetResourceId()) > 19 {
		err := SingleScheduleResourceValidationError{
			field:  "ResourceId",
			reason: "value length must be at most 19 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SingleScheduleResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := SingleScheduleResourceValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^singlesche-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ScheduleStatus

	if utf8.RuneCountInString(m.GetName()) > 20 {
		err := SingleScheduleResourceValidationError{
			field:  "Name",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SingleScheduleResource_Name_Pattern.MatchString(m.GetName()) {
		err := SingleScheduleResourceValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9./: ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartSeconds

	// no validation rules for EndSeconds

	if len(m.GetSingleScheduleId()) > 19 {
		err := SingleScheduleResourceValidationError{
			field:  "SingleScheduleId",
			reason: "value length must be at most 19 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SingleScheduleResource_SingleScheduleId_Pattern.MatchString(m.GetSingleScheduleId()) {
		err := SingleScheduleResourceValidationError{
			field:  "SingleScheduleId",
			reason: "value does not match regex pattern \"^singlesche-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTargetHostId()) > 13 {
		err := SingleScheduleResourceValidationError{
			field:  "TargetHostId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SingleScheduleResource_TargetHostId_Pattern.MatchString(m.GetTargetHostId()) {
		err := SingleScheduleResourceValidationError{
			field:  "TargetHostId",
			reason: "value does not match regex pattern \"^$|^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTargetSiteId()) > 13 {
		err := SingleScheduleResourceValidationError{
			field:  "TargetSiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SingleScheduleResource_TargetSiteId_Pattern.MatchString(m.GetTargetSiteId()) {
		err := SingleScheduleResourceValidationError{
			field:  "TargetSiteId",
			reason: "value does not match regex pattern \"^$|^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTargetRegionId()) > 15 {
		err := SingleScheduleResourceValidationError{
			field:  "TargetRegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SingleScheduleResource_TargetRegionId_Pattern.MatchString(m.GetTargetRegionId()) {
		err := SingleScheduleResourceValidationError{
			field:  "TargetRegionId",
			reason: "value does not match regex pattern \"^$|^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Relation.(type) {
	case *SingleScheduleResource_TargetSite:
		if v == nil {
			err := SingleScheduleResourceValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetSite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SingleScheduleResourceValidationError{
						field:  "TargetSite",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SingleScheduleResourceValidationError{
						field:  "TargetSite",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetSite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SingleScheduleResourceValidationError{
					field:  "TargetSite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SingleScheduleResource_TargetHost:
		if v == nil {
			err := SingleScheduleResourceValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetHost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SingleScheduleResourceValidationError{
						field:  "TargetHost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SingleScheduleResourceValidationError{
						field:  "TargetHost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetHost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SingleScheduleResourceValidationError{
					field:  "TargetHost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SingleScheduleResource_TargetRegion:
		if v == nil {
			err := SingleScheduleResourceValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetRegion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SingleScheduleResourceValidationError{
						field:  "TargetRegion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SingleScheduleResourceValidationError{
						field:  "TargetRegion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetRegion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SingleScheduleResourceValidationError{
					field:  "TargetRegion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SingleScheduleResourceMultiError(errors)
	}

	return nil
}

// SingleScheduleResourceMultiError is an error wrapping multiple validation
// errors returned by SingleScheduleResource.ValidateAll() if the designated
// constraints aren't met.
type SingleScheduleResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SingleScheduleResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SingleScheduleResourceMultiError) AllErrors() []error { return m }

// SingleScheduleResourceValidationError is the validation error returned by
// SingleScheduleResource.Validate if the designated constraints aren't met.
type SingleScheduleResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SingleScheduleResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SingleScheduleResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SingleScheduleResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SingleScheduleResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SingleScheduleResourceValidationError) ErrorName() string {
	return "SingleScheduleResourceValidationError"
}

// Error satisfies the builtin error interface
func (e SingleScheduleResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSingleScheduleResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SingleScheduleResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SingleScheduleResourceValidationError{}

var _SingleScheduleResource_ResourceId_Pattern = regexp.MustCompile("^singlesche-[0-9a-f]{8}$")

var _SingleScheduleResource_Name_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9./: ]+$")

var _SingleScheduleResource_SingleScheduleId_Pattern = regexp.MustCompile("^singlesche-[0-9a-f]{8}$")

var _SingleScheduleResource_TargetHostId_Pattern = regexp.MustCompile("^$|^host-[0-9a-f]{8}$")

var _SingleScheduleResource_TargetSiteId_Pattern = regexp.MustCompile("^$|^site-[0-9a-f]{8}$")

var _SingleScheduleResource_TargetRegionId_Pattern = regexp.MustCompile("^$|^region-[0-9a-f]{8}$")

// Validate checks the field values on RepeatedScheduleResource with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RepeatedScheduleResource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatedScheduleResource with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatedScheduleResourceMultiError, or nil if none found.
func (m *RepeatedScheduleResource) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatedScheduleResource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetResourceId()) > 21 {
		err := RepeatedScheduleResourceValidationError{
			field:  "ResourceId",
			reason: "value length must be at most 21 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_ResourceId_Pattern.MatchString(m.GetResourceId()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "ResourceId",
			reason: "value does not match regex pattern \"^repeatedsche-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ScheduleStatus

	if utf8.RuneCountInString(m.GetName()) > 20 {
		err := RepeatedScheduleResourceValidationError{
			field:  "Name",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_Name_Pattern.MatchString(m.GetName()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^$|^[a-zA-Z-_0-9./: ]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetDurationSeconds(); val < 1 || val > 86400 {
		err := RepeatedScheduleResourceValidationError{
			field:  "DurationSeconds",
			reason: "value must be inside range [1, 86400]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_CronMinutes_Pattern.MatchString(m.GetCronMinutes()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "CronMinutes",
			reason: "value does not match regex pattern \"^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_CronHours_Pattern.MatchString(m.GetCronHours()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "CronHours",
			reason: "value does not match regex pattern \"^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_CronDayMonth_Pattern.MatchString(m.GetCronDayMonth()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "CronDayMonth",
			reason: "value does not match regex pattern \"^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_CronMonth_Pattern.MatchString(m.GetCronMonth()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "CronMonth",
			reason: "value does not match regex pattern \"^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_CronDayWeek_Pattern.MatchString(m.GetCronDayWeek()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "CronDayWeek",
			reason: "value does not match regex pattern \"^([*]|([0-6])((,([0-6]))*))$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRepeatedScheduleId()) > 21 {
		err := RepeatedScheduleResourceValidationError{
			field:  "RepeatedScheduleId",
			reason: "value length must be at most 21 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_RepeatedScheduleId_Pattern.MatchString(m.GetRepeatedScheduleId()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "RepeatedScheduleId",
			reason: "value does not match regex pattern \"^repeatedsche-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTargetHostId()) > 13 {
		err := RepeatedScheduleResourceValidationError{
			field:  "TargetHostId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_TargetHostId_Pattern.MatchString(m.GetTargetHostId()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "TargetHostId",
			reason: "value does not match regex pattern \"^$|^host-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTargetSiteId()) > 13 {
		err := RepeatedScheduleResourceValidationError{
			field:  "TargetSiteId",
			reason: "value length must be at most 13 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_TargetSiteId_Pattern.MatchString(m.GetTargetSiteId()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "TargetSiteId",
			reason: "value does not match regex pattern \"^$|^site-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTargetRegionId()) > 15 {
		err := RepeatedScheduleResourceValidationError{
			field:  "TargetRegionId",
			reason: "value length must be at most 15 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_RepeatedScheduleResource_TargetRegionId_Pattern.MatchString(m.GetTargetRegionId()) {
		err := RepeatedScheduleResourceValidationError{
			field:  "TargetRegionId",
			reason: "value does not match regex pattern \"^$|^region-[0-9a-f]{8}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch v := m.Relation.(type) {
	case *RepeatedScheduleResource_TargetSite:
		if v == nil {
			err := RepeatedScheduleResourceValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetSite()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedScheduleResourceValidationError{
						field:  "TargetSite",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedScheduleResourceValidationError{
						field:  "TargetSite",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetSite()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedScheduleResourceValidationError{
					field:  "TargetSite",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RepeatedScheduleResource_TargetHost:
		if v == nil {
			err := RepeatedScheduleResourceValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetHost()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedScheduleResourceValidationError{
						field:  "TargetHost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedScheduleResourceValidationError{
						field:  "TargetHost",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetHost()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedScheduleResourceValidationError{
					field:  "TargetHost",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *RepeatedScheduleResource_TargetRegion:
		if v == nil {
			err := RepeatedScheduleResourceValidationError{
				field:  "Relation",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetTargetRegion()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RepeatedScheduleResourceValidationError{
						field:  "TargetRegion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RepeatedScheduleResourceValidationError{
						field:  "TargetRegion",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetRegion()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RepeatedScheduleResourceValidationError{
					field:  "TargetRegion",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return RepeatedScheduleResourceMultiError(errors)
	}

	return nil
}

// RepeatedScheduleResourceMultiError is an error wrapping multiple validation
// errors returned by RepeatedScheduleResource.ValidateAll() if the designated
// constraints aren't met.
type RepeatedScheduleResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatedScheduleResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatedScheduleResourceMultiError) AllErrors() []error { return m }

// RepeatedScheduleResourceValidationError is the validation error returned by
// RepeatedScheduleResource.Validate if the designated constraints aren't met.
type RepeatedScheduleResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatedScheduleResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatedScheduleResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatedScheduleResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatedScheduleResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatedScheduleResourceValidationError) ErrorName() string {
	return "RepeatedScheduleResourceValidationError"
}

// Error satisfies the builtin error interface
func (e RepeatedScheduleResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatedScheduleResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatedScheduleResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatedScheduleResourceValidationError{}

var _RepeatedScheduleResource_ResourceId_Pattern = regexp.MustCompile("^repeatedsche-[0-9a-f]{8}$")

var _RepeatedScheduleResource_Name_Pattern = regexp.MustCompile("^$|^[a-zA-Z-_0-9./: ]+$")

var _RepeatedScheduleResource_CronMinutes_Pattern = regexp.MustCompile("^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$")

var _RepeatedScheduleResource_CronHours_Pattern = regexp.MustCompile("^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$")

var _RepeatedScheduleResource_CronDayMonth_Pattern = regexp.MustCompile("^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$")

var _RepeatedScheduleResource_CronMonth_Pattern = regexp.MustCompile("^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$")

var _RepeatedScheduleResource_CronDayWeek_Pattern = regexp.MustCompile("^([*]|([0-6])((,([0-6]))*))$")

var _RepeatedScheduleResource_RepeatedScheduleId_Pattern = regexp.MustCompile("^repeatedsche-[0-9a-f]{8}$")

var _RepeatedScheduleResource_TargetHostId_Pattern = regexp.MustCompile("^$|^host-[0-9a-f]{8}$")

var _RepeatedScheduleResource_TargetSiteId_Pattern = regexp.MustCompile("^$|^site-[0-9a-f]{8}$")

var _RepeatedScheduleResource_TargetRegionId_Pattern = regexp.MustCompile("^$|^region-[0-9a-f]{8}$")
