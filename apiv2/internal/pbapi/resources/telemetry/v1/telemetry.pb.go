// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: resources/telemetry/v1/telemetry.proto

package telemetryv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Log level used for the telemetry config.
// This field must only be defined if kind equals to TELEMETRY_CONFIG_KIND_LOGS.
type SeverityLevel int32

const (
	SeverityLevel_SEVERITY_LEVEL_UNSPECIFIED SeverityLevel = 0
	SeverityLevel_SEVERITY_LEVEL_CRITICAL    SeverityLevel = 1
	SeverityLevel_SEVERITY_LEVEL_ERROR       SeverityLevel = 2
	SeverityLevel_SEVERITY_LEVEL_WARN        SeverityLevel = 3
	SeverityLevel_SEVERITY_LEVEL_INFO        SeverityLevel = 4
	SeverityLevel_SEVERITY_LEVEL_DEBUG       SeverityLevel = 5
)

// Enum value maps for SeverityLevel.
var (
	SeverityLevel_name = map[int32]string{
		0: "SEVERITY_LEVEL_UNSPECIFIED",
		1: "SEVERITY_LEVEL_CRITICAL",
		2: "SEVERITY_LEVEL_ERROR",
		3: "SEVERITY_LEVEL_WARN",
		4: "SEVERITY_LEVEL_INFO",
		5: "SEVERITY_LEVEL_DEBUG",
	}
	SeverityLevel_value = map[string]int32{
		"SEVERITY_LEVEL_UNSPECIFIED": 0,
		"SEVERITY_LEVEL_CRITICAL":    1,
		"SEVERITY_LEVEL_ERROR":       2,
		"SEVERITY_LEVEL_WARN":        3,
		"SEVERITY_LEVEL_INFO":        4,
		"SEVERITY_LEVEL_DEBUG":       5,
	}
)

func (x SeverityLevel) Enum() *SeverityLevel {
	p := new(SeverityLevel)
	*p = x
	return p
}

func (x SeverityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SeverityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_telemetry_v1_telemetry_proto_enumTypes[0].Descriptor()
}

func (SeverityLevel) Type() protoreflect.EnumType {
	return &file_resources_telemetry_v1_telemetry_proto_enumTypes[0]
}

func (x SeverityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SeverityLevel.Descriptor instead.
func (SeverityLevel) EnumDescriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

// Kind of telemetry collector.
type TelemetryResourceKind int32

const (
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_UNSPECIFIED TelemetryResourceKind = 0
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_METRICS     TelemetryResourceKind = 1
	TelemetryResourceKind_TELEMETRY_RESOURCE_KIND_LOGS        TelemetryResourceKind = 2
)

// Enum value maps for TelemetryResourceKind.
var (
	TelemetryResourceKind_name = map[int32]string{
		0: "TELEMETRY_RESOURCE_KIND_UNSPECIFIED",
		1: "TELEMETRY_RESOURCE_KIND_METRICS",
		2: "TELEMETRY_RESOURCE_KIND_LOGS",
	}
	TelemetryResourceKind_value = map[string]int32{
		"TELEMETRY_RESOURCE_KIND_UNSPECIFIED": 0,
		"TELEMETRY_RESOURCE_KIND_METRICS":     1,
		"TELEMETRY_RESOURCE_KIND_LOGS":        2,
	}
)

func (x TelemetryResourceKind) Enum() *TelemetryResourceKind {
	p := new(TelemetryResourceKind)
	*p = x
	return p
}

func (x TelemetryResourceKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TelemetryResourceKind) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_telemetry_v1_telemetry_proto_enumTypes[1].Descriptor()
}

func (TelemetryResourceKind) Type() protoreflect.EnumType {
	return &file_resources_telemetry_v1_telemetry_proto_enumTypes[1]
}

func (x TelemetryResourceKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TelemetryResourceKind.Descriptor instead.
func (TelemetryResourceKind) EnumDescriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{1}
}

// The collector kind.
type CollectorKind int32

const (
	CollectorKind_COLLECTOR_KIND_UNSPECIFIED CollectorKind = 0
	// telemetry data collected from bare-metal host.
	CollectorKind_COLLECTOR_KIND_HOST CollectorKind = 1
	// // telemetry data collected from Kubernetes cluster.
	CollectorKind_COLLECTOR_KIND_CLUSTER CollectorKind = 2
)

// Enum value maps for CollectorKind.
var (
	CollectorKind_name = map[int32]string{
		0: "COLLECTOR_KIND_UNSPECIFIED",
		1: "COLLECTOR_KIND_HOST",
		2: "COLLECTOR_KIND_CLUSTER",
	}
	CollectorKind_value = map[string]int32{
		"COLLECTOR_KIND_UNSPECIFIED": 0,
		"COLLECTOR_KIND_HOST":        1,
		"COLLECTOR_KIND_CLUSTER":     2,
	}
)

func (x CollectorKind) Enum() *CollectorKind {
	p := new(CollectorKind)
	*p = x
	return p
}

func (x CollectorKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CollectorKind) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_telemetry_v1_telemetry_proto_enumTypes[2].Descriptor()
}

func (CollectorKind) Type() protoreflect.EnumType {
	return &file_resources_telemetry_v1_telemetry_proto_enumTypes[2]
}

func (x CollectorKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CollectorKind.Descriptor instead.
func (CollectorKind) EnumDescriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{2}
}

// TelemetryLogsGroupResource.
type TelemetryLogsGroupResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the telemetry group.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Unique ID of the telemetry group. Alias of resource_id.
	TelemetryLogsGroupId string `protobuf:"bytes,2,opt,name=telemetry_logs_group_id,json=telemetryLogsGroupId,proto3" json:"telemetry_logs_group_id,omitempty"`
	// Human-readable name for the log group.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The collector kind.
	CollectorKind CollectorKind `protobuf:"varint,4,opt,name=collector_kind,json=collectorKind,proto3,enum=resources.telemetry.v1.CollectorKind" json:"collector_kind,omitempty"`
	// A list of log groups to collect.
	Groups []string `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TelemetryLogsGroupResource) Reset() {
	*x = TelemetryLogsGroupResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryLogsGroupResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryLogsGroupResource) ProtoMessage() {}

func (x *TelemetryLogsGroupResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryLogsGroupResource.ProtoReflect.Descriptor instead.
func (*TelemetryLogsGroupResource) Descriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{0}
}

func (x *TelemetryLogsGroupResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TelemetryLogsGroupResource) GetTelemetryLogsGroupId() string {
	if x != nil {
		return x.TelemetryLogsGroupId
	}
	return ""
}

func (x *TelemetryLogsGroupResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryLogsGroupResource) GetCollectorKind() CollectorKind {
	if x != nil {
		return x.CollectorKind
	}
	return CollectorKind_COLLECTOR_KIND_UNSPECIFIED
}

func (x *TelemetryLogsGroupResource) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *TelemetryLogsGroupResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TelemetryLogsGroupResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// TelemetryMetricsGroupResource.
type TelemetryMetricsGroupResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of the telemetry group.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Unique ID of the telemetry group. Alias of resource_id.
	TelemetryMetricsGroupId string `protobuf:"bytes,2,opt,name=telemetry_metrics_group_id,json=telemetryMetricsGroupId,proto3" json:"telemetry_metrics_group_id,omitempty"`
	// Human-readable name for the log group.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The collector kind.
	CollectorKind CollectorKind `protobuf:"varint,4,opt,name=collector_kind,json=collectorKind,proto3,enum=resources.telemetry.v1.CollectorKind" json:"collector_kind,omitempty"`
	// A list of log groups to collect.
	Groups []string `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TelemetryMetricsGroupResource) Reset() {
	*x = TelemetryMetricsGroupResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryMetricsGroupResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryMetricsGroupResource) ProtoMessage() {}

func (x *TelemetryMetricsGroupResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryMetricsGroupResource.ProtoReflect.Descriptor instead.
func (*TelemetryMetricsGroupResource) Descriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{1}
}

func (x *TelemetryMetricsGroupResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TelemetryMetricsGroupResource) GetTelemetryMetricsGroupId() string {
	if x != nil {
		return x.TelemetryMetricsGroupId
	}
	return ""
}

func (x *TelemetryMetricsGroupResource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TelemetryMetricsGroupResource) GetCollectorKind() CollectorKind {
	if x != nil {
		return x.CollectorKind
	}
	return CollectorKind_COLLECTOR_KIND_UNSPECIFIED
}

func (x *TelemetryMetricsGroupResource) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *TelemetryMetricsGroupResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TelemetryMetricsGroupResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// A telemetry log profile for a hierarchy object.
type TelemetryLogsProfileResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the telemetry profile.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The ID of the telemetry profile.
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// The ID of the instance that the telemetry profile is assigned to.
	// Can only be one of targetInstance, targetSite, or targetRegion.
	TargetInstance string `protobuf:"bytes,3,opt,name=target_instance,json=targetInstance,proto3" json:"target_instance,omitempty"`
	// The ID of the site where the telemetry profile is assigned to.
	// Can only be one of targetInstance, targetSite, or targetRegion.
	TargetSite string `protobuf:"bytes,4,opt,name=target_site,json=targetSite,proto3" json:"target_site,omitempty"`
	// The ID of the region where the telemetry profile is assigned to.
	// Can only be one of targetInstance, targetSite, or targetRegion.
	TargetRegion string `protobuf:"bytes,5,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	// The log level og the telemetry profile.
	LogLevel SeverityLevel `protobuf:"varint,6,opt,name=log_level,json=logLevel,proto3,enum=resources.telemetry.v1.SeverityLevel" json:"log_level,omitempty"`
	// The unique identifier of the telemetry log group.
	LogsGroupId string `protobuf:"bytes,7,opt,name=logs_group_id,json=logsGroupId,proto3" json:"logs_group_id,omitempty"`
	// The log group associated with the telemetry profile.
	LogsGroup *TelemetryLogsGroupResource `protobuf:"bytes,8,opt,name=logs_group,json=logsGroup,proto3" json:"logs_group,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TelemetryLogsProfileResource) Reset() {
	*x = TelemetryLogsProfileResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryLogsProfileResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryLogsProfileResource) ProtoMessage() {}

func (x *TelemetryLogsProfileResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryLogsProfileResource.ProtoReflect.Descriptor instead.
func (*TelemetryLogsProfileResource) Descriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{2}
}

func (x *TelemetryLogsProfileResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetTargetInstance() string {
	if x != nil {
		return x.TargetInstance
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetTargetSite() string {
	if x != nil {
		return x.TargetSite
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetTargetRegion() string {
	if x != nil {
		return x.TargetRegion
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetLogLevel() SeverityLevel {
	if x != nil {
		return x.LogLevel
	}
	return SeverityLevel_SEVERITY_LEVEL_UNSPECIFIED
}

func (x *TelemetryLogsProfileResource) GetLogsGroupId() string {
	if x != nil {
		return x.LogsGroupId
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetLogsGroup() *TelemetryLogsGroupResource {
	if x != nil {
		return x.LogsGroup
	}
	return nil
}

func (x *TelemetryLogsProfileResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TelemetryLogsProfileResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// A telemetry metric profile for a hierarchy object.
type TelemetryMetricsProfileResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the telemetry profile.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The ID of the telemetry profile.
	ProfileId string `protobuf:"bytes,2,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	// The ID of the instance that the telemetry profile is assigned to.
	// Can only be one of targetInstance, targetSite, or targetRegion.
	TargetInstance string `protobuf:"bytes,3,opt,name=target_instance,json=targetInstance,proto3" json:"target_instance,omitempty"`
	// The ID of the site where the telemetry profile is assigned to.
	// Can only be one of targetInstance, targetSite, or targetRegion.
	TargetSite string `protobuf:"bytes,4,opt,name=target_site,json=targetSite,proto3" json:"target_site,omitempty"`
	// The ID of the region where the telemetry profile is assigned to.
	// Can only be one of targetInstance, targetSite, or targetRegion.
	TargetRegion string `protobuf:"bytes,5,opt,name=target_region,json=targetRegion,proto3" json:"target_region,omitempty"`
	// Metric interval (in seconds) for the telemetry profile.
	// This field must only be defined if the type equals to TELEMETRY_CONFIG_KIND_METRICS.
	MetricsInterval uint32 `protobuf:"varint,6,opt,name=metrics_interval,json=metricsInterval,proto3" json:"metrics_interval,omitempty"`
	// The unique identifier of the telemetry metric group.
	MetricsGroupId string `protobuf:"bytes,7,opt,name=metrics_group_id,json=metricsGroupId,proto3" json:"metrics_group_id,omitempty"`
	// The metric group associated with the telemetry profile.
	MetricsGroup *TelemetryMetricsGroupResource `protobuf:"bytes,8,opt,name=metrics_group,json=metricsGroup,proto3" json:"metrics_group,omitempty"`
	// Timestamp for the creation of the resource.
	CreatedAt string `protobuf:"bytes,50100,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Timestamp for the last update of the resource.
	UpdatedAt string `protobuf:"bytes,50101,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TelemetryMetricsProfileResource) Reset() {
	*x = TelemetryMetricsProfileResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryMetricsProfileResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryMetricsProfileResource) ProtoMessage() {}

func (x *TelemetryMetricsProfileResource) ProtoReflect() protoreflect.Message {
	mi := &file_resources_telemetry_v1_telemetry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryMetricsProfileResource.ProtoReflect.Descriptor instead.
func (*TelemetryMetricsProfileResource) Descriptor() ([]byte, []int) {
	return file_resources_telemetry_v1_telemetry_proto_rawDescGZIP(), []int{3}
}

func (x *TelemetryMetricsProfileResource) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetProfileId() string {
	if x != nil {
		return x.ProfileId
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetTargetInstance() string {
	if x != nil {
		return x.TargetInstance
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetTargetSite() string {
	if x != nil {
		return x.TargetSite
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetTargetRegion() string {
	if x != nil {
		return x.TargetRegion
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetMetricsInterval() uint32 {
	if x != nil {
		return x.MetricsInterval
	}
	return 0
}

func (x *TelemetryMetricsProfileResource) GetMetricsGroupId() string {
	if x != nil {
		return x.MetricsGroupId
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetMetricsGroup() *TelemetryMetricsGroupResource {
	if x != nil {
		return x.MetricsGroup
	}
	return nil
}

func (x *TelemetryMetricsProfileResource) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *TelemetryMetricsProfileResource) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

var File_resources_telemetry_v1_telemetry_proto protoreflect.FileDescriptor

var file_resources_telemetry_v1_telemetry_proto_rawDesc = []byte{
	0x0a, 0x26, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x03, 0x0a, 0x1a, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xe0, 0x41, 0x03, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x5b, 0x30, 0x2d, 0x39,
	0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28,
	0x17, 0x32, 0x1c, 0x5e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52,
	0x14, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x32, 0x32,
	0x17, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d,
	0x39, 0x2e, 0x2f, 0x3a, 0x20, 0x5d, 0x2b, 0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x4b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x2d, 0x92, 0x01, 0x2a, 0x22, 0x28, 0x72, 0x26,
	0x32, 0x24, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30,
	0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d, 0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28,
	0x29, 0x22, 0x20, 0x5d, 0x2b, 0x24, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x24,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf6, 0x03, 0x0a, 0x1d, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x5b,
	0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x65, 0x0a, 0x1a, 0x74, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0, 0x41, 0x03,
	0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x17, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xe0, 0x41,
	0x02, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x18, 0x32, 0x32, 0x17, 0x5e, 0x24, 0x7c, 0x5e, 0x5b, 0x61,
	0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x20, 0x5d, 0x2b,
	0x24, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x33, 0xe0, 0x41, 0x02, 0xfa,
	0x42, 0x2d, 0x92, 0x01, 0x2a, 0x22, 0x28, 0x72, 0x26, 0x32, 0x24, 0x5e, 0x24, 0x7c, 0x5e, 0x5b,
	0x61, 0x2d, 0x7a, 0x41, 0x2d, 0x5a, 0x2d, 0x5f, 0x30, 0x2d, 0x39, 0x2e, 0x2f, 0x3a, 0x3b, 0x3d,
	0x40, 0x3f, 0x21, 0x23, 0x2c, 0x3c, 0x3e, 0x2a, 0x28, 0x29, 0x22, 0x20, 0x5d, 0x2b, 0x24, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5, 0x87, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xc2, 0x05, 0x0a, 0x1c, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x03, 0xfa, 0x42,
	0x24, 0x72, 0x22, 0x28, 0x19, 0x32, 0x1e, 0x5e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x28,
	0x19, 0x32, 0x1e, 0x5e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d,
	0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28, 0x0d, 0x32, 0x15,
	0x5e, 0x24, 0x7c, 0x5e, 0x69, 0x6e, 0x73, 0x74, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66,
	0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72,
	0x19, 0x28, 0x0d, 0x32, 0x15, 0x5e, 0x24, 0x7c, 0x5e, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa,
	0x42, 0x1d, 0x72, 0x1b, 0x28, 0x0f, 0x32, 0x17, 0x5e, 0x24, 0x7c, 0x5e, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x03, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0xb5, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbb, 0x05, 0x0a, 0x1f, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x2a, 0xe0, 0x41, 0x03, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x28, 0x19, 0x32, 0x1e, 0x5e,
	0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xe0,
	0x41, 0x03, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x28, 0x19, 0x32, 0x1e, 0x5e, 0x74, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xfa,
	0x42, 0x1b, 0x72, 0x19, 0x28, 0x0d, 0x32, 0x15, 0x5e, 0x24, 0x7c, 0x5e, 0x69, 0x6e, 0x73, 0x74,
	0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1e, 0xfa, 0x42, 0x1b, 0x72, 0x19, 0x28, 0x0d, 0x32, 0x15, 0x5e, 0x24, 0x7c,
	0x5e, 0x73, 0x69, 0x74, 0x65, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38,
	0x7d, 0x24, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x69, 0x74, 0x65, 0x12, 0x45,
	0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xfa, 0x42, 0x1d, 0x72, 0x1b, 0x28, 0x0f, 0x32, 0x17,
	0x5e, 0x24, 0x7c, 0x5e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61,
	0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x10, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x28, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x22, 0x72, 0x20, 0x28, 0x17, 0x32, 0x1c, 0x5e, 0x74, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x5b, 0x30, 0x2d,
	0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x24, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0d, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb4, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x24, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0xb5,
	0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x2a, 0xb2, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x05, 0x2a, 0x87, 0x01, 0x0a, 0x15,
	0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x23, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54,
	0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23,
	0x0a, 0x1f, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43,
	0x53, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x54, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c,
	0x4f, 0x47, 0x53, 0x10, 0x02, 0x2a, 0x64, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43,
	0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x02, 0x42, 0x65, 0x5a, 0x63, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x2d, 0x65,
	0x64, 0x67, 0x65, 0x2d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x69, 0x6e, 0x66,
	0x72, 0x61, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x76, 0x32,
	0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resources_telemetry_v1_telemetry_proto_rawDescOnce sync.Once
	file_resources_telemetry_v1_telemetry_proto_rawDescData = file_resources_telemetry_v1_telemetry_proto_rawDesc
)

func file_resources_telemetry_v1_telemetry_proto_rawDescGZIP() []byte {
	file_resources_telemetry_v1_telemetry_proto_rawDescOnce.Do(func() {
		file_resources_telemetry_v1_telemetry_proto_rawDescData = protoimpl.X.CompressGZIP(file_resources_telemetry_v1_telemetry_proto_rawDescData)
	})
	return file_resources_telemetry_v1_telemetry_proto_rawDescData
}

var file_resources_telemetry_v1_telemetry_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_resources_telemetry_v1_telemetry_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_resources_telemetry_v1_telemetry_proto_goTypes = []interface{}{
	(SeverityLevel)(0),                      // 0: resources.telemetry.v1.SeverityLevel
	(TelemetryResourceKind)(0),              // 1: resources.telemetry.v1.TelemetryResourceKind
	(CollectorKind)(0),                      // 2: resources.telemetry.v1.CollectorKind
	(*TelemetryLogsGroupResource)(nil),      // 3: resources.telemetry.v1.TelemetryLogsGroupResource
	(*TelemetryMetricsGroupResource)(nil),   // 4: resources.telemetry.v1.TelemetryMetricsGroupResource
	(*TelemetryLogsProfileResource)(nil),    // 5: resources.telemetry.v1.TelemetryLogsProfileResource
	(*TelemetryMetricsProfileResource)(nil), // 6: resources.telemetry.v1.TelemetryMetricsProfileResource
}
var file_resources_telemetry_v1_telemetry_proto_depIdxs = []int32{
	2, // 0: resources.telemetry.v1.TelemetryLogsGroupResource.collector_kind:type_name -> resources.telemetry.v1.CollectorKind
	2, // 1: resources.telemetry.v1.TelemetryMetricsGroupResource.collector_kind:type_name -> resources.telemetry.v1.CollectorKind
	0, // 2: resources.telemetry.v1.TelemetryLogsProfileResource.log_level:type_name -> resources.telemetry.v1.SeverityLevel
	3, // 3: resources.telemetry.v1.TelemetryLogsProfileResource.logs_group:type_name -> resources.telemetry.v1.TelemetryLogsGroupResource
	4, // 4: resources.telemetry.v1.TelemetryMetricsProfileResource.metrics_group:type_name -> resources.telemetry.v1.TelemetryMetricsGroupResource
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_resources_telemetry_v1_telemetry_proto_init() }
func file_resources_telemetry_v1_telemetry_proto_init() {
	if File_resources_telemetry_v1_telemetry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resources_telemetry_v1_telemetry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryLogsGroupResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_telemetry_v1_telemetry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryMetricsGroupResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_telemetry_v1_telemetry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryLogsProfileResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resources_telemetry_v1_telemetry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryMetricsProfileResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resources_telemetry_v1_telemetry_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_telemetry_v1_telemetry_proto_goTypes,
		DependencyIndexes: file_resources_telemetry_v1_telemetry_proto_depIdxs,
		EnumInfos:         file_resources_telemetry_v1_telemetry_proto_enumTypes,
		MessageInfos:      file_resources_telemetry_v1_telemetry_proto_msgTypes,
	}.Build()
	File_resources_telemetry_v1_telemetry_proto = out.File
	file_resources_telemetry_v1_telemetry_proto_rawDesc = nil
	file_resources_telemetry_v1_telemetry_proto_goTypes = nil
	file_resources_telemetry_v1_telemetry_proto_depIdxs = nil
}
