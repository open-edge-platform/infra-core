// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/compute/summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// RegisterUpdateHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/register)
	HostServiceRegisterUpdateHost(ctx echo.Context, resourceId string) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServiceRegisterUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterUpdateHost(ctx, resourceId)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/compute/summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/register", wrapper.HostServiceRegisterUpdateHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
