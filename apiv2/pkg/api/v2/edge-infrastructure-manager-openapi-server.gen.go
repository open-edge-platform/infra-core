// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context, params HostServiceRegisterHostParams) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string, params HostServicePatchHostParams) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// RegisterUpdateHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServiceRegisterUpdateHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string, params InstanceServicePatchInstanceParams) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string, params OperatingSystemServicePatchOperatingSystemParams) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string, params RegionServicePatchRegionParams) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string, params ScheduleServicePatchRepeatedScheduleParams) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string, params ScheduleServicePatchSingleScheduleParams) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string, params SiteServicePatchSiteParams) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string, params TelemetryLogsProfileServicePatchTelemetryLogsProfileParams) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string, params TelemetryMetricsProfileServicePatchTelemetryMetricsProfileParams) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string, params WorkloadServicePatchWorkloadParams) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceRegisterHostParams
	// ------------- Optional query parameter "resourceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "resourceId", ctx.QueryParams(), &params.ResourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx, params)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServicePatchHostParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId, params)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServiceRegisterUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterUpdateHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServicePatchInstanceParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId, params)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServicePatchOperatingSystemParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId, params)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServicePatchRegionParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId, params)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServicePatchRepeatedScheduleParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId, params)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServicePatchSingleScheduleParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId, params)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServicePatchSiteParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId, params)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServicePatchTelemetryLogsProfileParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId, params)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServicePatchTelemetryMetricsProfileParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId, params)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServicePatchWorkloadParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId, params)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServiceRegisterUpdateHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"0s2X/xsAAP//1g4d7gv6AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
