// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//8oT2AzEqoCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
