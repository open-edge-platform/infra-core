// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ePj88P8HAAD//4vpMMB4xgIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
