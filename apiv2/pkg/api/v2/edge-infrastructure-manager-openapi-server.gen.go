// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9C3fbNtI//FXwarendleWL2nSJnv27KPYSqKtbfmV7PbZxlkVJiEJTyhQS4B23Kzf",
	"z/4eXEiCJMCLLrbVZc/z/28s4jID/ADMDAYzX1uOP1/4BBFGW2++tqgzQ3Mo/tmdsxGDDPF/u4g6AV4w",
	"7JPWm9blDAHKPwF/AtgMge7ZJdjpOgzfInAGCZyiOSIMXCJnRnzPn97vgribTqvdQiSct958bHXPLsej",
	"y+5lb3x1PrroHfff9Xsnrbb2+8Vw8HN/1B+cZ36/Ord9OemPjgfn573jy95J61O7xTDzUOtNwk67xe4X",
	"/BfKAkymrYd26y0M0Bwx6B37hAW+56HgJ0xcM+e8Nmf87dmxzsvb7rB31rvsno6PB+eXw8HpaW84/ql/",
	"fpLhzV7ufHDeKyzQvzjrFxb4+WI4KCxwcXKlj4mNb8MQnSAPMfTBp2yI6MInVOACui7mQwO9i8BfoIBh",
	"RFtvJtCjqJ0ZuiEStcAcUQqnCEz8ACSN8pGMqDJ0FRPk3/wfclhCUJ9QBomDliaK2qiKWs5TluvTSt2p",
	"70Cv6zh+SNj6KdRbz1Np7NtK6WCBAsgwmY7uKUPz9ROb6SBPr40CK8kXgX+LXRSsn9ao5TyRuT6t1A3R",
	"FPtk/bTJdvOUZforoGuBIEPuyJkhN/TQJihM92Ci1UKDleoRJlMPbY7mdPt5ii39F9DLNkIlM9LGKlB0",
	"iTy+1Qf3p/6Uvg/8cLF++vJ95KktoKMa7ReBP8GbwICplxL6s7SUc3CGWICdjU+A3k0BD0ZqKjOx+ZlI",
	"d1TOSOX5+MUPPns+dM/Q/GYTJ0i6/Tzhlv5L6d0cpXYai6h7jxiX00bhfA6D+yWpU7UjZWLmU0aFfhFS",
	"TtVCq/+1hYLADyyCuc+gB0jIh5Q3JhtaBIgiwgULAAno8eq81QBBd0C8+9YbFoQo4V22H7OKCUNTFHBe",
	"g5AQLgzX6BsTMJS1pL5U1HHUvKlr0XqNjov6kW2ZegkJ9Dzf4SdzHSbvMJv5IQMQUFzMot5BnoCHpKAF",
	"VgYASi1hiilDQU3Ynam1wHwQqBYABJEykkYdDJk/IDc+DAxD886DU94KxVMCPf4vXnwOGXag590DX1aM",
	"wa0vNV5yrAok/N34vocg4QwiAm889PMi8Kt0LEuD24vhAPjE2KMsMr7lLZo6JHBuUfl5S4B/5s3N4ZdT",
	"RKZs1npzdNBuLSBjKOAl//Xn//zrI9z7vbv36974YO91Z/8N+PSXP2sUiB4MKiZFAYbeuYBXAQWymIKh",
	"mKqk752P3b1f4d7vB3uvP3192T46eNj9u961rDuWdU00hCF2C/q+uuqfZLh/8SrH/cHea7g36e69+/T1",
	"x4c9/c/v6/x5ePSg0y5Iy5GsrZrUWrCuFeqHgVN3i+6KdQECVduwQOZs9DnMj5zjz/nuNwn8OXDRLXYQ",
	"wIQFPl0gRxRJjeXrV/bNA87ZmH4OTZMGpWknpPX774ARYsAn3j24uRfr5eQMDM8yc3x4cPR9CWWy/yLi",
	"+sTFDmTy9PpzgCatN60/7Sfmt31le9tPFeds6K1c4jmiDM4XeV6vLo8Biz6DuxkiICEN3EEKPEgZcGaQ",
	"TJErOb+55wxD4oIB51uMRNEWnjQ4jrsyHiY32KdD5CFI0YnRiPi2PxgBVQKclByOvLVxIAuPXYsVjxf6",
	"GRHXJB+I3uTH0n5uZRvWHgIq2rR0Ib5W6EO2Yupk7vQNs/v27Bj0LwB03QBR2gY0dGYAUnDdOnx91Dno",
	"HHQOr1uF/c6dMV5YeozMnUW4tFkLH9otZxF2A2eGGXJYGBhmW/8aCXrHF1dg7rvIawPUmXbAlx9fjV99",
	"X8SCswjHUO/HwIyzCI/hAt5gD0ebU0bcFEWBhynjlEDPE5Q4WiWws/ApxTfePfjHaHC+W0aTXtdGkx+Y",
	"iDmPhSlBAy9U2ploybTmnEV4xscz30081NHYR2JOUUeigoWdke98RqyQocXsnnIJSHBGZfmyLlUxG3eX",
	"M17Z0OulkEyTvpksCGi4WPgBQ260ux9fXJXRoOpaafAX4kojTwSHCphg5LmAMl+ALII5U5XaIEATFHBR",
	"7cNJd//D8Ay4vkOFPsbLiibkeislM6LDNEFhECDC9BucooUdl0uqXvh3KKhUWSuZVK9UU4j4UUUXURwg",
	"dxmSVdVlSVbV65PMJcL3C5PU8RY6n/fETCPiCA0DMgadGXKlGPn+4iqWpcSawAzNaZXOp4swFuEe7ADh",
	"vYynC10igUEA7yOyz7GzBNnn/eMlySbYqUw24bSZybZJeQx9YSH0YvMGm0EGZJEbRMXKCkLCBRZlV+B7",
	"hNgCIyFoeEZj2aey4CfItUt+CcUriX5JM/VkP406u/Cn812BzRKhT5LqB3CKloAXlTWXhJiqXRlmNKLT",
	"DLUrerMEC1ejt0uSH9KbyqSHnDYz2Wbt/YP6UjbLNs0ckxkKMEPuGWLQhQyaVeS5+gri8tGxyxvnZ58y",
	"xskPMJbBPqP7N7fQCxFYQBxQXpK4KJDFhMUI+0RoKZ4/FTIFZUEoRMDqoxzR3mdoXjTEMfHjiB/DWGN1",
	"B1zWqXZXHM/tHM394P7tPTMtkv83hIRhJqyhsiDYGXbPdgGW5hwqbkf5Xze8gaIZldXHopxpVufWydwZ",
	"XFz2B+fd012QmldIqe9gyOfvDrPZElO79GzN4Ze+rHd4cKDzaJ2i+oasl2syZBHf5jXDv1hHMUvN4VG7",
	"NcckPotKiPvr3/7n7//Pn9rX4cHBC0f8/+i7nd3rliLahhJBrIEJZZTEZLrCqZs0staDN2m24PjNMrDS",
	"IZxtrN5RnKN3tQM511zJsbzg8u6xP59D4l74HnbuK0nI6RpROwPCea/EdgRswa2ojFwQ2dyk5amCyUlU",
	"HPtEMGnnb+2yoaTYQmxlqErq7SjVaF8JoFo79bCpE1hoJKw8VdUwGfhu6LBz4yYtXYDAhSwDzktEF9XW",
	"2LYfL5TXTinqE+8eTRCbYsoCMc7PbyPUqSsAWZ6JlbCWb64e5AxUr7YhGhosgV8kpPcNtz3R9IP+SRtM",
	"EUGBOKt9Ao4DpAzV+gy9SB3MfMOLrnE+ff3x4c+FdMuextitfyE2OhMWZ3WrkbsVs/VZegVGcbkdRPkc",
	"xauE1+lbLs74Nz7vAUoOBEyBugguHsw//+dfvHp2PGNeMDOOXbt1xyX4hH1xS6bwUCp6XiYlrTeCGQk5",
	"vhwE2EWE4QlGwV/VDxSEBP87REJ/wfN5yOCNh57dLWKA/h3iALmtNx+lYPspe7Oopttys2jxFRc/U923",
	"Q3ea/jAYmT3AtQ8nvdPeZfbHwfnbQXd4kv356vxyeDXKlR723vdHl71h2iM8odqwCrLGtnr3pQL3SN4v",
	"3ELsiVv52PTnwMA1uLY4hdcWvMkJgkLnlcOJqWhNbgBt4HBxDVC0gEG0sGJNK7cZ5E8Ii6XZeLMR61gp",
	"Eo2qVjiHZI+3LoYgoRdoZYu2K71JA92yMbMUwTvjSAaQcv00vgcYjIo75C3aZQkH2zY6jbmL4762ExTK",
	"Lg627P5KqintS1zTVBCPTH0suyneWq5ZM6Tdll642u5aM24N+kq07D+6iXldi5ULDMEEKlteerXezJ1+",
	"9Dk/EL/MEJuhQK5STAEEN3MnaQ/4ASA+K72ujTsweeoUYZ/zpCZBLIGdwQgoMdhtAw9/RgCx2UEbILI4",
	"pPx/mdPZXWFd4IW6mbbtXTEv31LtHlvYiSobhfoXXVmtiqlUpyi/c3mYfK505XOO2J0ffI7n+jSuKKxS",
	"DqeohGNw1j2OGC402EFnzIsZjXXM4F1zBr/geTgHLICEzjGl2Cdc2mDReRuTUNgtC80qGt/qoj0s33l6",
	"jwOSVHWTiSkgctyqkSB3wbgvk1QaYP+2J3zXDNtvP8MumEEKRsP+4GflEucWisS87bEqaFxqosTPE3rO",
	"xRajYS++ev75HQXqFtS7l2uOT4tUIFJEtgGegNFwj1OJtbvqclJvJ5QL8MZZi0i9tPuMzhVs0kSnB1BR",
	"Q1cj0u5sutzJkzkW9D3fcixkr4XWdTREl1W6gGQW6RzMbMZ++ZBSNqR262NVA+xQ/DvarWToj3qxm/rL",
	"jooMESUnB3VhG1D3Rp0ayx8ac7O3ioGiUiHH6qwi9d1KnSg9raYq/Vhy1ShN7PKyVbt1d2fzcjWPSDVR",
	"VrRaJsll16Nl2erXoUsvWfOVbMZx1Xh880onahHITRJSiqekigKRPsF1l0ijq0hItX1YDbvjE4Kc6IKo",
	"UEoMLY5KHqQmd1j+M3DRBCtWrkZv9/rvCjcX0VLNPYWfJYPRXrRv6BvKKjKme2HTiT6gL9BFDp4nDxTi",
	"K0kulvRPIpGIT60iRylGRRRhd1ygPmHX5m+6FD3lSxq7Bd6ptp1upO9nCcoec2fLbAL66jZsALGYf+yT",
	"CZ6eITbzxX4VmY36F+PuycmwNxqNjwfn7/rvx2e9yw+D7FN7a7HRZfeyf1xU4uSf592z/rFuLjJTZRii",
	"vJZStoPltyRkWr3H/ZNhAiPpFKFQlGhUZVsTMq9mJzPUldSw1EgsZ1W/uQd9cosI84P7xMSeMQq/TBlH",
	"pWK3Lht7fKdTiWN1BRRXPEEMYsOau6Io2JsEGBHXu4+ufJgfSVLAFfUogDd+yOQlZDQ+VJkkrWtT3m/I",
	"FjayRPMALlqkya2YYXnylXY1sq9L9b07GvXfn5/1zi/HveFwMCwoZGlBLt+rYfeyPzgvaCQqZ2lm2Dvt",
	"dUeWj7JV05Ywsl69RQ5A9ngiUQnwGRNXN473z0eX3fPjnimKSPqbCPaRIkzvtYCqJWWsbHXtshMSIH2j",
	"mPRwGYzk357XBuqJI1/mCAvzGLyWforAD8DsfoGCW0zlCZjRo6RCPShFdD6KRGwnquOaHDGYdRJeiYA6",
	"jsY5AtAXTHmzx7c2RfL45x6VV88wQCkThDguIvND1HIbIOL4XDiDFEDpeR4Z41KP+w4ODpbwPPrL/7ez",
	"e926vgbX1+Trw8dPxU5IEXdj5xZZfWmruFHq483r9E/sLmDf0rx+Y3TOwloomHoXv7pzZf+k0j1l1JmJ",
	"8hN+9otr0za41AgzcdIBXQ9DcVUUH8snxRzw5qoeqxqZRofRBL5LekwoAMc8Ri/CV/KXiBor8JVIk247",
	"3y9NDEzxLaLqaEeu5ujB0nNF/Qm7E4s0BrGRi5JF9/f/ybv7lTj7ZfgvECLSw7CSu0i6qXquIhmCV3MT",
	"yXJf7CLyucKTuNQ5+9BueVrQJdvWk99z/InwhvAAlDXBHfY8cIPqbEZHafdQ0Z5qzrYpiTJjGFNbZXfS",
	"2y0bnEwEqnhftjvmamskc3G8QW9df5Uz3ae1pnkwSuR8sWXMQ8r4TCsZSb8lUNMsNnr5qgxTEFLkcj3C",
	"DfCt9Kdx4f0B8CWFPqHttJsJ8MXWiaSOMcEBZWKJZfebNHp8asOM4LcKUHx6tXAhQ93IbG46zXQdaDAC",
	"sgbVTO3xbVIcjQ30JwDNF+y+zTkKkBB2iA/CbN3cjlpFjjFtqZEUU7yz+nQsSRjHFJjBJpmUTrUSO/oq",
	"fpGZB9nmQpS2z0nU9SJqtcoMxVdTq7l4681oR14yYauc13rjRU60OVZW86XNNVfTpTZP9WoHl6HBJ/Nv",
	"rCMklthelN/1BXQ+m1+M8a1vob5qu0JGkwGQRS7c6YcohYrNy4NH0WwUYeOIDbPh1gkDzO7fSfeuUshm",
	"iq9w38SCkDLkdhnjP67o46waG8OktbVvCIY+CvYFG3sr7Q62RuvtEXZGVtsq7O2W7Bihdi6VCkQj/RRL",
	"aq8AHtnA2vGiDkY7RHTCbcqernZHonmA5v4tcgEmoHf2Dty+6Bx1DtpcPgPR6AxDqb8g6HaAIThAZAPW",
	"mE0PQ5518BYx2AY0FGZYLghKjJiEnYOKo1KgBOqDs9Ka0Ruqt05SpK62NNJcF6+Gu1SAPsvRFBUCc1mq",
	"WF8DN7nHw/x7FGYPnOUbEUU06beqn1w6vGCRk1zEwlixkPOUe8gblQtvBVJ2y2J7t3QNN1q8TS7hmY/D",
	"q/Pz/vn7/IfEXzzXXOQcbrCUWx3B++QWepgjZ6Xg14YAjOmW9Rhtlj6N4x2V3EQk7KR1YAqHXdC5gdRT",
	"3eOyJKC80XkwQsl57/KXwfCncf/8sjd81z3ujU/75z8ZMVNc9KKsxMngl3MdLAkLBqCcYiqiFtJ1zgAf",
	"jLhhMBc3rfnrkRmk5+iLwS2iTyZ+MAd4oinLcz9AQAROJTLSTmSjhnRMeCsmB0gR6tHgWiCd6iFxwQR7",
	"TDzwjF5+x5EoK8dA0A0ruuXc5L8rPAt7ERf5q3JhR/MnQHQePZ5HhOEACQq5pjCFgeshKk7gBZxiAqPX",
	"CHzUIJNHwoujViZ65lgfvXwUS/0lTUx+itx2PGMpcGXxY1xElEWLbSNAixt/QrBFR2ZNwMXVqvuTG6Iz",
	"ZI3FWwy+FAvVAJjHlgWEunF3I0BMdfCEYNRN+jUBqRvLq4PSZjY3mu23GJ3pga2MUDPwClAqzOKbQqho",
	"3IpO4rt1N7FA5HGogRYTl53ol3PfTWFHEpSHjB+yRcjsmNGeu3bnRvwEiIUBUYwU4kT2VQSUUghr5DwX",
	"NMuRNWA1Db+qOE3PYN1gvZyYaCji8EksQIbAvfbLONGIuIYDuWu4sju1BQwQYbaHkpqGG+i2aCX8y8rJ",
	"p+ixazQkgrLONQF9yaEDqSgE1eJpA8yA44eeC26QvCwCfhB/7rvGuhQzVF5T412SaTNtF9jfM0Mgxjmw",
	"ekfivHekToXWkckAKn5YZgeJTh55s50Be6rTeK7bKTjoS0HHcuUVkKJA8y4c9kaDq6HZLS79bdh73x+c",
	"534e9S97OnmpjiyKXdriuYnTJN3DEwo8qStKXPf8iq9xQVS/8lGWtypbbjjxNgvlueGtLPlYMGhZUJoV",
	"epNwHYZka7Hq08jevlgWq8OQNEC1AVWHng2ladeajcjp2T6seLX4+dRGVQ0Y2T2LogGNi4xl6Mdx/JjN",
	"FAJ04ytuS8BrncrqILYh04LkKHjYRiAcN/6Ee20URa3mcoirVV4UpjBsKU8Y13RRtTXQTLFQDYt5bFlA",
	"KLNAbgSCquknBKAyjWzWnhLn0cxBL+p+a4GnMVANdlk0WUGXTue5IfhlOnlSIGZoqQtJWX1Mo/o10JnL",
	"nGrAabb5bYZsdqRrgNeGSguMNwrfXOMNfFeBL03l463JgKy8BPm5LMA54rNNb+/Ky45we5W1WH0Npnvd",
	"yEpMd/GE67AB8eODuCpgLTi0wpZtCqzsiSHK6gOT1UIjs2CQbTfwWD24sXKQ5TOnbwRyhm6eEIAsT009",
	"OMYNjD1/SsdT0URleBqz1efAauxje8FrGvPKUC5CaRVgqxTum4d21NFzAXdEz0rwXqhGlgN4kj6/DOJR",
	"P38QkF9o7CwB8xxmy4B+hliAncfYxFM9PQeopwhaFutz2cjSu7lORDHa0z39AeCeHv/6eDdDtyLgH2Vz",
	"z/T1jEC/6hYfgXH5XT5NSDXo/4H2+uw8LA3/qjt++iHWRnCf6eIp4f5M0VDhNV/R+ss+kess/wqvzqs7",
	"HcBZ+ivj1oa/ErhuFKgNRIsguiQ466PStPknRFQE5BJQLAah6e1DveipZSGYsjHU0pGXIueaqhHV3OXD",
	"MNme5JaFZSrxLo49iVP5FNZLYllMVTr7CRkS5I9GH8BFeONhB/yERIbb3nmath8zETl2KJ3tIffo5cvD",
	"1/9BjkvhHp3Boz2CKVu8PDrcBTsfu3u/wr3fD/Ze/2X/b5/+sgv+vtP5bvfvqTRhdDb+jO7XGag9pCgw",
	"u85fqS9x0HyRD9edY5LJ+HWU4vQj3Pv900fJyN6nrwftF4fpvF1Rh2W5u7SCah4ynti59WVYh6nsu3Vf",
	"HyRpoBmaG1IDp1MC54+BzybspPIQf0bZKBAvDl+ZQrl0Pv1lX/unGt94nMedT99FvxmKqZ+i/7XW1KbJ",
	"AjPBbglTokyGrVcvTFxptGk0dcZ7Zppk52W4kZTLshpiUkgwIMWeHqfetr10BJtKLxzilD3aYWen3MBm",
	"xje9Hm+FWdJEpOgkwUYm7l0mS1o6MOsqESIr5ldTcensIZreBQgJ4YyhL6wNBqM9Fy0Q4WdPB3QTL0DZ",
	"gHhARNvAJwgsUAA8TBDYIehO/CPOXbfbAWchZYD4DDg+YRATcIsCkd4IEylm8RG5JqC7WHgYyeAfgPng",
	"TMW9G4wQ3WzEp9RDYc8rjPD0GQUEeSqhsnkf0EIDfkuBrABUDXDKh2cgitP6XK+WODzZ2jhJY0cxYcp7",
	"bj0Q7QDfYGDHSlJS7r2VjNlifHNVOTLfknITg8EUrRbkeml5pkb0J0vsJ5uvvBCyk9dB8chHoY5UZpZr",
	"Akaz6OkdJuDbk97bH4+OgGwXvBOL/luhUZ6gGwwJoOxeQL7Sioh1o/qrPxsC0iBEpgMMWdzzS5KsZo6Y",
	"gkNoGJK6KSXE6LjLRvcqPMA+PNKJtWSGUETcKGF9EdNT3596qLMIfObfhJNOEqVKC0ixTDwJ86b4oXQX",
	"/H4jg/WUe2UQkvUl7QjYyrNKLdHqRjM/YLZYdXf8zxlcLBBBLnBDEclNpjtSDx9rxaezB6bT84vQsuC5",
	"S1BVHCEuFRqugL6VosLRfDy4pSdz5aQn+uZq2ntlAv91xAATz815Q2Ao8taL3FD/DlE6BpipQxNdFlmg",
	"ptJO9KPZkCUtcGaYIScKT1omvh5fXAG9Tu4kWI9ImiLLmKIsdW5l8F9Ig4WErw/8n0evvvnzb/+6vv7L",
	"9fVePX1qbWk84nkHcuK3K52HPgxXgSl/0vA0CgcxwR6KtEDOr6YAaumTohbl+FkGaW2q0fV1ZtpTHI/D",
	"wBhOc4K/ILfKzM/gLQI3CBEgqsijFlO+yOLgzUofflbzLqi1TnrM/npmfKnh2hwCEt5t04/ncGoUsLrm",
	"ZAHq/BbVJKMOJDL2LAswukUumAT+XIbfUamVZGrKzXAoCLFIZOKbcV45svncBmjhUywFxTRvm6bYNh1R",
	"ygW7cetUjywnsjNERp6Ky25pk5M47K7Ff6RCShdOW6EBKsesca52+mdnV5fdt6e9XRDNWzJZc0jwBFEu",
	"bWJnFi1QGo1OEqldSY0dcMlXYRQxOUpdMeF/x5FxU5TLAMnXJL43hu6tDItMVage5gPoef4dJyaEHnC4",
	"wqHyIA5Gsc+PCB0c56qWy+QGOp8RcZdQSquiLcePDXol5sAa8abFPjeDVG5/sgjzAUF3iaElrc/LhCLV",
	"rY1PZk2MLkby4zNYQL5bGkJqx5cphiDKGQG3nCnOz974zX5y/qVZiAmsbArNj7xB8T88+rHM/rmzWzW1",
	"TfRyvNTmE5eMUhn5cfbHKrfoaa6WujovzUFTkHolyXBmHobLCrdEA1nqod1aeJBxieNtSFxT4ho7/uLo",
	"3iLZpxNS5s+jfU4lRBDt7NBdcaJfy11KOU+ILe8GihDyMoB4osKBwWjPQ7fIA9H9ioMR3ZdpW0OV/KcD",
	"rkk6QQ5w0QSGHtPyMEo69F25MPWIGovxjRwMc/YVvuuaM0HzX4XGKzRMVVRKMyyNG3CDPJ9M+ch1wJVA",
	"kHefYIgfsxM4x959xpBMa6+fyju6IteakFp9/1nKlnnm1QdFcFXmixPBCIKUNGu25C184+GeLNlOIlZe",
	"DU87+jHvB3iKOdzSoK2xa9Y/CjjFtpNyuYzCFpvkOjabMsvkyqlc6AwevXxlsEp+6B69fAWcGXI+03Cu",
	"yWWJxw8BMy3veDpTdNaz4Pt2a46J/mfaG2VysPc6PU+KsnV60RTfHD2CHLTZiyn93mkOv/Tlvw/5wqmd",
	"mqzoYkpTE/JiVLrf5e6q1NR/MoSlytgdTSbKtGyRP05T3zVb+3XLvyMouG4lYG/L3VOgQebAkxtrnB5L",
	"TxQwGI0vhoOf+ye9oSlYZO5z//zdsGv6cNo7H/w8SLGf5skw7oNY6Mhyy3/Xs9/wP/1JlMOPTAGNjVUa",
	"J5f/vOjlGRC/Kp1N+yXW49I0C4oMtF74dyhQ0n9yR2jIxSVjU3KozyBxPU7sgtcFSo5PZfO4GPzSG46P",
	"B2dn3fOT8cXgtH/8zwwHxiL9s7PeSb972bMVGAxPesN0Gg8DBzY+C3JQiFTUkiGRjiLPjSnJhP5FhBtN",
	"/fDuXeaX0Wmvd5H57UP/bW94rrOskpz0Rr3LHJ/WFBTF60ysLi0iV4q7gnWS/va2O+zl8o2XLYZcSK+6",
	"PoURzUV3FAt8HCAhLkLPlkwu28y3ND4CnKRyp9rG/XJFF6yKWzVc4LFGnOEdDlzgHnEXPiasOt/diz5A",
	"qtYSol0F3zJOeNSDiV+pvFj1q5jolJJjMGyvg1ZFSy1V3jSqy9zkV/Rnirqroo+bSFtOK/8hRXzUblVx",
	"WaO5gKOfKqRaztonoro/I+KWXz9fpEsvrVkUeDysb9DK3MSWveo2RSFUO7bCnL6RGLb3IinvIjcfWV2Y",
	"/x7HeC86g37unZ8MhrZTSH2VMtn49H+PuwVfB8ddEyOKSMPgZuL/1T2nZIy9glMKkxkKMEPumdW8eSnS",
	"KRBXPPSJLZrxVY+kUEXJ36G71yR1ORR3EMF1qILi5/zwo4Mv7Y8vFB5huJemLd4s8VlswcdEvUKq/OIo",
	"5UL+UHSToSgf5y2r8VFntwprSSFSfvVZU3A8Itek+pgsy6vlSC9g0H7chKWOtEnAy8141BandVB5GxQ+",
	"c6dNhFOZLUSUwZlsh215cSMu0xFhdZCo774vs9zK7mz5s+2JHIxps0VpyWT9YKIqkUSFE9w2jJUO7fQI",
	"mNm3nz6KxMdwE1wf0Rs4MtXbxpE5CBafJPEdkHB+I6/sRdynJCXO1PYw1Jq9VzwUzQS/0p+1JzkrUsgy",
	"nMfWWIv1jzTZ0F4UEK7gdHMCn5zA+zOf8BnNjhj/qoxjLhRm/DkvCHYO914c7srkK/IQU6lXiHevssCq",
	"9Q7BO7Hi0w6mOx+/+/SfnY+He6/F/xx94qD5tPufFx8PDj/t7uy0rd92v9vdTWkBgU/GLrwfC8KMOovk",
	"8BeEPldh8A6hz2DnYO/V6uwd7L1SzIh/WUnnXdoo/+CHpufvGt0zXoJTfPRiHSS//vSfQ/k/Rx8P9l7E",
	"DOR+N7IjiLHxcoZJaFyYGjdzWYbz8/J1LX46doY4ml4qHGn8pH42sqOosTJUumri5XJ4tKblcvjx4PBI",
	"XyPqBzP9tkXhKt18hByfuJa9MirECaOyYKQNRFsMiLaYtngdFv1l3ELn8Auec8Xhx1ffC7sMJvLvQ80Z",
	"U3U5Vv0ZX97bBa6of7Nav75nSumNuopwkBuwNb1Xj9rlzVY/ejMBe+uLDqvq22vhovheT/GWZLgvvNZL",
	"l46fdn3wKaudCDeuaZO7ZYlIpu6fRKsqXj7XBHCWxatLVVhtHPEb9dRyy4ndutQNqUXqzj1VnvmU2WRu",
	"ScaYF6kqeMsqywreeu1nPpA11Rc1lLJQvcHkkm3tCK1xzZJh5FLsM0IjJ6dkCHmRygO4DiNcZlfJH6Rp",
	"SUeX4dppWVuXINJCairRnUUlMKgPo9yGZzJS6Q4GKo1iciDJ5z26hW90/KF3cnUqE/JfjTIWvuzXs27/",
	"/LJ33j0/7hm+Dkbjq4uTbjqV3yg7oLmNfJR30Mj4WaQL6Be1HMXqK3DgAt5gDzPx6FQmn0y0opjh3vHV",
	"sH/5z/G7Xvfyapi9Ocx9Ph+c90y/ix9647eDweW4e34yfnd1ejo+6Y9+GvfOj4f/FIav1DhkuDQOxC3i",
	"RU7RLTJ4C536UyD9zcQ6ixxy41Bq6lImszrnIWVSDr0RrmeYcEF0Aj5j4gL07xB6wjHusnfaO+tdDv85",
	"Ph6cv+u/V7fsg/ej9OD93BOjcNr7uXeaG7rUx+Nh/7J/3D3Nf+kNh4Nh/udfusPz/K/983eD/K8nvbdX",
	"79PDq4+daXDNQdbrqt4yfjmooHgj4hYK34i4gG9ZmvAd51vN9CKnFMl4JLxM0racX65w8KnkM+kH4AZP",
	"p4ijA0qzR1xPvNJUNTu6xP790evvX7/64ej1S7PYjoj7zCX2DV4dvU7RKOfmGQmy6ZD6VXQVG4iXvpFc",
	"dYQy+Q3M6ooOXgvWeInKi6oO/kXLhSvgEdQJ4QvTKBONMtEoE1uqTKS2MF16MQsnJiVAn676wgtDzUV4",
	"cxG+/otwjqxv6SNGklpUfEVlylwarHZT7NqWBf9qEqH0a3axBLOX7J2CHXBdV+r1zo+N3iq/yEiLbG2S",
	"ND+1Ksm/DC0p6S5PuyLOQvYptPiJTpHv+TJAC/Agwyx0USLRMnF+XviYMCqiU+i7BqRxjT3PJ1NZV2wa",
	"0YV474eMyeiagB0XTQOEZHvz0GNYRKriE3x48N13P4iwx4EfEjfZtgiCAaIMKIF4l1Ol2Io11OgOHpKp",
	"4OAv+3vg9QFQvRXfKL0+UP9p4vme9qM+yGMPMqOILggi0wrjHA/W9gw0mRYO9OGP8UiDHUwcL6T4Fu0W",
	"j/rhj6Zh139NjzuZmlWjVQMBpYQek1CUjWRk0w5ZyCdExUdKGbakBbN/ftI/7vKjOmvbyn2PjVi5L/3z",
	"8cVw8H7YG43M30/Sj0By1Bu2iDjbwbHvechhvuVBAefTiYoIG5/OpW7kOz3tHV8OjK8LrMU+DEaXRd+P",
	"T69Gl72hzpyF8CIW84m96sm59oYM3jHZ4ayUsyPNy0O7NbXkzkmirXr+FMhS4hmybKBT/TValchImRez",
	"Fd8yWPPoVA6TF5uiYyYNQp/2svFw8zY/+VhZU08TK7mJwKP0sR4XFmXX5fCWg2W/JNBEKRN5gWWM3U2w",
	"Zkqnt0lXeDXlTmbPUFA1bS/5TcNwThSmVqurTCeTwWEfvSTnSwGCGUYBDJzZPZCd5zcez5/G1zzFz5H1",
	"e42HNq8oGV0tUaJXBELh2myLf5Tme+XVlORYKAGWGuGyRcNpN60YVT1L6kszqap0jTc1IgiAmfKijepJ",
	"yK0U9LivRVgtojmKxJrouDkulMKLp0Squ9cEHEMS30r6RAraqW7bILFEtgE/YDQLb6k1kBNVYg2MI8ha",
	"RyCxRRfxr8zJdyINztOwv4pF2c5+ZD0uYl5o0k/J+rJ24I0dXfHGnt5jbWdW9hQqOrWMORKXlI1NbTXi",
	"cSMeP714rCNzGyXkVH7S5yUkGzeQCjvO+kRlOTi1peW5RvjKKWXnJQCrKP0qVtYmAFfBjSojEuTcQoOP",
	"mORZWAd5AbCT+EHsGjzGIimzmsuYqHu/QKVuY/yX/vHIbFw0eFdErEdkG62IjfzfyP+N/N/I/89c/s9u",
	"0bnzpuBgrqIMpGiskW9GhOVFbpetlNNBxihbrRXtYkfjxsBrNr9bxiucQYbi92ozX0Z6jq46pCO6OcRV",
	"+ttp97InrjXSP192h+/TgZ7MuYAS+ETpVM03M8Po9o8m56iWLVan/ZfB8KfTQffEdDeT/ma4cElRUUCl",
	"SoFcT5QTqJ4jF0PNkYjLAfHdpvC6VzEqbxC7Q4gAGHMpbjQh4HgJ9RZ2cAd12vFRsmvyTVo+309Ut7aw",
	"F1Us3nSKzpqohap+F58r6NnpGYx07Hk8n3WHZ6PPANNDFeFAEvvEkQQiYpZJzxzVtUEqBnzey6QwLlFU",
	"z4anOE15RTyl05RXkZ0LKK/yeHUd853JxW6c9myqVLnbadOSWvaG/VHtf4Zjx7C+qu7mTB9ASb1xYz/r",
	"nb01R/YzFlHb/Ph8cNKz81K24y+tvot1jx1wB0UeP6Gg5vZwoQ76NyIxKEwda5lnMV84OKBXrgxFJeMu",
	"2nHCAg+Tz/LYiTr3Q0axi5REDj0RjbfnThHok0kAKQtCkZMInEECp7llWDcgXESbZUuqs42nN3BqS0ks",
	"PmYxVjvFvEJ9gadrRMY6DJ46mduQTbT+vrx8tjzjE87MYCqPJcOkrz8ypD3t3arn6+ZPnRUnq+hQtRw0",
	"0SoxbMZF2pvjE4Ic1kFB4BfI3pK89Ij1eBV50ASIhQGRaD6WLb4BM8YW9M3+vuoiWDgdx5/vu77DlbF9",
	"0SPd/xMvtpf2RDTc+rio0IWOF2irnDM0DsQNCeAHXfLa8KNSAjktx76LPuV+0A9Hh5/VHuKjG5LPxL8j",
	"4gy/hR52xzCYhnMkYpa6CLoeJmiMvjgIuaIC8dl44odiaqDH5/l+LEKWcUAvUDDHlGKfjF1EsKgQr0/0",
	"ZQZDysSPE4hFqphAGEyxGht4IzLWtNotP2RjfzIWfpWCSjxXeSKQlDfkmSA+wVuIPb6IOcWQwbHnUyq/",
	"hGzGwS3QzwGEvkDeDhU2/ZiRT8bkeQxir67q3SXqdYLInmm6hXPRLfI4AvYm0MFkCgRaonyb+ZnGBPTI",
	"1MN01gFdci/D4JmqanU834Ee/h1JHVCoispPVUeF9IXsqHRFnwo+SVu1sA8lTavt3fEwkhF084s5Wq5q",
	"4QCxrkxr1TSMtVbscZSNCRIAgxvMAhjcA4oCrKiNBgl6Ppmq7CLgf8QSz6Q4zcqY+UbygpaLbsJpGcU5",
	"rqPk/TnsiVXNv8QW/RtMYHBvHuSywUxlGM3CMf6YmBUogEDEQBWgkQ8846z2MpnJvfz9d2FTVKC4JsCB",
	"HiIuDDLpwRw/lBWjuEcclZMAOiJrS+oDuyaAQOLLH8Qp5IUi7jGQ7ra8JUyV3eNWZsQiAC18ZwYgA1eX",
	"x2COXYKnMwaE4/c/IAk5Fg7b4PD1DwftaCUsAt9DC4Yd8D5AUz/AMKFfLUIueHKq2AxdE1OxG+h8voOB",
	"K+TxewQD4BPUuebddj0vDr8FAwReHcRMcgR2wCmCi4TvAIHrFp0jGCD3ugWoL1FJfOAhuLiOLpaAzOqN",
	"KSBiOxbSn9gLFwGSJwwX3PneAMHHo+/3Zn4YcAkewYA3wjv4tBMdX/FWRDsKM/wU4zO7L0ruSlYuY/92",
	"TOXzs4ODg8M98X+XBwdvxP/9yofg9evXr/cOj/ZeHF4evXjz8vWbl687r6P/fu2At/firRUHryNC/TPF",
	"p2i+De4QQISGgVqTd0i8OnN8cosCJqdaZTP7OHx3fE3AixcvXif83N3ddTBik44fTPeDicP/Hy/RYV/Y",
	"LpBZLcS6oZKxP4GeOg7En+oPcPgGHCuFK1kdoteLwaj/v+A3PkI7u7/JRvh/SbFYfvur+hT/0KEoftS8",
	"I1o4vzo93d01FxRrYOeAf9UoOyqjbIoYb8efuPA+RaHUyUQnt9AD7DbqNlVDJndlt20gaPvrCgzedtgt",
	"/6uQP1kqpMgB34HDg4Msvy+s/P6CyYsj8Nt7xGQCDv65S99hD11mJ+dd/7R32T/rgQmLaLFVk/xPWEz0",
	"Vf/88tX3gGHnMwV/Azs7O/KX3QnruHcf8HR2Apmouws0kd8BL452wX+AKHXq30WFkgHd3wddzoTr31HR",
	"PF9bhwcH2uZHO3EBub0dvsqvuqQ5Xv/w1ffff//Di1cHyWZzgyZ+gMAVwV+iZl7/cJBtprPsPO/I4QA7",
	"O3KM9sGheq+yC/Z0gsqgzhvigxY19I3WkMDGbgYb31ux8Q94C8FvKuWtyiDMi5xhz8M0hQ0hDMzF7+Bv",
	"wF6lcCWAvyW/dgi6extiz0XBzi5nTz1A3lGdyPHZVY3x/3ihczkEmDA+AKqoHAHFvRiI3c4Nb3onMxIv",
	"S0ZC2qFZh/h3KebV74D4d+BvIFWqhF+N/HLOiX/XmSLW4+CTv+3s6gOQHgRVmv+xY2P4lZVhNXVxWIqL",
	"ezbzScKycc52dnO4fI/YcYICXkAcFyLl3RlcLDCZip/6RKXBE3KaTDmnjRiXIjFNC0PyBFJSyDURJ1mt",
	"c0z2xeUhyEWhtmpH/sy7u2595bLIw95XEbHyYe+rC+8fLr9yWeDhzdc5Jg9vvlLkPHzsfOVSGF/MD59+",
	"vW5dRzfrsr64T/bu4D0F6AuXDSlylXAx4WKFi6eYUS4reQiovtpAdNa+JkD21waiw7Y4ukWvQtj5HQX+",
	"3gK60Wu7Oz9qDkFnJoW9SEIUomUcYERlX4UETH0QLoTYEdUVV1vqx0OzHLnLSeMU+AvZtuzruvUrF7vC",
	"yQR/iV6tRboAniMh6O5ct64uj69bu39N/X5NpEAq7RYdILK1MP+FREasPQSRfqaGNKRISKs7MH4mJ5Sq",
	"ayKJ2ZWxTBcBJlJUykNLXvDpvS1gQJOebjhtQmDkopPjoAUDNz6biX55ZZ/NUBAzQnO0cNHan0woYkoU",
	"fOcHQKnQbXDdOjo4/IEfJYcvLw8O37w4eHP4snNwyEdSQp4C8UN8GC0g5QK+KCuI8DX5/GUb8PY68cKC",
	"t3AkdJW28F3QRUEI+JGqXNjiFKdqCUiIylXB9zQXBi5faMzvjwYjsfx2dg1ScGfu/449D4plh8je1Uha",
	"dH5BN/sJMfvDKMnl/nvPv4HeeCCooPucpH2tE76tzBGb+W6H8yP3orbYAiRR4Dcuk/Lh70T/+C3iSUVx",
	"UAwjzoCJTc7Xb5QFE1FZY8p3aGchdz/OztG+h2+4TizE+86Mzb0/iX9FdXeFTnxNYmhH3dAFcsC33/xz",
	"75v53jfu5Tcf3nxz9uabUeebya/fdsAp/ozuMEVCreKDlMxVSJFq7h++CwV2v6Xg42/90SCSh2TyOMG8",
	"Ets+7VwTYV57s7//f74L9ySRwn408YMp6hDE9uECi5nhnPFSUmeRBO/n2xfcJp1cE7CbukCRFRkKZFg7",
	"T6j+yo4toBSbWuW2Hc+BMKlpFqVD2mq3DjsHBwcvvj84ODwSNstYh+cUCH4Mary4OZ/40iJIGHSE04e8",
	"BWgNFojI+5ULlY4UvMfsQ3gDBsEUEvx7ZFoMA6/1phVhYIrZLLwROp2/QGQPuVO0FyU0lSaulNHTfoED",
	"uhf9VrvlYQcRijTKugvozBA46hzkeueHGBSfBQBVXbp/2j/unY96e0edAzExLc1OVEBCq92Ksn6+aR10",
	"eI8P7RbnCy5w603rRedQELGAbCZMMvuCXcwb6/iBM+Nap3iJDBeY7t8e7c98ykTJKTKEA3iPmBYGRJTl",
	"s62y1MnIFK0PPmUjFNxiB51iKsJKCSMoDOAcMXHB9DGf3UlltBU54wBFvDTfbqO+hK1NWBT40sOTe75j",
	"+IFAoh+4KBApGRGKrdBKd4d40XHR7f7hiyNhFojSkAtraetN698hEhYkNXWiqbf8B2nLLAyk8hRE13l1",
	"0M5csIguxzdGg5l1QmToD3nVycJAec5hhuYyCT5DAaKsjJFXB1VGfxIFJq8z+JsisNZIv9n/23c7u18f",
	"rlvfZgY95ql0yE+En7MUr+A8sg6Ky1XOnTz3+OYcxXFX4eQWcCr8p09UVmd/Ao4ObEPMC4/w76jaIK+d",
	"pCSwgy08O686ppLCfK6Lrzl3MBd9iWzSExxQJmc+RoMKbAM9z7+jgH7GQk2RLFg3ASHcVRuhlQnQR0R/",
	"9RMTkRuET+LyaOHzg4PTdnRwEJ2QSOb6g4uFp0I57P8flQ7ECS9FNzfxhj1UPchTOOP3GDoOolQelmKC",
	"19Z/+nrS0HdPfWi3aDifw+C+9aalnzIMToXQoR1CrU8P7dZChUXMXJCIi3cAY+dN60kmS4rgivI6FlH2",
	"1nfv18Z5OiZjnvE4FSnzgaP8BR42iIQyep4bCFITZEbBQ7ui/LMfoCmmTDozmpEzVCWqYCcqu3H0KKIf",
	"Hh4aZCTIyAz/qtj4mjiBPEhceMj0TOFE/F4FH7KkIq9QTD5X+dwif/N4RxDPpHgrbnyocZk/OdM0TyXd",
	"nUTewdrOuYrdZV2O+iYnlk2eWskAbtOxlZp227lVoIZJnQI75QB7r8IC10CX2qSQG7e+CVDle3lyLG3b",
	"7pbMrVX0gcwxpJC64D9X2Z5EwSr40V+kJQ8zbhBQb3bWiaIqfVXH0uOLc/Ipjytd1Wjsryonozm9E3zr",
	"6LMiPDRsknKEqwBcllz1/N0AyCt21+D8D4DzFAjXKaPuKw9WKIVU41rpx0WqrJekdJU1w8sAzRl+jevD",
	"0LRmpCvKDlC4VHJWplSSZRAgSH1xtQycmYxwytXASYCQuIUQVl+LaYn4rMj0tlxHuiv+4VGtSC4yLk3W",
	"Mf+6lX3/4JveK29UDkuDbJvk+tzyWOtq9smNDwPxoMEi2A1kiSorWRX9Yy7jTaJTG7htgmZ6vteKy5TJ",
	"zAzMlEQGZAWJy3L9I2PEyUB1eSSuDWiNTe/RtYL1GvbGceuFl9+qlC6W61kNy2wwdKR6qXoh3ty/buj+",
	"dZPHg5psNdfbdELkYbr8soqev1f1J4nL5xdSFDVC8yvpx603viWNb0mztzW+JY1vybP3LYk37W3zL9FP",
	"m+hEzBxKVfxM9HhOhSecrNFPIgRuQsPIx2Iy+50kARYfx/ekCl3P0/9EmzA7SmrJTvX9DSpjTNbQSK58",
	"9xEDQkfG5n0QKnT7THwRNARvmT9CJQRX80uoDMT3WqzXpXwU9J4266eg9/TkWNvGfTI914VHabHfQmV0",
	"iQpV8dX4MNSDl+V+N5mcRk4wWC6rroBCv4bKC0DWaFZAswKekafDhiXl2l4PlVdTUqvyioqk1c1cn1qa",
	"rxgf+AmFl+w4bucl/9qALOJFdR0RzamqyTxKQm4wmZ9qzWlm89NUL43pvDGdN6bzxnTemM6fvek8tXFv",
	"m/k8e+pEJ6XhkKpiRtePykonn6ypf9iQSV3vosysLriAsuxjmdar0vc8zeuZCSxGUW2Zq76pPRK/KmFQ",
	"1sqwUNnYmQXL5q3txT0+E0N7Bs9bZmyvhedqRvdakHyP2LJ4TEziOk42b4DP9vbkONzWHTU/9+vZTkX4",
	"4orqa1zejFb+R0Z1la2X4PSd1D3i1sHNPVApHIyPMuSnCmJlQcNrzy6Rl6qHUpESGe88bSxMPNGZfzfC",
	"TPgrVGDM1nScm2Hm34msdVp+hhvf9xAkBZSqxIRVaJW59epRa2g+RW8Qt5mj+DGEdUHTNgrq8WBq+4G2",
	"FCvuBWo5k+mYigiyVfeEwciwGwyixmQ0Wm1TyHxpTFqNSasxaTUmrcaktQUmrezevW2HpeHsic5M84FV",
	"wbZFwGBU8fiTVTLfNmTXyvRSZtry6WMZtGoQ9jxtWvn5K8XQUuJXbesWR2JVSUzWybNS2ZzgU4WZzdu1",
	"LF09E4NWHs9bZtNaAs/VLFvV0fgesRWgmNiafLp5e5bs4+kftG/vNmqc7SrncKF/aZ3dT1SpibjGzW4p",
	"8Fm87fgqaqQMu8PpcgukyP20zvqQddYkHWw4zpalq2Z5/EGXhw2b6xHC6VhiaLzwPezcVzaBArXMLng1",
	"bHoRPxjJIqLEvdBGU780dtDGDtrYQRs7aGMH3QI7aGrn3joraPbciY/O9Idqts/UyXdfdu4pE1qWgo1I",
	"YelOLIbPhAF54j+aGbSUumdq/awMnmXkrfoefXUBqGxetUQvXd3I9vc4JtDyXp/eILV1gLZAoWA3rGb1",
	"rAfI94gtj8b/TtPn1iHNNMdr2jeDkGxASR2GRJcUhiFp1NNGPW3U00Y9bdTT7VFPhyHZVt1UnjjZM5L/",
	"usQBuYpWMQxJ4TGZFiIrHJSZuwtJJQhC8mjOFEVdPhvhjo/k1ukQRaitqz2UAU+TKWui7r9aadgSXOVm",
	"d/mtMA45sXqIigv1SXPnv4hbbxSERkFoFIRGQWgUhGevIMSb9rapB/ppE52ImUOpSjgK+5vrTGOyRvTj",
	"hi6qoubLfPQjqh/riqoKXc/zkkqbMDtKaslO6ww1kSFF1tBIrizIx4DQkbF5FbJCt8/EN19D8JY55VdC",
	"8KoBJjItvkdsGRQmqp7e02aVSr2nJ8faNu6T6blebZOMnu1XUy9V6TwaZUQBTbVMQgw0imWjWDaKZaNY",
	"NorlioplbhDeeXAqNhk85QsCS2KYz6CnzZoIMyMmSYVwoTM/9Fw+iZJSTdg0xIq55M3VCG6zVqJSEWZE",
	"G/a4OJvWu9WJtm1ad3IQR4JC6qyuonHLKSo59GVp+dOGdG3ZeJmmrQD1SHp2OU3PU8uOJ8qGihrCY339",
	"uhKiZOmY0Bo6jQBAgoPNa9UlXT4TjTrG6pbp06VYraZLVwLde8SWQVyk2yZ9bFaHTvp5cmxt3w6oz3HB",
	"oVicEakSmuLM2eV4ap6o14GU5eltNCnNiW/M316G+MIMSJUAr/wb1nJmb/jteUmXDf7/MPjPgHIViZfT",
	"4YZe5SzrcXmwI00k+wFacPnb3c2vpJEqrJlRR3F/JYupMSI1RqSljEhcZZ75lIH+CWAwmCIWERRjtwP6",
	"E0B8FonSyG0r+gRpScFrAnam+BYR6a3KZigAYniAwC7dFS0ZWkl1B9gMMjCDt+haNhRXiAkVGwhy+UCx",
	"GZq3Ae6gTjuiHxPHC10+UDI33AwFWHgzEkniAgaIMGWDkpyR0PMkdfxfafbSxN1hNvNDvsZjYqjq2AYJ",
	"XlAcHxUg0UzHWqdDs93z77a8bPzbGLtVrPV8ggSp2zBBEaHLTxDfiGtNQ9xlNA022zJmqM6iaMa83phr",
	"yOefbcjn32ogX0nLtebhmphnomwe5ChUn4nMPCSkZmfimlSfi3h7Us2lNqi686SRVHZmyKJ1FkgzNRuY",
	"Gm0VyRL2zJ78a8WVpDJb3EAqWJE3ZHiOKIPzRRugLwvkMDkqNwhcnff/F6CF78zA1eVxUpALzRQ5PnGt",
	"wmhI8Jcer1kr48Z66dKGkI9d+pacEzhGisJHTSSjK1fbdqena4WRNptRHuvqs7FeWtkTSBaPSamkzg6z",
	"tRq1tlFrG7W2UWub6WjU2katbca8UWsbtbZRaxu1tlFrV3FUzShZ2+eymtcS7WpuBfdV2dw4WiClqmrk",
	"IpkmY2Nereluyv1bM+w8nqtrdUKfq9NrbkbXbT5Zxhe2Ljwjr8gcMzXcbbIYMqLqMRxnlyDk2bjT5tbD",
	"1jnW1lgPVZ1s66JZeGOuAuXEJ9bQ9abdcA1dPgOP3O3dqM1oKDz9y/x06wJSuUvWg2Tjvrsc/qyOjLlZ",
	"a0SbQu/eemumxNO37pKJPCwfQyLZuFvwEoQ0q+2/ZbVZkb4uRULeFlZ1LxaF693BjtJ1mhvY5ga2uYFt",
	"bmCb6WhuYJsb2GbMmxvY5ga2uYFtbmCbG9gVHIvTKtbWuRfnNMQVbl+l7lX37jVNwoZuXtOdlN27Zhh5",
	"rFvX6kQ+zzvX3Eyu11BS/761LiBlxRwblS2bWdwYcLT5e9baRDyTO9Yc+rfshrUG+qvdr9ZF73vElodu",
	"ctFp6HazN6uGDp8cktu7FZtQsMKdal0Qinr1YNjcpy6DO8v9Tm6+GoHFepNab50U3qPWXSay4qYljQ3f",
	"n9YmollZf/yVZUH2iqqAiARc9aKUGa9HMUtfjTLUhKxvQtY3IeubkPWNU8AW5EITG/b2mVdZ2qiaHELV",
	"DKoMFZ5kkd2Nbc5uyipYS9kjmkjZVhpGGbKioLL8s4z9swQ/keWK1VQ+WDLrj2HQtHb3bEyXbCsNlgWo",
	"rGqiLAGYsEaxpS2R7FHMj+y52BzZ9lkaCyFUalssQY+y0rDGhLhGGFnNG83ZbbQRFiO8xCpYAvDIWLLa",
	"+btxM5+1uwbnfwCcp0C4vIzKkIfmiAX3+9PADxd03/OnVW12cd0xrzSWDeRXzmVU7NSf0ve8kGbRy39s",
	"Hjw0to3NPHhoDMNPaxjetLHJsJdsm+nJvB1G27t1J61iljLt1jU2a9lO/vOGTFj5jsoMWib+HsvAVY/a",
	"52nuMk5tFeQtLWbUN42tiGHZjpHRymK8GWYW7G3ezLYCOc/EDGdcO1tmlFt67VQz2K0I+/eIrYb5xOxm",
	"o2Szxj5br0+O4O3e92242Nimz//ATm318kxWe1+mX+rlTCpmqp1Gy2y0zEbLbLTM5bXM1HaytYpmdlPM",
	"bf6GXbWeuql2/VKxxdBRRjPRS2xa79T7qq56pnh9dO2zKs3PXAHNTHNFRK4ikayiia4A74zykOF7CZU0",
	"Az87LB9TMV2SqOemnmYW17ZqqMstrrp66gqLQtdKll0RJtUxR9Jj6ay5jp+P2rqtB0YBRjZyWiwCf4I9",
	"tNztKNeeL1QDJVYbVcx2Pxq10uiuje7a6K7/DU9nhiqAjXiHkhKrQLQnyVg7MEAAUoqnfAHdYTYTpWUs",
	"H0wog8RBALuIMDzBKLANfFS0avihTdKnDSkvYYu/E9WuGIFnLRSLEGYnnTUEOFszOeuP/bUWAlVMq5P1",
	"xLxaO0mbifXUJy4XiRAFeCL2Il0qTCilMz/0XH4Coi8METcmNSp6TZLCAS8QIBdMAn8OZhgFMHBm9+po",
	"mHhwCrAamJAiF0DPJ1PZnk/QNYmeWvZF5C456MAPQLLuZRC8wiJ8XK+JDCiGWBswvW88JX6gqZXZtTHz",
	"7/pRMK/KB+N/9zjGq3bm342xNngKgje+7yFIHtvDJpJGt9rHRhOpjddeaYl8CT8bBblagr/BIUMVeAxv",
	"G9VVTX8bxeeTeNxUoHgLfG6SKa6GxBVU2JU9b5ZBtcFVImF5Wf+bGHZWND66D05dkp6jH06yorbZE6fu",
	"ilrKG2eZpZD1vFhiHVi9YzR6HtUrR+v3efnlbOHpYMdHZSGl+BHfGjAsmloGxc2zv+WBankeZZvORgIr",
	"eSi46iorfEi4hkUm23oKmWnDzxNXJKlZs/+Va7ZwOWxUa1rNdbXC9V+6ZIH7anMJ2FwCNpeAzSVgcwnY",
	"XAI2l4DNJWBzCdhcAj7NJWBGIN32JxBFV4FG6Xy5ZxDlZgBjZ2Yf+Ue6Fkz3Vv85xFNdDlanezueRBQo",
	"uzaErqbvruNhxJKAN/utr2T9ysGxCKhP8URiCcKe6TOJ7b9AXH7JLftYYsmFYnCGX9N9ooGwx3408Sxv",
	"Fbf3WCnESh2pp+r14orYTl/S1EN3c8+4EnRLry1yU9uIdDUuHFdafRWvHVdcfJnblqeQwB7tFnIFwpp1",
	"/d+9rsuWyVpVtTs/+Oz50B3P0fxGrLxKF5LZavmt4BdV4kwU0O4f0x+a7EtN9qUm+1KTfam5et+C7EuZ",
	"rXvbDPT5kyc6So2HVRVzfOYcrHgMyurpTxsyuWc6sVjYM2w8ll29nLjnaUbPzVwZjpaRxOqbypcDo6ye",
	"Y6myMpbFjgFLmzd91ybimZi508O+fdbt2iuhmi17OSS/R2x5GCdGY0Pnm7VSGzp8cnhu39Zsmv117st1",
	"VeMCndigDTd6cKMHN3pwowc3evAW6cFbqwGbdN8ltN7SEy6tLm1YxS1zI4uofmztdvvcxLQJs6Okluy0",
	"vDJbirG0IrKM5ppCxuPpqgXdPjPtdHv10pJ9ro4uWgpETQFZTfF8PI3zWamaW+b3VBFiJZ5NldElKlTF",
	"V+OqVA9eFh+GZHIaOcHge1R1BRR6F1VeALLGOs/5DTsDVei2WRd/sHWRA2mB/PwQf80/j5xin3QSLMof",
	"orp5JX+kUoyr4nra5nzhU1+Oh1Yh+sle6YNPmVaB/2kv3Fev0bQK0U/2SgO5+Ml0dE8Zmmt1M1/sTVwE",
	"/i12pQVd1Y1+slf6RduAVKXsZNkrncUW+0zVtKXZMGPODLmhCuEQTZv6zV4rn0FNq25Pr1bQkB7N3tSW",
	"Kdp9CV0XiXeoibKMm1o5bQXtmT3fzJD3uo7jh4RlYB/9XADMEVCn1YXvYedeR+ZIfpEfCusOQ2KoOAxJ",
	"6+HTw/8fAAD//58EpEsUqAIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
