// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
