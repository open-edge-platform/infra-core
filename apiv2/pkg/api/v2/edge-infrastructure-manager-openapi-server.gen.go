// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/P8BAAD//6+z/qx7xgIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
