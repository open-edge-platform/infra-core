// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kFt3EBBNxUFAGo+fH///AAAA///Gpfy/SccCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
