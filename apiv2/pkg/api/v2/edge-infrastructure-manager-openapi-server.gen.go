// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fH74/wMAAP//VQdBhn7GAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
