// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//YnMEXoTGAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
