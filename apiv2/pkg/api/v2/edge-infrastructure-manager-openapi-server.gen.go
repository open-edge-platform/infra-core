// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y96XbjuLU/+iq4Snq1ncjyUEN3VVZWjspWuXTalnwlufp0lypqmIQknKJAhQTtcld8",
	"132z++H/YndhIAmSAAcNttVh1jlJWcSwAfwA7Al7f2tY7mLpEkSo33j7reFbc7SA/J/tBR1+Cdi/EAkW",
	"jbefGu3L0WT40/Xkuje86px233c7Z41m9Gv7cqT81R1eNj43GxRTBzXeho01G/R+yf72qYfJrPHQ5F8o",
	"pIh1ZCPf8vCSYpc03jZGcwR89gm4U0DnCLQvR2CvbVF8i8AlJHCGFohQMELWnLiOO7vfB9FoWo1mku5R",
	"e9TRUc5/vxr0P3aH3X4v9ft1z/TlrDs87fd6ndNR5yw9UD4czVDfQQ8tEIXOqUuo5zoO8n7CxNaPnNVm",
	"A393eaqO5V170LnsjNoXk9N+bzToX1x0BpOfur2z1NjM5Xr9Xie3QPfqsptb4OPVoJ9b4OrsWp0T07g1",
	"U3Qa+NRdnLpkimcD5LuBZ3FkQNvGbHKgc+W5S+RRjPzG2yl0fNRsLJWfGKBZ5eykikaB5RKKCG00Gwv4",
	"9QKRGZ033h6/fvHjy5hg2YSGvkST6R72+lejbr/XvtgHsjP1e6LDk1evm40FJhEBzcYSUoo81s4///zv",
	"f36CB7+3D349mBwdvGkdvv3b3//rH//Xn5rj4OjohcX/G/1lb3/cAJ//+udGTHiyvwz1BC6QcWKWnnuL",
	"bWSDm3sA7QVOUfzyKEEio+8z+6+jgzcHn78dNV8cP6iU8K40JHhyUbsa2IffALYRoXiKkZeateQ0WRws",
	"YrEOPh0dvIEH08/ffuR0eAjafeLcN95SL0AxXWEfE6zFH8UL5FO4WHIo/dlD08bbxp8O40PyUJ6Qh6O4",
	"5AMf178C7CGb7VE5dokiZSNo0R1R4d78L7Ioo+IMOYiiVOmlS/zivZCc0bAaWCDfhzMEpq4Hsq23lIXL",
	"6dtI6QfXpytTaCKQNZolLNGVkaAu8SkkFtr8tIUtZynL9Gmk7sK1oNO2LDcgdPMUqq1nqdT2baS0P7xe",
	"2pCiK9fB1v3mae0vkQcpJrPhvU/RIkuugYBCggcBeUJq1d7NpCZbewpyDRQYSb4SV4S3eVrDlrNEZvo0",
	"UjdAM+xuYdlFu1nKUv3l0LVEkCJ7aM2RHThoGxQme9DRaqDBSPUQk5mDtkdzsv0sxYb+c+ilW6GSammj",
	"JSgaIYexvd79hTvzzz03WG6evmwfWWpz6ChH+5XnTvE2MKDrpYD+NC3FI7hE1MPW1hdA7SZnDFpqSg9i",
	"+yuR7Kh4IKXX42fX++K40L5Ei5tt3CDJ9rOEG/ovpHd7lJppzKPuHFHGAw+DxQJ6q7JksnaoWJm7PvW5",
	"riXwGVVJgRp5nusZlBQuhQ4gAZtS1phoaOkhnwlwZAYgAR1WvZUjkon2o6FiQtEMeVxYDAhhglmFvjEB",
	"A1FL6I7yOg6b13XNW6/QcV4/oi1dLwGBjuNa7GauMsg7TOduQAEEPs4fotpBloCHuKABVhoACglshn2K",
	"vIqwu5R7gbrAky0ACEJBL4k6GFC3T25c6Gmm5r0DZ6wVH88IdNi/WPEFpNiCjnMPXFExAre61VjJiSwQ",
	"j+/GdR0ECRsgIvDGQR+XnlumY1Ea3F4N+sAl2h5Fkckta1HXoV4tM5ItAfa5lVKEHBXoi1J6IZM2xkce",
	"hk6PwyuHAlFMwpAvVdz33qf2wa9CD/T526vmydHD/j/UrkXdiairoyHwkXdxuxji3zWTcPHxEvj4d8T2",
	"9fk7pVlWa+LcLibsq35vBdjOGdP1dfcsNasvXmdmVSiV2gfvP3/78eFA/fNllT+PTxLKMU5aZiqU3ZjY",
	"Y8Y9WFI9mpyANt9vINSDaTZepPfPU39Jhf5Dk5fnN0d2si13wQ7iqecugI1uscXWkXquv0QWK9ICQ0SB",
	"S5x7cHPPt87ZJRhcppbl+OjkpfmEgws6ETeXDlwRcV1iYwtScZHlDSxRnA1DbSVS+mXHej06BZH2ENzN",
	"EQExaeAO+sCBPgXWHJIZssXIb+7ZgCGxQZ+Nm89E3mkeNziJutJi/wa7/gA5CProTGtbedftD4EsAc4K",
	"7knW2sQThSe2wbjBCn1ExNaxCrw38bGwn1vRhrEHz9fq3mUX/GuJPkQruk4WVlezuu8uT0H3CkDb9pDv",
	"N4EfWHMAfTBuHL85aR21jlrH40ZuvwtrgpeGHkMrUB4uTUaUh2bDWgZtz5pjiiwaeJrVVr+GPN/p1TVY",
	"uDZymgC1Zi3w9cfXk9cv84ZgLYMJVPvRDMZaBqdwCW+wg8PzJMV58qLAwT5llEDH4ZRYSiWwt3R9H984",
	"9+C/h/3efhFNal0TTa6nI6YX8VWcBlaosDPekm7PWcvgks2nxsASTnU49yHHk9cRr2AYztC1viCaO6Dl",
	"/N5nzBAfmS/KF3Upi5lGN5qzyppeR5xJjfumoiDwg+XS9agwKUnMFdEg6xppcJfc0pslgkEFTDFybOBT",
	"l4MshDmVlZrAQ1PkMa7tw1n78MPgEtiu5XPRjJXlTYj9VkhmSIdugQLPQ4Sqhu2im5SXi6teuXfIK1VZ",
	"KRlXL1WTc/thRRv52EP2KiTLqquSLKtXJ5kxcedLHdfxDlpfDvhKI2JxYQNSCq05sgXnd351HbE/fE9g",
	"ihZ+mc5nyyDiuh7MAGG9TGZLlSOBngfvQ7J72FqB7F73dEWyCbZKk00YbXqyTVweRV9pAJ1I00HnkErL",
	"9w3y+c7yAsIYFqliYGcEPwJDJmhw6Ue8T2nGj5Nr5vxiitdi/eJmqvF+CnVm5k8dd4lhFjB9glTXgzO0",
	"Arx8UXNFiMnapWHmh3TqoXbt36wwhOvhuxXJD/yb0qQHjDY92XpB/oP8UrTKJiEdkznyMEX2JaLQhhTq",
	"pdqF/Aqi8uG1yxpnd5/Uy0kXj4gH+4Lu395CJ0BgCbHns5LERp4oxpVH2CVcSnHcGecpfOoFnAUsP8sh",
	"7V2KFnlTHBE/CcejmWssTe1FnSom+WhtF2jhevfv7qluk/zfASQUU64YFQXB3qB9uQ+w0Oz43FDK/rph",
	"DeStqKg+4eV0q7owLqbiRpRYV+j7roUhW787TOcrLO3Kq7WAX7ui3vHRkTpG4xJV12m92pBOi7gmZ0L2",
	"xTiLaWqOTzbpoGVCCSdWMwipn8RktsatGzey0Ys3bjbn+k0PYK1LON1Ytas4Q+96F3KmuYJrecn43VN3",
	"sYDEFm4spTjkZI2wnT5hYy817BDYfLS8MrJBqHMTmqcSKideceISPkjz+DbOGwqKDcSWhqqg3oxShfa1",
	"AKq0Uw2bKoG5SsLSS1UOk55rBxbtaQ9p4Q0ErkQZ0CtgXWRbE9N5LP1KC+dVcfRRGLEZ9qnH5/n5HYQq",
	"dTkgyw5iLaxlm6sGOQ3V6x2ImgYL4JfnBBwuP+ieNcEMEeTxu9ol4NRDUlGtrtCLxMXMDrwNuQLn28aG",
	"l1zjLK0aGQOZqc9Ca5iPi/Ug0v0o2iWsTtdg62Lf2Lp7KL4QsA+kTTh/Mv/873+y6un5jMaCqXbumo07",
	"xsHHw1/Zr7qScTDXDL6itTDFikeGQ8VD/W/yBx8EBP8rQFxQwotFQOGNg56dhTHjp/45bXU0u6XH+jeN",
	"Wh9S5Kv+JOqjlQ/9of4FjvLhrHPRGaV/7Pfe9duDs/TP173R4HqYKT3onHeHo84g+SInplqz3dJavWq2",
	"VL7BkDBk3ELscE+ASMdoQc/WuNNYufYR1uQUQS5ci+nEPm9NnDRNYDG+EPhoCb1wB0ciXQb+2avIoNLW",
	"mlAiYS731QvfGMECkgPWOp+CmF71BUzeBi14uCIa07MrrDOGZAB9JghHBof+ML9D1qKZabGw6URVBnd1",
	"2lVOglwmycKGa0ayT4V9cXtQCT5sc69amo1bgz03RdptoWXXZNRNuTyoO9Fw/qi67E1tVnYNeFMolYbJ",
	"3XqzsLrh5+xE/DxHdI48sUuxDyC4WVhxe8D1AHFpoV046kDnHZSHfTYmuQh8C+z1h9E7riZw8BcEEJ0f",
	"NQEiy2Of/S+1Wvtr7Au8lCZw09kVjeV7XzGYc4VUae1T96otqpXRyaoUZU8uB5MvpWxLPUTvXO9LtNYX",
	"UUWu/rIYRQUjBpft03DAuZpBaE1YMa1WkAbZXi7hV7wIFoB6kPgL7PvYJYzboOF9G5GQ2y0N9LIgO+qi",
	"93aZzpNnHBCkSpMp9gER81aOBHEKKm/7suyvh93bDveX0xy/3dRwwRz6YDjo9j9KNzw7l/dmbU9kQe1W",
	"4yU+Tv0eY1u0GsTIxv3xvQ+kudW5F3uOLYuQVBJENgGeguHggFGJFaN4Mam3U59JCtpVC0kdmf1UFxI2",
	"SaKTEyip8dcj0uzguvJ7SvVaUM98w7WQtj9t6moIrWIqg6Rn6SxMTVYF8ZBdNCRP61NZA+wxiWS/lEUh",
	"7MVsUyi6KlJEFNwcvg2bwLdv5K2x+qWx0LvFaCgqZHKMXjFCsC7ViZTTKsrsj8VXDZPErs5bNRt3dyYP",
	"WP2MlGNleatFnFx6Pxq2rWp3XXnL6m2/KadW7fXNKp3JTSAOSej7eEbKCBDJG1z1vdT6pAS+cg7Labdc",
	"QpAVWqJyucTA4BHlQF/nd8t+BjaaYjmU6+G7g+773MOFt1TxTGF3SX94EEUOUA6UdXhM+8okE31AX6GN",
	"LLyIH0VEtk/GlnTPQpaILa0kRwpGeRRhe5IjPmHb5Ni6Ej3FWxrbOW6wppNuqJ5nMcoe82RLHQLq7tYc",
	"ABGbL8IMXCI6d2013kz3atI+Oxt0hsPJab/3vns+ueyMPvTToU6MxYaj9qh7mlfi7Jde+7J7qqqL9FRp",
	"pigrpVSLUyIlBY27aPdsEMNIeF9IFMUSVdHRhPS72UpNdSkxLDETq6nvb+5Bl9wiQl3vPtblp7TPrxLK",
	"USHYbUqZHxmPSo1Y2pqiimeIQqzZc9c+8g6mHkbEdu5D2xJ1Q04K2LyeD+CNG1Bh7Qznx5cqSePeFIYU",
	"0cJWtmgWwHmbNDa/abYn22nXQ/O+lN/bw2H3vHfZ6Y0mncGgP8gpZGhBbN/rQXvU7fdyGgnLGZoZdC46",
	"7aHho2hVdyQMjTa+0NPIHM8pLAG+YGKryvFubzhq9047uihOyW882FKCMLXXHKpW5LHS1RWrKiRAOGFR",
	"4UrTH4q/HacJ5LNKts0R5uoxOBYOkcD1wPx+ibxb7IsbMCVHCYG6X4jobOSKSE9UxQc6HKDiQB2HvdEv",
	"Y+hZJUoCcZ5qnYqwEimmlNpLGx0oT2nPy0/Swaoi3Zc6mO7ZVoazWmymYnPhiu3qJqZ7lp4aXYfSDX0t",
	"5FVxZc8gD33FPmv29NakQTj92PGFcwP0UEL3xPmEUO8UttwEiFgu48qhD6B42xBqYRNed+w/Kzi3/fX/",
	"2dsfN8bj8fj//L8H/+f/A+xfZDz+Nh4/jMefxuPP+Y5v4Xgn1i0y+m+Xcd1VV4DVMSGdffvez4q6hWCv",
	"5mygOvSq0MsBe9iZjvIzxgZyU30TjBTCdCNpgbaDIbcaRhzaWf4IWHNlOSyFTK2TcgzoFb10JKSjMYYB",
	"Cdby0Qkby/HPSZJuYvVGugHM8C3yJZeHbMW5iCbXynen9I5v2wjE2lEU7MJ//FfWxbTAwTQ1/hx+MjkN",
	"a7koJZuq5p6UIng916T06PPdkr6UeIaZYLkemg1HiadmOnqyZ4475R44DoCiJrjDjgNuUJXDKHUx8vZk",
	"c6ZDiZeZwIjaMqeT2m7R5KSCy0XnstkZXNkjKR+CLXqIu+vc8q5faZn7w1jk40fGIvApW2nJLqsGI7nM",
	"/KAXLxmxDwIf2UyktD18K3y4bHh/BFxBoUv8ZtLjCLj86ERC3Jxiz6d8i6XPmyR6XN+EGT7eMkBxfRH8",
	"rh1aUHS3mSoO94dA1PAVq0tkWIwCLYLuFKDFkt432Yg8xNkf4oIgXTdzopZhbHRHqmBrBEeTf7q6/kSQ",
	"MYmo0ANOjWIo8KPu5BeptRBtLnlp87qEXS/DVsusUmSpXO9pgdqMcu3Fi7bOna02nue8nRnKej7cmeYq",
	"unJnqV7v8tI0+GR+tVUYxQJVnPT3v4LWF/1LRXb8LeVX5WRIyTcA0vDpQPIB1LbFnaqSjiRyEg5Jr9O3",
	"Ag/T+/fC868Qvqnia5giqRf4FNltStmPa/rZy8YmMG5t44eDpo+cM8I0vLVOClOj1c4L80DWOzbM7Rac",
	"HoFyRxUySIm4vHHtNcAjGtg4XuQlaYaISrhJ+FPF8JBV99DCvUU2wAR0Lt+D2xetk9ZRk/FrQIkDzNk6",
	"BO0W0ASoCM0DymCT05AdOniHKGwCP+AaesYYCozomJ+jkrOSIxSqk7PWnlEbqrZPEqSutzWSo87fDXeJ",
	"eJGGayosBBaiVL78Bm4yD9jZ9zDqI7jMNsKLKNxwWV1yMtplnhY5HMJEDiGjSH7I2htyDUYJzWa+KUS8",
	"GtAaQ3SvBVIfB9e9Xrd3nv0QPyXINBe+G9AYUYxvBLrkFjqYIWetOPeaeKDJltWQgYY+tfMdltxG0Pu4",
	"daCLfJ/TuYbUC9UZtyDXi9avNERJrzP6uT/4adLtjTqD9+3TzuSi2/tJi5n8oldFJc76P/dUsMRD0ADl",
	"AvtUNeL4m1wJNimZDsCCG+V1ljSllMZXRLySgMQGU+xQ/jQ4aQoSxhN/beOV1iajjZ8B/R76qvH56ZKp",
	"6y0Aniri/8L1EOCRiImIVxVq3aE/IawVnXcv91LthJU0aVACwieAjzeM+IAIxZ6wkzExYwY920E+v7KX",
	"cIYJDF+2MCIhFXfIi5NGKvrrRCU2G4VVfZWVXLo02fFEJVBpAp52F/o81OtW0MkbNqJy+2vM4+NWw3sU",
	"vrd0tBgdvkXHWVjvCOgi8suBLYkfA8jCK2ErQIsaf0KwhYxdRcBF1co/iNHEsUmbOHYYfIkhlANgFlsG",
	"EKomia0AMdHBE4JRNURVBKRq4ikPSpOxR2ts2mF0Jie2NEL1wMtBKTfmbAuhvHEjOolrVz3EPJ78pgJa",
	"dKNshb/0XDuBHUFQFjJuQJcBNWNGea/fXmjx4yEaeEQOJBcnoq88oBRCOJEQ8HmgWcysBqtJ+JXFaXIF",
	"q0YiZ8SEUxEFmqMe0kQlN5uQeSPceAwyxuMiS/ASeohQ00tvRQ/jqdYTKaKKyvGn8LV+OCWcstaYgK4Y",
	"oQV9XgjKzdMEmALLDRwb3CBh4gSuF33u2tq6PqaouKYydkGmyRiTYzFKTQGfZ8/o3o2z7t0qFUpHOjU9",
	"/2GVEyS8eYQ/RgrsiU6jtW4m4KBuBRXLpXdAggLFPXrQGfavB3q/3uS3Qee82+9lfh52Rx2VvERHBvXD",
	"9hL2hbdJsocnZHgSRnVc9f6KnA9AWL/0VZa1fRhs8niXmfLM9JbmfMrnbFRLbzhjYxqug4A8A6wOAlIR",
	"p64fWoS8gFTH6CAgeoCy1nYfnAM5imrALEjPyYsmHcC2wpen+zDi0+CNVhlJFeBj9n8LJzQqMhFBcSfR",
	"69tauWsGrnEpy4PYhEwDksOwiluBcNT4E56tYXzJitshqlZ6U+gCVCZ8tWyd+XRnoJkYQjksZrFlAKFI",
	"lbsVCMqmnxCAUhWyXf1JlGw4A72w+50FnjKAcrBLo8kIumTO4y3BL9XJkwIxRUtVSIrqEz+sXwGdmfTS",
	"Gpymm99lyKZnugJ4Tag0wHir8M00XsN3Hfj6iaTlFQcgKq9AfiZVeob4dNO7u/PSM9xcZy+W34PJXrey",
	"E5NdPOE+rEH8+CAuC1gDDo2wpdsCK31iiNLqwKSV0EgNGKS7DTxaDW60GGQj3j317i/cmX/uucFyK5DT",
	"dPOEAKRZaqrBMWpg4rgzfzLjTZSGZ3YydGDV9rG74NXNeWko56G0DLCvPHeKt3T1azt6LuAO6VkL3kvZ",
	"yGoAlySUgHjYzx8E5FfKcFaAeQazRUC/RNTD1mMc4omengPUEwStivWFaGTl01wlIh/tyZ7+AHBPzn91",
	"vOuhWxLwj3K4p/p6RqBf94gPwbj6KZ8kpBz0/0BnfXodVoZ/2RM/+TxwK7hPdfGUcH+maCjxxjRv/6Uf",
	"brZWfxta5S2oCuA0/aVxa8JfAVy3CtQaonkQXRGc1VGpO/xjIkoCcgUo5oNQ99ahWrjnokBh6Uh/yfhg",
	"oXNN2bh/9urBwkwPxYuChxV4E0eew4kEMJslsSgItD//Cd1rgDz8AK6CGwdb4CfEc393eknafkzFjNnz",
	"/fkBsk9evTp+829k2T488Ofw5IBgny5fnRzvg71P7YNf4cHvRwdv/nr4989/3Qf/2Gv9Zf8fiQSK/nzy",
	"Bd1vMrNE4CNP7yp/Lb9EWT54pnB7gUkqReFJYqSf4MHvnz+JgRx8/nbUfHGcTDQYdliUbFApKNch5Xmd",
	"2V+afZjIS171tUGcIJ+ihSZpejJZevYa+KLDTiJD+xeUjk3y4vi1LthQ6/NfD5V/yvmN5nnS+vyX8DdN",
	"MflT+L/GmsoyGWDGh1swKF4mNazXL3SjUmhTaGpNDvQ0ic6LcCMoF2UVxCSQoEGKOZ9XtWN75bhKpV40",
	"RDnGlMvOTLlmmClf9Gpjy03ryEPbxxmBUtEZU2kd1WN8xaB7qdiNBQkhZfREcxCx9x5CnDmj6Cttgv7w",
	"wEZLRNjd0wLt2AtQNMAfDPlN4BIElsgDDiYI7BF0x/8RJdvcb4HLwKeAuBRYLqEQE3CLPJ6PDRPBZrEZ",
	"GRPQXi4djERIGkBdcCmjM/aHyGffK0YUCp8VhGHRZHhIGVuoVIyz6D5qTbQhzsbjAxHljMc0+/YAouiH",
	"iafGjpMbyewL8ghyZPJ6/cmihMT83geiApA1wAWb8D4v7m9vHkWnE0t2WjCbK4SL29sfN1KITvapmzvz",
	"xW3eiFsMk1qKm8u8AxMRj7RvwUrHuFyRv6PQm6H1sgeETZjew2ljvIpKDNd5YXzjF0di0KsGZBW9TVx/",
	"67m3ObU/PeaG3tLW0+56c7izHb1VHukWSF1FOdNYKpKgIY6g6YWLmrRCja0chs2TCeDGBAzn4QNZTMD3",
	"Z513P56cANEueM8n9XuuBzpDNxgS4NN7PpGlQKomwOiKfx+vFlaUo1WJNJxNnpjsIR3KzvDkpiDTe4pt",
	"zGEsBwGpmteKz529ahzJXKb0wyNxoSumKUfEZkdoUVjDxPNTdnrkpllFxOahCrXquTB0yioRZPTsxodC",
	"/uLlVqb2KbkQLyCbyzPm0coY4LUKku2yImYc+Ia4q8O561FT1NU79uccLpeIIBvYAY9JmmBVKkVaNYdY",
	"VZOo+UVh4VegKj/WaSLIaQ59a8U39atFNk0vPw184KESOZfLhC5dOzOcevjr7gZy40LP3kQ0TB7SgjUE",
	"BmiGfcoTaP4rQMlomLoOdXQZ+PqKikKiMhaaVLKeNccUWWGg7iJ++PTqGqh1MjfVZnjcBFnaPK6JezW1",
	"f3JpMJDw7YH98+T1d3/+7Z/j8V/H44NqOpyNpbyK1h2Ihd/11FfqxFx7mnDUe93Ly+tR+91FZx9cDy7C",
	"gDRT7KBQgmCzoQgPSgbKsHUxu4YpTJgNAw8fsEMkK5xphzQJPG0s6Sn+iuwyiz2HtwjcIEQAryLuc+yz",
	"fRVlMZAC0npLPR4vv108sP/u8f++4v895P/960OlReWUGlc0Gvrml3Olaau4vPHgTGuLF3CmZdHaBpWJ",
	"OCZ5NUG9BYnQ3VEPo1tkg6nnLkTILplPUuTj3oh+YDxOHVWcEANPx79pF47Bli0Yu7l9LFjN5Ni2TbFp",
	"OcLkQmZVxoUajZLnIQol+m0fn5HIa1IwIztXu5AZXOGmCtcpXpwFJHiKfMZtYmse7jI/nI04/4jkGltg",
	"xLZSqN8LkzJN2d9RjPcE5UKpPCaRrwm0b0WAf1+G86IugI7j3jFiAugAi4koMtlzfxj5CfIg+H6wFMyh",
	"2BY30PqCRBrZ/G18om7jLJEm/BRo8Sso3fkJNIe+OJhEEeoCgu5i3U1SCSDyX5XXKT6Zuj60kGbnp7+E",
	"7MjTZHyIrKqaGP8q1wk6X5fIkl9vULgNBa8rdMqCEPAF3fvcB4ebSP0mDwRHZFA4UabcFB0dvGm2xuOD",
	"ydtDNdHNt8T1F85ONPbSZozsompUC8cnPxbZLvb2yyZ5C6NTFOqgopJhUj83SoldxlMnOaqV3HMKlf85",
	"CcjiXJ/6aRiVsET3RamHZmPpQMqOlHcBsXUp3MzQjvJa8AzoMqGwPHJkKiDezp6/z2/8sTjVpIMWPyJv",
	"IE+eIvAdi2ygPzxw0C1yQKhttzDyD0Us+UCmwWuBMUmmigM2msLAoUpyakGHeornJuCSczG5EZOhz0HG",
	"TumeFvLsVy7hcolSFhXcDk3iBtwgxyUzNnMtcM0R5NzHGGLX8BQusHOfUnv7lfdPaf5Ckjsxhs4U3z8K",
	"hjI7ePlBElx28Pnp0DhBkoXV6wqXrpYZiLdsK2Y7rwcXLZUtcD08wwxuSdBGaoBt3DKMYtMlvEI2N3Mc",
	"zk0cNkW6z7WTmPlzePLqtUaL+aF98uo1sObI+uIHC4WPi70KCZijr9BGFl5AJ3bughrjwOuXzcYCE/XP",
	"pMfb9OjgTXKdJGWb9NTLt3M9Aou1XTNajpWscpJOg91Msihbtp3Jpf+sCX2X0jPqVJJJ3iJ7nSa+K7r5",
	"ccO9I8gbN2KwN8XpydEgssGKgzVKEqmmyOkPJ1eD/sfuWWegC0Cb+dztvR+0dR8uOr3+x35i+Mkxaea9",
	"HzEd6dGy39W8b+xPdxpmsyUz4EfqJ2Uko1+uOtkB8F+ljKf8Esl9SZo5RRpar9w75EnBIrZZajJSini3",
	"DOpzSGyHEbtkdYEUERJ5rK76P3cGk9P+5WW7dza56l90T39JjUBbpHt52TnrtkcdU4H+4KwzSCaw0ozA",
	"NM6c7Etz16dyQDwRU3Y0uvRK6hcewjjxw/v3qV+GF53OVeq3D913nUFPHbJM79UZdkap3+SU/HJ6oS09",
	"GXSuOu1RZnKMGZvyNyffkkqowMSU5Gyu5Ld37UHnsjNqXyTIKthBmViDVZ2dQ5rzDBlLfOohzmNCx5SH",
	"Nd3M936cKCqu3Cp32hexTeOxyXj87UHKpNVOerjEE4VMzVNBuMQdYi9dTGj5GWhfdQGStVbgDEu4vzLC",
	"wx504xWyj1E8i4hOyEhZH4lNLUeY5EtQVUknoJvfVZwOSjo1ht2VEex1pK0m3v+QID5styzfrdCcM6Lw",
	"DCsTwjRUdIR1PyJiF9u9r5KlVxZRcpwzNjdpRb6iq9rIdSFT5SkuMaceKZojP49dvMqsR1qoZr9HCSjy",
	"7qWPnd5Zf2C6meRXwdxNLv7ntJ3ztX/a1g1EEqmZ3FSw0qp3lwgImnNzYTJHHqbIvjSqYEc81wux+avE",
	"SOsa2ZQEhTKFx56/PyYJK1TUQQjXgczYkXk0FF6GycdDXHLiFgOhI2PNEpdGpgNM5JPJ0s8jE+9dctK5",
	"RpRPsira6NIza66VjDWJR0BpdXU0I2NSfk5WHavhcs8ZoPm6CQq96ePovNtxq8/POSOTykh8Zm6bEKci",
	"lREvg1MJg5vCYsRN8ojQKkhUT99X6dGK7kxe6eYsMzqXdFFaDLJ65GOZ5abEDW6axlKXdnIG9MM33z6S",
	"xMfwaNwc0Vu4MuVD7KE+Yh9bJP4dkGBxI3wDeJC6OF/XzPSK3ZgAn79qT0XqU2NwxAl1EsjS3MfGwLDV",
	"rzTR0EEYvTLndrM8l5zB+0uXsBVNzxj7KrVsNuT2gAUrCPaOD14c74vMUOISk3mhiHMvE6nL/Q7Be77j",
	"k76we5/+8vnfe5+OD97w/zn5zEDzef/fLz4dHX/e39trGr/t/2V/PyEFeC6Z2PB+wgnTSi9ihD8j9KXM",
	"AO8Q+gL2jg5erz+8o4PXcjD8X0bSWZcmyj+4gS5Wh0L3nJVgFJ+82ATJbz7/+1j8z8mno4MX0QAyv2uH",
	"w4kxjeUSk0C7MZXRLEQZNp5XbyqNp2UeEEPTK4kjZTyJn7XDkdQYB1S4a6Ltcnyyoe1y/Ono+ETdI/IH",
	"Pf2mTWFLKX2ILJfYhrMyLMQI80XBUBoIjxgQHjFN/ugo/Et7hC7gV7xggsOPr19yXQ0m4u9jxYtTdjmR",
	"/Wldjs0MV9i/Xqzf3FvF5EFdhjnITNiGgmuE7bJmy1+9qeji1VmHdeXtjYwi30AoxzaMHivk2geTpaPH",
	"mR9cn1bO0h3VNPHd8g2n5Km7Z+GuirbPmAA2ZP6YTxaWB0cUUCOx3TJst8p1Q9/AdWfiKsxdnxa8BGVF",
	"Sr8F5VVWZbzV2s98IiuKL3IqRaFqk8k428rhpKOaBdPIuNhnhEZGTsEUsiLbfZmcts8mz4nsRZrkdFQe",
	"rpnktVUOIsmkJrJwGkQCjfgwzBx4OiWV6qkgc7zGF5J48KNq+IanHzpn1xcdbvi6HqY0fOmvl+1ub9Tp",
	"tXunHc3X/nByfXXWTuYZHaYnNHOQD7OeHimHjWQB1eLLUCy/Agsu4Q12MOVvbUVm3FgqigbcOb0edEe/",
	"TN532qPrQdoEmfnc6/c6ut/5D53Ju35/NGn3zibvry8uJmfd4U+TTu908AtXfCXmITVK7UTcIlbkAt0i",
	"jdvRhTsDwnGN77PQEziK+yjNM6nduQh8KvjQG+7DhgljRKfgCyY2QP8KoMM97Eadi85lZzT4ZXLa773v",
	"nktzff98mJy8jx0+Cxedj52LzNQlPp4OuqPuafsi+6UzGPQH2Z9/bg962V+7vff97K9nnXfX58npVedO",
	"N7n6jBBVRW+RbAGUELwRsXOZb0Rs/oRPYb6jZNCpXsSSIuGUy8rEbYv1ZQIHW0q2kq4HbvBshhg6oFB7",
	"RPX4u09Zs6Vy7C9P3rx88/qHkzev9Gw7IvYz59i3aDp6k6BRrM0zYmST+T/KyComEK9skVx3hlLJWPTi",
	"igpeA9ZYidKbqgr+xYPpvB3wCOIEd6qphYlamKiFiR0VJhJHmMq96JkTnRCgLld15oWi2hBeG8I3bwhn",
	"yPref8RwcsuSz7F0aZa99SzFtmlbsK86Fko1s/MtmDayt3JOwE2Z1KvdH1u1Kr9IcYt0Y5w0u7VK8b8U",
	"rcjprk67JM5A9gU0eIzOkOu4IjIMcCDFNLBRzNFSfn9euZhQn4e1UE8N6Ec1DhyXzERdfmiEBvHODymV",
	"0ZiAPRvNPIREe4vAoZiH4GILfHz0l7/8wN+Hem5A7PjYIgh6yKdAMsT7jCo5rEhCDW3wkMz4CP56eADe",
	"HAHZW75F6c2R/I/Cnh8oP6qTPHEg1Yc1YgSRWYl5jiZrdyaazHIn+vjHaKbBHiaWE/j4Fu3nz/rxj7pp",
	"V39NzjuZbSeCUILp0TFF6RBKJumQBmxBZGCmhGJLaDC7vbPuaZtd1WndVuZ7pMTKfOn2JleD/vmgMxzq",
	"v58lX5NkqNccEVFqllPXcZBFXcMjAzZOKyzCdXzqKFUl38VF53TU1744MBb70B+O8r6fXlwPR52BOjgD",
	"4XlDzGYhrMbnmhvSeMekp7NUgqHkWB6ajZkh0VccxNNxZ0CU4u+ZRQOt8s/ayoRUSj29LfmqwZj0q3RE",
	"v0gVHQ1Sw/QpTySPt6/zE6+eFfE01pLrCDxJXutRYV52Uw5vGVh2C4JhFA4iy7BMsL2Noelyf27TFV4u",
	"uZU6MyRUdcdL9tDQ3BO5eSCrCtPxYjDYh0/S2VaAYI6RBz1rfi9jbGQPHsedRWae/HfNql3jockqioGu",
	"l9XVyQOhOTZ1AoSm7V4JcnFCmAJgyRku2jSMdt2OkdXTpL7SkypLV3hTw6MJ6CnPO6iehNxSkc+7SjDY",
	"PJrDoLGxjJsZhRR48YwIcXdMwCkkkVXSJSgOfB522wSxJpKHoVE1vIXaQEZUgTYwCnZrnIFYF503fqlO",
	"vuM5u55m+OtolM3DD7XHeYPnkvRTDn1VPfDWrq7oYE+esaY7K30L5d1a2oSuK/LGurZq9rhmj5+ePVaR",
	"uYscciKZ8vNikrUHSIkTZ3OsspicytzyQiF87fzXiwKAleR+5VA2xgCXwY0sw7N53UKNj5gYM9cOsgJg",
	"L/aD2Nd4jIVcZjmXMV73fokK3cbYL93ToV65qPGuCIcekq3VItb8f83/1/x/zf8/c/4/fURn7puci7mM",
	"MJCgsUIiHR4PGNntQve0mevOHNRaei51b4JpK85CEcWZW68VxbCjjEYz1nQyypRXOIUURe/V5q4IKR2a",
	"OoQjuj5WVvLbRXvU4WaN5M+j9uC8kwj+pE9yFMMnzP2st8wMQuufH9+jSmprlfaf+4OfLvrtM51tJvlN",
	"Y3BJUJFDpczXXo2V46heIBtDxZGI8QGRbZN73ctglzeI3iFEAIxGyS2aEDC8BGoLe7iFWs3oKtnX+Sat",
	"npoorFuZ2Qsr5h86eXdN2EJZv4svJeTs5AqGMvYiWs+q07PVZ4DJqQpxIIh94kgCITGr5JIP65ogFQE+",
	"62WSG5corGfCU/i9LJ7uElgpwzvnUF7m8eom1jsapKimXfZ0Xmdx2inLktj2mvNRnn+aa0ezv8qe5lSd",
	"QEG99mC/7Fy+00f70xaRx/yk1z/rmMdSdOKvLL7zfY8tcAd5+kIuoGbOcC4Oujc83yRMXGupZzFfGTig",
	"UywMhSWjLppRpgQHky/i2gk7dwPqYxtJjhw6PKxvx54h0CVTD/rUC3gyI3AJCZxltmHVgHAhbYYjqcox",
	"njzAfVP+dP4xjbHSvp8p1Od4uoZkbELhqZK5CymFq5/Lqyf20z7hTE2m9FjSLPrmY0Sa8+2te79u/9ZZ",
	"c7HyLlXDRRPuEs1hnCe9WS4hyKIt5HluDu8tyEvOWIdVEReNh2jgEYHmU9HiWzCndOm/PTyUXXhLq2W5",
	"i0PbtZgwdsh79A//xIodJD0RNVYfG+W60LECTZnsxo8iekMC2EUXvzb8JIVARsupa6PPmR/Uy9Fid7WD",
	"2OwG5Atx7wi/w2+hg+0J9GbBAvHopTaCtoMJmqCvFkI2r0BcOpm6AV8a6LB1vp/wkGUM0EvkLbDvY5dM",
	"bEQwrxDtT/R1DgOf8h+nEPN0Nh5XmGI5N/CGp8ppNBtuQCfudML9KjmVeCETTiDBb4g7gX+CtxA7bBMz",
	"iiGFE8f1ffEloHMGbo5+BiD0FbJ2fK7TjwbyWZt1j0LsVBW920S+TuBpO3VWOBvdIoch4GAKLUxmgKMl",
	"TPSZXWlMQIfMHOzPW6BN7kUYPF1VpY7jWtDBvyMhA3JRUfqpqqgQvpAtmSfpc84noavm+qG4aXm8Ww5G",
	"IpZudjOH21VuHMD3lW6v6qax0o49DdNAQQKgd4OpB7174CMPS2rDSYKOS2YyTQn4L77FU7lV0zxmtpEs",
	"o2Wjm2BWRHFm1FSGWs9gj+9q9iXS6N9gAr17/SQXTWZOatM2iD7GagUfQMBjoHLQiAeeUbJ0kRXlXvz+",
	"O9cpSlCMCbCgg4gNvVQeMssNRMUw7hFD5dSDFk//kvhAxwQQSFzxA7+FnIBHQAbC3Za1hH2p97gVqbgI",
	"QEvXmgNIwfXoFCywTfBsTgF3/P5vSAKGheMmOH7zw1Ez3AlLz3XQkmILnHto5noYxvTLTcgYT0YVnaMx",
	"0RW7gdaXO+jZnB+/R9ADLkGtMeu27ThR+C3oIfD6KBokQ2ALXCC4jMftITBu+AsEPWSPG8B3BSqJCxwE",
	"l+PQsAREMnPsA8KPY8798bNw6SFxwzDGnZ0NEHw6eXkwdwORvR56rBHWwee98PqKjiK/JTHDbjG2soe8",
	"5L4Yyijyb8e+eH52dHR0fMD/b3R09Jb/369sCt68efPm4Pjk4MXx6OTF21dv3r5603oT/ufXFnh3z99a",
	"MfBaPGcAlePkzTfBHQKI+IEn9+Qd4q/OLJfcIo+KpZZp1D4N3p+OCXjx4sWbeDx3d3ctjOi05XqzQ29q",
	"sf9nJVr0K90HMmEv2ze+GNifQEdeB/xP+Qc4fgtOpcAV7w7e61V/2P0f8Bubob3930Qj7D9xsYh/+5v8",
	"FP3Q8lH0qHmPt9C7vrjY39cX5Htg74h9VSg7KaJshihrx53a8D5BoZDJeCe30AH0Nuw2UUNkhaW3TcBp",
	"+9saA7xt0Vv2V+74RKnARxb4Czg+OkqP94VxvD9j8uIE/HaOqMjkwT63/ffYQaP04rzvXnRG3csOmNKQ",
	"FlM1Mf4pjYi+7vZGr18Ciq0vPvg72NvbE7/sT2nLvvuAZ/MzSHndfaCw/BZ4cbIP/g14qQv3LiwUT+jh",
	"IWizQdjunc+bZ3vr+OhIOfz8VlRAHG/Hr7O7Lm6O1T9+/fLlyx9evD6KD5sbNHU9BK4J/ho28+aHo3Qz",
	"rVXXeU9MB9jbE3N0CI7le5V9cKASVAR11hCbtLCh75SGODb2U9h4acTGf8NbCH6T2XBl6mFW5BI7DvYT",
	"2ODMwIL/Dv4OzFVydwL4e/xri6C7dwF2bOTt7bPhyQfIe7ITMT/7sjH2H1aoJ6YAE8omQBYVMyBHzydi",
	"v3XDmt5LzcSrgpkQemjaIu5dYvDyd0DcO/B3kChVMF6F/OKRE/euNUO0w8AnftvbVycgOQmyNPtjzzTg",
	"18YBy6WLwlJc3dO5S+Iha9dsbz+Dy3NET2MUsAL8uuC58y7hconJjP/UJTKfHufTRO46ZcYYF4n9JDMk",
	"kz8KLmRM+E1W6R4TfTF+CDJWqCnbET+z7saNb4wXeTj4xiNWPhx8s+H9w+gb4wUe3n5bYPLw9puPrIdP",
	"rW+MC2Ob+eHzr+PGOLSsi/rcnuzcwXsfoK+MN/SRLZmLKWMrbDzD1Ge8koOA7KsJeGfNMQGivybgHTb5",
	"1c175czO78hzD5bQDl/b3blhcwhac8HshRwiZy2jACMy7SskYOaCYMnZjrAuN23JH4/1fOQ+I41R4C5F",
	"26KvceNXxnYF0yn+Gr5aC2UBvECc0d0bN65Hp+PG/t8Sv4+JYEiF3qIFeAYX6r4QyIikBy+Uz+SUBj7i",
	"3OoejJ7JcaFqTAQx+yKW6dLDRLBKWWgJA5/a2xJ6ftzTDaONM4yMdbIstKTgxqVz3i+r7NI58qKB+Bla",
	"GGvtTqc+opIVfO96QIrQTTBunBwd/8CukuNXo6Pjty+O3h6/ah0ds5kUkPcB/yG6jJbQZww+L8uJcBX+",
	"/FUTsPZa0caCt3DIZZUm911QWUEI2JUaJlUN07DKLSAgKnYFO9Ns6Nlso1G3O+wP+fbb29dwwa2F+zt2",
	"HMi3HSIH10Oh0fkZ3RzGxBwOwmyZh+eOewOdSZ9T4R8ykg6VTtixskB07totNh5xFjX5ESCIAr8xnpRN",
	"fyv8x2/hmGQUBzlgxAagGyYb128+9aa8sjIo1/JbS3H6seGcHDr4hsnEnL1vzenC+RP/V1h3n8vEYxJB",
	"O+zGXyILfP/dLwffLQ6+s0fffXj73eXb74at76a/ft8CF/gLusM+4mIVm6R4rQIfyeb+27Uhx+73Pvj0",
	"W3fYD/khkYWOD16ybZ/3xoSr194eHv6va8MDQSTXH01db4ZaBNFDuMR8ZdjIWCkhswiCD7Pt89HGnYwJ",
	"2E8YUERFijwR1s7hor/UY3MoRapWcWxHa5BwumMdcHI1Ujo3jE9dofAjFFrcp0Mo+Rv9JSLCfHIl05aC",
	"c0w/BDeg780gwb+HmsPAcxpvG+ESzzCdBzdcZHOXiBwge4YOwsSnQoOV0Gma7TOgfdVtNBsOthDxkUJZ",
	"ewmtOQInraNM7+yOgvwzx5es6x9edE87vWHn4KR1xOe9oaiBckhoNBthdtC3jaMW6/Gh2WDjgkvceNt4",
	"0TrmRCwhnXONyyEfLmaNtVzPmjOhkj80hkvsH96eHIo0tqc8TB+vMUOaV//niCrRPmTq21R62gYnRPzV",
	"tRtvG6dK00Pk3WILXWCfniZ65KkS4AJRbmf6lE33JDPk8hx0wEesNDt1Q1q4yo0rFtgOxNN7dnC4Hgek",
	"69nI4ykeEYqU0VKEh3jZstHt4fGLE64dCNOgc6Vp423jXwHiiiS5xLypd+wHodLMjafyFERXeXzQTNlZ",
	"eJeTG63ezLggIgKIsHjSwJMOdJiihUi6T5GHfFo0kNdHZWZ/GsYnrzL52yKw0ky/Pfy7zCb2fWrSozEV",
	"TvkZd3cWXBZchEpCbmOVydNldv8wnLuMKreEM+5GfSazRLtTcHJkmmJWeIh/R+UmeeMkxfEdTFHaWdWJ",
	"LyjMprz4lvEKs9HXUDU9xZ5PxcpHaJDxbaDjuHc+8L9gLq2IIRgPAc7jlZuhtQlQZ0R9/BMRkZmEz9yG",
	"tHTZBcNoOzk6Cm9SJJL/weXSkREdDv/XF37E8VjyDDiZg3sgexK3dsoNMrAs5PvicuULvTE6ktZKTd8d",
	"+aHZ8IPFAnr3jbcN3a1D4YxbtzSXVOPzQ7OxlFETU/YTbpcHUHsFlroBRQvqh4aw5iKfvnPt+43NlNpF",
	"7CaWnTBuL9CMhj96k24ID1tEVlk6nxuotAuZj6qHZkV+7PBb7F/wINDoIJ0H/Bn/fR1cihZSw8llzcLk",
	"/zQCkOhVXgCCVDs6SxlLGh+lip+M6swgLICm47V8j2mfl67Oi2Kb52V2OnfpwNSCoejEzBEcBJeLrdXh",
	"yTWNq2FTHq7INva+DXwW9/rkGN3VkzeLhfWP3bnr07LiLy+bRe0H16eKmPvBla4+tXhbi7e1eFuLt7V4",
	"+7zFW35g75pYG94y4Q2oXEJlxNjwiaLxJhMleQqB7YipycwDevGUJxl4JHG0iJ7nKYbKBdKjoDT/c+ih",
	"GfapeLKnR85AliiDnbDs1tEjiX54eKiRESMjNf3rYqOyKqIQH6KkJK+0OMcPg/BE2L6eIae7Z6JkkLjc",
	"MeVCLirLKRMKAXYuk9+spCwIW9+uciDs5cmxtGunW7y2RtYHUkuTKPmK/VzmeOIFy+BHjbsShx+4QUBG",
	"ptgkisr0VR5Lj8/OiYAVtniQ5UevMsVi1Ld3jG8VfUaEB5pDUsxwGYCLkuvev1sAecnuapz/AXCeAOEm",
	"edRD+U4TCiZVu1e6UZEy+yUuXWbPsDJAefK9wf2haVpR0uXlwMvdKhktE39DGWVI8xD0Xe5ADay5yOPB",
	"xMCphxB3xuNaX4Nqibg0T/W2Wkfqg/Pjk0rxSkX01fTz83Ej/crf1UXl2ioflgTZLvH1me2x0d3skhsX",
	"evzZvoGx64sSZXayLPrH3MbbRKcycbsEzeR6bxSXCZWZHpgJjgyICibTd1r+SClxUlBdHYkbA1qt03t0",
	"qWCzir1J1Hqu8VuWUtlyNXd/kQ7GH8peyhrEa/vrluyv27we5GLLtd6lGyIL09W3VRjkraw/SVQ+u5HC",
	"2IiKX0k3ar32Lal9S+qzrfYtqX1Lnr1vSXRo75p/iXrbhDdi6lIq42eiRi3OveFEjW4cB38bEkY24rDe",
	"7yROI/A4vidl6Hqe/ifKgplRUol3qu5vUBpjooZCcmnbRwQIFRnb90Eo0e0z8UVQELxj/gilEFzOL6E0",
	"EM+VjCYr+SioPW3XT0Ht6cmxtovnZHKtc6/SfL+F0ujiFcriq/ZhqAYvg303XpyaT9BoLsvugFy/htIb",
	"QNSod0C9A56Rp8OWOeXKXg+ld1Ncq/SOCrnV7ZhPDc2XzILzhMxLeh5308i/MSDzqMhti8csLqsyl74i",
	"nkZlfqE0p6jNLxK91KrzWnVeq85r1XmtOn/2qvPEwb1r6vP0rRPelJpLqowaXb0qS918oqb6YUsqdbWL",
	"IrU6HwUUZR9LtV6WvuepXk8tYD6KKvNc1VXtIftVCoOiVmoIpZWdabBsX9ue3+MzUbSn8LxjyvZKeC6n",
	"dK8EyXNEV8VjrBJXcbJ9BXy6tyfH4a6eqNm138xxyoPglhRfo/J6tLI/UqKraL0Ap++F7BG1Dm7ugUxU",
	"qH2UIT6VYCtzGt54DsUsVz0QghTP6+4oc6Ebkz9374aYcn+FEgMzNR1lIJy7dzw3u5KF8MZ1HQRJDqUy",
	"/X4ZWkUG+WrUappP0OtFbWYofgxmndO0i4x6NJnKeaBsxZJngdzOZDbxeZ6UsmdCf6g5DfphYyLninIo",
	"pL7UKq1apVWrtGqVVq3S2gGVVvrs3rXLUnP3hHem/sIqodsioD8sef2JKqlvW9JrpXopUm25/mMptCoQ",
	"9jx1Wtn1K8TQSuxXZe0WQ2JZTkzUyQ6ltDrB9SVmtq/XMnT1TBRaWTzvmE5rBTyX02yVR+M5omtAMdY1",
	"uf729Vmij6d/0L67x6h2tcvcw7n+pVVOP16lIuJqN7uVwGfwtmO7qOYyzA6nq22QPPfTKvtD1NkQd7Dl",
	"OFuGrurt8QfdHiZsboYJ9ycCQ5Ol62DrvrQKFMhtdsWqYd2L+P5QFOEl7rk0mvil1oPWetBaD1rrQWs9",
	"6A7oQRMn985pQdP3TnR1Jj+U030mbr77ontPqtDSFGyFC0t2YlB8xgMQN/6jqUELqXum2s/S4FmF36ru",
	"0VcVgFLnVYn1UsWNdH+PowIt7vW5aEN39mQ0ACPnbCynA60Gz3NEV8fmf6YidOcOUt0ab+gU9QKyBZF1",
	"EBCVbxgEpBZWa2G1FlZrYbUWVndHWB0EZFclVXHjpO9I9usKF+Q6MsYgILnXZJKJLHFRpiwZgkrgBeTR",
	"XCvyunxmQsWOIVgHBj2Gq8oSRTBUOMyKGPyPFiHYXO2W/LDuwRiFo1g/fMWV/KS4+l9FrdfiQi0u1OJC",
	"LS7U4sKzFxeiQ3vXhAX1tglvxNSlVCZUhfk9dqoxUSP8cUtGrLD5Iv/9kOrHMl+Voet5GrCUBTOjpBLv",
	"tMkwFClSRA2F5NKMfAQIFRnbFyhLdPtMhEoFwTsmUZZC8LrBJ1ItniO6CgpjUU/tabtCpdrTk2NtF8/J",
	"5Fqvd0iGT/rLiZeydBaNItqAIlrG4QdqwbIWLGvBshYsa8FyTcEyMwnvHTjjhwyesQ2BBTHUpdBRVo2H",
	"oOGLJMO7+HM3cGy2iIJShdnUxJEZseYqBL7ZKFGJ6DO8DXPMnG3L3fJG2zWpO76IQ0YhcVeXkbjFEhVc",
	"+qK0+GlLsrZovEjSloB6JDm7mKbnKWVHC2VCRQXmsbp8XQpRonREaAWZhgMgxsH2peqCLp+JRB1hdcfk",
	"6UKslpOlS4HuHNFVEBfKtnEf25Wh436eHFu7dwKqa5xzKeZnSyqFpiirdjGe6ufrVSBleJYbLkp942tz",
	"uxchPjc7UinAS/+GjdzZW36XXtBljf8/DP5ToFyH42V02IFTOgN7VB7sCRXJoYeWjP+297M7aSgLK2rU",
	"YdRfwWaqlUi1EmklJRITmeeuT0H3DFDozRANCYqw2wLdKSAuDVlpZDclfZy0uOCYgL0ZvkVE+K7SOfIA",
	"nx7Asevv85Y0rSS6A3QOKZjDWzQWDUUVIkL5AYJsNlF0jhZNgFuo1Qzpx8RyAptNlMgbN0ce5t6MRJC4",
	"hB4iVOqgxMhI4DiCOvav5PCSxN1hOncDtscjYnzZsQkSrCC/PkpAol6OjS6Hortn300529i3CbbLaOvZ",
	"AnFSd2GBQkJXXyB2EFdahqjLcBlMumVMUZVNUc95tTlXkM8+m5DPvlVAvuSWK63DmOhXomgdxCyUX4nU",
	"OsSkpldiTMqvRXQ8yeYSB1TVdVJIKrozRNEqG6Remi0sjbKLRAlz1k/2teROklkvbqDPhyIsZHiBfAoX",
	"yyZAX5fIomJWbhC47nX/B6Cla83B9eg0LsiYZh9ZLrGNzGhA8NcOq1kpG8dm6VKmkM1d0krOCJwgSeGj",
	"JplRhatds+mpUmEozaaEx6rybCSXlvYEEsUjUkqJs4N0rVqsrcXaWqytxdp6OWqxthZr6zmvxdparK3F",
	"2lqsrcXadRxVU0LW7rmsZqVEs5hbwn1VNDcJN0ihqBq6SCbJ2JpXa7KbYv/W1HAez9W1PKHP1ek1s6Kb",
	"Vp+s4gtbFZ6hV2RmMBXcbdIY0qLqMRxnVyDk2bjTZvbDzjnWVtgPZZ1sq6KZe2OuA+XYJ1bT9bbdcDVd",
	"PgOP3N09qPVoyL39i/x0qwJSuktWg2Ttvrsa/oyOjJlVq1mbXO/eanumwNO36pYJPSwfgyPZulvwCoTU",
	"u+0/ZbcZkb4pQUJYC8u6F/PC1Wyww2Sd2gJbW2BrC2xtga2Xo7bA1hbYes5rC2xtga0tsLUFtrbAruFY",
	"nBSxds69OCMhrmF9FbJXVdtrkoQtWV6TnRTZXVMDeSyra3kin6fNNbOSm1WUVLe3VgWkqJgZRmnNZho3",
	"Ghxt385amYhnYmPNoH/HLKwV0F/OvloVveeIrg7d2NCp6Xa7llVNh08Oyd09inUoWMOmWhWEvF41GNb2",
	"1FVwZ7DvZNarZliMltRq+yTXjlp1m4iK2+Y0tmw/rUxEvbP++DvLgOw1RQEeCbisoZRqzaOYJk2jFNUh",
	"6+uQ9XXI+jpkfe0UsAO50PiBvXvqVZpUqsaXUDmFKkW5N1mod6Pb05vSEtpS+ogqUrqTilGKjCgozf+s",
	"ov8swE+ouaIVhQ8ar/pjKDSN3T0b1SXdSYVlDirLqigLAMa1UXRlTSR9FPUjfS46R7p7msZcCBXqFgvQ",
	"I7U0tFYhbhBGRvVGfXdrdYT5CC/QChYAPFSWrHf/bl3NZ+yuxvkfAOcJEK7Oo1LkoAWi3v3hzHODpX/o",
	"uLOyOruo7oRVmogGsjtnFBa7cGf+OSukaPSyH+sHD7VuYzsPHmrF8NMqhretbNKcJbumetIfh+HxbjxJ",
	"y6ildKd1hcNatJP9vCUVVrajIoWWbnyPpeCqRu3zVHdpl7YM8lZmM6qrxtbEsGhHO9DSbLweZgbsbV/N",
	"tgY5z0QNp907O6aUW3nvlFPYrQn7c0TXw3ysdjNRsl1ln6nXJ0fwbp/7Jlxs7dBnf2Crsnh5KaqdF8mX",
	"ajmdiJlop5YyaymzljJrKXN1KTNxnOysoJk+FDOHv+ZUrSZuylO/kG3RdJSSTNQS25Y71b7Ki56JsT66",
	"9FmW5mcugKaWuSQi1+FI1pFE14B3SnhIjXsFkTQFPzMsH1MwXZGo5yaepjbXrkqoq22uqnLqGptClUpW",
	"3RE60TFD0mPJrJmOn4/YuqsXRg5GtnJbLD13ih20mnWUSc9XsoECrY0sZrKPhq3Usmstu9ay63/C05mB",
	"DGDD36Ek2CoQnkki1g70EIC+j2dsA91hOuelRSwfTHwKiYUAthGheIqRZ5r4sGjZ8EPbpE+ZUlbCFH8n",
	"rF0yAs9GKOYhzM5aGwhwtmFyNh/7ayMEyphWZ5uJebVxkrYT66lLbMYSIR/gKT+LVK4wptSfu4FjsxsQ",
	"faWI2BGpYdExiQt7rICHbDD13AWYY+RBz5rfy6th6sAZwHJiAh/ZADoumYn2XILGJHxq2eWRu8SkA9cD",
	"8b4XQfByi7B5HRMRUAzRJqBq33hGXE8RK9N7Y+7edcNgXqUvxv/seYx27dy9m2Bl8iQEb1zXQZA8todN",
	"yI3utI+NwlJrzV5JjnwFPxsJuUqMv8YhQxZ4DG8b2VVFfxs5zifxuClB8Q743MRLXA6Ja4iwa3verIJq",
	"jatEPORV/W8i2BnR+Og+OFVJeo5+OPGO2mVPnKo7aiVvnFW2QtrzYoV9YPSOUeh5VK8cpd/n5Zezg7eD",
	"GR+lmZT8R3wbwDBvahUU18/+Vgeq4XmUaTlrDqzgoeC6uyz3IeEGNplo6yl4pi0/T1yTpHrP/kfu2dzt",
	"sFWpaT3X1RLmv2TJHPfV2ghYGwFrI2BtBKyNgLURsDYC1kbA2ghYGwGfxgiYYkh3/QlEnilQy52v9gyi",
	"WA2g7UzvI/9IZsFkb9WfQzyVcbA83bvxJCJH2DUhdD15dxMPI1YEvN5vfS3tVwaOeUB9iicSKxD2TJ9J",
	"7L4BcfUtt+pjiRU3isYZfkP2RA1hj/1o4llaFXf3WsnFShWup6x5cU1sJ4001dBd2xnXgm6h2SKztDVL",
	"V8HguNbuK2l2XHPzpawtT8GBPZoVcg3C6n39n72vi7bJRkW1O9f74rjQnizQ4obvvFIGyXS17FHwsyxx",
	"yQso9sfkhzr7Up19qc6+VGdfqk3vO5B9KXV075qCPnvzhFep9rIqo45P3YMlr0FRPflpSyr3VCcGDXtq",
	"GI+lVy8m7nmq0TMrV4SjVTix6qry1cAoqmeGVFoYS2NHg6Xtq74rE/FM1NzJad897XblnVBOl70aks8R",
	"XR3GsdJY0/l2tdSaDp8cnrt3NOtWf5PnclXROEcm1kjDtRxcy8G1HFzLwbUcvENy8M5KwDrZdwWpt/CG",
	"S4pLWxZxi9zIQqofW7rdPTcxZcHMKKnEO60uzBZiLCmIrCK5JpDxeLJqTrfPTDrdXbm04JyrIosWAlER",
	"QNYTPB9P4nxWouaO+T2VhFiBZ1NpdPEKZfFVuypVg5fBhyFenJpP0Pgeld0Bud5FpTeAqLHJe37LzkAl",
	"uq33xR9sX2RAmsM/P0Rfs88jZ9glrRiL4oewblbIH8oU47K4mrY5W/jCFfOhVAh/Mlf64PpUqcD+NBfu",
	"ytdoSoXwJ3Olvtj8ZDa89ylaKHVTX8xNXHnuLbaFBl3WDX8yV/pZOYBkpfRimStdRhr7VNWkplmzYtYc",
	"2YEM4RAum/zNXCubQU2pbk6vltOQGs1e15Yu2n0BXVexd6iOspSbWjFtOe3pPd/0kHfaluUGhKZgH/5s",
	"rnwa+NRdnLpkimdKZfXnHFQPgbzqrlwHW/cqrIfii/iQW3cQEE3FQUAaD58f/v8AAAD//7JFBPWYxgIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
