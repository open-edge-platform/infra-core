// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9i3fbuJkH+q/gqp0zdivLj0zSSXp6uo6tONqxLV/Jntk2ympgEpKwoUCVAO14Ut+/",
	"/R48SIIkwIcetjVlz24bi3h8AH4Avhe+71vL8ecLnyDCaOvdtxZ1ZmgOxT+P52zIIEP83y6iToAXDPuk",
	"9a51PUOA8k/AnwA2Q+D44hrsHDsM3yFwAQmcojkiDFwjZ0Z8z58+7IK4m06r3UIknLfefWodX1yPh9fH",
	"193xzeXwqnvS+9Drnrba2u9Xg/7PvWGvf5n5/ebS9uW0NzzpX152T667p63P7RbDzEOtd8lw2i32sOC/",
	"UBZgMm09tlvvYYDmiEHvxCcs8D0PBT9h4ppHzmvzgb+/ONHH8v540L3oXh+fj0/6l9eD/vl5dzD+qXd5",
	"mhmbvdxl/7JbWKB3ddErLPDz1aBfWODq9EafE9u4DVN0ElLmz098MsHTAaJ+GDgCGdB1MZ8c6F0F/gIF",
	"DCPaejeBHkXt1kL7iSONV85PqmwUOD5hiLBWuzWHX88RmbJZ693hm1c//pAQrJow0JdqMtvDTv/qute/",
	"PD7fBaoz/Xuqw6PXb9qtOSYxAe3WAjKGAt7O//7x3//7Ce79drz3z73xwd7bzv67v/7tv/7+//yhPQoP",
	"Dl454r/Rn3Z2Ry3w+c9/bCWEp/vLUU/gHFknZhH4d9hFLrh9ANCd4wzFPxykSOT0feb/dbD3du/zt4P2",
	"q8NHnRLRlYGEQC1qzwD76BvALiIMTzAKMrOWniZHgEUu1t6ng723cG/y+duPgo4AQbdPvIfWOxaEKKEr",
	"6mOMjfhjeI4og/OFgNIfAzRpvWv9YT85vfbV0bV/nZR8FOP6V4gD5PI9qsauUKRtBCO6Yyr82/9DDuNU",
	"nCIPMZQpvfAJLd8L6RmNqoE5ohROEZj4Aci33tEWrqBvK6UffcqWptBGIG80T1iqKytBPUIZJA5a/7RF",
	"Lecpy/Vppe7cd6B37Dh+SNj6KdRbz1Np7NtKaX94s3AhQ1e+h52H9dPaX6AAMkymwwfK0DxProWAUoIH",
	"IXlGavXe7aSmW3sOci0UWEm+kldEsH5ao5bzROb6tFI3QFPsb2DZZbt5yjL9FdC1QJAhd+jMkBt6aBMU",
	"pnsw0WqhwUr1EJOphzZHc7r9PMWW/gvoZRuhkhlpYxUoukYeZ3uDh3N/Ss8CP1ysn758H3lqC+ioRvtV",
	"4E/wJjBg6qWE/iwt5SO4QCzAzsYXQO+mYAxGaioPYvMrke6ofCCV1+MXP/ji+dC9QPPbTdwg6fbzhFv6",
	"L6V3c5TaaSyi7gwxzgMPw/kcBsuyZKp2pFiZ+ZRRoWsJKacqLVCjIPADi5LCZ9ADJORTyhuTDS0CRLkA",
	"R6YAEtDl1TsFIplsPx4qJgxNUSCExZAQLpjV6BsTMJC1pO6oqOOoeVPXovUaHRf1I9sy9RIS6Hm+w2/m",
	"OoO8x2zmhwxAQHHxEPUO8gQ8JgUtsDIAUEpgU0wZCmrC7kLtBeaDQLUAIIgEvTTqYMj8Prn1YWCYmg8e",
	"nPJWKJ4S6PF/8eJzyLADPe8B+LJiDG59q/GSY1UgGd+t73sIEj5AROCth35eBH6VjmVpcHc16AOfGHuU",
	"RcZ3vEVTh2a1zLVqCfDPnYwi5KBEX5TRC9m0MRQFGHqXAl4FFMhiCoZiqZK+dz4d7/1T6oE+f3vdPjp4",
	"3P273rWsO5Z1TTSEIXYL+r656Z1mRv/qTW70UvlzvPfh87cfH/f0P3+o8+fhUUqJJUjLkaztmtResO6V",
	"imrM9AQci30BIn2VYYPM2fBLmJ85x5/z028S+HPgojvsIIAJC3y6QE5eEfn2jf3wgHM2pl9C06JBqeYO",
	"af3+O2CIGPCJ9wBuH8R+Ob0Ag4vMGh8eHP1QQpnsv4i4HnGxA5m8vYqUeanifBh6K7GmLz/Wm+sTEKsM",
	"wf0MEZCQBu4hBR6kDDgzSKbIlSO/feADhsQFfT5uMRNFR3jS4DjuyniZ3GKfDpCHIEWnRoPK+15/CFQJ",
	"cFpyOfLWxoEsPHYtFg1e6GdEXBN/IHqTH0v7uZNtWHsIqFHhrroQXyv0IVsxdTJ3eobVfX9xAnpXALpu",
	"gChtAxo6MwApGLUO3x51DjoHncNRq7DfuTPGC0uPkemnCJc2y8lju+UswuPAmWGGHBYGhtXWv0aM3snV",
	"DZj7LvLaAHWmHfD1xzfjNz8UDcFZhGOo92MYjLMIT+AC3mIPR4dTht0URYGHKeOUQM8TlDhaJbCz8CnF",
	"t94D+O9h/3K3jCa9ro0mPzARcxkzU4IGXqi0M9GSac85i/CCz6fBqhJNdTT3EZtT1JGoYBnO0He+IFY4",
	"oMXsgXIOSIyMyvJlXapittFdz3hlQ6/XgjNN+mayIKDhYuEHTNqRFObKaFB1rTT4C2HezRPBoQImGHku",
	"oMwXIItgzlSlNgjQBAWcVft4erz/cXABXN+hQh7jZUUTcr+VkhnRYVqgMAgQYbo1u2hjx+WSqlf+PQoq",
	"VdZKJtUr1RQsflTRRRQHyF2GZFV1WZJV9fokc47wbGHiOt5D58ueWGlEHCFhQMagM0OuZCPPrm5iXkrs",
	"CczQnFbpfLoIYxbu0Q4Q3st4utA5EhgE8CEi+xI7S5B92TtZkmyCncpkE06bmWwbl8fQVxZCL1ZvsBlk",
	"ytx9i6jYWUFIOMOi9Ar8jBBHYMQEDS5ozPtUZvwEuXbOL6F4JdYvaaYe76dRZ2f+9HFXGGYJ0ydJ9QM4",
	"RUvAi8qaS0JM1a4MMxrRaYbaDb1dYgg3w/dLkh/S28qkh5w2M9lm6f2j+lK2yjbJHJMZCjBD7gVi0IUM",
	"mkXkufoK4vLRtcsb53efUsYpv46YB/uCHt7dQS9EYAFxQHlJ4qJAFhMaI+wTIaV4/lTwFJQFoWABq89y",
	"RHuPoXnRFMfEj6PxGOYaK/t6WaeaHT5e2zma+8HD+wdm2iT/bwgJw0xoQ2VBsDM4vtgFWKpzqLCO8r9u",
	"eQNFKyqrj0U506rOrYup+Q6l1hVS6jsY8vW7x2y2xNIuvVpz+LUn6x0eHOhjtC5RfUXW6zUpsohv8yDk",
	"X6yzmKXm8GidXlk2lAhiDYNQSklMpivcukkja714k2YLrt/sAFa6hLON1buKc/SudiHnmiu5lhec3z3x",
	"53NIXOm7UolDTteI2ukTPvZKw46ALUYrKiMXRDo3qXmqoHISFcc+EYO0j2/tvKGk2EJsZahK6u0o1Whf",
	"CaBaO/WwqRNYqCSsvFTVMBn4buiwS+MhLV2AwJUsAy5LWBfV1th2Hitn0tJ51bx7NEZsiikLxDy/vINQ",
	"p64AZPlBrIS1fHP1IGegerUD0dBgCfyKPH+j5Qe90zaYIoICcVf7BJwESCmq9RV6lbqY+YG3Jv/fYoPY",
	"8EJonJVVI2cVs/VZagKjuFwPonyO4l3C6/QshjP+ja97gJILAVOgDMHFk/nHf/8vr56dz3gsmBnnrt26",
	"5xx8MvylnaltFsEMhxwbBzVv8b+qHygICf5XiIT8gufzkMFbD704K2LOZ/xz1rJodxFP1GIGbTtkiOq+",
	"HfoDko/9ofk1jPbhtHvevc7+2L983z8enGZ/vrm8HtwMc6UH3bPe8Lo7SL+OSag27IKssq2evVTgHkn7",
	"wh3EnrDKx6o/BwauwbXFKTRb8CYnCAqZV04npqI1eQC0gcPZNUDRAgbRxoolrdxhkL8hLJpmo2UjlrEK",
	"X6CIjRHOIdnjrYspSOjVX6MUHVclj0hkY2YugnfGkQwg5fJpbAfoD4s75C3aeQkH2w46bXBXJz3tJCjk",
	"XRxsOf0VV1PalzDTVGCP1vfCpN26s5hZM6TdlRpcbbbWjFuDvhMt54+uYl7XZuUMQzCBSpeX3q23c6cX",
	"fc5PxC8zxGYokLsUUwDB7dxJ2gN+AIjPSs21cQcmT50i7PMxqUUQW2CnP4zfVLWBh78ggNjsoA0QWRxS",
	"/r/M6eyusC/wQlmmbWdXPJbvqWbHFnqiykqh3tWxrFZFVapTlD+5PEy+VDL5XCJ27wdf4rU+jysKrZTD",
	"KSoZMbg4PokGXKiwg86YFzMq65jBu+YCfsXzcA5YAAmdY0qxTzi3waL7NiahsFsWmkU0ftTFb99ynafP",
	"OCBJVZZMTAGR81aNBHkKau/s8lxpgP27rvBdMxy/vcxwwQxSMBz0+j8rlzi3kCXmbY9VQeNWEyV+ntBL",
	"zrYYFXux6fnnDxQoK6j3IPccXxYpQKSIbAM8AcPBHqcSa7bqclLvJpQz8MZVi0i9tvuMzhVs0kSnJ1BR",
	"Q1cj0u5suvTbRv1a0M98y7WQNQut62qIjFU6g2Rm6RzMbMp++ahcNqRO6xNVA+xQ/BvaraToj3qxq/rL",
	"rooMESU3B3VhG1D3Vt0ay18ac7O3ioGiUibH6qwi5d1KnSg5raYo/VR81TBN7PK8Vbt1f2/zcjXPSDVW",
	"VrRaxsll96Nl2+rm0KW3rNkkm3FcNV7fvNKp2gTykISU4impIkCkb3DdJdLoKhJS7RxW0+74hCAnMhAV",
	"comhxVHJg9TkDst/Bi6aYDWUm+H7vd6HwsNFtFTzTOF3SX+4F7/i1w6UVXhM98omE31EX6GLHDxPHijE",
	"JknOlvROI5aIL60iRwlGRRRhd1wgPmHX5m+6FD3lWxq7Bd6ptpNuqJ9nCcqe8mTLHAL67jYcADGbL5/8",
	"XyA288V5FamNelfj49PTQXc4HJ/0Lz/0zsYX3euP/WzYEWux4fXxde+kqMTpPy6PL3onurrITJVhivJS",
	"Sr2YIUpSMHhx9k4HCYykU4RCUSJRlR1NyLybncxUVxLDUjOxnFb99gH0yB0izA8eEhV7Rin8OqUclYLd",
	"unTssU2n0oiVCSiueIoYxIY9d0NRsDcJMCKu9xCZfJgfcVLAFfUogLd+yKQRMpofqlSS1r0p7RuyhY1s",
	"0TyAizZpYhUzbE++026G9n2pvh8Ph72zy4vu5fW4Oxj0BwWFLC3I7XszOL7u9S8LGonKWZoZdM+7x0PL",
	"R9mq6UgYWk1vkQOQPbZSVAJ8wcTVleO9y+H18eVJ1xRRKf1NBD5KEab3WkDVkjxWtrpm7IQESN8oJj1c",
	"+kP5t+e1gXriyLc5wkI9BkfSTxH4AZg9LFBwh6m8ATNylBSo+6WIzkeRiPVEdVyTowFqfs1JCBrzMkYO",
	"T7IkkOep0dcHa1FbKqm9jJF6ipT2ovw4Gzgq1n3pg+mdbmQ4y8VJKrfiLdmuaWJ6p9mpMXWovMNXQl4d",
	"D/Mc8tBXTHmzJ3c2DcLJz10qfQ5ggFK6J8EnRHqnqOU2QMTxOVcOKYDyyUGkhU296jw4OFjC5ezP/9/O",
	"7qg1Go1GgP8XGY2+jUaPo9Gn0ehzsSdaNNKxc4esDtVVfGn1ued1bBjn376neSG3FOb1rP+6h60OugKY",
	"R52ZKD/lDKCwnbfBtUaYaSQdcOxhKOyFMW92WjwC3lxV3koj0+g1nEB5SbcZBeZ4jFFYgJWcZqLGChxm",
	"0qTbmLxr0wCm+A5Rxd8hV/P2Yem1ov6E3YsNG4PYOIqSDfj3/8r7fJZ4fGbGX8BJpqdhJZ+hdFP1/IUy",
	"BK/mK5QdfbGf0JcK7yJTzNZju+VpUc1sR0/+zPEnwiXGA1DWBPfY88AtqnMYZa5E0Z5qznYoiTJjGFNb",
	"5XTS2y2bnEyIt/hctntna3sk4z2wQZdtf5X73ae1lrk/TIQ9cWTMQ8r4SitGWTcVqWUWB718WogpCCly",
	"uTDpBvhOOlW58OEA+JJCn9B22tcI+OLoRFLQnOCAMrHFsudNGj0+tWFGjLcKUHwqQ9AdR7YT022mC8L9",
	"IZA1qGZviU2KcbhD0JsANF+whzYfUYAE40N8EGbr5k7UKjyN6UjVOZri09WnY0nGOKbCDDg9lqDEj76T",
	"X2XWQra5EKXt6xJ1vYharbJKsY1yNV9/vRnt2ksWbZU7W2+8yJs6N5TVnKpzzdX0rc5TvdrlZWjw2Rxd",
	"6zCKJUo45YB/BZ0v5qeD/PhbqK/ayZCRbABkkS9/+kVSoaDz+uDJJR1F5Dgaklmb74QBZg8fpM9fKXwz",
	"xVcwQrIgpAy5x4zxH1d0fFeNjWHS2toPB0MfBWeEbXgrnRS2RuudF/aBrHZs2NstOT1C7Y4qZZBS0XGT",
	"2iuARzawdryoS9IOEZ1wm/Cni+ERqx6guX+HXIAJ6F58AHevOkedgzbn14AWjVewdQi6HWCIGBEZBrTB",
	"pqchP3TwHjHYBjQUunnOGEqMmJifg4qzUiAU6pOz0p7RG6q3T1KkrrY10qMu3g33qaiNlmsqKgTmslSx",
	"/AZucy/K+fco9iK4yDciimjccFUtcjrmZJH+OBrCWA0hp0J+zFsaCk1FKZ1msRFEvhcwmkFM7wQyHwc3",
	"l5e9y7P8h+QRQa656MWAwXxifR3QI3fQwxw5K0WbN0TlTLesB+6z9Gmc76jkJkLPJ60DU/z5gs4NpJ7r",
	"brglGVeMHqURSi6717/0Bz+Ne5fX3cGH45Pu+Lx3+ZMRM8VFr8pKnPZ/udTBkgzBAJRzTJluvqHrXAk+",
	"KbkOwFyY4002NK2UwUtEvo+AxAUT7DHxVjdtBJJmE7qy2cpojTEGtID0En01ePv0yMQP5gBPNPF/7gcI",
	"iHjARAaQirTukI4Jb8Xk1yv8U7tRJUMykpCICRDjjUIwIMJwIC1kXMyYwsD1EBVX9gJOMYHRmxZOJGTy",
	"Dnl11MrEYB3rxOZjoervsdJLlyU7magUKm3AM+5CKgKubgSdomErKje/xiJKbT28x0F0K4dvMeFbdpyH",
	"9ZaALia/GtjS+LGALLoSNgK0uPFnBFvE2NUEXFyt+lMYQ2CZrIlji8GXGkI1AOaxZQGhbpLYCBBTHTwj",
	"GHVDVE1A6iae6qC0GXuMxqYtRmd6Yisj1Ay8ApQKY86mECoat6KT+G7dQywQKWhqoMU0yk70y6XvprAj",
	"CcpDxg/ZImR2zGgv9Y/nRvwEiIUBUQMpxInsqwgopRBOpeV7GWiWM2vAahp+VXGaXsG6ccY5MdFUxJHf",
	"WIAMMcftJmTRiDAeg5zxuMwSvIABIsz2xlvTwwS69USJqLJy8il6px9NiaCsMyKgJ0foQCoKQbV52gAz",
	"4Pih54JbJE2cwA/izz3XWJdihspramOXZNqMMQUWo8wUiHkOrI7dOO/YrVOhdWRS04sfljlBoptH+mNk",
	"wJ7qNF7rdgoO+lbQsVx5B6Qo0ByjB91h/2Zg9uhNfxt0z3r9y9zPw951Vycv1ZFF/bC5tHnRbZLu4RkZ",
	"npRRHde9v2LnAxDVr3yV5W0fFps83mamPDe9lTmf6pkT9dJrzpuYhesgJC8Aq4OQ1MSpTyOLUBCS+hgd",
	"hMQMUN7a9oNzoEZRD5glSTJF0bQD2Eb48mwfVnxavNFqI6kGfOz+b9GExkXGMkrtOH532yh37cC1LmV1",
	"ENuQaUFyFOdwIxCOG3/GszUK+FhzO8TVKm8KU8TIlK+WazKfbg00U0OohsU8tiwglAlrNwJB1fQzAlCp",
	"QjarP4lT/uagF3W/tcDTBlANdlk0WUGXzjy8IfhlOnlWIGZoqQtJWX1Mo/o10JlL8mzAabb5bYZsdqZr",
	"gNeGSguMNwrfXOMNfFeBL02lDq85AFl5CfJzCctzxGeb3t6dl53h9ip7sfoeTPe6kZ2Y7uIZ92ED4qcH",
	"cVXAWnBohS3bFFjZM0OU1Qcmq4VGZsEg227gsXpwY+Ugi/Pyn/tTehb44WIjkDN084wAZHlq6sExbmDs",
	"+VM6noomKsMzPxkmsBr72F7wmua8MpSLUFoF2FeBP8EbuvqNHb0UcEf0rATvhWpkOYArEipAPOrndwLy",
	"K204S8A8h9kyoF8gFmDnKQ7xVE8vAeopgpbF+lw2svRprhNRjPZ0T78DuKfnvz7ezdCtCPgnOdwzfb0g",
	"0K96xEdgXP6UTxNSDfq/o7M+uw5Lw7/qiZ9+HrgR3Ge6eE64v1A0VHhjWrT/sg83O8u/Da3zFlQHcJb+",
	"yri14a8ErhsFagPRIoguCc76qDQd/gkRFQG5BBSLQWh661Av0HNZoLBspL90fLDIuaZq3D93+WBhtofi",
	"ZcHDSryJY8/hVOqX9ZJYFv6Zzn5CDwYgDz+Cq/DWww74CYlk3N3LNG0/ZmLG7FA620Pu0evXh2//jRyX",
	"wj06g0d7BFO2eH10uAt2Ph3v/RPu/Xaw9/bP+3/7/Odd8Pedzp92/57KaEhn4y/oYZ05JUKKArOr/I36",
	"Euf3EKm73TkmmeSER6mRfoJ7v33+JAey9/nbQfvVYTrFYNRhWZpBraBah4zndW5/GfZhKlF43dcGScZ6",
	"huaGLObp7OX5a+CLCTuplOlfUDY2yavDN6ZgQ53Pf97X/qnmN57ncefzn6LfDMXUT9H/Wmtqy2SBmRhu",
	"yaBEmcyw3rwyjUqjTaOpM94z0yQ7L8ONpFyW1RCTQoIBKfZMXvWO7aXjKlV60RBnF9MuOzvlhmFmfNHr",
	"ja0woaMIap/kAspEZ8wkdEyHEl4ljmnFVJAqeqI9iNiHACHBnDH0lbVBf7jnogUi/O7pgOPEC1A2IB4M",
	"0TbwCQILFAAPEwR2CLoX/4jTbO52wEVIGSA+A45PGMQE3KFAZGLDRLJZfEZGBBwvFh5GMiQNYD64UNEZ",
	"+0NE1x2TDIxG5Nvjp8/pGVRTVBh37AsKCPJU7nfzOaAFsPyeAlkBqBrgnE9PXxSn9Ue9xJD5gDNIkSSN",
	"HTUIwyjtF6Id4BsMP1qJS8q9r5KRhIxvrCrHjlySb2IwmKLV4vFHTdjemRljp8pKHIFF4XGTlzxy0MsG",
	"OpW9jX268STTNeKsWaKs2fz/9WD+euTZKKiYSow1ImA4i54PYgK+P+2+//HoCMh2wQdxkH0vpORTdIsh",
	"AZQ9iG1caZfriQF68t+Hyx1wYrtrcVjzSeXSPWQDfVkeJJRkwM5cqgXX7iAkdfP9iLlzl42yV3hlf3yi",
	"O3rJ9M2IuHwjlA166vtTD3UWgc/823DSSaLFaSE3lomYYb4GPpae+z9sZLKe83YIQrK+jEoBW3lVqSVq",
	"5HDmB8wWM/Ke/zmDiwUiyAVuKCIqpi6EWnEi7QEi9eRPtCyo9RJUFUdqTIVoLKBvpeiMNB+XcenFXDkj",
	"lX64ms5ecuvDwF1HLD7xoJ43BAZoiikTifv+FaJ0LD5Thya6LNxPTTUF0S9uQwrLwJlhhpwoTHAZw35y",
	"dQP0OrmbYD1MeIosY/7I1L2VwX8hDRYSvj3yfx69+e6Pv/7vaPTn0WivngS5tlQ78boDufDbm3JHn5Kb",
	"wBAGd6d3cXFzffz+vLsLbgbnUSCMCfZQJA/zedBEYS3nXdS6nFfL5KXMFWGA9/jxkZcbjUMah4Exhu0E",
	"f0VulWWewTsEbhEiQFSR9yqmfEfF0dOVuP9iF1lQbl3heCrWv7xLTWPN5U4GZ1trPIdTI+t0bBEx5YEp",
	"qknqHUhkdGcWYHSHXDAJ/LkMHaQy2smMwGtRZYxGmUNLEGLhtcQ348JxGPMFC9DCp1iygOmxbZpi23JE",
	"SU7sirpzPSqeyIcSKawq7rGl1WexcJmIl2nVGXILlWe5wZVuqmidksWZQ4IniHK+ETuzaJfRaDaSPAiK",
	"/+uAa76VIn1IlBxmwv+OY02nKJchx0cktnlD904GGqcqrBDzAfQ8/54TE0IPOFx0UOlm+8PYX0kE46bh",
	"YiHNvmJb3ELnC5KJLIu38ZG+jfNE2vBTop+sEZZdnEAzSOXBJIswHxB0n2hJ0uK2zMNTXf35bOrNyFKT",
	"n5/+AvIjzxB5PrbuGGKN6/wn6H5dyOTkzBcKONmY5HqlDk4SAr6gByp8AYSphrZFQCqiglPJMtWm6GDv",
	"bbszGu2N3+3rV+C31PUXzU489spq3/yiGkT+w6Mfy3S9O7tVk01Fr+RLtT1xySi5mB8n5a3iMZAe1VJu",
	"AqXK0oJESEnOQfM0XFewiPVlqcd2a+FBxo+U9yFxTamk7NCO4+uLHMwqpak6clRKEtHODt0VN/5InmrK",
	"UUQckbdQJHGQ+E6EN9Af7nnoDnkgsiU5GNF9GdM6VOm4OmBE0imrgIsmMPSYlh5X0qGf4oWJgNRcjG/l",
	"ZJhzIfFT2pygn/8qZF0hW6qiktthadyAW+T5ZMpnrgNuBIK8hwRD/BqewDn2HjIKZlp7/1TmLxS5Y2sI",
	"P/n9Z8lQ5gevPiiCqw6+OC2TIEixsGYd3sI3MgPJlu0kbOfN4LyjswV+gKeYwy0N2lghsIlbhlNsu4SX",
	"S/Ru0Uau47Ap00munEyJzuDR6zcGfeTH46PXb4AzQ84XGs41Pi7xbiJghr5CFzl4Dr1MAv+sF8UP7dYc",
	"E/3PtOfN5GDvbXqdFGXr9Bgqtig9AYu1WYNVgT2qdrJAi4VKsSgbtlKppf9sCMGV0TialJNp3iJ/naa+",
	"a1r2Ucu/JygYtRKwt+XpKdAgs1LKgzVOVqen6ugPx1eD/s+90+7AFAgz97l3+WFwbPpw3r3s/9xPDT89",
	"JsO892OmIzta/ruef4r/6U+irJpkCmisjtJGcv2Pq25+AOJXJeNpv8RyX5pmQZGB1iv/HgVKsEisg4bM",
	"eDLuJof6DBLX48QueF2gRIRUPp2r/i/dwfikf3FxfHk6vuqf907+kRmBsUjv4qJ72ju+7toK9Aen3UE6",
	"kY5hBLZxFmSBmfmUqQGJhDD50ZjSvOhfRCjV1A8fPmR+GZ53u1eZ3z723ncHl/qQVZqh7rB7nflNTck/",
	"TtKrq43NNPLCHSj2nRaXLDXugh2U/vb+eNC96F4fn6fIKtkmucBmdT0rI5qL7BYLfBIgwUhCz5b0MdvM",
	"9zTJSpNU7lQ70st4o9HIZrn99qgEz3rHOVzgsUam4V0SXOAucRc+Jqz6DBxf9QBStZZg/yr42nHCox5M",
	"45UCjlUGi4lOCUIGTfialiPKKCSpqiX4m+Z3GYt/RU+vqLsq0ruJtOVk+L+kiI/arcpcazQXjOinCqnS",
	"s9qMqO7PiLjlZuqrdOml5ZACz4j1TVqZA92yJnFTfEZ1iivM6UeK4cgv4gmvcuuRlZz573G0+6J76efu",
	"5Wl/YLuZ1FfJwY3P/+fkuOBr/+TYNBBFpGFyM5ER695dMvpgwc2FyQwFmCH3wqpnvRaJJYgrnkDFqtXY",
	"cCQpVPkCdujuiKRMTXEHEVwHKj1A7oVCdBmmXyoI8UiYBaQijDdLfBbbBzBR77Mqv8VKOdcX5I6MKR/n",
	"9bDxpWdXT2vpMVIvDrI66XhGRqT6nCw7VsvlXjBA+3UTlroYJ6FAN+NrXJzgQmWwUPjM3TYRTmXeFFEG",
	"Z7KTtqVZSNjhEWF1kKifvq+zo5Xd2Vx17SktjCnvRWk5yPphVlVKjQo3uG0aK13a6RkwD99++ygSn8Kd",
	"cH1Eb+DKVK8+h+bwYHyRxHdAwvmtdAAQEbGS5EBT25NZa7Zt8YQ2ExZMf/CfZO9IIctwH1ujUNa/0mRD",
	"e1GovILbzQl8cgofLnzCVzQ7Y/yrUqW5UCj957wg2Dnce3W4K9PQyEtMJaEh3oPK2qz2OwQfxI5PO6Lu",
	"fPrT53/vfDrceyv+5+gzB83n3X+/+nRw+Hl3Z6dt/bb7p93dlBQQ+GTswoexIMwovcgR/oLQlyoDvEfo",
	"C9g52Huz+vAO9t6owYh/WUnnXdoo/+iHpsAAGt0zXoJTfPRqHSS//fzvQ/k/R58O9l7FA8j9bhyOIMY2",
	"lgtMQuPG1EYzl2X4eF6/rTWejn1AHE2vFY608aR+Ng5HUWMdUOmuibfL4dGatsvhp4PDI32PqB/M9Ns2",
	"hauk9CFyfOJazsqoECeMyoKRNBAdMSA6Ytri3Vz0l/EIncOveM4Fhx/f/CB0NZjIvw81p03V5Vj1Z4xJ",
	"YGe4ov7NYv36HnClD+oqzEFuwtb0kj9qlzdb/erNhDKuzzqsKm+vZRTFVkA1tmH8tqDQCJguHb9Y++hT",
	"VjslcFzTxnerh22Kp+6dRrsq3j4jAviQxXtUVVgdHPHr/dR2y7HdOtcNqYXrzj3invmUlTyP40UqP5AT",
	"VZZlvPXaL3wia4ovaiploXqTyTnb2rFr45ol08i52BeERk5OyRTyIpt9rpk1wqbPifxFmuZ0dB6unea1",
	"dQ4izaSmUv5ZRAKD+DDMHXgmJZXujqASSiYXknwGpGv4hicfu6c3511h97oZZjR82a8Xx73L6+7l8eVJ",
	"1/C1PxzfXJ0ep5MaDrMTmjvIh3l3joxXRrqAbtblKFZfgQMX8BZ7mImnqzINZyIVxQPuntwMetf/GH/o",
	"Hl/fDLJ2xtzny/5l1/S7+KE7ft/vX4+PL0/HH27Oz8enveFP4+7lyeAfQvGVmofMKI0TcYd4kXN0hwy+",
	"Ref+FEjvNLHPInffOMicMs9kduc8pEzyobfCUQ0TzohOwBdMXID+FUJPuNFdd8+7F93rwT/GJ/3LD70z",
	"ZZPvnw3Tk/dzV8zCeffn7nlu6lIfTwa9697J8Xn+S3cw6A/yP/9yPLjM/9q7/NDP/3rafX9zlp5efe5M",
	"k2sOP19X9JaR3UEFwRsRt5D5RsQF/MjSmO8482ymF7mkSHre8jJJ23J9ucDBl5KvpB+AWzydIo4OKNUe",
	"cT3xmlPV7Ogc+w9Hb394++YvR29fm9l2RNwXzrFv0HT0NkWjXJsXxMimkw1UkVVsIF7aIrnqDGUyP5jF",
	"FR28FqzxEpU3VR38i5YLd8ATiBPCc6YRJhphohEmtlSYSB1hOvdiZk5MQoC+XPWZF4YaQ3hjCF+/IZwj",
	"63v6hDG2FhXfXJlyugarWYpd27bgX00slG5mF1swa2TvFJyA6zKp17s/NmpVfpXhFtnaOGl+a1Xifxla",
	"ktNdnnZFnIXsc2jxGJ0i3/NlIBfgQYZZ6KKEo2Xi/rzyMWFURLHQTw1I4xp7nk+msq44NCKDePcvGZXR",
	"iIAdF00DhGR789BjWES04gt8ePCnP/1FPAIN/JC4ybFFEAwQZUAxxLucKjWsWEKNbPCQTMUI/ry/B94e",
	"ANVbsUXp7YH6j8ae72k/6pM89iAzsuiCIDKtMM/xZG3PRJNp4UQf/hjPNNjBxPFCiu/QbvGsH/5omnb9",
	"1/S8k6lZNFo1YFCK6TExRdmIRzbpkIV8QVQcpZRiS2owe5envZNjflVndVu577ESK/eldzm+GvTPBt3h",
	"0Pz9NP2oIEe94YiI80Cc+J6HHOZbHhnwcTpREaHj00epK/nOz7sn133jiwNrsY/94XXR95Pzm+F1d6AP",
	"zkJ40RDzKc/q8bn2hgzeMdnprJTNJD2Wx3ZraskqlMSh9fwpkKXEo2XZQKf627UqEZQy72srvmqwZhiq",
	"HE4vVkXHgzQwfdo7yMPN6/zk02ZNPE205CYCj9LXelxYlF2Xw1sOlr2SiBelg8gzLGPsbmJopkSDm3SF",
	"V0vuZM4MBVXT8ZI/NAz3RGHSubrCdLIYHPbRu3O+FSCYYRTAwJk9qEAa+YPH86exmaf48bJu13hs84py",
	"oKulkPSKQGgP2JsCoW2714Jckn2iBFhqhss2DafdtGNU9Sypr82kqtI13tSIkAFmyosOqmcht1I46J4W",
	"ibWI5ihiayLj5kahBF48JVLcHRFwAklslfQJSqJBR922QaKJFLFmdA1vqTaQE1WiDYwjzVpnINFFF41f",
	"qZPvRYKg5xn+Khpl+/Aj7XHR4IUk/ZxDX1YPvLGrKz7Y02es7c7K3kJFt5Yxe+SSvLGprYY9btjj52eP",
	"dWRuI4ecytz6sphk4wFS4cRZH6ssJ6c2tzzXCF852e68BGAVuV81lLUxwFVwo8qI1EF30OAjJscstIO8",
	"ANhJ/CB2DR5jEZdZzWVM1H1YoFK3Mf5L72RoVi4avCuioUdkG7WIDf/f8P8N/9/w/y+c/88e0bn7puBi",
	"riIMpGiskZdGBP1F7jFbKfeDjGi2WiuaYUcbjWGs2cx3Ga9wBhmK36vNfBk3OjJ1SEd0c0Cs9Lfz4+uu",
	"MGukf74+Hpx1r/XVMucMSuATJZo1W2YGkfWPJveolkdXp/2X/uCn8/7xqck2k/5mMLikqCigUiWHrsfK",
	"CVTPkYuh5kjE+YDYtim87lVEy1vE7hEiAMajFBZNCDheQr2FHdxBnXZ8leyafJOWzwsU1a3N7EUViw+d",
	"orsmaqGq38WXCnJ2egUjGXser2fd6dnoM8D0VEU4kMQ+cySBiJhlEldHdW2QigGf9zIpjEsU1bPhKU7g",
	"XhFP6QTuVXjnAsqrPF5dx3pnstQblz2bRFaedtqypLa94XxU55/h2jHsr6qnOdMnUFJvPNgvuhfvzdH+",
	"jEXUMT++7J927WMpO/GXFt/FvscOuIciG6AQUHNnuBAH/VuRMhWmrrXMs5ivHBzQKxeGopJxF+04HYKH",
	"yRd57USd+yGj2EWKI4eeiN3bdacI9MgkgJQFochdBC4ggdPcNqwbEC6izXIk1TnG0wc4tSVrFh+zGKud",
	"fF+hvsDTNSJjHQpPncxtyLNa/1xePque8QlnZjKVx5Jh0dcfI9KeHm/V+3Xzt86Ki1V0qVoummiXGA7j",
	"IunN8QlBDuugIPALeG9JXnrGuryKvGgCxMKASDSfyBbfgRljC/puf191ESycjuPP913f4cLYvuiR7v+B",
	"F9tLeyIarD4uKnSh4wXaKqMNjcN2QwL4RZe8NvykhEBOy4nvos+5H/TL0eF3tYf47IbkC/HvibjD76CH",
	"3TEMpuEcieilLoKuhwkao68OQq6oQHw2nvihWBro8XV+GIuQZRzQCxTMMaXYJ2MXESwqxPsTfZ3BkDLx",
	"4wRikbMmEApTrOYG3op8OK12yw/Z2J+MhV+loBLPVVYJJPkNeSeIT/AOYo9vYk4xZHDs+ZTKLyGbcXAL",
	"9HMAoa+Qt0OFTj8eyGdjkj0GsVdX9D4m6nWCyLJpssK56A55HAF7E+hgMgUCLVFezvxKYwK6ZOphOuuA",
	"Y/Igw+CZqmp1PN+BHv4NSRlQiIrKT1VHhfSF7KhkSJ8LPkldtdAPJU2r493xMJKxdPObOdquauMAsa9M",
	"e9U0jbV27EmU6wkSAINbzAIYPACKAqyojSYJej6Zqlwk4L/EFs+kQs3ymPlG8oyWi27DaRnFuVEzFU89",
	"hz2xq/mXWKN/iwkMHsyTXDaZqUykWTjGHxO1AgUQiBioAjTygWec71+mPnmQv/8mdIoKFCMCHOgh4sIg",
	"k2zM8UNZMYp7xFE5CaAjcrykPrARAQQSX/4gbiEvFBGQgXS35S1hqvQedzLfFgFo4TszABm4uT4Bc+wS",
	"PJ0xIBy//xuSkGPhsA0O3/7loB3thEXge2jBsAPOAjT1AwwT+tUm5Iwnp4rN0IiYit1C58s9DFzBjz8g",
	"GACfoM6Id3vseXH4LRgg8OYgHiRHYAecI7hIxh0gMGrROYIBckctQH2JSuIDD8HFKDIsAZkbHFNAxHEs",
	"uD9xFi4CJG8YzrjzswGCT0c/7M38MOAcPIIBb4R38Hknur7io4h2FGb4LcZXdl+U3JVDuY792zGVz88O",
	"Dg4O98T/XR8cvBP/908+BW/fvn27d3i09+rw+ujVu9dv371+23kb/eefHfD+Qby14uB1RGIApsYpmm+D",
	"ewQQoWGg9uQ9Eq/OHJ/coYDJpVa50j4NPpyMCHj16tXbZDz39/cdjNik4wfT/WDi8P/nJTrsK9sFMgeG",
	"2DdUDuwPoKuuA/Gn+gMcvgMnSuBKdofo9ao/7P0P+JXP0M7ur7IR/p+kWMy//VV9in/oUBQ/at4RLVze",
	"nJ/v7poLij2wc8C/apQdlVE2RYy3409c+JCiUMpkopM76AF2F3WbqiGTwLK7NhC0/XWFAd512B3/q3B8",
	"slRIkQP+BA4PDrLjfWUd7y+YvDoCv54hJtN18M/H9AP20HV2cT70zrvXvYsumLCIFls1Of4Ji4m+6V1e",
	"v/kBMOx8oeBvYGdnR/6yO2Ed9/4jns5OIRN1d4HG8jvg1dEu+DcQpc79+6hQMqH7++CYD8L176lonu+t",
	"w4MD7fCjnbiAPN4O3+R3XdIcr3/45ocffvjLqzcHyWFziyZ+gMANwV+jZt7+5SDbTGfZdd6R0wF2duQc",
	"7YND9V5lF+zpBJVBnTfEJy1q6DutIYGN3Qw2frBi47/hHQS/qhS4KtMwL3KBPQ/TFDYEMzAXv4O/AXuV",
	"wp0A/pb82iHo/n2IPRcFO7t8eOoB8o7qRM7PrmqM/4cXupRTgAnjE6CKyhlQoxcTsdu55U3vZGbidclM",
	"SD006xD/PjV49Tsg/j34G0iVKhmvRn75yIl/35ki1uXgk7/t7OoTkJ4EVZr/sWMb8BvrgNXSxWEprh7Y",
	"zCfJkI1rtrObw+UZYicJCngBcV2IBHkXcLHAZCp+6hGVNE/waTJBnTZjnIvENM0MqQyPkgsZEXGT1brH",
	"ZF+cH4KcFWqrduTPvLtR6xvnRR73vomIlY9731z48Hj9jfMCj+++zTF5fPeNIufxU+cb58L4Zn78/M9R",
	"axRZ1mV9YU/27uEDBegr5w0pchVzMeFshYunmFHOK3kIqL7aQHTWHhEg+2sD0WFbXN2iV8Hs/IYCf28B",
	"3ei13b0fNYegM5PMXsQhCtYyDjCicrtCAqY+CBeC7YjqCtOW+vHQzEfuctI4Bf5Cti37GrX+ydmucDLB",
	"X6NXa5EsgOdIMLo7o9bN9cmotfvX1O8jIhlSqbfoAJHBhfmvJDJi6SGI5DM1pSFFglvdgfEzOSFUjYgk",
	"ZlfGMl0EmEhWKQ8taeDTe1vAgCY93XLaBMPIWSfHQQsGbn02E/3yyj6boSAeCM3RwllrfzKhiClW8IMf",
	"ACVCt8GodXRw+Bd+lRy+vj44fPfq4N3h687BIZ9JCXkKxA/xZbSAlDP4oqwgwtf489dtwNvrxBsL3sGh",
	"kFXawndBZwUh4FdqlDk1yrWqtoCEqNwV/ExzYeDyjcb83rA/FNtvZ9fABXfm/m/Y86DYdojs3QylRucX",
	"dLufELM/iFJi7p95/i30xn1BBd3nJO1rnfBjZY7YzHc7fDzyLGqLI0ASBX7lPCmf/k70j1+jMakoDmrA",
	"iA/ANEw+rl8pCyaisjYo36GdhTz9+HCO9j18y2Viwd53Zmzu/UH8K6q7K2TiEYmhHXVDF8gB33/3j73v",
	"5nvfudfffXz33cW774ad7yb//L4DzvEXdI8pEmIVn6RkrUKKVHP/7btQYPd7Cj792hv2I35IppoTg1ds",
	"2+edERHqtXf7+//nu3BPEin0RxM/mKIOQWwfLrBYGT4yXkrKLJLg/Xz7YrRJJyMCdlMGFFmRoUCGtfOE",
	"6K/02AJKsapVHtvxGqSc7ngHglyDlC4M4xNfKvwIg47w6ZBK/lZ/gYg0n1yp3KTgDLOP4S3oB1NI8G+R",
	"5jAMvNa7VrTEU8xm4a0Q2fwFInvInaK9KLup1GCldJp2+ww4vuq12i0PO4hQpFF2vIDODIGjzkGud35H",
	"QfFZ4EvVpfvnvZPu5bC7d9Q5EPPe0tRABSS02q0oBei71kGH9/jYbvFxwQVuvWu96hwKIhaQzYTGZV8M",
	"F/PGOn7gzLhQKR4awwWm+3dH+zJX7YkI0ydqTJHh1f8ZYlq0D5XfNpODtiUIkX/13Na71onW9BAFd9hB",
	"55iyk1SPIlUCnCMm7Eyf8umeVBpckWgOUMRL81M3okWo3IRige9APHngB4cfCED6gYsCkccRoVgZrUR4",
	"iBcdF93tH746EtqBKNe5UJq23rX+FSKhSFJLLJp6z3+QKs3CeCrPQXSdxwftjJ1FdDm+NerNrAsiI4BI",
	"iycLA+VAhxmay8z6DAWIsrKBvDmoMvuTKD55ncnfFIG1Zvrd/t9UNrHvM5Mej6l0yk+Fu7PksuA8UhIK",
	"G6vKkK5S+Efh3FVUuQWcCjfqU5UK2p+AowPbFPPCQ/wbqjbJaycpie9gi9LOq46ppDCf8uJbzivMRV8j",
	"1fQEB5TJlY/RoOLbQM/z7ymgX7CQVuQQrIeA4PGqzdDKBOgzoj/+iYnITcJnYUNa+PyC4bQdHRxENymS",
	"yf/gYuGpiA77/0elH3EyliIDTu7gHqie5K2dcYMMHQdRKi9XsdBroyNtrTT03VUf2i0azucweGi9a5lu",
	"HQanwrpluKRanx/brYWKmpixnwi7PIDGK7DSDShb0D+0pDUXUfbedx/WNlN6F4mbWH7ChL3AMBrx6E25",
	"ITxuEFlV6XxpoDIuZDGqHts1+bH9b4l/waNEo4dMHvCn4vdVcClbyAynkDWLMvyzGECyV3UBSFLd+Czl",
	"LGlylGp+Mrozg7QA2o7X6j1mfV56Ji+KTZ6X+encpgPTCIayE7NAcJBcLnaWh6fQNC6HTXW4Itfa+ybw",
	"Wd7rs2N0W0/ePBZWP3ZnPmVVxV9RNo/ajz5lmpj70VeuPo1424i3jXjbiLeNePuyxVtxYG+bWBvdMtEN",
	"qF1CVcTY6Imi9SaTJUUKgc2IqenMA2bxVCQZeCJxtIyelymGqgUyo6Ay/7MfoCmmTD7ZMyNnoEpUwU5U",
	"duPoUUQ/Pj42yEiQkZn+VbFRWxVRig9ZUpFXWZwTh0F0Imxez1DQ3QtRMihcbplyoRCV1ZQJpQA7U8lv",
	"llIWRK1vVjkQ9fLsWNq20y1ZWyvrA5ljSJR8xX+ucjyJglXwo8ddScIP3CKgIlOsE0VV+qqOpadn52TA",
	"Clc+yKLxq0y5GM3tneBbR58V4aHhkJQzXAXgsuSq9+8GQF6xuwbnvwOcp0C4Th51X73ThJJJNe6VXlyk",
	"yn5JSlfZM7wM0J58r3F/GJrWlHRFOfAKt0pOyyTeUMYZ0gIEqS8cqIEzk3k8uBg4CRASznhC62tRLRGf",
	"FanelutIf3B+eFQrXqmMvpp9fj5qZV/5+6aoXBvlw9Ig2ya+Prc91rqbfXLrw0A827cwdn1ZospOVkV/",
	"n9t4k+jUJm6boJle77XiMqUyMwMzxZEBWcFm+s7KHxklTgaqyyNxbUBrdHpPLhWsV7E3jlsvNH6rUjpb",
	"rufuL9PB0KHqpapBvLG/bsj+usnrQS22WuttuiHyMF1+W0VB3qr6k8Tl8xspio2o+ZX04tYb35LGt6Q5",
	"2xrfksa35MX7lsSH9rb5l+i3TXQjZi6lKn4metTiwhtO1uglcfA3IWHkIw6b/U6SNAJP43tSha6X6X+i",
	"LZgdJbV4p/r+BpUxJmtoJFe2fcSA0JGxeR+ECt2+EF8EDcFb5o9QCcHV/BIqA/FMy2iylI+C3tNm/RT0",
	"np4da9t4TqbXuvAqLfZbqIwuUaEqvhofhnrwsth3k8Vp+ASD5rLqDij0a6i8AWSNZgc0O+AFeTpsmFOu",
	"7fVQeTcltSrvqIhb3Yz51NJ8xSw4z8i8ZOdxO438awOyiIp87IiYxVVV5spXJDCozM+15jS1+Xmql0Z1",
	"3qjOG9V5ozpvVOcvXnWeOri3TX2evXWim9JwSVVRo+tXZaWbT9bUP2xIpa53UaZWF6OAsuxTqdar0vcy",
	"1euZBSxGUW2eq76qPWK/KmFQ1soMobKyMwuWzWvbi3t8IYr2DJ63TNleC8/VlO61IHmG2LJ4TFTiOk42",
	"r4DP9vbsONzWEzW/9us5TkUQ3Iria1zejFb+R0Z0la2X4PSDlD3i1sHtA1CJCo2PMuSnCmxlQcNrz6GY",
	"56oHUpASed09bS5MY6Iz/36ImfBXqDAwW9NxBsKZfy9ys2tZCG9930OQFFCq0u9XoVVmkK9HraH5FL1B",
	"3GaO4qdg1gVN28iox5OpnQfaVqx4FqjtTKZjKvKkVD0T+kPDadCPGpM5V7RDIfOlUWk1Kq1GpdWotBqV",
	"1haotLJn97Zdloa7J7ozzRdWBd0WAf1hxetPVsl825BeK9NLmWrLp0+l0KpB2MvUaeXXrxRDS7FftbVb",
	"HIlVOTFZJz+UyuoEnyrMbF6vZenqhSi08njeMp3WEniuptmqjsYzxFaAYqJr8unm9Vmyj+d/0L69x6hx",
	"tavcw4X+pXVOP1GlJuIaN7ulwGfxtuO7qOEy7A6ny22QIvfTOvtD1lkTd7DhOFuWrprt8TvdHjZsrocJ",
	"p2OJofHC97DzUFkFCtQ2u+LVsOlFfH8oi4gSD0IaTf3S6EEbPWijB230oI0edAv0oKmTe+u0oNl7J746",
	"0x+q6T5TN99D2b2nVGhZCjbChaU7sSg+kwHIG//J1KCl1L1Q7Wdl8CzDb9X36KsLQKXzqsV66eJGtr+n",
	"UYGW9/pStKFbezJagFFwNlbTgdaD5xliy2PzP1MRunUHqWmN13SKBiHZgMg6CInONwxC0girjbDaCKuN",
	"sNoIq9sjrA5Csq2Sqrxxsnck/3WJC3IVGWMQksJrMs1EVrgoM5YMSSUIQvJkrhVFXb4woWLLEGwCgxnD",
	"dWWJMhhqHGZNDP5HixB8rrZLflj1YIzDUawevuJKfdJc/a/i1htxoREXGnGhERcaceHFiwvxob1twoJ+",
	"20Q3YuZSqhKqwv4eO9OYrBH9uCEjVtR8mf9+RPVTma+q0PUyDVjagtlRUot3WmcYigwpsoZGcmVGPgaE",
	"jozNC5QVun0hQqWG4C2TKCsheNXgE5kWzxBbBoWJqKf3tFmhUu/p2bG2jedkeq1XOySjJ/3VxEtVOo9G",
	"GW1AEy2T8AONYNkIlo1g2QiWjWC5omCZm4QPHpyKQwZP+YbAkhjmM+hpqyZC0IhFUuFd6MwPPZcvoqRU",
	"YzYNcWSueXM1At+slahU9BnRhj1mzqblbnWjbZvUnVzEEaOQuqurSNxyiUoufVla/rQhWVs2XiZpK0A9",
	"kZxdTtPLlLLjhbKhogbzWF++roQoWTomtIZMIwCQ4GDzUnVJly9Eoo6xumXydClWq8nSlUB3htgyiItk",
	"26SPzcrQST/Pjq3tOwH1NS64FIuzJVVCU5xVuxxPzfP1OpCyPMuNFqW58Y253csQX5gdqRLglX/DWu7s",
	"Db9LL+mywf/vBv8ZUK7C8XI63NCrnIE9Lg92pIpkP0ALzn+7u/mdNFSFNTXqMO6vZDM1SqRGibSUEomL",
	"zDOfMtA7BQwGU8QigmLsdkBvAojPIlYauW1FnyAtKTgiYGeK7xCRvqtshgIgpgcI7NJd0ZKhlVR3gM0g",
	"AzN4h0ayobhCTKg4QJDLJ4rN0LwNcAd12hH9mDhe6PKJknnjZijAwpuRSBIXMECEKR2UHBkJPU9Sx/+V",
	"Hl6auHvMZn7I93hMDFUd2yDBC4rrowIkmuVY63Jounv+3ZazjX8bY7eKtp4vkCB1GxYoInT5BeIHca1l",
	"iLuMlsGmW8YM1dkUzZzXm3MN+fyzDfn8Ww3kK2651jqMiHklytZBzkL1lcisQ0JqdiVGpPpaxMeTai51",
	"QNVdJ42ksjtDFq2zQZql2cDSaLtIlrBn/eRfK+4klfXiFlIxFGkhw3NEGZwv2gB9XSCHyVm5ReDmsvc/",
	"AC18ZwZurk+SgpxppsjxiWtlRkOCv3Z5zVrZONZLlzaFfO7SVnJO4BgpCp80yYwuXG2bTU+XCiNpNiM8",
	"1pVnY7m0sieQLB6TUkmcHWRrNWJtI9Y2Ym0j1jbL0Yi1jVjbzHkj1jZibSPWNmJtI9au4qiaEbK2z2U1",
	"LyXaxdwK7quyuXG0QUpF1chFMk3Gxrxa092U+7dmhvN0rq7VCX2pTq+5FV23+mQZX9i68Iy8InODqeFu",
	"k8WQEVVP4Ti7BCEvxp02tx+2zrG2xn6o6mRbF83CG3MVKCc+sYauN+2Ga+jyBXjkbu9BbUZD4e1f5qdb",
	"F5DKXbIeJBv33eXwZ3VkzK1aw9oUevfW2zMlnr51t0zkYfkUHMnG3YKXIKTZbf8pu82K9HUJEtJaWNW9",
	"WBSuZ4Mdpus0FtjGAttYYBsLbLMcjQW2scA2c95YYBsLbGOBbSywjQV2BcfitIi1de7FOQlxBeurlL3q",
	"2l7TJGzI8prupMzumhnIU1ldqxP5Mm2uuZVcr6Kkvr21LiBlxdwwKms2s7gx4GjzdtbaRLwQG2sO/Vtm",
	"Ya2B/mr21broPUNseegmhk5Dt5u1rBo6fHZIbu9RbELBCjbVuiAU9erBsLGnLoM7i30nt14Nw2K1pNbb",
	"J4V21LrbRFbcNKexYftpbSKanfX731kWZK8oCohIwFUNpcxoHsUsbRplqAlZ34Ssb0LWNyHrG6eALciF",
	"Jg7s7VOvsrRSNbmEqilUGSq8ySK9G9uc3pRV0JayJ1SRsq1UjDJkRUFl/mcZ/WcJfiLNFaspfLBk1Z9C",
	"oWnt7sWoLtlWKiwLUFlVRVkCMKGNYktrItmTqB/ZS9E5su3TNBZCqFS3WIIepaVhjQpxjTCyqjeau9uo",
	"IyxGeIlWsATgkbJktft342o+a3cNzn8HOE+BcHkelSEPzRELHvangR8u6L7nT6vq7OK6Y15pLBvI75zr",
	"qNi5P6VnvJCm0ct/bB48NLqNzTx4aBTDz6sY3rSyyXCWbJvqyXwcRse79SStopYyndY1DmvZTv7zhlRY",
	"+Y7KFFqm8T2VgqsetS9T3WVc2irIW5rNqK8aWxHDsh3jQCuz8WaYWbC3eTXbCuS8EDWcce9smVJu6b1T",
	"TWG3IuzPEFsN84nazUbJZpV9tl6fHcHbfe7bcLGxQ5//gZ3a4uWFrHZWJl/q5UwiZqqdRspspMxGymyk",
	"zOWlzNRxsrWCZvZQzB3+hlO1nripTv1StsXQUUYy0UtsWu7U+6oueqbG+uTSZ1WaX7gAmlnmiohchSNZ",
	"RRJdAd4Z4SEz7iVE0gz87LB8SsF0SaJemnia2VzbKqEut7nqyqkrbApdKll2R5hExxxJTyWz5jp+OWLr",
	"tl4YBRjZyG2xCPwJ9tBy1lEuPV+pBkq0NqqYzT4atdLIro3s2siu/wlPZwYqgI14h5Jiq0B0JslYOzBA",
	"AFKKp3wD3WM2E6VlLB9MKIPEQQC7iDA8wSiwTXxUtGr4oU3Sp00pL2GLvxPVrhiBZy0UixBmp501BDhb",
	"Mznrj/21FgJVTKvT9cS8WjtJm4n11CMuZ4kQBXgiziKdK0wopTM/9Fx+A6KvDBE3JjUqOiJJ4YAXCJAL",
	"JoE/BzOMAhg4swd1NUw8OAVYTUxIkQug55OpbM8naESip5Y9EblLTjrwA5DsexkEr7AIn9cRkQHFEGsD",
	"pveNp8QPNLEyuzdm/n0vCuZV+WL8z57HeNfO/Psx1iZPQfDW9z0EyVN72ETc6Fb72GgstdHslebIl/Cz",
	"UZCrxfgbHDJUgafwtlFd1fS3UeN8Fo+bChRvgc9NssTVkLiCCLuy580yqDa4SiRDXtb/JoadFY1P7oNT",
	"l6SX6IeT7Kht9sSpu6OW8sZZZitkPS+W2AdW7xiNnif1ytH6fVl+OVt4O9jxUZlJKX7EtwYMi6aWQXHz",
	"7G95oFqeR9mWs+HASh4KrrrLCh8SrmGTybaeg2fa8PPEFUlq9ux/5J4t3A4blZpWc12tYP5LlyxwX22M",
	"gI0RsDECNkbAxgjYGAEbI2BjBGyMgI0R8HmMgBmGdNufQBSZAo3c+XLPIMrVAMbOzD7yT2QWTPdW/znE",
	"cxkHq9O9HU8iCoRdG0JXk3fX8TBiScCb/dZX0n7l4FgE1Od4IrEEYS/0mcT2GxCX33LLPpZYcqMYnOHX",
	"ZE80EPbUjyZepFVxe6+VQqzU4XqqmhdXxHbaSFMP3Y2dcSXolpotckvbsHQ1DI4r7b6KZscVN1/G2vIc",
	"HNiTWSFXIKzZ1//Z+7psm6xVVLv3gy+eD93xHM1vxc6rZJDMVssfBb+oEheigGZ/TH9osi812Zea7EtN",
	"9qXG9L4F2ZcyR/e2KejzN090lRovqyrq+Mw9WPEalNXTnzakcs90YtGwZ4bxVHr1cuJepho9t3JlOFqG",
	"E6uvKl8OjLJ6bkiVhbEsdgxY2rzquzYRL0TNnZ727dNu194J1XTZyyH5DLHlYZwojQ2db1ZLbejw2eG5",
	"fUezafXXeS7XFY0LZGKDNNzIwY0c3MjBjRzcyMFbJAdvrQRskn2XkHpLb7i0uLRhEbfMjSyi+qml2+1z",
	"E9MWzI6SWrzT8sJsKcbSgsgykmsKGU8nqxZ0+8Kk0+2VS0vOuTqyaCkQNQFkNcHz6STOFyVqbpnfU0WI",
	"lXg2VUaXqFAVX42rUj14WXwYksVp+ASD71HVHVDoXVR5A8ga67znN+wMVKHbZl/8zvZFDqQF/PNj/DX/",
	"PHKKfdJJsCh/iOrmhfyhSjGuiutpm/OFz305H1qF6Cd7pY8+ZVoF/qe9cE+9RtMqRD/ZK/Xl5ifT4QNl",
	"aK7VzXyxN3EV+HfYlRp0VTf6yV7pF+0AUpWyi2WvdBFr7DNV05pmw4o5M+SGKoRDtGzqN3utfAY1rbo9",
	"vVpBQ3o0e1Nbpmj3JXRdJd6hJsoybmrltBW0Z/Z8M0PeO3YcPyQsA/voZ3vlk5Ayf37ikwmeapX1nwtQ",
	"PQTqqrvyPew86LAeyi/yQ2HdQUgMFQchaT1+fvz/AwAA//8TYPBwJMICAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
