// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// RegisterUpdateHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/register)
	HostServiceRegisterUpdateHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServiceRegisterUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterUpdateHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/register", wrapper.HostServiceRegisterUpdateHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9C3fjttE3/lXwV5sTO5Xly2a3Wff09PHaWq8a2/JfspOnWW8VmIQkPEuRKgHa62z8",
	"3d+DGwmSAC+62FbKnOd9uxZxmQF+A8wMBoOvLSeYzQMf+ZS0Dr+2iDNFM8j/+Q6GaIYo9I4Dn4aB56Hw",
	"R+y77JOLiBPiOcWB3zpsXU0RoA9zBIIxeHd+3Gm1W8iPZq3Dj613R4Pueffq6Gx03L+4GvTPzrqD0Y+9",
	"i5PR9cXwsnvce9/rnrTaBeUu+hfdwgK9y/NeYYGfLgf9wgKXJ9etT+0WxdRDrUMr3+0WY7J12CI0xP6k",
	"9dhunSAPUfQhIHSAyDzwCWKjA10Xs6GB3mUYzFFIMSKtwzH0CGpnhm6AeC0wQ4TACQLjIARJo2wkFVWG",
	"rmKCgtv/Qw5NCOr5hELfQQsTRWxUqZbzlOX6tFJ3FjjQO3KcIPLp6inUW89TaezbSml/jkJIsT8ZPhCK",
	"ZqsnNtNBnl4bBVaSL8PgDrsoXD2tquU8kbk+rdQN0AQH/uppE+3mKcv0V0DXHEGK3KEzRW7koXVQmO7B",
	"RKuFBivVQ+xPPLQ+mtPt5ym29F9AL10LldRIG61A0RXy2FIfPpwFE3IaBtF89fTl+8hTW0BHNdovw2CM",
	"14EBUy8l9GdpKefgHNEQO2ufAL2bAh6M1FRmYv0zke6onJHK8/FzEH72Auieo9ntOnaQdPt5wi39l9K7",
	"PkrtNBZRd4oo09OG0WwGw4cFqZO1mU5NpwhMA0IJIBTSiDCq5lr9ry0UhkFoUcwDCj3gR2xIWWOioXmI",
	"CPKZYgGgD7qsOms1RNDt+95D65CGEUp4F+3HrGKfogkKGa9h5PtMGa7RN/bBQNTi/KCijlXzpq556zU6",
	"LupHtGXqJfKh5wUO25nrMHmP6TSIKICA4GIW9Q7yBDwmBS2wMgBQWAkTTCgKa8LuXMoCDUAoWwAQKGMk",
	"jToY0aDv3wYwNAzNew9OQEABwRMfeqw9VnwGKXag5z2AQFSMwa2LGis5kgUS/m6DwEPQZwz6cIbMs8Ga",
	"Auwza28Gv5whf0KnrcODvXZrDilFISv57z///u+PcOe3o51fdkZ7O287u4fg01/+rJHAezBYfASFGHoX",
	"fLYLKBDFJCr4yCV9b3082vkF7vy2t/P209fX7YO9x+1/6F2LuiNR10RDFGG3oO/r695JhvtXb3Lc7+28",
	"hTvjo533n77+8Lij//l9nT/3Dx512jlpOZI1EKegaYUuCaLQqbtiHnGYglDWzuP1FgdkgDwECTqB1ACg",
	"d73+EMgS4KRkaWKtjUJReOSy9gxTxQr9hHzXtDrz3sTH0n7uRBvWHkLC27R0wb9W6EO0Yupk5vTmhubP",
	"j0HvEkDXDREhbUAiZwogATet/bcHnb3OXmf/plXY78wZ4bmlR+Vs+nOIxq3D1p92E0/VrnRT7dp8NY/t",
	"ljOPjkJniilyaBQaZlv/qrbZ48trMAtc5LUB6kw64MsPb0Zvvi9iwZlHI6j3Y2DGmUfHcA5vsYcVFjOb",
	"PS8KPEwoowR6HqfE0SqBrXlACL71HsA/h/2L7TKa9Lo2moLQRMxFvJVxGlih0s54S6bt05lH52w8893E",
	"Q63GXm0yRR3xChZ2hoHzGdFChubTB8L2H84ZEeXLupTFbNxdTVllQ69XXC9I+qaiICDRfB6EFLng9kFh",
	"rowGWddKQzAPvGDykCeCQQWMMfJcQGjAQaZgTmWlNgjRGIVsh/5wcrT7YXAO3MAhXBtmZXkTQt5KyVR0",
	"mCYoCkPk08vgHoVDKpffItHWSibVK9XkWpKq6CKCQ+Qu2q+sXr9fthWfziMDMN5B5/MOH3PkO1zTgpRC",
	"Z4pcsX+fXl7HmxhHJ6ZoRqp0PplH8d75aJ8q1stowmiL5wmGIXxQZF9gZwGyL3rHC5LtY6cy2T6jzUz2",
	"kBtHecIp+kIj6MVmHp1CCkSRW0Q4xsPIp3iGpH3FpJUvRmCIKJPSwTkBge89ZLSq/b2D70vIFQ2a5CGh",
	"uOe72IFUqAhFY5UqznhLNXOFZ4hQODPs09dXx4Cqz+B+inygUQfuIQEeJBQ4U+hPkGvkuwKbo7gP40Il",
	"SA1COEELwIuImgtCTNauDDOi6DRD7ZrcLsDC9fDdguRH5LYy6RGjzUy22Wz6IL+UzbLNJML+FIWYIvcc",
	"UehCCs22yUx+BXF5tQGyxtkuJJ0S4gOMtaHP6OHwDnoRAnOIQ8JK+i4KRTFuOePAB9B3gRdM+O5OaBhx",
	"Zaz6KCvaexTNioY4Jn6k+DGMNZZnYWWdamdm8dzO0CwIH949UJOQ/P8R9Cmm3CskCoKtwdH5NsA+H0nC",
	"T4nYX7esgaIZFdVHvJxpVmfWydzqX171+hdHZ9sgNa+QkMDBkM3fPabTBaZ24dmawS89UW9/b0/n0TpF",
	"9T0Ir1fkQfADaumZfbGOYpaa/YN2a4b9eC8qIe5vf/+ff/x/f2rfRHt7rxz+/6PvtrZvWpJoG0o4sQYm",
	"pHMG+5Mldt2kkZVuvEmzBdtvloGlNuFsY/W24hy9y23IueZKtuV5GLiRQy+MAiGOncGlKAMuSrYJ2dbI",
	"hv25PCku1cGTE2Vt05tgQkM+6C8PdDp1BbDLM7EU8PLN1YOegerlwGdosAR+SiHqGVyaavpB76QNJshH",
	"IV8XAx8ch0i65/QZepVaBNmqqXyVn77+8PjnQrpFTyPs1vf6Ds+5n81Fd9hBedevrc9SPy/B5TanPOeO",
	"pYTV6Vm8w+wbm/cQxbsKwATIw4fiwfzz7/9m1bPjGfOCqXHs2q17pi0l7HNXsMRD6TZ/lZS0ur0z2kjs",
	"AQfYRT7FY4zCv8kfCIh8/J8IcV0Rz2YRhbceenGu8hD9J8IhcluHH4US8SnrPpfTbXGfx76KrI8RUkT0",
	"80Q9UO9Df3g1Gl4dXXUzkXnah5PuWfcq+2P/4l3/aHCS/fn64mpwPcyVHnRPe8Or7qB7kuVKUG2Qgqxj",
	"o96hAMc9El7VO4g9NuOJm8WBoWs4TnUKnbWsyTGC3L4Qw4kJb00sAG3gBLMZBATNYagEK9Zqc4tBfoew",
	"+NeM/txYn02RaFRroxn0d1jrfAgSeoFWtmi50ps00C0aM2sRrDOGZAAJswVi72d/WNwha9GuSzjYttBp",
	"zF0e97SVoFB3cbBl9ZdaTWlf3DldQT0y9bHoonhnOVzKkHZXesxkO2HKnN3pkmhZf3R33qqElSkM4RhK",
	"v0nmWG/m9NTn/ED8PEV0ikIhpZgACG5nTtIeCEJmd5UeUsUdmI6ji7DPeJKTwEVgqz8EUg1228DDnxFA",
	"dLrXBsif7xP2v9TpbC8hF3guz+Nsa1fMy7dEO73jNnllA7x3eSSqVXFL6RTlVy4P+58rudcvEL0Pws/x",
	"XJ/FFbkHwGEUlXAMzo+OFcOFzhHojFgxo2OERvlezuEXPItmgIbQJzNMCA58pm1Qtd/GJBR2SyOzicaW",
	"OrWG5TtPr3FAkCrPbzABvhi3aiSIVTDuy6SVhji46/pMNg3Lby/DLphCAoaDXv8ngESdQpWYtT2SBY2i",
	"xkv8NCYXTG0xOlHiA7ef3hMgj428ByFzbFqEAZEisg3wGAwHO4xKrJ3QlZN6NyZMgTfOmiL1yh6nNJOw",
	"SROdHkBJDVmOSHuA02I7T2Zb0Nd8y7aQdcGvamtQBwO6gmRW6RxMbY5V3rxsSK7Wx7IG2CL4N7Rdyamq",
	"erG7Vcu2igwRJTsHcWEbEPdW7hqLbxoz8xm9gaJSJcd6RC/s3UqdSDutpin9VHrVME3s4rpVu3V/bwvl",
	"Mo9INVWWt1qmyWXl0SK2+tHTwiJrPv7KRBMat29W6UQKgVgkISF44lcxINI7uLbk3RqP5SOircNy2J3A",
	"95GjnPGFWmJkCc/wIDH0xn8GLhpjycr18N1O733h4sJbqrmmsL2kP9xR64a+oCyjY7qXNpvoA/oCXeTg",
	"WRIUGx//MLWkd6JUIja1khxpGBVRhN1RgfmEXVuU3UL0lIs0dgti8mwr3VBfzxKUPeXKllkEdOk2LACx",
	"mn8c+GM8OUd0GvD1SrmNepejo5OTQXc4HB33L973Tkfn3asP/ez1Tmux4dXRVe+4qMTJvy6OznvHurvI",
	"TJVhiPJWStkKll+SkEl6j3sngwRG4gBaoiixqMqWJmSWZicz1JXMsNRILOZVv30APf8O+TQIHxIXe8Yp",
	"/DrlHBWG3ap87PGZTiWO5RFQXPEEUYgNMndNULgzDjHyXe9BHfnQQGlSwOX1CIC3QURFMJAaHyJdklbZ",
	"FOcbooW1iGgewEVCmpyKGcSTSdr10C6X8vvRcNg7vTjvXlyNuoNBf1BQyNKCEN/rwdFVr39R0IgqZ2lm",
	"0D3rHg0tH0WrpiVhaD16U8EW9jvsqgT4jH1Xd473LoZXRxfHXdPN9fQ3fsE8RZjeawFVC+pY2eraYSf0",
	"gYhDoSKaoD8Uf3teG8hrNUzMEebuMXgjYsJAEILpwxyFd5iIHTBjRwmDul+K6PzN5dhPVCeWUzGYDchc",
	"ioA6QZ05AtgoVYnZ0jtkdXon9niTb0lewTdGgmDt/n29k089kqt3UumgTnVmovyEbX783LANrjTCTJx0",
	"wJGHIT8rifelk2IOWHNV9xWNTGN0WjJ/C4YMSLzGPKpreEsFDKjGCoIF0qQvFSiQbqpekECG0uUCBDKN",
	"lQQHfK5wBSS1wj62W56W4sEmc3lhC8b8HNwDUNQE99jzwC2qI4UH6SAs3p5sziaNvMwIxtRWEUu93bLB",
	"yeS7iBcke/ibJsiZI8M1xsQFy6zmAak1zf1houFxYZ9FhLKZlruj7h82L7bpaQ6IbXI5YVVmNPZNLxdP",
	"pzejBTfFOVuWWq/0xgvWrDwrS61b+ebqrV0GqpdbvwwNPluAU51NsjTAyYlCTB/ei7iG0qnKFF/C0UrD",
	"iFDkHlHKflwyuE82NoJJaysXBEMfBfJgY28pqbA1Wk827IwsJyL2dkskJZq7kC6jqIkGVj7jotmCSdYJ",
	"t/khDDfxlOtBIzTNQp5s8A5R2AYk4tY/oIGcoRw/7L+KHBU4MHTGlkKs3lA9lKZIXQ6Yaa6LsXifykVi",
	"OTFUhcBMlCpWFsFt7n4Q+64yioDzfCO8CCYxPKqGZ6QzqRTFZigWRpKFXIDGY96XUeiMSpnLxW4WEZFo",
	"dLSYIhEzHwfXFxe9i9P8hyRMMdecikk0OGis8Yc9/w56mCFnqTx/hlwz6Zb1BBiWPo3jrUquI+lf0jow",
	"Zf4r6NxA6pke6GM68GTdSC+6MWZFoeSie/Vzf/DjqHdx1R28Pzrujs56Fz8aMVNc9LKsxEn/5wsdLAkL",
	"BqCcYcITtJBVzgAbjLhhMOMO/rxXbgrJBfpiOI3r+eMgnAHMRzVEAIYIzIIQAZ4jyhfX2pVnCJKRz1ox",
	"xd3wrDaGEy0Rywl9F4yxR/mtPHW5K066U/mao27V6f4qU9gYD2jpKi7yJzTciA/GgHeu7scxOzBEnMI2",
	"CNEEhq6HCN+B53CCfaiCYNmoQSq2hFcHrUyioJE+evmEPXoAd0x+itx2PGMpcGXxYxQiQpWwrQVocePP",
	"CDa1ZdYEXFytehij4QJm1lO1weBLsVANgHlsWUCoe5bWAsRUB88IRt2fWBOQuqeuOihtPjujz3CD0Zke",
	"2MoINQOvAKWM8LUhlDduRacfuHUXsZCnrK2BFhOXHfXLReCmsCMIykMmiOg8onbMaLesjmZG/ISIRqEv",
	"GSnEieirCCilENbIeSloFiNrwGoaflVxmp7BuonQGDFqKOIMCTREhqRo9pMA3gg/AwC5M4Ayh/4chsin",
	"tvs5moUb6h5QqfyLyskndcdKDQmnrHPjg57g0IGEF4JSeNoAU+AEkeeCWwTQbE4fQBDGn3uusS7BFJXX",
	"1HgXZFocqkVe38wQ8HEOrUE5OB+Uo1NR4tgVPyyyhKitR5yrZdCusadNdjuFB10WdDBXFoEUBVpUy6A7",
	"7F8PzOEY6W+D7mmvf5H7edi76urkpTqyWHaZA6i1bCjZPqz7iuU0rOZWE5Dq20zB+ZsaxbjISKQhGcXB",
	"vqZ0NGvX2zZEC7JOZWWFyIpMi6Cp5AprgXDc+DNq7CrLRE1xiKtVFgpTmorUQaFr8qhuDDRTLFTDYh5b",
	"FhCKlxnWAkHZ9DMCUOrw61X847ctctBT3W8s8DQGqsEuiyYr6NJPbKwJfplOnhWIGVrqQlJUHxFVvwY6",
	"c6+ZGHCabX6TIZsd6RrgtaHSAuO1wjfXeAPfZeBLUm/k1GRAVF6A/NzLPDnis01vruRlR7i9jCxWl8F0",
	"r2uRxHQXzyiHDYifHsRVAWvBoRW2dF1gpc8MUVofmLQWGqkFg3SzgUfrwY2Wgyz/mtlaIGfo5hkBSPPU",
	"1INj3MDICyZkNOFNVIan8QW5HFiNfWwueE1jXhnKRSitAmz5rNr6oa06eingVvQsBe+5bGQxgCdP2pVB",
	"XPXzBwH5pcbOAjDPYbYM6PpbiOtFeqqnlwD1FEGLYn0mGll4Nc+8RVmA9nRPfwC4p8e/Pt7N0K0I+CdZ",
	"3DN9vSDQL7vEKzAuvsrn3i6tAP0/0FqfnYeF4V91xU/fGFgL7jNdPCfcXygaKlw7KZK/7F2OzuLXRepc",
	"D9EBnKW/Mm5t+CuB61qB2kC0CKILgrM+Kk2Lf0JERUAuAMViEJqCdOtllypLVJBNsZHOT6CCa6om3HAX",
	"T1ZguztWlrygJAwuDnlL5ZtdLYll157J9EdkeDZxOPwALqNbDzvgR8RfW+pepGn7YS+d+mCLkOkOcg9e",
	"v95/+ztyXAJ3yBQe7PiY0Pnrg/1toD37+5fdv3/6yzb4x1bnu8zTv2Q6+oweVpnIMiIoNMd4XssvcVJR",
	"/jaTO8N+5kWEgxSnH+HOb58+CkZ2Pn3da7/aT79roDose9tAKyjnIRMxmJMvgxymXoKqGyabPElG0czw",
	"TFX6ear8NvDZhJ3Um1ifUfaq8av9N6acGZ1Pf9nV/inHNx7nUefTd+o3QzH5k/pfa01tmiww4+yWMMXL",
	"ZNh688rElUabRlNntGOmSXRehhtBuSirISaFBANS7OnD6y3bCyc6qBSJG6c01zY7O+UGNuWD7Ku4q8rD",
	"ovmb2urFbsDmAaXvqpo6NNFlCSCtKbO+nr/FkES28MXnK54MVd86jy+vgV6n7qvxJc+qxekeSx6Izrze",
	"kbnJX0iDhYSvj+yfB2+++fOv/765+cvNzU6GpJLnPPAMToy79pE5q47IMwt4NZGawYE+uOX3QkKM7pAL",
	"xmEwU6+t8hQ1IntvKp3QouN9c5NhjxNi2fX5t+vQkor6enDGHykhWATdp3lbN8VR6FlTgXkeci+h89n8",
	"gOr7ECFufFD0hbZBf7jjojny2Sx1wFES5Soa4Dc5SBsEPgJzFAIP+whs+eie/yN+u2a7A84jQoEfUOAE",
	"PoXYB/KdeIB9YUZImyI9KnsLDwy44f/5mdFRAzCaqxEwDNNnFPrIOw5mM2hL8piWf1EByBrgjDHf58XJ",
	"ymY6M8+iy5EjiTS9EGm9kpMm3pCQa//gh7KMXFvbVXNyXVZ8ra8fl1Q52II4YWkVwybN1ULWTGlOLutr",
	"iWSU5CQ0D8NVhY27L0o9tltzD1ImF+8i3/UM09ifQ8aeIR1MnBmE56d1IkKDmUpKJlMZ8Xa2yDZfYW98",
	"/giEtGf5KnULCR9Onnwk2VbZYuChO+QBtSQ4GJFdkWk4Eq/1kQ648UFvLG49tXlzLhrDyKNa6lBBh8qN",
	"F5Hi5yfUWIxuxWCY84WNsWdJXs5+5VoI3/VlUbG70DRuwC3yAn/CRq4DrjmCvIcEQwRAMIYz7D1kMsCR",
	"2vJTeT2X5Ba9hcm+/yRW0zzz8oMkuCrzxanLOEFy/Tab6/PAuDEmIttJtvnrwVmHb5dyjwxCPMEMbmnQ",
	"xqraOlZTRrFt01wsCbblvt0qFpu1J2EjU3jw+o3Bn/Hh6OD1G+BMkfOZRDNNqUmcMD6Yaqny08nNs8be",
	"96m3h9mfaQfBmFl2qXmSlK3SsSFSStkuvnGPmdR5dD5Vgi0p/jc+GE7VhU/sg29Puu9+ODgAol3wnms4",
	"33L38Am6xdAHhD54bOiI7sfMPECdTcW1ANb/IheVtDaUe7fF/PC1ynRluX6XdcSkRjJG0SfD1b6M8Way",
	"89LKQH7/S33XErjdtIJ7H4U3rQSdbbHc8e3GDfEdAuoJHJmBUc8K1B+OLgf9n3on3YHpYmjuc+/i/eDI",
	"9OGse9H/qZ9iP82TYR76sZaQ5Zb9rqepY38GYxCoEZVvtmc4ufrXZTfPAP/1/Prq6N1ZV/uld65+S9HM",
	"KTLQehnco7AgERNPAz5nhUROJp20y/7P3YEx05L+RSV913/j13BTP7x/r9OrUWWiuRBTHEnaDb4UxQWY",
	"SH97dzTo5vK3l0187gpgXR+kornIqTHHxyHiugz0LEtdrplvSbz8OUnlTrVFq8r2/I//yW/PoN4yBed4",
	"pBFnOLeHc9z13XmAfVqd76PLHkCy1gJ6RxFjGuGqB/sbHlblPyY6pYHnfE+roVXSUsvONI2qwdr8fkXp",
	"n1V3VYxFE2mLmYx/TRGv2q2qy2k0F3D0Y4UE5lnjWdVNXjSqUluWXljtFakqS1Xf5QatLFnFou+lmG4t",
	"yxVbYk5fSAzLe5FGc5mbj6yhxn6Pk5cU7UE/dS9O+gPbLiS/Cv1jdPa/x0cFX/vHRyZGfrI+SpW5L1x3",
	"nxJ3cgt2KexPUYgpctVBjHlpCZHv8sCA+Dgp9gsLCmX6ly2yfeOnPMlxBwquA5ntJXdupza+9PkdV/av",
	"pphIvwtr1g+ocmQw7V9ELVSOUEgdORU9gKsoHymmDVvdzDpsmSfu44HLJoqNR+TGrz4mi/Jq2dILGLRv",
	"NxFB4U7ytKXh3YHkgvx6HiAozlckExJJfOZ2G4VTkQaLl8GZNL5tkcwYfcGEIp/WQaL9+a0///5v0Z3t",
	"AQJ7hiLjKwS8tGCyfvIBmSGpwg5uG8ZKm3Z6BMzs23cfSeKigSqLbprLEb2GLVPGQg2x9TFc/l17qZDf",
	"E0tyvU1sgWTWpPA8sCxzWU4Pg01yMaWQZdiPrXez629poqEddYG0YHdzwsA/gQ/ngc9mNPeaZxgox5AL",
	"uY95xgqCrf2dV/vbIquY2MRkTjHfe5DpzaW8Q/CeS3wrHVX08btPv2993N95y//n4BMDzaft31993Nv/",
	"tL211bZ+2/5ueztlBYSBP3Lhw4gTZrRZBIc/I/S5CoP3CH0GW3s7b5Znb2/njWSG/8tKOuvSRvmHIDKF",
	"y2p0T1kJRvHBq1WQ/PbT7/vifw4+7u28ihnI/W5khxNj4+Uc+5FRMDVuZqIM4+f121r8dOwMMTS9ljjS",
	"+En9bGRHUmNlqFRqYnHZP1iRuOx/3Ns/0GVE/mCm3yYUrrTNh8gJfNeyVqpCjDAiCiprQC0xQC0xbX7a",
	"rv4yLqHyUfjW4Q9vvud+GeyLv/e16A3Z5Uj2Z4zUtStcqn+zWb8qpSqbh6GKcpAbsBXFt6p2WbPVt95M",
	"go/6qsOy9vZKuCg+dJK8DSs9vzpMl2b7NgwniOctr53hPa5p07tFCaVTJy81x+Jz4wPGMo9ikYXlwhHH",
	"tKbELad261o3JBatOxfaWPS+oiBjxIpUVbxFlUUVb732Cx/ImuaLHEpRqN5gMs22dkaHuGbJMDIt9gWh",
	"kZFTMoSsSOUBXIUTLrOq5DfStKaj63DttK6taxBpJTWVwNViEhjMh2FuwTM5qbJPe0N9Q5KvM2kevuHx",
	"h+7J9VnX/Mxy9uv5Ue/iqntxdHHcNXztD0fXlydH6RS1w+yA5hbyYT56IPv6fKpA5u0sFXwAHDiHt9jD",
	"zPJRWZUTqyhmuHt8Pehd/Wv0vnt0dT3IngbmPl/0L7qm3/kP3dG7fv9qdHRxMnp/fXY2OukNfxx1L44H",
	"/+KOr9Q4ZLg0DsQdYkXO0B0yhLKcBRMggqG4nKmLX/HVS3kok5FO/kgk10NveVwU9pkiOuZPRQP0nwh6",
	"PGrrqnvWPe9eDf6lXrEXJ8r902F68H7q8lE46/7UPcsNXerj8aB31Ts+Ost/UaesmZ9/Phpc5H/tXbzv",
	"53896b67Pk0Prz52psE1J2Wqa3qLfEegguGNfLdQ+Ua+y58M05TvOJF4phcxpUjcX2BlkrbjR0D5VLKZ",
	"DEJwiycTxNABhdsjrkcoDKms2dE19lf7r1+92bMp7ch3X7i+vsaDo7cpGsXMvCA1Np2Aq4qlYoPwwueR",
	"y45QJhua2VjRoWt9hyuklUWqOvp5u4X4fwJTgse2NIZEY0g0hsSGGhKpBUzXXMyKickA0KervuJCUXMI",
	"3hyCr/4QnCHrSR/dn1e83mN65SBc7pTYtYkF+2pSoPQjdi6C2QP2TsEKuKrj9Hr7x1pPlF9ldEW6Mj2a",
	"7VqVtF+KFtRzF6ddEmch+wxaYkQnKIgfwfIgxTRyUaLPUr5/XgbYp4Tna9FXDf7ctKix4wX+RNTli4Y6",
	"DO/+NeMuuvHBlosmIUKivVnkUTz3sJjg/b3vvvsrT5ESBpHvJsuWj2CICAVSId5mVEm2YutUnb9Df8I5",
	"+MvuDni7B2RvxadJb/fkf5p6vqP9qA/yyIPUqKJzgvxJhXGOB2tzBtqfFA70/g/xSIMt7DteRPAd2i4e",
	"9f0fTMOu/5oed39iNo0W1aUS9YgWK0XZR9utbzRHbELkU/App5bwXvYuTnrHR2yrzvq1ct9jB1buS+9i",
	"dDnonw66w6H5+0n6skOOesMSEWdGOw48Dzk0sFwmYHw6qgj37+lc6g6+s7Pu8VXfeLPAWuxDf3hV9P34",
	"7Hp41R3ozFkIL2IxnwS4np5rb8gQGZMdzkr5/dK8PLZbE0uezSPtNdUJEKX4/VjRQKf6LSx927mpf7Xz",
	"plXjZoM1C6dZ//tgiHhUjumYbYMaqF3C21+/D1Dcq9UM1sRnbiLwIL3Rx4V52VWFv+WAaiJcV15Kmcir",
	"MCPsroM1UzLudQbGyyl3MquIhKppwckvI4adozAxc13zOpkMBnt16XnM3+CcYhTC0Jk+ANF5finygkl8",
	"6FN8c1Y/5eBvPEtGl0uz7hWBkAc621KnpPleWpqSDG0lwJIjXCY0jHaTxMjqWVJfm0mVpWvcsOH31Rd7",
	"YPXJyS1bqbgDTT2vXkazerk9sXpzXEgTGE98YQDf+OAY+vEZZeAL1TvVbRskvsk2YBuM5vMt9Q8yokr8",
	"g4pu+wgk3uki/qWD+Z4n0Xwe9pfxMdvZV/7kIua5bf2crC/qGV7b1hUv7Ok11rZnZXehol3LmGF9QW3Z",
	"1FajMDcK80tUmHWsbqLOnHrv4GWpzcYlpcIatDrlWQxObf15phG+9BMVsxKAVdSHJSsrU4mr4EaW4Qk3",
	"76AhhkzwzD2IrADYSiIltg0RZUrvrBZSxus+zFFpWBn7pXc8NDsgDREYinVFttHT2FgEjUXQWASNRfDC",
	"LYLsEp3bbwo25irmQYrGGtmhHX5c6x6VhrBNgmDioc48DGhwG407cY9JbrPlWtEOfzRuDLyq9w7MxyED",
	"deRGko1Je85BPxv5uT/48ax/dGI6EEl/M5xypKgwoCbzRkk93YjDZIZcDLXoHbaxxgeKPMxdZiy8RfQe",
	"IR/AmEt+jAgBm4BIb2ELd1CnHa/N26aAoGR5L5pIJZW6BqXq1taeVMViKS5avFULVYMdPlcwZdMzqMzY",
	"WTyfdYdnrffu0kOlcCCIfear+4qYRd5PUXVtkIoBnw/tKEwEpOrZ8BS/I1QRT+l3hKooowWUV7ktuor5",
	"zjyWZJz27FsGYrXTpiUl9ob1Ua5/Beu4Jl9VV3OqD6Cg3riwn3fP35lT6RmLyGV+dNE/6dp5KVvxF7aH",
	"udxjB9zDB7bWc4svt4Zz+yq45ZnNYWpby9xD+cLAAb1y60KVjLtoizA0GgAP+5/FtqM6DyJKsIukigs9",
	"npu1604Q6PnjEBIaRvzVAHAOfTjJiWHdDGyKNsuSVGcZTy/gxPZmiHjrLYOxJV4mswmf7YGyRTyIOplP",
	"fM8mXG2CNtu6vGh0oOXOZGYwZZiQYdJXn4qRWC9ELru/rn/XWXKyijZVy0ajpMSwGBeZQ07g+8ihHRSG",
	"QYHuLchLj1iXVREbTYhoFPoCzceixUMwpXRODnd3ZRfh3Ok4wWzXDRxm3ezyHsnun1ixnXT4n+FgxUWF",
	"cWusQBvcT7EzBSTO+gx9wDa65HrfR2lVMVqOAxd9yv2gb44O26s9xEY38j/7wb3P9/A76GF3BMNJNEM8",
	"SaiLoOthH43QFwchl1fwAzoaBxGfGuixeX4Y8RxhDNBzFM4wITjwRy7yMa8Qyyf6MoURofzHMcT8YYyQ",
	"eyCxHBt4y1/ja7VbQURHwXjEgxk5lXgmXw1AQt8QewL/BO8g9pgQM4ohhSMvIER8ieiUgZujnwEIfYGs",
	"HcKd5DEjn4zP21CIvbq27JEvrwTwFxpNB10uukMeQ8DOGDrYnwCOFvWmY36msQ+6/sTDZNoBR/6DyDtn",
	"qqrV4a/O4d/ks4bcVJTBoToqRABiRzBKPhV8Es5f7nBJmpbLu+NhJFLW5oVZiasUHMDlyiSrpmGsJbHH",
	"4p0XwgQDhreYhjB8AASFWFKrBgl6gT+Rb02A/+Eizp2T6Yvluo6ZbySvaLnoNpqUUZzjWr2uZX/QLHaR",
	"32Ifhg/mQS4bzMS/YoBj/DFxKxAAAU86ykEj7lTGz/KIpy0exO+/cSedBMWNDxzoId+FYRsgn61bPEQa",
	"Akc9/KkSDfHHNkPo8Dc8Uh/ojQ986AfiB74LeRFPNAxEjCtrCRPp97jj/hC2Fs4DZwogBddXx2CGXR9P",
	"phTwaOt/Qj9iWNhvg/23f91rK0mYh4GH5hQ74DREkyDEMKFfCiFTPBlVdIpufFOxW+h8voehy/XxBwRD",
	"EPioc8O6PfK8ON8VDBF4sxczyRDYAWcIzhO+QwRuWmSGYIjcmxYggUClHwAPwfmNOqkBlOsqmACfL8dc",
	"++Nr4TxEYodhijtbGyD4ePD9zjSIxDtJMGSNsA4+bantK16KSEdihu1ibGZ3ecltwcpVHFSOibjztbe3",
	"t7/D/+9qb++Q/98vbAjevn37dmf/YOfV/tXBq8PXbw9fv+28Vf/90gHvHvgFJwZeh+eRp5JP3nwb3COA",
	"fBKFUibvEb/q5QT+HQqpmGr5JNfHwfvjGx+8evXqbcLP/f19ByM67gThZDccO+z/sRId+oVuA/GEApcb",
	"Ihj7E+jK7YD/Kf8A+4fgWBpciXTwXi/7w97/gl/ZCG1t/yoaYf8lxWL97W/yU/xDh6D4JvEWb+Hi+uxs",
	"e9tckMvA1h77qlF2UEbZBFHWTjB24UOKQmGT8U7uoAfoneo2VUM8v0bv2oDT9rclGLzr0Dv2VyF/olRE",
	"kAO+A/t7e1l+X1n5/Rn7rw7Ar6eIitcd2Ocj8h576Co7Oe97Z92r3nkXjKmixVZN8D+mMdHXvYurN98D",
	"ip3PBPwdbG1tiV+2x7Tj3n/Ak+kJpLzuNtBUfge8OtgGvwNe6iy4V4WSAd3dBUeMCTe4J7x5Jlv7e3va",
	"4kc6cQGxvO2/yUtd0hyrv//m+++//+urN3vJYnOLxkGIwLWPv6hm3v51L9tMZ9F53hLDAba2xBjt8mlk",
	"/22DHZ2gMqizhtigqYa+0Rri2NjOYON7Kzb+Ce8g+FVMcMeJwhD5lBU5x56HSQobXBmY8d/B34G9SqEk",
	"gL8nv3Z8dP8uwp6Lwq1txp689bslOxHjsy0bY/+xQhdiCLBP2QDIomIEJPd8ILY7t6zprcxIvC4ZCeGH",
	"ph0/uE8xL38HfnAP/g5SpUr41cgv59wP7jsTRLsMfOK3rW19ANKDIEuzP7ZsDL+xMiynLs4EcflAp4Gf",
	"sGycs63tHC5PET1OUMAK8O2CP4B2Dudz7E/4Tz1fPorG9TTxAJk2YkyLxCStDIkdSGohNz7fyWrtY6Iv",
	"pg9Bpgq1ZTviZ9bdTesr00Ued77yFJGPO19d+PB49ZXpAo+HX2fYfzz8SpDz+LHzlWlhTJgfP/1y07pR",
	"R9WiPj+g9e7hAwHoC9MNCXKlcjFmaoWLJ5gSpit5CMi+2oB31r7xgeivDXiHbb518165svMbCoOdOXTV",
	"Fbf7QDWHoDMVyp7SELlqGef0EKoZ0wsmAYjmXO1QdfnRlvxx36xHbjPSGAXBXLQt+rpp/cLUrmg8xl/U",
	"VTFlC+AZ4oru1k3r+ur4prX9t9TvN75QSIXfogP48yg0eCWQEVsPobLP5JBGBHFtdQvGd9O4UXXjC2K2",
	"RfLQeYh9oSrloSUO+PTe5jAkSU+3jDauMDLVyXHQnILbgE55v6xyQKcojBkhOVqYah2MxwRRqQq+D0Ig",
	"Teg2uGkd7O3/lW0l+6+v9vYPX+0d7r/u7O2zkRSQJ4D/EG9Gc0iYgs/LciICTT9/3QasvU4sWPAODrmt",
	"Il781FVBCNiWKmPChBbJdFMhAgKiQirYmubC0GWCRoPesD/k4re1bdCCO7PgN+x5kIsd8neuh8Kj8zO6",
	"3U2I2R2oJw93T73gFnqjPqeC7DKSdrVO2LIyQ3QauB3Gj1iL2nwJEESBX5lOyoa/o/7xq+JJpk6QDCPG",
	"gIlNxtevhIZjXlljKnBIZy5WP8bOwa6Hb5lNzNX7zpTOvD/xf6m629wmvvFjaKtuyBw54Ntv/rXzzWzn",
	"G/fqmw+H35wffjPsfDP+5dsOOMOf0T0miJtVbJCSuYoIks39M3Ahx+63BHz8tTfsK31IvFTGmZdq26et",
	"G5+71w53d/8vcOGOIJL7j8ZBOEEdH9FdOMd8ZhhnrJSwWQTBu/n2ObdJJzc+2E4doIiKFIUij5zHTX/p",
	"x+ZQil2tYtmO54C71DSP0j5ptVv7nb29vVff7+3tH3CfZWzDMwo4PwYznp+cjwPhEfQpdHgUhTgFaPXn",
	"yBfnK5fycUpwiumH6Bb0wwn08W/KtRiFXuuwpTAwwXQa3XKbLpgjfwe5E7SjnrfMveDcKjjAAUeXvVa7",
	"5WEHyae5JWVHc+hMETjo7OV6Z5sY5J85AGVdsnvWO+5eDLs7B509PjEtzU9UQEKr3VJvQB629jqsx8d2",
	"i/EF57h12HrV2edEzCGdcpfMLmcXs8Y6QehMmdXJr//COSa7dwe704BQXnKCDHfwTxHVcm/wsmy25RNo",
	"Ih1E60NA6BCFd9hBZ5jwXE7cCQpDOEOUHzB9zD+nJN835Y/pJq8Wx31xXxv3KDDRw+MHtmIEIUdiELoo",
	"5O//IRR7oaXtDvG846K73f1XB9wtIJ13/NiKdfyfCHEPkpw63tQ79oPwZRZmL3kOous8KN7OHLDwLke3",
	"RoeZdUJEvg1x1EmjUIaiYYr4+Sb3siBCyxh5s1dl9McqE3idwV8XgbVG+nD37+Kp9ta3mUGPeSod8hMe",
	"OCzUKzhT3kF+uMq4E/seW5xV4nSZwW0OJzwg+US+8RuMwcGebYhZ4SH+DVUb5JWTlGRTsCWXY1VHRFCY",
	"f1ziay4czEVflE96jENCxczHaJDZZKDnBfcEkM+YmymCBesiwJW7aiO0NAH6iOjXaGIicoPwiR8ezQO2",
	"cTDaDvb21A6JxON6cD73ZP6E3f8jIiI34aXo5CZesAeyB7ELZ9LPRo6DCBGbJZ/glfWfPp409N2VH9ot",
	"Es1mMHxoHbb0XYbCCVc6tE2o9emx3ZrLXISZAxJ+8A4g38oKdzJRkmc0FMexiNB3gfuwMs7TiRDzjMfv",
	"edIAODJe4HGNSCij56WBIDVBZhQ8tivqP7shmmBCRTCjGTkDWaIKdlTZtaNHEv34+NggI0FGZviXxcZX",
	"LbLmUQDDQ6bA/xP+exWAiJKSvkI9Wb2jT9VqoJYEfvGIteLGuxpT+pNNLR0PlASUiFNY205Xsb9KQUdr",
	"3biSIdyknSs18batq8ASE2YFdsohdirT8dbAl1ynkBu3vhZY5bt5fjRt2hKXzK5V/4HUMTzcdMl+rrJE",
	"8YJVEKTf80puZ9yq5/pXuzxV6awGmp5eq7sWdIqINRKHrYrpaDbxBOE6/qwYjwwLpRjhKhAXJZfdhdcB",
	"84r9NUj/IyA9BcOVKqu7MpYVCm3VKC69uEgVkUlKVxEbVgZoYfGrFBFD25q/rig7f7G05DxOqReOQYgg",
	"CfgxM3CmIsUoMwnHIUL8RIJ7gC1uJj+gRW64xTrSw/L3D2qlSbHlgMnehQhMl4HXqo6lYbZJCn5OQFYr",
	"0IF/G8CQ326wKHh9UaKKMMuif1RJXidAtaHbJHSmZ3y10Ey50MzYTKlmQFWo5Eor0tWWQOLqgNa4+J7D",
	"xbdK3WkUN194GC5L6eq5/qxgmUOGDGUvVQ/Im/PYNZ3HrnN/kJMt53qTtog8TBcXK3Udvmp8SVw+L0gq",
	"i4QWZ9KLW29iTZpYk2Zta2JNmliTFx9rEi/amxZvou82akfMbEpV4k70/E6FO5yo0UtS8K3DxMjnZjLH",
	"oSQZDJ8mFqUKXS8zHkWbMDtKaulOC8QfVAaZqKHRXPkUJEaEDo0niEmo0O9LiU3QQLxh8QmVQFwtTqEy",
	"FE+1fKoLxSzoPa05bkHv6vnRtomLZXq2C/fT4jiGyvjiFaoirIlpqAswy2lvMj2NumCIb6gqA4VxDpVF",
	"QNRoZKCRgRcV+bBulbl2FERlgUpqVRYqpbWu6SzV0n7F1MHPqcNkR3IzD/1XhmWeS+rI4ZmeqrrP1avg",
	"Bvf5mdac5kI/S/XSuNEbN3rjRm/c6I0b/cW70VML96a50rO7jtopDZtUFZe6vlVW2vlETf3Dmtzrehdl",
	"LnbOBRRln8rNXpW+l+lqz0xgMYpq61wLuN2V/lUJhKJWhofKbs8sWp7A817c5UtxumcgvWGO91qQruaA",
	"rwXKU0QXRWTiHdeB8gTO+Gx3z4/ETV1W87O/mjWV5zeuaMPG5c14ZX9k7FfReglS3wsDJG4d3D4A+caD",
	"8aaG+FRBtyxoeOXPT+RV64Gwpvgbc542FiaeyDS4H2LKAxgqMGZrOn68YRrc83fitAccboPAQ9AvoFQ+",
	"BViFVvGaXT1qDc2n6A3jNnMUP4XGzmnaRG09HkxtPdBEseJaIMXZn4wITzFbdU3oDw2rQV81JtLVaotC",
	"5kvj12r8Wo1fq/FrNX6tDfBrZdfuTdssDXuP2jPNG1YFB5cP+sOK25+okvm2JudWppcy/1ZAnsqrVYOw",
	"l+nYys9fKYYWUr/qu7gYFKuqYqJOnpfKHoWASNA8gXPL0tdL8WrlIb1hjq0FIF3NvVUdj6eILgHGxN8U",
	"kCdwaolOXsA9981dS43zXWUzLgw4rbMC8io1MddE3S0IP0vwHROkRtmwR6AuJiJF8ah1JETUWZGOsO5E",
	"XJa+GgH5owqIDZ0r0cbjYL3lg/su5SfNB3oZt944PxvnZ+P8bJyfjfPzxTs/40V707ye+m6jNsfMplQl",
	"kM8eqpJpTNRQP67Jv6maL3NsKqqfyr1Zha6X6dfUJsyOklq600qD9DK0iBoazZWNkhgROjSewIlZod+X",
	"4tDUQLxhnsxKIF42NC/T4imii+AwcSfqPa3Zc6l39fxo28TFMj3by62UKuCpmo0pS+fxKGKxNPsyCc5q",
	"rMvGumysy8a6bKzLJa3L3CC89+CELzJ4wgQCC2JoQKGnzRoP0OWTJINf41evJaWawmmIsr1izdUIC14p",
	"UanYXN6GPaJ43ca33NE2zfRONmKlKKT26ipmt5iikk1flBY/rcngFo2XmdsSUE9kbJfT9DJN7XiibKio",
	"oTwuYGRXgpQoHVNaw6zhCEiA8ASmdUmfL8WsjuG6YUZ1KVyrGdSVYHeK6CKYU/Zt0seaDemko+dH1+Yt",
	"g/osF+yMxcnlKuGJF66GqCa4px6oLCELalqajT8XzlMF84XJ5CpBXpRezc697qidkj4bCfjjSEAGlsuo",
	"vowON/Iqv1wRlwdbwleyG6I5U8Td7bwsDWVhzZ86jPsrEafGm9R4kxbyJl2pp0R7J4DCcIKoIijGbgf0",
	"xsAPqFKokduW9HHSkoI3Ptia4DvkiwhCOkUh4MMDOHbJNm/J0EqqO0CnkIIpvEM3oqG4QkwoX0CQywaK",
	"TtGsDXAHddqKfuw7XuSygRJpNqcoxDx43hckzmGIfCqdUYIzP/I8QR37V5q9NHH3mE6DiKrHyhgxRHZs",
	"gwQr2HOrQaKZjpVOR8V33Ni3is9+sgnipG7CBClCF58gthDXmoa4SzUNNiczpqiOUDRjXm/MNeSzzzbk",
	"s281kC/V5VrzcOObZ6JsHsQoVJ+JzDwkpGZn4savPhfx8iSbSy1QdedJI6lszxBF6whIMzVrmBpNikQJ",
	"e4pk9rWiJMnkQLeQcFbEURmeIULhbN4G6MscOVSMyi0C1xe9/wVoHjhTcH11nBRkSjNBTuC7VmU08vGX",
	"LqtZK2nRaunShpCNXfq4nBE4QpLCJ83FpRtXm3a4p1uFyprNGI917dnYLq0cEiSKx6RUMmcH2VqNWduY",
	"tY1Z25i1zXQ0Zm1j1jZj3pi1jVnbmLWNWduYtctErGaMrM2LXc1biXYzt0Icq2hupASk1FRVsZJpMtYW",
	"3prupjzQNcPO08W8Vif0pUa/5mZ01e6ThYJi6+JTBUfmuKkRcZMFkRFWTxJBuwAlLyeuNicSGxdhW0Mk",
	"qkbb1sUzD8pcBsxJbKyh67XH4xr6fAmhuZu7WpvxUKgClAXs1oWkjJqsB8omjndRBFrjGXPz1mg4hWG+",
	"9aSmJOS3rtCoQMun0EvWHx+8ACWNvP3XyJsV66uyKMSxYdU4Y1643mHsMF2nOYptjmKbo9jmKLaZjuYo",
	"tjmKbca8OYptjmKbo9jmKLY5il0iwjhtYm1cnHHOQlziGFbYXnUPYdMkrOkINt1J2QFshpGnOn6tTuTL",
	"PHzNzeRqHSULHLzWRaSomOOjsnMzCxwDkJ7gwLU2FS/lsDUnABt21FpDAKodtNbF7ymii4M3OfA0dLvm",
	"I1ZDj88Pys1dj004WOJwtS4Meb16QGwOVhdDnuWYJzdjjd5iPVKtJymFB6p1BUVUXLe+se6D1NpUNLL1",
	"XyBbFmwvaRPwJMFVT0yp8ZwU0/QZKUVNNvsmm32Tzb7JZt9EB2zAW2l8wd48PytNe1eTTaiaZ5Wiwp1M",
	"OeDo+hyotILblD6hr5RupIeUIisKKus/CzlCSwCkHFi0pv1Bk2l/Es+mtb+X48OkG+m5LABmVV9lCcS4",
	"U4ou7JKkT+OHpC/G+Ug3z+VYCKJSJ2MJfqSzhja+xJUCyerlaLZwo7OwGOMl7sESiCufyXK78Pr9fdb+",
	"GqT/EZCeguHiyipFHpohGj7sTsIgmpNdL5hUdd7FdUes0kg0kJedK1XsLJiQU1ZIc+3lPzZXIBonx3qu",
	"QDQe4uf1EK/b62RYSzbNB2VeDtXybl1Jq/inTKt1jcVatJP/vCZfVr6jMs+Wib+n8nTVo/Zl+r2MU1sF",
	"eQurGQv4yJYEsWjHyGllTd6MMwv4nsDftgQ9L8UfZxSfDfPOLSw+1Tx3SwL/FNHlUJ+432yUrNnrZ+v2",
	"+TG82Yu/DRlrW/nZH9ipbWOei2qnZUamXs5kZ6baaUzNxtRsTM3G1Fzc1EwtJxtrbWYXxdzib1hV69mc",
	"ctUvVVwMHWXME73Euo1Pva/q9meK1yc3QavS/MKt0Mw0V0TkMhrJUuboEvjO2A8ZxhewSzP4s+PySa3T",
	"Bal6cTZqRr421UxdTL7qGqtLiIVumCwqEybzMUfSkxmuuZ5fkO26qbtGAUrWsmXMw2CMPbTYOSkzoS9l",
	"AyXOG1nMdlKqWmkM2MaAbQzY/4bbNAOZ3IZfTUlpVkCtSSIPDwwRgITgCROge0ynvLTI84N9QqHvIIBd",
	"5FM8xii0DbwqWjU10Trp04aUlbDl5lG1K2bnWQnFPL3ZSWcFyc9WTM7q84KthECZ7+pkNfmwVk7SevJA",
	"9XyXqUSIADzma5GuFiaUkmkQeS7bAdEXinw3JlUVvfGTwiErECIXjMNgBqYYhTB0pg9yaxh7cAKwHJiI",
	"IBdAL/Anor3ARze+un3Z41m9xKCDIASJ3IsEeYVF2Lje+CLZGKJtQPW+8cQPQs20zMrGNLjvqURflTfG",
	"/+5xjKV2GtyPsDZ4EoK3QeAh6D91rI3SRjc62kZTqY1nX2mNfIGIGwm5Woq/ITRDFniKuBvZVc3IG8nn",
	"s8TeVKB4A6JvkimuhsQlTNjlY3AWgbUhZCLhedFInBh3Vjg+fTROXZpeZEROIlSbHJNTV6gWistZRBiy",
	"ERgLSII1TEaj52njc7SOX1iEzgZuEXaEVNZUiu/1rQDFvKlFcNzcBFwGqpb7UrYJbRSxkruDy8pZ4d3C",
	"FYiZaOs5NKd131hckqZGav87pbZQINZqPi0XyFrhHDBdsiCYtTkNbE4Dm9PA5jSwOQ1sTgOb08DmNLA5",
	"DWxOA5/nNDCjkG76hYiiM0Gjdr7YpYhyR4CxM3PE/BOdD6Z7q3854rlOCavTvRkXJAqMXRtCl7N3V3JN",
	"YkHEm2PYl3KA5fBYhNRnuTCxAGUv9dLE5p8kLi51i16dWFBUDIHxKzpYNBD25FcoXubx4ubuLYVoqaP6",
	"VD1nXBLd6bOaevhuDhyXBG/p6UVuchvNrsbJ41LyV/H8cUnxyxy6PIce9nTHkUtQ1kj2f7lklwnKSm22",
	"+yD87AXQHc3Q7JbLXqWTyWy1/GLwsyxxzgtoB5HpD80TTc0TTc0TTc0TTc0Z/AY80ZRZujfNU5/fedRW",
	"atysqvjlM/tgxW1QVE9/WpPvPdOJxdWeYeOpHOzlxL1Mf3pu5spwtIgmtoDPfDE0iuo5nirbY1nwGMD0",
	"BD7w2lS8FH93euA3z81dWxiqObUXw/IpoosDOXEeGzpfs7va0OPzA3Tz1mfT/K9yca5rHxcYxgaTuDGG",
	"G2O4MYYbY7gxhjfIGN5YM9hkAC9g+pbucGmbac12bllQmaL6qU3czQsa0ybMjpJautMSFm0pyNK2yCLm",
	"awoaT2iwFvT70kzUzTVOS5a6OgZpKRQ1G2Q56/MJzc6XZW9uWBRURZCVxDlVxhevUBVhTeBSXYBZ4hmS",
	"6WnUBUMkUlUZKIw1qiwCosYqd/t1hwZV6LeRjD+aZORgWqBIP8Zf87cmJzjwOwkaxQ+qbt7aH8rnyGVx",
	"/YHnfOGzQIyHVkH9ZK/0ISBUq8D+tBfuyUtqWgX1k71SX4i/Pxk+EIpmWt3MF3sTl2Fwh13hS5d11U/2",
	"Sj9rS5CslJ0se6Xz2HefqZp2ORtmzJkiN5KZHdS0yd/stfLPrGnV7W+wFTSkZ7s3tWXKhl9C12USLWqi",
	"LBO0Vk5bQXvmODgz5L0jxwkin2Zgr36OK396/H8BAAD///hMD0KVZwIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
