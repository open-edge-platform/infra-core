// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
