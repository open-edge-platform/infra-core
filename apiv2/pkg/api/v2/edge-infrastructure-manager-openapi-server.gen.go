// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
