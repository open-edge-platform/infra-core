// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rTsIiKbiICCNh88P/38AAAD//yztT2zixQIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
