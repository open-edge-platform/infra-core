// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9C3fbNtI//FXwarendleWL2nSJnv27KPYSqKtbfmV7PbZxlkVJiEJTyhQS4B23Kzf",
	"z/4eXEiCJMCLLrbVZc/z/28s4jID/ADMDAYzX1uOP1/4BBFGW2++tqgzQ3Mo/tmdsxGDDPF/u4g6AV4w",
	"7JPWm9blDAHKPwF/AtgMge7ZJdjpOgzfInAGCZyiOSIMXCJnRnzPn97vgribTqvdQiSct958bHXPLsej",
	"y+5lb3x1PrroHfff9Xsnrbb2+8Vw8HN/1B+cp369Ojf/ftIfHQ/Oz3vHl61P7RbDzEOtNwkj7Ra7X/Bf",
	"KAswmbYe2q23MEBzxKB37BMW+J6Hgp8wcc0889qc5bdnxzoXb7vD3lnvsns6Ph6cXw4Hp6e94fin/vlJ",
	"hit7ufPBea+wQP/irF9Y4OeL4aCwwMXJlT4mNr4NQ3SCPMTQB5+yIaILn1CBCOi6mA8N9C4Cf4EChhFt",
	"vZlAj6J2ZuiGSNQCc0QpnCIw8QOQNMpHMqLK0FVMkH/zf8hhCUF9QhkkDlqaKGqjKmo5T1muTyt1p74D",
	"va7j+CFh66dQbz1PpbFvK6WDBQogw2Q6uqcMzddPbKaDPL02CqwkXwT+LXZRsH5ao5bzROb6tFI3RFPs",
	"k/XTJtvNU5bpr4CuBYIMuSNnhtzQQ5ugMN2DiVYLDVaqR5hMPbQ5mtPt5ym29F9AL9sIlcxIG6tA0SXy",
	"+FYf3J/6U/o+8MPF+unL95GntoCOarRfBP4EbwIDpl5K6M/SUs7BGWIBdjY+AXo3BTwYqanMxOZnIt1R",
	"OSOV5+MXP/js+dA9Q/ObTZwg6fbzhFv6L6V3c5TaaSyi7j1iXE4bhfM5DO6XpE7VjtSImU8ZFZpFSDlV",
	"C63+1xYKAj+wCOY+gx4gIR9S3phsaBEgiggXLAAkoMer81YDBN0B8e5bb1gQooR32X7MKiYMTVHAeQ1C",
	"QrgwXKNvTMBQ1pKaUlHHUfOmrkXrNTou6ke2ZeolJNDzfIefzHWYvMNs5ocMQEBxMYt6B3kCHpKCFlgZ",
	"ACi1hCmmDAU1YXem1gLzQaBaABBEykgadTBk/oDc+DAwDM07D055KxRPCfT4v3jxOWTYgZ53D3xZMQa3",
	"vtR4ybEqkPB34/segoQziAi88dDPi8Cv0rEsDW4vhgPgE2OPssj4lrdo6pDAuUXZ5y0B/pk3N4dfThGZ",
	"slnrzdFBu7WAjKGAl/zXn//zr49w7/fu3q9744O91539N+DTX/6sUSB6MKiYFAUYeucCXgUUyGIKhmKq",
	"kr53Pnb3foV7vx/svf709WX76OBh9+9617LuWNY10RCG2C3o++qqf5Lh/sWrHPcHe6/h3qS79+7T1x8f",
	"9vQ/v6/z5+HRg067IC1HsrZqUmvBulaoHwZO3S26K9YFCFRtwwKZs9HnMD9yjj/nu98k8OfARbfYQQAT",
	"Fvh0gRxRJDWWr1/ZNw84Z2P6OTRNGpSmnZDW778DRogBn3j34OZerJeTMzA8y8zx4cHR9yWUyf6LiOsT",
	"FzuQydPrzwGatN60/rSfGN72ldVtP1Wcs6G3conniDI4X+R5vbo8Biz6DO5miICENHAHKfAgZcCZQTJF",
	"ruT85p4zDIkLBpxvMRJFW3jS4DjuyniY3GCfDpGHIEUnRvPh2/5gBFQJcFJyOPLWxoEsPHYtVjxe6GdE",
	"XJN8IHqTH0v7uZVtWHsIqGjT0oX4WqEP2Yqpk7nTN8zu27Nj0L8A0HUDRGkb0NCZAUjBdevw9VHnoHPQ",
	"ObxuFfY7d8Z4YekxMncW4dJmLXxot5xF2A2cGWbIYWFgmG39ayToHV9cgbnvIq8NUGfaAV9+fDV+9X0R",
	"C84iHEO9HwMzziI8hgt4gz0cbU4ZcVMUBR6mjFMCPU9Q4miVwM7CpxTfePfgH6PB+W4ZTXpdG01+YCLm",
	"PBamBA28UGlnoiXTmnMW4Rkfz3w38VBHYx+JOUUdiQoWdka+8xmxQoYWs3vKJSDBGZXly7pUxWzcXc54",
	"ZUOvl0IyTfpmsiCg4WLhBwy50e5+fHFVRoOqa6XBX4jLjDwRHCpggpHnAsp8AbII5kxVaoMATVDARbUP",
	"J939D8Mz4PoOFfoYLyuakOutlMyIDtMEhUGACNPvbooWdlwuqXrh36GgUmWtZFK9Uk0h4kcVXURxgNxl",
	"SFZVlyVZVa9PMpcI3y9MUsdb6HzeEzONiCM0DMgYdGbIlWLk+4urWJYSawIzNKdVOp8uwliEe7ADhPcy",
	"ni50iQQGAbyPyD7HzhJkn/ePlySbYKcy2YTTZibbJuUx9IWF0IvNG2wGGZBFbhAVKysICRdYlF2B7xFi",
	"C4yEoOEZjWWfyoKfINcu+SUUryT6Jc3Uk/006uzCn853BTZLhD5Jqh/AKVoCXlTWXBJiqnZlmNGITjPU",
	"rujNEixcjd4uSX5IbyqTHnLazGSbtfcP6kvZLNs0c0xmKMAMuWeIQRcyaFaR5+oriMtHxy5vnJ99yhgn",
	"P8BYBvuM7t/cQi9EYAFxQHlJ4qJAFhMWI+wToaV4/lTIFJQFoRABq49yRHufoXnREMfEjyN+DGON1R1w",
	"WafaXXE8t3M094P7t/fMtEj+3xAShpmwhsqCYGfYPdsFWJpzqLgd5X/d8AaKZlRWH4typlmdWydzZ3Bx",
	"2R+cd093QWpeIaW+gyGfvzvMZktM7dKzNYdf+rLe4cGBzqN1iuobsl6uyZBFfJu/DP9iHcUsNYdH7dYc",
	"k/gsKiHur3/7n7//P39qX4cHBy8c8f+j73Z2r1uKaBtKBLEGJpRREpPpCqdu0shaD96k2YLjN8vASodw",
	"trF6R3GO3tUO5FxzJcfygsu7x/58Dol74XvYua8kIadrRO0MCOe9EtsRsAW3ojJyQWRzk5anCiYnUXHs",
	"E8Gknb+1y4aSYguxlaEqqbejVKN9JYBq7dTDpk5goZGw8lRVw2Tgu6HDzo2btHQBAheyDDgvEV1UW2Pb",
	"frxQXjulqE+8ezRBbIopC8Q4P7+NUKeuAGR5JlbCWr65epAzUL3ahmhosAR+kZDeN9z2RNMP+idtMEUE",
	"BeKs9gk4DpAyVOsz9CJ1MPMNL7rG+fT1x4c/F9Itexpjt/6F2OhMWJzVrUbuVszWZ+kVGMXldhDlcxSv",
	"El6nb7k449/4vAcoORAwBeoiuHgw//yff/Hq2fGMecHMOHbt1h2X4BP2xS2ZwkOp6HmZlLTeCGYk5Phy",
	"EGAXEYYnGAV/VT9QEBL87xAJ/QXP5yGDNx56dreIAfp3iAPktt58lILtp+zNoppuy82ixUtc/Ex13w7d",
	"afrDYGT2/dY+nPROe5fZHwfnbwfd4Un256vzy+HVKFd62HvfH132hr2TLFdWl/Cssa3efanAPZL3C7cQ",
	"e+JWPjb9OTBwDa4tTuG1BW9ygqDQeeVwYipakxtAGzhcXAMULWAQLaxY08ptBvkTwmJpNt5sxDpWikSj",
	"qhXOIdnjrYshSOgFWtmi7Upv0kC3bMwsRfDOOJIBpFw/je8BBqPiDnmLdlnCwbaNTmPu4riv7QSFsouD",
	"Lbu/kmpK+xLXNBXEI1Mfy26Kt5Zr1gxpt6UXrra71oxbg74SLfuPbmJe12LlAkMwgcqWl16tN3OnH33O",
	"D8QvM8RmKJCrFFMAwc3cSdoDfgCIz0qva+MOTJ46RdjnPKlJEEtgZzACSgx228DDnxFAbHbQBogsDin/",
	"X+Z0dldYF3ihbqZte1fMy7dUu8cWdqLKRqH+RVdWq2Iq1SnK71weJp8rXfmcI3bnB5/juT6NKwqrlMMp",
	"KuEYnHWPI4YLDXbQGfNiRmMdM3jXnMEveB7OAQsgoXNMKfYJlzZYdN7GJBR2y0Kzisa3umgPy3ee3uOA",
	"JFXdZGIKiBy3aiTIXTDuyySVBti/7QnfNcP228+wC2aQgtGwP/hZucS5hSIxb3usChqXmijx84Sec7HF",
	"aNiLr55/fkeBugX17uWa49MiFYgUkW2AJ2A03ONUYu2uupzU2wnlArxx1iJSL+0+o3MFmzTR6QFU1NDV",
	"iLQ7my538mSOBX3PtxwL2WuhdR0N0WWVLiCZRToHM5uxXz6hlA2p3fpY1QA7FP+OdisZ+qNe7Kb+sqMi",
	"Q0TJyUFd2AbUvVGnxvKHxtzsrWKgqFTIsTqrSH23UidKT6upSj+WXDVKE7u8bNVu3d3ZvFzNI1JNlBWt",
	"lkly2fVoWbb6dejSS9Z8JZtxXDUe37zSiVoEcpOElOIpqaJApE9w3SXS6CoSUm0fVsPu+IQgJ7ogKpQS",
	"Q4ujkgepyR2W/wxcNMGKlavR273+u8LNRbRUc0/hZ8lgtBftG/qGsoqM6V7YdKIP6At0kYPnyQOF+EqS",
	"iyX9k0gk4lOryFGKURFF2B0XqE/YtfmbLkVP+ZLGboF3qm2nG+n7WYKyx9zZMpuAvroNG0As5h/7ZIKn",
	"Z4jNfLFfRWaj/sW4e3Iy7I1G4+PB+bv++/FZ7/LDIPvU3lpsdNm97B8XlTj553n3rH+sm4vMVBmGKK+l",
	"lO1g+S0JmVbvcf9kmMBIOkUoFCUaVdnWhMyr2ckMdSU1LDUSy1nVb+5Bn9wiwvzgPjGxZ4zCL1PGUanY",
	"rcvGHt/pVOJYXQHFFU8Qg9iw5q4oCvYmAUbE9e6jKx/mR5IUcEU9CuCNHzJ5CRmND1UmSevalPcbsoWN",
	"LNE8gIsWaXIrZliefKVdjezrUn3vjkb99+dnvfPLcW84HAwLCllakMv3ati97A/OCxqJylmaGfZOe92R",
	"5aNs1bQljKxXb5EDkD2eSFQCfMbE1Y3j/fPRZff8uGeKIpL+JoJ9pAjTey2gakkZK1tdu+yEBEjfKCY9",
	"XAYj+bfntYF64siXOcLCPAavpZ8i8AMwu1+g4BZTeQJm9CipUA9KEZ2PIhHbieq4JkcMZp2EVyKgjqNx",
	"jgD0BVPe7PGtTZE8/rlH5dUzDFDKBCGOi8j8ELXcBog4PhfOIAVQep5HxrjU476Dg4MlPI/+8v/t7F63",
	"rq/B9TX5+vDxU7ETUsTd2LlFVl/aKm6U+njzOv0TuwvYtzSv3xids7AWCqbexa/uXNk/qXRPGXVmovyE",
	"n/3i2rQNLjXCTJx0QNfDUFwVxcfySTEHvLmqx6pGptFhNIHvkh4TCsAxj9GL8JX8JaLGCnwl0qTbzvdL",
	"EwNTfIuoOtqRqzl6sPRcUX/C7sQijUFs5KJk0f39f/LufiXOfhn+C4SI9DCs5C6Sbqqeq0iG4NXcRLLc",
	"F7uIfK7wJC51zj60W54WdMm29eT3HH8ivCE8AGVNcIc9D9ygOpvRUdo9VLSnmrNtSqLMGMbUVtmd9HbL",
	"BicTgSrel+2OudoayVwcb9Bb11/lTPdprWkejBI5X2wZ85AyPtNKRtJvCdQ0i41evirDFIQUuVyPcAN8",
	"K/1pXHh/AHxJoU9oO+1mAnyxdSKpY0xwQJlYYtn9Jo0en9owI/itAhSfXi1cyFA3MpubTjNdBxqMgKxB",
	"NVN7fJsUR2MD/QlA8wW7b3OOAiSEHeKDMFs3t6NWkWNMW2okxRTvrD4dSxLGMQVmsEkmpVOtxI6+il9k",
	"5kG2uRCl7XMSdb2IWq0yQ/HV1Gou3noz2pGXTNgq57XeeJETbY6V1Xxpc83VdKnNU73awWVo8Mn8G+sI",
	"iSW2F+V3fQGdz+YXY3zrW6iv2q6Q0WQAZJELd/ohSqFi8/LgUTQbRdg4YsNsuHXCALP7d9K9qxSymeIr",
	"3DexIKQMuV3G+I8r+jirxsYwaW3tG4Khj4J9wcbeSruDrdF6e4SdkdW2Cnu7JTtGqJ1LpQLRSD/Fktor",
	"gEc2sHa8qIPRDhGdcJuyp6vdkWgeoLl/i1yACeidvQO3LzpHnYM2l89ANDrDUOovCLodYAgOENmANWbT",
	"w5BnHbxFDLYBDYUZlguCEiMmYeeg4qgUKIH64Ky0ZvSG6q2TFKmrLY0018Wr4S4VoM9yNEWFwFyWKtbX",
	"wE3u8TD/HoXZA2f5RkQRTfqt6ieXDi9Y5CQXsTBWLOQ85R7yRuXCW4GU3bLY3i1dw40Wb5NLeObj8Or8",
	"vH/+Pv8h8RfPNRc5hxss5VZH8D65hR7myFkp+LUhAGO6ZT1Gm6VP43hHJTcRCTtpHZjCYRd0biD1VPe4",
	"LAklb3QejFBy3rv8ZTD8adw/v+wN33WPe+PT/vlPRswUF70oK3Ey+OVcB0vCggEop5iKqIV0nTPAByNu",
	"GMzFTWv+emQG6Tn6YnCL6JOJH8wBnmjK8twPEBCBU4mMtBPZqCEdE96KyQFShHo0uBZIp3pIXDDBHhMP",
	"PKOX33EkysoxEHTDim45N/nvCs/CXsRF/qpc2NH8CRCdR4/nEWE4QIJCrilMYeB6iIoTeAGnmMDoNQIf",
	"NcjkkfDiqJWJnjnWRy8fxVJ/SROTnyK3Hc9YClxZ/BgXEWXRYtsI0OLGnxBs0ZFZE3Bxter+5IboDFlj",
	"8RaDL8VCNQDmsWUBoW7c3QgQUx08IRh1k35NQOrG8uqgtJnNjWb7LUZnemArI9QMvAKUCrP4phAqGrei",
	"k/hu3U0sEHkcaqDFxGUn+uXcd1PYkQTlIeOHbBEyO2a0567duRE/AWJhQBQjhTiRfRUBpRTCGjnPBc1y",
	"ZA1YTcOvKk7TM1g3WC8nJhqKOHwSC5AhcK/9Mk40Iq7hQO4aruxObQEDRJjtoaSm4Qa6LVoJ/7Jy8il6",
	"7BoNiaCsc01AX3LoQCoKQbV42gAz4Pih54IbJC+LgB/En/uusS7FDJXX1HiXZNpM2wX298wQiHEOrN6R",
	"OO8dqVOhdWQygIofltlBopNH3mxnwJ7qNJ7rdgoO+lLQsVx5BaQo0LwLh73R4GpodotLfxv23svcYOmf",
	"R/3Lnk5eqiOLYpe2eG7iNEn38IQCT+qKEtc9v+JrXBDVr3yU5a3KlhtOvM1CeW54K0s+FgxaFpRmhd4k",
	"XIch2Vqs+jSyty+WxeowJA1QbUDVoWdDadq1ZiNyerYPK14tfj61UVUDRnbPomhA4yJjGfpxHD9mM4UA",
	"3fiK2xLwWqeyOohtyLQgOQoethEIx40/4V4bRVGruRziapUXhSkMW8oTxjVdVG0NNFMsVMNiHlsWEMos",
	"kBuBoGr6CQGoTCObtafEeTRz0Iu631rgaQxUg10WTVbQpdN5bgh+mU6eFIgZWupCUlYf06h+DXTmMqca",
	"cJptfpshmx3pGuC1odIC443CN9d4A99V4EtT+XhrMiArL0F+Lgtwjvhs09u78rIj3F5lLVZfg+leN7IS",
	"01084TpsQPz4IK4KWAsOrbBlmwIre2KIsvrAZLXQyCwYZNsNPFYPbqwcZPnM6RuBnKGbJwQgy1NTD45x",
	"A2PPn9LxVDRRGZ7GbPU5sBr72F7wmsa8MpSLUFoF2CqF++ahHXX0XMAd0bMSvBeqkeUAnqTPL4N41M8f",
	"BOQXGjtLwDyH2TKgnyEWYOcxNvFUT88B6imClsX6XDay9G6uE1GM9nRPfwC4p8e/Pt7N0K0I+EfZ3DN9",
	"PSPQr7rFR2BcfpdPE1IN+n+gvT47D0vDv+qOn36ItRHcZ7p4Srg/UzRUeM1XtP6yT+Q6y7/Cq/PqTgdw",
	"lv7KuLXhrwSuGwVqA9EiiC4JzvqoNG3+CREVAbkEFItBaHr7UC96alkIpmwMtXTkpci5pmpENXf5MEy2",
	"J7llYZlKvItjT+JUPoX1klgWU5XOfkKGBPmj0QdwEd542AE/IZHhtneepu3HTESOHUpne8g9evny8PV/",
	"kONSuEdn8GiPYMoWL48Od8HOx+7er3Dv94O913/Z/9unv+yCv+90vtv9eypNGJ2NP6P7dQZqDykKzK7z",
	"V+pLHDRf5MN155hkMn4dpTj9CPd+//RRMrL36etB+8VhOm9X1GFZ7i6toJqHjCd2bn0Z1mEq+27d1wdJ",
	"GmiG5obUwOmUwPlj4LMJO6k8xJ9RNgrEi8NXplAunU9/2df+qcY3Hudx59N30W+GYuqn6H+tNbVpssBM",
	"sFvClCiTYevVCxNXGm0aTZ3xnpkm2XkZbiTlsqyGmBQSDEixp8ept20vHcGm0guHOGWPdtjZKTewmfFN",
	"r8dbYZY0ESk6SbCRiXuXyZKWDsy6SoTIivnVVFw6e4imdwFCQjhj6Atrg8Foz0ULRPjZ0wHdxAtQNiAe",
	"ENE28AkCCxQADxMEdgi6E/+Ic9ftdsBZSBkgPgOOTxjEBNyiQKQ3wkSKWXxErgnoLhYeRjL4B2A+OFNx",
	"7wYjRDcb8Sn1UNjzCiM8fUYBQZ5KqGzeB7TQgN9SICsAVQOc8uEZiOK0PterJQ5PtjZO0thRTJjynlsP",
	"RDvANxjYsZKUlHtvJWO2GN9cVY7Mt6TcxGAwRasFuV5anqkR/ckS+8nmKy+E7OR1UDzyUagjlZnlmoDR",
	"LHp6hwn49qT39sejIyDbBe/Eov9WaJQn6AZDAii7F5CvtCJi3aj+6s+GgDQIkekAQxb3/JIkq5kjpuAQ",
	"GoakbkoJMTrustG9Cg+wD490Yi2ZIRQRN0pYX8T01PenHuosAp/5N+Gkk0Sp0gJSLBNPwrwpfijdBb/f",
	"yGA95V4ZhGR9STsCtvKsUku0utHMD5gtVt0d/3MGFwtEkAvcUERyk+mO1MPHWvHp7IHp9PwitCx47hJU",
	"FUeIS4WGK6BvpahwNB8PbunJXDnpib65mvZemcB/HTHAxHNz3hAYirz1IjfUv0OUjgFm6tBEl0UWqKm0",
	"E/1oNmRJC5wZZsiJwpOWia/HF1dAr5M7CdYjkqbIMqYoS51bGfwX0mAh4esD/+fRq2/+/Nu/rq//cn29",
	"V0+fWlsaj3jegZz47UrnoQ/DVWDKnzQ8jcJBTLCHIi2Q86spgFr6pKhFOX6WQVqbanR9nZn2FMfjMDCG",
	"05zgL8itMvMzeIvADUIEiCryqMWUL7I4eLPSh5/VvAtqrZMes7+eGV9quDaHgIR32/TjOZwaBayuOVmA",
	"Or9FNcmoA4mMPcsCjG6RCyaBP5fhd1RqJZmacjMcCkIsEpn4ZpxXjmw+twFa+BRLQTHN26Yptk1HlHLB",
	"btw61SPLiewMkZGn4rJb2uQkDrtr8R+pkNKF01ZogMoxa5yrnf7Z2dVl9+1pbxdE85ZM1hwSPEGUS5vY",
	"mUULlEajk0RqV1JjB1zyVRhFTI5SV0z433Fk3BTlMkDyNYnvjaF7K8MiUxWqh/kAep5/x4kJoQccrnCo",
	"PIiDUezzI0IHx7mq5TK5gc5nRNwllNKqaMvxY4NeiTmwRrxpsc/NIJXbnyzCfEDQXWJoSevzMqFIdWvj",
	"k1kTo4uR/PgMFpDvloaQ2vFliiGIckbALWeK87M3frOfnH9pFmICK5tC8yNvUPwPj34ss3/u7FZNbRO9",
	"HC+1+cQlo1RGfpz9scotepqrpa7OS3PQFKReSTKcmYfhssIt0UCWemi3Fh5kXOJ4GxLXlLjGjr84urdI",
	"9umElPnzaJ9TCRFEOzt0V5zo13KXUs4TYsu7gSKEvAwgnqhwYDDa89At8kB0v+JgRPdl2tZQJf/pgGuS",
	"TpADXDSBoce0PIySDn1XLkw9osZifCMHw5x9he+65kzQ/Feh8QoNUxWV0gxL4wbcIM8nUz5yHXAlEOTd",
	"Jxjix+wEzrF3nzEk09rrp/KOrsi1JqRW33+WsmWeefVBEVyV+eJEMIIgJc2aLXkL33i4J0u2k4iVV8PT",
	"jn7M+wGeYg63NGhr7Jr1jwJOse2kXC6jsMUmuY7NpswyuXIqFzqDRy9fGaySH7pHL18BZ4aczzSca3JZ",
	"4vFDwEzLO57OFJ31LPi+3Zpjov+Z9kaZHOy9Ts+TomydXjTFN0ePIAdt9mJKv3eawy99+e9DvnBqpyYr",
	"upjS1IS8GJXud7m7KjX1nwxhqTJ2R5OJMi1b5I/T1HfN1n7d8u8ICq5bCdjbcvcUaJA58OTGGqfH0hMF",
	"DEbji+Hg5/5Jb2gKFpn73D9/N+yaPpz2zgc/D1Lsp3kyjPsgFjqy3PLf9ew3/E9/EuXwI1NAY2OVxsnl",
	"Py96eQbEr0pn036J9bg0zYIiA60X/h0KlPSf3BEacnHJ2JQc6jNIXI8Tu+B1gZLjU9k8Lga/9Ibj48HZ",
	"Wff8ZHwxOO0f/zPDgbFI/+ysd9LvXvZsBQbDk94wncbDwIGNz4IcFCIVtWRIpKPIc2NKMqF/EeFGUz+8",
	"e5f5ZXTa611kfvvQf9sbnussqyQnvVHvMsenNQVF8ToTq0uLyJXirmCdpL+97Q57uXzjZYshF9Krrk9h",
	"RHPRHcUCHwdIiIvQsyWTyzbzLY2PACep3Km2cb9c0QWr4lYNF3isEWd4hwMXuEfchY8Jq85396IPkKq1",
	"hGhXwbeMEx71YOJXKi9W/SomOqXkGAzb66BV0VJLlTeN6jI3+RX9maLuqujjJtKW08p/SBEftVtVXNZo",
	"LuDopwqplrP2iajuz4i45dfPF+nSS2sWBR4P6xu0MjexZa+6TVEI1Y6tMKdvJIbtvUjKu8jNR1YX5r/H",
	"Md6LzqCfe+cng6HtFFJfpUw2Pv3f427B18Fx18SIItIwuJn4f3XPKRljr+CUwmSGAsyQe2Y1b16KdArE",
	"FQ99YotmfNUjKVRR8nfo7jVJXQ7FHURwHaqg+Dk//OjgS/vjC4VHGO6laYs3S3wWW/AxUa+QKr84SrmQ",
	"PxTdZCjKx3nLanzU2a3CWlKIlF991hQcj8g1qT4my/JqOdILGLQfN2GpI20S8HIzHrXFaR1U3gaFz9xp",
	"E+FUZgsRZXAm22FbXtyIy3REWB0k6rvvyyy3sjtb/mx7Igdj2mxRWjJZP5ioSiRR4QS3DWOlQzs9Amb2",
	"7aePIvEx3ATXR/QGjkz1tnFkDoLFJ0l8BySc38grexH3KUmJM7U9DLVm7xUPRTPBr/Rn7UnOihSyDOex",
	"NdZi/SNNNrQXBYQrON2cwCcn8P7MJ3xGsyPGvyrjmAuFGX/OC4Kdw70Xh7sy+Yo8xFTqFeLdqyywar1D",
	"8E6s+LSD6c7H7z79Z+fj4d5r8T9HnzhoPu3+58XHg8NPuzs7beu33e92d1NaQOCTsQvvx4Iwo84iOfwF",
	"oc9VGLxD6DPYOdh7tTp7B3uvFDPiX1bSeZc2yj/4oen5u0b3jJfgFB+9WAfJrz/951D+z9HHg70XMQO5",
	"343sCGJsvJxhEhoXpsbNXJbh/Lx8XYufjp0hjqaXCkcaP6mfjewoaqwMla6aeLkcHq1puRx+PDg80teI",
	"+sFMv21RuEo3HyHHJ65lr4wKccKoLBhpA9EWA6Itpi1eh0V/GbfQOfyC51xx+PHV98Iug4n8+1BzxlRd",
	"jlV/xpf3doEr6t+s1q/vmVJ6o64iHOQGbE3v1aN2ebPVj95MwN76osOq+vZauCi+11O8JRnuC6/10qXj",
	"p10ffMpqJ8KNa9rkblkikqn7J9GqipfPNQGcZfHqUhVWG0f8Rj213HJity51Q2qRunNPlWc+ZTaZW5Ix",
	"5kWqCt6yyrKCt177mQ9kTfVFDaUsVG8wuWRbO0JrXLNkGLkU+4zQyMkpGUJepPIArsMIl9lV8gdpWtLR",
	"Zbh2WtbWJYi0kJpKdGdRCQzqwyi34ZmMVLqDgUqjmBxI8nmPbuEbHX/onVydyoT8V6OMhS/79azbP7/s",
	"nXfPj3uGr4PR+OripJtO5TfKDmhuIx/lHTQyfhbpAvpFLUex+gocuIA32MNMPDqVyScTrShmuHd8Nexf",
	"/nP8rte9vBpmbw5zn88H5z3T7+KH3vjtYHA57p6fjN9dnZ6OT/qjn8a98+PhP4XhKzUOGS6NA3GLeJFT",
	"dIsM3kKn/hRIfzOxziKH3DiUmrqUyazOeUiZlENvhOsZJlwQnYDPmLgA/TuEnnCMu+yd9s56l8N/jo8H",
	"5+/679Ut++D9KD14P/fEKJz2fu6d5oYu9fF42L/sH3dP8196w+FgmP/5l+7wPP9r//zdIP/rSe/t1fv0",
	"8OpjZxpcc5D1uqq3jF8OKijeiLiFwjciLuBbliZ8x/lWM73IKUUyHgkvk7Qt55crHHwq+Uz6AbjB0yni",
	"6IDS7BHXE680Vc2OLrF/f/T6+9evfjh6/dIstiPiPnOJfYNXR69TNMq5eUaCbDqkfhVdxQbipW8kVx2h",
	"TH4Ds7qig9eCNV6i8qKqg3/RcuEKeAR1QvjCNMpEo0w0ysSWKhOpLUyXXszCiUkJ0KervvDCUHMR3lyE",
	"r/8inCPrW/qIkaQWFV9RmTKXBqvdFLu2ZcG/mkQo/ZpdLMHsJXunYAdc15V6vfNjo7fKLzLSIlubJM1P",
	"rUryL0NLSrrL066Is5B9Ci1+olPke74M0AI8yDALXZRItEycnxc+JoyK6BT6rgFpXGPP88lU1hWbRnQh",
	"3vshYzK6JmDHRdMAIdnePPQYFpGq+AQfHnz33Q8i7HHgh8RNti2CYIAoA0og3uVUKbZiDTW6g4dkKjj4",
	"y/4eeH0AVG/FN0qvD9R/mni+p/2oD/LYg8wooguCyLTCOMeDtT0DTaaFA334YzzSYAcTxwspvkW7xaN+",
	"+KNp2PVf0+NOpmbVaNVAQCmhxyQUZSMZ2bRDFvIJUfGRUoYtacHsn5/0j7v8qM7atnLfYyNW7kv/fHwx",
	"HLwf9kYj8/eT9COQHPWGLSLOdnDsex5ymG95UMD5dKIiwsanc6kb+U5Pe8eXA+PrAmuxD4PRZdH349Or",
	"0WVvqDNnIbyIxXxir3pyrr0hg3dMdjgr5exI8/LQbk0tuXOSaKuePwWylHiGLBvoVH+NViUyUubFbMW3",
	"DNY8OpXD5MWm6JhJg9CnvWw83LzNTz5W1tTTxEpuIvAofazHhUXZdTm85WDZLwk0UcpEXmAZY3cTrJnS",
	"6W3SFV5NuZPZMxRUTdtLftMwnBOFqdXqKtPJZHDYRy/J+VKAYIZRAANndg9k5/mNx/On8TVP8XNk/V7j",
	"oc0rSkZXS5ToFYFQuDbb4h+l+V55NSU5FkqApUa4bNFw2k0rRlXPkvrSTKoqXeNNjQgCYKa8aKN6EnIr",
	"BT3uaxFWi2iOIrEmOm6OC6Xw4imR6u41AceQxLeSPpGCdqrbNkgskW3ADxjNwltqDeRElVgD4wiy1hFI",
	"bNFF/Ctz8p1Ig/M07K9iUbazH1mPi5gXmvRTsr6sHXhjR1e8saf3WNuZlT2Fik4tY47EJWVjU1uNeNyI",
	"x08vHuvI3EYJOZWf9HkJycYNpMKOsz5RWQ5ObWl5rhG+ckrZeQnAKkq/ipW1CcBVcKPKiAQ5t9DgIyZ5",
	"FtZBXgDsJH4QuwaPsUjKrOYyJureL1Cp2xj/pX88MhsXDd4VEesR2UYrYiP/N/J/I/838v8zl/+zW3Tu",
	"vCk4mKsoAykaa+SbEWF5kdtlK+V0kDHKVmtFu9jRuDHwms3vlvEKZ5Ch+L3azJeRnqOrDumIbg5xlf52",
	"2r3siWuN9M+X3eH7dKAncy6gBD5ROlXzzcwwuv2jyTmqZYvVaf9lMPzpdNA9Md3NpL8ZLlxSVBRQqVIg",
	"1xPlBKrnyMVQcyTickB8tym87lWMyhvE7hAiAMZcihtNCDheQr2FHdxBnXZ8lOyafJOWz/cT1a0t7EUV",
	"izedorMmaqGq38XnCnp2egYjHXsez2fd4dnoM8D0UEU4kMQ+cSSBiJhl0jNHdW2QigGf9zIpjEsU1bPh",
	"KU5TXhFP6TTlVWTnAsqrPF5dx3xncrEbpz2bKlXudtq0pJa9YX9U+5/h2DGsr6q7OdMHUFJv3NjPemdv",
	"zZH9jEXUNj8+H5z07LyU7fhLq+9i3WMH3EGRx08oqLk9XKiD/o1IDApTx1rmWcwXDg7olStDUcm4i3ac",
	"sMDD5LM8dqLO/ZBR7CIlkUNPROPtuVME+mQSQMqCUOQkAmeQwGluGdYNCBfRZtmS6mzj6Q2c2lISi49Z",
	"jNVOMa9QX+DpGpGxDoOnTuY2ZBOtvy8vny3P+IQzM5jKY8kw6euPDGlPe7fq+br5U2fFySo6VC0HTbRK",
	"DJtxkfbm+IQgh3VQEPgFsrckLz1iPV5FHjQBYmFAJJqPZYtvwIyxBX2zv6+6CBZOx/Hn+67vcGVsX/RI",
	"9//Ei+2lPRENtz4uKnSh4wXaKucMjQNxQwL4QZe8NvyolEBOy7Hvok+5H/TD0eFntYf46IbkM/HviDjD",
	"b6GH3TEMpuEciZilLoKuhwkaoy8OQq6oQHw2nvihmBro8Xm+H4uQZRzQCxTMMaXYJ2MXESwqxOsTfZnB",
	"kDLx4wRikSomEAZTrMYG3oiMNa12yw/Z2J+MhV+loBLPVZ4IJOUNeSaIT/AWYo8vYk4xZHDs+ZTKLyGb",
	"cXAL9HMAoS+Qt0OFTT9m5JMxeR6D2KureneJep0gsmeabuFcdIs8joC9CXQwmQKBlijfZn6mMQE9MvUw",
	"nXVAl9zLMHimqlodz3egh39HUgcUqqLyU9VRIX0hOypd0aeCT9JWLexDSdNqe3c8jGQE3fxijparWjhA",
	"rCvTWjUNY60VexxlY4IEwOAGswAG94CiACtqo0GCnk+mKrsI+B+xxDMpTrMyZr6RvKDloptwWkZxjuso",
	"eX8Oe2JV8y+xRf8GExjcmwe5bDBTGUazcIw/JmYFCiAQMVAFaOQDzzirvUxmci9//13YFBUorglwoIeI",
	"C4NMejDHD2XFKO4RR+UkgI7I2pL6wK4JIJD48gdxCnmhiHsMpLstbwlTZfe4lRmxCEAL35kByMDV5TGY",
	"Y5fg6YwB4fj9D0hCjoXDNjh8/cNBO1oJi8D30IJhB7wP0NQPMEzoV4uQC56cKjZD18RU7AY6n+9g4Ap5",
	"/B7BAPgEda55t13Pi8NvwQCBVwcxkxyBHXCK4CLhO0DgukXnCAbIvW4B6ktUEh94CC6uo4slILN6YwqI",
	"2I6F9Cf2wkWA5AnDBXe+N0Dw8ej7vZkfBlyCRzDgjfAOPu1Ex1e8FdGOwgw/xfjM7ouSu5KVy9i/HVP5",
	"/Ozg4OBwT/zf5cHBG/F/v/IheP369eu9w6O9F4eXRy/evHz95uXrzuvov1874O29eGvFweuIUP9M8Sma",
	"b4M7BBChYaDW5B0Sr84cn9yigMmpVtnMPg7fHV8T8OLFi9cJP3d3dx2M2KTjB9P9YOLw/8dLdNgXtgtk",
	"Vguxbqhk7E+gp44D8af6Axy+AcdK4UpWh+j1YjDq/y/4jY/Qzu5vshH+X1Islt/+qj7FP3Qoih8174gW",
	"zq9OT3d3zQXFGtg54F81yo7KKJsixtvxJy68T1EodTLRyS30ALuNuk3VkMld2W0bCNr+ugKDtx12y/8q",
	"5E+WCilywHfg8OAgy+8LK7+/YPLiCPz2HjGZgIN/7tJ32EOX2cl51z/tXfbPemDCIlps1ST/ExYTfdU/",
	"v3z1PWDY+UzB38DOzo78ZXfCOu7dBzydnUAm6u4CTeR3wIujXfAfIEqd+ndRoWRA9/dBlzPh+ndUNM/X",
	"1uHBgbb50U5cQG5vh6/yqy5pjtc/fPX999//8OLVQbLZ3KCJHyBwRfCXqJnXPxxkm+ksO887cjjAzo4c",
	"o31wqN6r7II9naAyqPOG+KBFDX2jNSSwsZvBxvdWbPwD3kLwm0p5qzII8yJn2PMwTWFDCANz8Tv4G7BX",
	"KVwJ4G/Jrx2C7t6G2HNRsLPL2VMPkHdUJ3J8dlVj/D9e6FwOASaMD4AqKkdAcS8GYrdzw5veyYzEy5KR",
	"kHZo1iH+XYp59Tsg/h34G0iVKuFXI7+cc+LfdaaI9Tj45G87u/oApAdBleZ/7NgYfmVlWE1dHJbi4p7N",
	"fJKwbJyznd0cLt8jdpyggBcQx4VIeXcGFwtMpuKnPlFp8IScJlPOaSPGpUhM08KQPIGUFHJNxElW6xyT",
	"fXF5CHJRqK3akT/z7q5bX7ks8rD3VUSsfNj76sL7h8uvXBZ4ePN1jsnDm68UOQ8fO1+5FMYX88OnX69b",
	"19HNuqwv7pO9O3hPAfrCZUOKXCVcTLhY4eIpZpTLSh4Cqq82EJ21rwmQ/bWB6LAtjm7RqxB2fkeBv7eA",
	"bvTa7s6PmkPQmUlhL5IQhWgZBxhR2VchAVMfhAshdkR1xdWW+vHQLEfuctI4Bf5Cti37um79ysWucDLB",
	"X6JXa5EugOdICLo7162ry+Pr1u5fU79fEymQSrtFB4hsLcx/IZERaw9BpJ+pIQ0pEtLqDoyfyQml6ppI",
	"YnZlLNNFgIkUlfLQkhd8em8LGNCkpxtOmxAYuejkOGjBwI3PZqJfXtlnMxTEjNAcLVy09icTipgSBd/5",
	"AVAqdBtct44ODn/gR8nhy8uDwzcvDt4cvuwcHPKRlJCnQPwQH0YLSLmAL8oKInxNPn/ZBry9Tryw4C0c",
	"CV2lLXwXdFEQAn6kKhe2OMWpWgISonJV8D3NhYHLFxrz+6PBSCy/nV2DFNyZ+79jz4Ni2SGydzWSFp1f",
	"0M1+Qsz+MEpyuf/e82+gNx4IKug+J2lf64RvK3PEZr7b4fzIvagttgBJFPiNy6R8+DvRP36LeFJRHBTD",
	"iDNgYpPz9RtlwURU1pjyHdpZyN2Ps3O07+EbrhML8b4zY3PvT+JfUd1doRNfkxjaUTd0gRzw7Tf/3Ptm",
	"vveNe/nNhzffnL35ZtT5ZvLrtx1wij+jO0yRUKv4ICVzFVKkmvuH70KB3W8p+PhbfzSI5CGZPE4wr8S2",
	"TzvXRJjX3uzv/5/vwj1JpLAfTfxgijoEsX24wGJmOGe8lNRZJMH7+fYFt0kn1wTspi5QZEWGAhnWzhOq",
	"v7JjCyjFpla5bcdzIExqmkXpkLbarcPOwcHBi+8PDg6PhM0y1uE5BYIfgxovbs4nvrQIEgYd4fQhbwFa",
	"gwUi8n7lQqUjBe8x+xDegEEwhQT/HpkWw8BrvWlFGJhiNgtvhE7nLxDZQ+4U7UUJTaWJK2X0tF/ggO5F",
	"v9VuedhBhCKNsu4COjMEjjoHud75IQbFZwFAVZfun/aPe+ej3t5R50BMTEuzExWQ0Gq3oqyfb1oHHd7j",
	"Q7vF+YIL3HrTetE5FEQsIJsJk8y+YBfzxjp+4My41ileIsMFpvu3R/sznzJRcooM4QDeI6aFARFl+Wyr",
	"LHUyMkXrg0/ZCAW32EGnmIqwUsIICgM4R0xcMH3MZ3dSGW1FzjhAES/Nt9uoL2FrExYFvvTw5J7vGH4g",
	"kOgHLgpESkaEYiu00t0hXnRcdLt/+OJImAWiNOTCWtp60/p3iIQFSU2daOot/0HaMgsDqTwF0XVeHbQz",
	"Fyyiy/GN0WBmnRAZ+kNedbIwUJ5zmKG5TILPUIAoK2Pk1UGV0Z9EgcnrDP6mCKw10m/2//bdzu7Xh+vW",
	"t5lBj3kqHfIT4ecsxSs4j6yD4nKVcyfPPb45R3HcVTi5BZwK/+kTldXZn4CjA9sQ88Ij/DuqNshrJykJ",
	"7GALz86rjqmkMJ/r4mvOHcxFXyKb9AQHlMmZj9GgAttAz/PvKKCfsVBTJAvWTUAId9VGaGUC9BHRX/3E",
	"ROQG4ZO4PFr4/ODgtB0dHEQnJJK5/uBi4alQDvv/R6UDccJL0c1NvGEPVQ/yFM74PYaOgyiVh6WY4LX1",
	"n76eNPTdUx/aLRrO5zC4b71p6acMg1MhdGiHUOvTQ7u1UGERMxck4uIdwNh503qSyZIiuKK8jkWUvfXd",
	"+7Vxno7JmGc8TkXKfOAof4GHDSKhjJ7nBoLUBJlR8NCuKP/sB2iKKZPOjGbkDFWJKtiJym4cPYroh4eH",
	"BhkJMjLDvyo2viZOIA8SFx4yPVM4Eb9XwYcsqcgrFJPPVT63yN883hHEMyneihsfalzmT840zVNJdyeR",
	"d7C2c65id1mXo77JiWWTp1YygNt0bKWm3XZuFahhUqfATjnA3quwwDXQpTYp5MatbwJU+V6eHEvbtrsl",
	"c2sVfSBzDCmkLvjPVbYnUbAKfvQXacnDjBsE1JuddaKoSl/VsfT44px8yuNKVzUa+6vKyWhO7wTfOvqs",
	"CA8Nm6Qc4SoAlyVXPX83APKK3TU4/wPgPAXCdcqo+8qDFUoh1bhW+nGRKuslKV1lzfAyQHOGX+P6MDSt",
	"GemKsgMULpWclSmVZBkECFJfXC0DZyYjnHI1cBIgJG4hhNXXYloiPisyvS3Xke6Kf3hUK5KLjEuTdcy/",
	"bmXfP/im98oblcPSINsmuT63PNa6mn1y48NAPGiwCHYDWaLKSlZF/5jLeJPo1AZum6CZnu+14jJlMjMD",
	"MyWRAVlB4rJc/8gYcTJQXR6JawNaY9N7dK1gvYa9cdx64eW3KqWL5XpWwzIbDB2pXqpeiDf3rxu6f93k",
	"8aAmW831Np0QeZguv6yi5+9V/Uni8vmFFEWN0PxK+nHrjW9J41vS7G2Nb0njW/LsfUviTXvb/Ev00yY6",
	"ETOHUhU/Ez2eU+EJJ2v0kwiBm9Aw8rGYzH4nSYDFx/E9qULX8/Q/0SbMjpJaslN9f4PKGJM1NJIr333E",
	"gNCRsXkfhArdPhNfBA3BW+aPUAnB1fwSKgPxvRbrdSkfBb2nzfop6D09Oda2cZ9Mz3XhUVrst1AZXaJC",
	"VXw1Pgz14GW5300mp5ETDJbLqiug0K+h8gKQNZoV0KyAZ+TpsGFJubbXQ+XVlNSqvKIiaXUz16eW5ivG",
	"B35C4SU7jtt5yb82IIt4UV1HRHOqajKPkpAbTOanWnOa2fw01UtjOm9M543pvDGdN6bzZ286T23c22Y+",
	"z5460UlpOKSqmNH1o7LSySdr6h82ZFLXuygzqwsuoCz7WKb1qvQ9T/N6ZgKLUVRb5qpvao/Er0oYlLUy",
	"LFQ2dmbBsnlre3GPz8TQnsHzlhnba+G5mtG9FiTfI7YsHhOTuI6TzRvgs709OQ63dUfNz/16tlMRvrii",
	"+hqXN6OV/5FRXWXrJTh9J3WPuHVwcw9UCgfjowz5qYJYWdDw2rNL5KXqoVSkRMY7TxsLE0905t+NMBP+",
	"ChUYszUd52aY+Xcia52Wn+HG9z0ESQGlKjFhFVplbr161BqaT9EbxG3mKH4MYV3QtI2CejyY2n6gLcWK",
	"e4FazmQ6piKCbNU9YTAy7AaDqDEZjVbbFDJfGpNWY9JqTFqNSasxaW2BSSu7d2/bYWk4e6Iz03xgVbBt",
	"ETAYVTz+ZJXMtw3ZtTK9lJm2fPpYBq0ahD1Pm1Z+/koxtJT4Vdu6xZFYVRKTdfKsVDYn+FRhZvN2LUtX",
	"z8Sglcfzltm0lsBzNctWdTS+R2wFKCa2Jp9u3p4l+3j6B+3bu40aZ7vKOVzoX1pn9xNVaiKucbNbCnwW",
	"bzu+ihopw+5wutwCKXI/rbM+ZJ01SQcbjrNl6apZHn/Q5WHD5nqEcDqWGBovfA8795VNoEAtswteDZte",
	"xA9GsogocS+00dQvjR20sYM2dtDGDtrYQbfADpraubfOCpo9d+KjM/2hmu0zdfLdl517yoSWpWAjUli6",
	"E4vhM2FAnviPZgYtpe6ZWj8rg2cZeau+R19dACqbVy3RS1c3sv09jgm0vNenN0htHaAtUCjYDatZPesB",
	"8j1iy6Pxv9P0uXVIM83xmvbNICQbUFKHIdElhWFIGvW0UU8b9bRRTxv1dHvU02FItlU3lSdO9ozkvy5x",
	"QK6iVQxDUnhMpoXICgdl5u5CUgmCkDyaM0VRl89GuOMjuXU6RBFq62oPZcDTZMqaqPuvVhq2BFe52V1+",
	"K4xDTqweouJCfdLc+S/i1hsFoVEQGgWhURAaBeHZKwjxpr1t6oF+2kQnYuZQqhKOwv7mOtOYrBH9uKGL",
	"qqj5Mh/9iOrHuqKqQtfzvKTSJsyOklqy0zpDTWRIkTU0kisL8jEgdGRsXoWs0O0z8c3XELxlTvmVELxq",
	"gIlMi+8RWwaFiaqn97RZpVLv6cmxto37ZHquV9sko2f71dRLVTqPRhlRQFMtkxADjWLZKJaNYtkolo1i",
	"uaJimRuEdx6cik0GT/mCwJIY5jPoabMmwsyISVIhXOjMDz2XT6KkVBM2DbFiLnlzNYLbrJWoVIQZ0YY9",
	"Ls6m9W51om2b1p0cxJGgkDqrq2jccopKDn1ZWv60IV1bNl6maStAPZKeXU7T89Sy44myoaKG8Fhfv66E",
	"KFk6JrSGTiMAkOBg81p1SZfPRKOOsbpl+nQpVqvp0pVA9x6xZRAX6bZJH5vVoZN+nhxb27cD6nNccCgW",
	"Z0SqhKY4c3Y5npon6nUgZXl6G01Kc+Ib87eXIb4wA1IlwCv/hrWc2Rt+e17SZYP/Pwz+M6BcReLldLih",
	"VznLelwe7EgTyX6AFlz+dnfzK2mkCmtm1FHcX8liaoxIjRFpKSMSV5lnPmWgfwIYDKaIRQTF2O2A/gQQ",
	"n0WiNHLbij5BWlLwmoCdKb5FRHqrshkKgBgeILBLd0VLhlZS3QE2gwzM4C26lg3FFWJCxQaCXD5QbIbm",
	"bYA7qNOO6MfE8UKXD5TMDTdDARbejESSuIABIkzZoCRnJPQ8SR3/V5q9NHF3mM38kK/xmBiqOrZBghcU",
	"x0cFSDTTsdbp0Gz3/LstLxv/NsZuFWs9nyBB6jZMUETo8hPEN+Ja0xB3GU2DzbaMGaqzKJoxrzfmGvL5",
	"Zxvy+bcayFfScq15uCbmmSibBzkK1WciMw8JqdmZuCbV5yLenlRzqQ2q7jxpJJWdGbJonQXSTM0GpkZb",
	"RbKEPbMn/1pxJanMFjeQClbkDRmeI8rgfNEG6MsCOUyOyg0CV+f9/wVo4TszcHV5nBTkQjNFjk9cqzAa",
	"Evylx2vWyrixXrq0IeRjl74l5wSOkaLwURPJ6MrVtt3p6VphpM1mlMe6+mysl1b2BJLFY1IqqbPDbK1G",
	"rW3U2katbdTaZjoatbZRa5sxb9TaRq1t1NpGrW3U2lUcVTNK1va5rOa1RLuaW8F9VTY3jhZIqaoauUim",
	"ydiYV2u6m3L/1gw7j+fqWp3Q5+r0mpvRdZtPlvGFrQvPyCsyx0wNd5sshoyoegzH2SUIeTbutLn1sHWO",
	"tTXWQ1Un27poFt6Yq0A58Yk1dL1pN1xDl8/AI3d7N2ozGgpP/zI/3bqAVO6S9SDZuO8uhz+rI2Nu1hrR",
	"ptC7t96aKfH0rbtkIg/Lx5BINu4WvAQhzWr7b1ltVqSvS5GQt4VV3YtF4Xp3sKN0neYGtrmBbW5gmxvY",
	"ZjqaG9jmBrYZ8+YGtrmBbW5gmxvY5gZ2BcfitIq1de7FOQ1xhdtXqXvVvXtNk7Chm9d0J2X3rhlGHuvW",
	"tTqRz/PONTeT6zWU1L9vrQtIWTHHRmXLZhY3Bhxt/p61NhHP5I41h/4tu2Gtgf5q96t10fseseWhm1x0",
	"Grrd7M2qocMnh+T2bsUmFKxwp1oXhKJePRg296nL4M5yv5Obr0Zgsd6k1lsnhfeodZeJrLhpSWPD96e1",
	"iWhW1h9/ZVmQvaIqICIBV70oZcbrUczSV6MMNSHrm5D1Tcj6JmR94xSwBbnQxIa9feZVljaqJodQNYMq",
	"Q4UnWWR3Y5uzm7IK1lL2iCZStpWGUYasKKgs/yxj/yzBT2S5YjWVD5bM+mMYNK3dPRvTJdtKg2UBKqua",
	"KEsAJqxRbGlLJHsU8yN7LjZHtn2WxkIIldoWS9CjrDSsMSGuEUZW80ZzdhtthMUIL7EKlgA8Mpasdv5u",
	"3Mxn7a7B+R8A5ykQLi+jMuShOWLB/f408MMF3ff8aVWbXVx3zCuNZQP5lXMZFTv1p/Q9L6RZ9PIfmwcP",
	"jW1jMw8eGsPw0xqGN21sMuwl22Z6Mm+H0fZu3UmrmKVMu3WNzVq2k/+8IRNWvqMyg5aJv8cycNWj9nma",
	"u4xTWwV5S4sZ9U1jK2JYtmNktLIYb4aZBXubN7OtQM4zMcMZ186WGeWWXjvVDHYrwv49YqthPjG72SjZ",
	"rLHP1uuTI3i7930bLja26fM/sFNbvTyT1d6X6Zd6OZOKmWqn0TIbLbPRMhstc3ktM7WdbK2imd0Uc5u/",
	"YVetp26qXb9UbDF0lNFM9BKb1jv1vqqrnileH137rErzM1dAM9NcEZGrSCSraKIrwDujPGT4XkIlzcDP",
	"DsvHVEyXJOq5qaeZxbWtGupyi6uunrrCotC1kmVXhEl1zJH0WDprruPno7Zu64FRgJGNnBaLwJ9gDy13",
	"O8q15wvVQInVRhWz3Y9GrTS6a6O7Nrrrf8PTmaEKYCPeoaTEKhDtSTLWDgwQgJTiKV9Ad5jNRGkZywcT",
	"yiBxEMAuIgxPMApsAx8VrRp+aJP0aUPKS9ji70S1K0bgWQvFIoTZSWcNAc7WTM76Y3+thUAV0+pkPTGv",
	"1k7SZmI99YnLRSJEAZ6IvUiXChNK6cwPPZefgOgLQ8SNSY2KXpOkcMALBMgFk8CfgxlGAQyc2b06GiYe",
	"nAKsBiakyAXQ88lUtucTdE2ip5Z9EblLDjrwA5CsexkEr7AIH9drIgOKIdYGTO8bT4kfaGpldm3M/Lt+",
	"FMyr8sH43z2O8aqd+XdjrA2eguCN73sIksf2sImk0a32sdFEauO1V1oiX8LPRkGuluBvcMhQBR7D20Z1",
	"VdPfRvH5JB43FSjeAp+bZIqrIXEFFXZlz5tlUG1wlUhYXtb/JoadFY2P7oNTl6Tn6IeTrKht9sSpu6KW",
	"8sZZZilkPS+WWAdW7xiNnkf1ytH6fV5+OVt4OtjxUVlIKX7EtwYMi6aWQXHz7G95oFqeR9mms5HASh4K",
	"rrrKCh8SrmGRybaeQmba8PPEFUlq1ux/5ZotXA4b1ZpWc12tcP2XLlngvtpcAjaXgM0lYHMJ2FwCNpeA",
	"zSVgcwnYXAI2l4BPcwmYEUi3/QlE0VWgUTpf7hlEuRnA2JnZR/6RrgXTvdV/DvFUl4PV6d6OJxEFyq4N",
	"oavpu+t4GLEk4M1+6ytZv3JwLALqUzyRWIKwZ/pMYvsvEJdfcss+llhyoRic4dd0n2gg7LEfTTzLW8Xt",
	"PVYKsVJH6ql6vbgittOXNPXQ3dwzrgTd0muL3NQ2Il2NC8eVVl/Fa8cVF1/mtuUpJLBHu4VcgbBmXf93",
	"r+uyZbJWVe3ODz57PnTHczS/ESuv0oVktlp+K/hFlTgTBbT7x/SHJvtSk32pyb7UZF9qrt63IPtSZuve",
	"NgN9/uSJjlLjYVXFHJ85Byseg7J6+tOGTO6ZTiwW9gwbj2VXLyfueZrRczNXhqNlJLH6pvLlwCir51iq",
	"rIxlsWPA0uZN37WJeCZm7vSwb591u/ZKqGbLXg7J7xFbHsaJ0djQ+Wat1IYOnxye27c1m2Z/nftyXdW4",
	"QCc2aMONHtzowY0e3OjBjR68RXrw1mrAJt13Ca239IRLq0sbVnHL3Mgiqh9bu90+NzFtwuwoqSU7La/M",
	"lmIsrYgso7mmkPF4umpBt89MO91evbRkn6uji5YCUVNAVlM8H0/jfFaq5pb5PVWEWIlnU2V0iQpV8dW4",
	"KtWDl8WHIZmcRk4w+B5VXQGF3kWVF4Cssc5zfsPOQBW6bdbFH2xd5EBaID8/xF/zzyOn2CedBIvyh6hu",
	"XskfqRTjqrietjlf+NSX46FViH6yV/rgU6ZV4H/aC/fVazStQvSTvdJALn4yHd1ThuZa3cwXexMXgX+L",
	"XWlBV3Wjn+yVftE2IFUpO1n2SmexxT5TNW1pNsyYM0NuqEI4RNOmfrPXymdQ06rb06sVNKRHsze1ZYp2",
	"X0LXReIdaqIs46ZWTltBe2bPNzPkva7j+CFhGdhHPxcAcwTUaXXhe9i515E5kl/kh8K6w5AYKg5D0nr4",
	"9PD/BwAA///rE/I7DqgCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
