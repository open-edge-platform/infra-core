// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context, params HostServiceRegisterHostParams) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string, params HostServicePatchHostParams) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// RegisterUpdateHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServiceRegisterUpdateHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string, params InstanceServicePatchInstanceParams) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string, params OperatingSystemServicePatchOperatingSystemParams) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string, params RegionServicePatchRegionParams) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string, params ScheduleServicePatchRepeatedScheduleParams) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string, params ScheduleServicePatchSingleScheduleParams) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string, params SiteServicePatchSiteParams) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string, params TelemetryLogsProfileServicePatchTelemetryLogsProfileParams) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string, params TelemetryMetricsProfileServicePatchTelemetryMetricsProfileParams) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string, params WorkloadServicePatchWorkloadParams) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceRegisterHostParams
	// ------------- Optional query parameter "resourceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "resourceId", ctx.QueryParams(), &params.ResourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx, params)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServicePatchHostParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId, params)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServiceRegisterUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterUpdateHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServicePatchInstanceParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId, params)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServicePatchOperatingSystemParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId, params)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServicePatchRegionParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId, params)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServicePatchRepeatedScheduleParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId, params)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServicePatchSingleScheduleParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId, params)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServicePatchSiteParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId, params)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServicePatchTelemetryLogsProfileParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId, params)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServicePatchTelemetryMetricsProfileParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId, params)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServicePatchWorkloadParams
	// ------------- Optional query parameter "fieldMask" -------------

	err = runtime.BindQueryParameter("form", true, false, "fieldMask", ctx.QueryParams(), &params.FieldMask)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fieldMask: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId, params)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServiceRegisterUpdateHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"fwEAAP//DM/R/1z3AQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
