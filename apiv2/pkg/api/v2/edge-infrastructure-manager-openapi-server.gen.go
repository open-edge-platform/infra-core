// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9CXfjuJUG+lfwlPRpO5HlpZZ0OScno7JVLk3bkp8kd093qUYNk5CEKQpUSNAud8Xv",
	"t7+DhSRIAly02FaHOTNJWcRyAXwA7oZ7vzUsd7F0CSLUb5x+a/jWHC0g/2d7QYdfAvYvRIJF4/RTo301",
	"Gv54M+n1e51GM/yrfTWK/+gOrxqfmw2KqYMap2ETzQZ9WLK/fephMms8NvkXCilizdvItzy8pNgljdPG",
	"aI6Azz4BdwroHIH21QjstS2K7xC4ggTO0AIRCkbImhPXcWcP+yAaQ6vRVKmdDEftUWdy0xted866H7qd",
	"c0Gq/P160P+pO+z2e6nfb3qmL+fd4Vm/1+ucjTrn6YHy4WiG+h56aIEodM5cQj3XcZD3Iya2fuSsNhv4",
	"+6szdSzv24POVWfUvpyc9XujQf/ysjOY/NjtnafGZi4nF81coHt91c0t8NP1oJ9b4Pr8Rp0T07g1U3QW",
	"+NRdnLlkimcD5LuBZ3FkQNvGbHKgc+25S+RRjPzG6RQ6Pmo2lspPDMascnZSRaPAcglFhDaajQX8eonI",
	"jM4bp8dvX/3wOiZYNqGhL9Fkuoe9/vWo2++1L/eB7Ez9nujw5M3bZmOBSURAs7GElCKPtfO/f/73/36C",
	"B7+3D349mBwdvGsdnv79H//1z//nT81xcHT0yuL/jf6ytz9ugM9//XMjJjzZX4Z6AhfIODFLz73DNrLB",
	"7QOA9gKnKH59lCCR0feZ/dfRwbuDz9+Omq+OH1VKeFcaEjy5qF0N7MNvANuIUDzFyEvNWnKaLA4WsVgH",
	"n44O3sGD6edvP3A6PATtPnEeGqfUC1BMV9jHBGvxR/EC+RQulhxKf/bQtHHa+NNhfDQeynPxcBSXfOTj",
	"+leAPWSzPSrHLlGkbAQtuiMq3Nv/QxZlVJwjB1GUKr10iV+8F5IzGlYDC+T7cIbA1PVAtvWWsnA5fRsp",
	"/ej6dGUKTQSyRrOEJboyEtQlPoXEQpuftrDlLGWZPo3UXboWdNqW5QaEbp5CtfUsldq+jZT2hzdLG1J0",
	"7TrYetg8rf0l8iDFZDZ88ClaZMk1EFBI8CAgz0it2ruZ1GRrz0GugQIjydfiivA2T2vYcpbITJ9G6gZo",
	"ht0tLLtoN0tZqr8cupYIUmQPrTmyAwdtg8JkDzpaDTQYqR5iMnPQ9mhOtp+l2NB/Dr10K1RSLW20BEUj",
	"5DC213u4dGf+hecGy83Tl+0jS20OHeVov/bcKd4GBnS9FNCfpqV4BFeIetja+gKo3eSMQUtN6UFsfyWS",
	"HRUPpPR6/Ox6XxwX2ldocbuNGyTZfpZwQ/+F9G6PUjONedRdIMp44GGwWEBvVZZM1g4VK3PXpz7XtQQ+",
	"oyopUCPPcz2DksKl0AEkYFPKGhMNLT3kMwGOzAAkoMOqt3JEMtF+NFRMKJohjwuLASFMMKvQNyZgIGoJ",
	"3VFex2Hzuq556xU6zutHtKXrJSDQcVyL3cxVBnmP6dwNKIDAx/lDVDvIEvAYFzTASgNAIYHNsE+RVxF2",
	"V3IvUBd4sgUAQSjoJVEHA+r2ya0LPc3UfHDgjLXi4xmBDvsXK76AFFvQcR6AKypG4Fa3Gis5kQXi8d26",
	"roMgYQNEBN466Kel55bpWJQGd9eDPnCJtkdRZHLHWtR1qFfLjGRLgH1upRQhRwX6opReyKSN8ZGHodPj",
	"8MqhQBSTMORLFfe996l98KvQA33+9qZ5cvS4/0+1a1F3IurqaAgCbOf0fXPTPU+N/tXbzOiF8qd98OHz",
	"tx8eD9Q/X1f58/gkocTipGVIVnZNYi8Y90pJNWZyAtp8X4BQX6XZIJFWPk9NJRXvj01enp/w2cm23AU7",
	"MKeeuwA2usMWAphQz/WXyGJFWmCIKHCJ8wBuHzjEz6/A4Cq1LMdHJ6/NJxFc0Im4YXQgiIjrEhtbkIoL",
	"J29gieJsGGorkXIuO9ab0RmItHzgfo4IiEkD99AHDvQpsOaQzJAtRn77wAYMiQ36bNx8JvJO3bjBSdSV",
	"9vy/xa4/QA6CPjrX2kDed/tDIEuA84L7jLU28UThiW0wQrBCPyFi66503pv4WNjPnWjD2IPna3Xksgv+",
	"tUQfohVdJwurq1nd91dnoHsNoG17yPebwA+sOYA+GDeO3520jlpHreNxI7ffhTXBS0OPobUmD5cmY8dj",
	"s2Etg7ZnzTFFFg08zWqrX0Pe7Oz6BixcGzlNgFqzFvj6w9vJ29d5Q7CWwQSq/WgGYy2DM7iEt9jB4XmS",
	"4hB5UeBgnzJKoONwSiylEthbur6Pb50H8N/Dfm+/iCa1rokm19MR04v4H04DK1TYGW9Jt+esZXDF5lNj",
	"CAmnOpz7kDPJ64hXMAxn6FpfEM0d0HL+4DOmhY/MF+WLupTFTKMbzVllTa8jzkzGfVNREPjBcul6VJh+",
	"JOaKaJB1jTS4S26RzRLBoAKmGDk28KnLQRbCnMpKTeChKfIYd/XxvH34cXAFbNfyuQjFyvImxH4rJDOk",
	"Q7dAgechQlUDdNFNysvFVa/de+SVqqyUjKuXqsm58rCijXzsIXsVkmXVVUmW1auTzJi4i6WO63gPrS8H",
	"fKURsbhQACmF1hzZgvO7uL6J2B++JzBFC79M57NlEHFdj2aAsF4ms6XKkUDPgw8h2T1srUB2r3u2ItkE",
	"W6XJJow2PdkmLo+irzSATqSRoHNIpYX6Fvl8Z3kBYQyLVAWwM4IfgSETNLjyI96nNOPHyTVzfjHFa7F+",
	"cTPVeD+FOjPzp467xDALmD5BquvBGVoBXr6ouSLEZO3SMPNDOvVQu/FvVxjCzfD9iuQH/m1p0gNGm55s",
	"vcD9UX4pWmWTMI3JHHmYIvsKUWhDCvVS7UJ+BVH58NpljbO7T+rPpCtGxIN9QQ+nd9AJEFhC7PmsJLGR",
	"J4pxJQ92CZdSHHfGeQqfegFnAcvPckh7l6JF3hRHxE/C8WjmGkuTeFGniuk8WtsFWrjew/sHqtsk/28A",
	"CcWUKzBFQbA3aF/tAyw0MD43aLK/blkDeSsqqk94Od2qLoyLqbj7JNYV+r5rYcjW7x7T+QpLu/JqLeDX",
	"rqh3fHSkjtG4RNV1T282pHsirsnpj30xzmKamuOTTTpSmVDCidUMQuoRMZmtcevGjWz04o2bzbl+0wNY",
	"6xJON1btKs7Qu96FnGmu4FpeMn73zF0sILGFu0kpDjlZI2ynT9jYSw07BDYfLa+MbBDq3ITmqYTKiVec",
	"uIQP0jy+jfOGgmIDsaWhKqg3o1ShfS2AKu1Uw6ZKYK6SsPRSlcOk59qBRXvaQ1p47YBrUQb0ClgX2dbE",
	"dB5L/8/CeVUcchRGbIZ96vF5fnkHoUpdDsiyg1gLa9nmqkFOQ/V6B6KmwQL45TnrhssPuudNMEMEefyu",
	"dgk485BUVKsr9CpxMbMDb0Muu/k2rOEV1zhLq0bGkGXqs9Bq5eNiPYh0E4p2CavTNdi62De27h6KLwTs",
	"A2m7zZ/MP//7f1n19HxGY8FUO3fNxj3j4OPhr+z/bDLipTjkyJ6nOHj/Xf7gg4DgfwWIyy94sQgovHXQ",
	"izP8Zdy8P6eNgWav7lgtptG2Q4p81R1DffPxsT/UP2BRPpx3Ljuj9I/93vt+e3Ce/vmmNxrcDDOlB52L",
	"7nDUGSQftMRUa3ZBWtlWzcTJcY+EfeEOYocb0iPVnwU9W+ONYuWaLViTUwS5zCumE/u8NXEANIHF2DXg",
	"oyX0wo0VSVqZwyB7Qxg0zVrLRiRj5T4a4RsjWEBywFrnUxDTqz4gyTuuCt59iMb0XATrjCEZQJ/Jp5Ed",
	"oD/M75C1aOYlLGw66JTBXZ91lZMgl3exsOH0l1xNYV/cTFOCPdrco5Bm485gZk2RdldocDXZWlOeCOpO",
	"NJw/qop5U5uVMQzeFEpdXnK33i6sbvg5OxE/zxGdI0/sUuwDCG4XVtwecD1AXFporo060DnX5GGfjUku",
	"At8Ce/1h9AyqCRz8BQFE50dNgMjy2Gf/S63W/hr7Ai+lZdp0dkVj+d5X7NhcT1RaKdS9botqZVSlKkXZ",
	"k8vB5Espk08P0XvX+xKt9WVUkWulLEZRwYjBVfssHHCuwg5aE1ZMq6yjQbaXK/gVL4IFoB4k/gL7PnYJ",
	"4zZoeN9GJOR2SwO9iMaOuui5Wqbz5BkHBKnSkol9QMS8lSNBnILK07gsV+ph967D3c00x283NVwwhz4Y",
	"Drr9n6QXm53LErO2J7KgdqvxEj9N/R5jW7SKvcj0/NMHH0grqPMg9hxbFiFAJIhsAjwFw8EBoxIrtupi",
	"Uu+mPmPgtasWkjoyu3kuJGySRCcnUFLjr0ek2T905eeI6rWgnvmGayFtFtrU1RAaq1QGSc/SWZialP3i",
	"HbhoSJ7WZ7IG2PPx72i/lKI/7MWs6i+6KlJEFNwcvg2bwLdv5a2x+qWx0HuraCgqZHKMzipC3i3ViZTT",
	"KorST8VXDZPErs5bNRv39ybHVP2MlGNleatFnFx6Pxq2rWoOXXnL6k2yKV9T7fXNKp3LTSAOSej7eEbK",
	"CBDJG1x1idS6igS+cg7LabdcQpAVGohyucTA4KjkQF/nDst+BjaaYjmUm+H7g+6H3MOFt1TxTGF3SX94",
	"ED28Vw6UdXhM+9okE31EX6GNLLyI3xREJknGlnTPQ5aILa0kRwpGeRRhe5IjPmHb5G+6Ej3FWxrbOd6p",
	"ppNuqJ5nMcqe8mRLHQLq7tYcABGbL17pXyE6d201SEv3etI+Px90hsPJWb/3oXsxueqMPvbTkUKMxYaj",
	"9qh7llfi/Jde+6p7pqqL9FRppigrpVQL8yElBY0XZ/d8EMNIOEVIFMUSVdHRhPS72UpNdSkxLDETq2nV",
	"bx9Al9whQl3vIVaxp5TCbxLKUSHYbUrHHtl0So1YmoCiiueIQqzZczc+8g6mHkbEdh5Ckw91Q04K2Lye",
	"D+CtG1BhhAznx5cqSePeFPYN0cJWtmgWwHmbNLaKabYn22k3Q/O+lN/bw2H3onfV6Y0mncGgP8gpZGhB",
	"bN+bQXvU7fdyGgnLGZoZdC477aHho2hVdyQMjaa30AHIHA4pLAG+YGKryvFubzhq9846uiBIyW88VlGC",
	"MLXXHKpW5LHS1RVjJyRA+EZR4eHSH4q/HacJ5KtEts0R5uoxOBZ+isD1wPxhibw77IsbMCVHCYG6X4jo",
	"bOCHSE9UxTU5HKDi1xxHjdEvY+jwJEoCcZ5qfX2wEmillNpLG1wnT2nPy0/SsZ4i3Zc6mO75VoazWmij",
	"Yiveiu3qJqZ7np4aXYfSO3wt5FXxMM8gD33FPmv27M6kQTj7qeMLnwPooYTuifMJod4pbLkJELFcxpVD",
	"H0Dx5CDUwiYeYh4dHa3gcvbX/29vf9wYj8djwP6LjMffxuPH8fjTePw53xMtHOnEukNGh+oyvrTq3LM6",
	"Joyzb9/7WSG3EObVrP+qh60KuhyYh53pKD9nDCC3nTfBSCFMN5IWaDsYcnthxJud54+ANVeWt1LI1HoN",
	"x1Be0W1GgjkaY/iSfy2nmbCxHIeZJOkmJm+kG8AM3yFf8nfIVrx9aHKtfHdK7/mGjUCsHUXBBvznf2V9",
	"Pgs8PlPjz+Ekk9Owls9Qsqlq/kIpgtfzFUqPPt9P6EuJd5EJZuux2XCUQGSmoyd75rhT7hLjAChqgnvs",
	"OOAWVTmMUlcib082ZzqUeJkJjKgtczqp7RZNTioqW3Qum72zlT2S8h7Yosu2u8797vqVlrk/jIU9fmQs",
	"Ap+ylZaMsmoqksvMD3rxtBD7IPCRzYRJ28N3wqnKhg9HwBUUusRvJn2NgMuPTiQEzSn2fMq3WPq8SaLH",
	"9U2Y4eMtAxTXF1Hj2qHtRHebqYJwfwhEDV+xt0QmxShCIehOAVos6UOTjchDnPEhLgjSdTMnahmeRnek",
	"qhxN/unq+hNBxiSiQg84NfyfwI+6k1+l1kK0ueSlzesSdr0MWy2zSpGNcj1ff7UZ5dqLF22dO1ttPM+b",
	"OjOU9ZyqM81V9K3OUr3e5aVp8NkcXaswigVKOOmAfw2tL/qng+z4W8qvysmQkmwApKEvf/JFUq6g8+bo",
	"ySUdSeQkHJJem28FHqYPH4TPXyF8U8XXMEJSL/ApstuUsh/XdHyXjU1g3NrGDwdNHzlnhGl4a50Upkar",
	"nRfmgax3bJjbLTg9AuWOKmSQEgFt49prgEc0sHG8yEvSDBGVcJPwp4rhIavuoYV7h2yACehcfQB3r1on",
	"raMm49eAEkCXs3UI2i2giRgRGgaUwSanITt08B5R2AR+wHXzjDEUGNExP0clZyVHKFQnZ609ozZUbZ8k",
	"SF1vayRHnb8b7hOBFg3XVFgILESpfPkN3GZelLPvYbhEcJVthBdRuOGyWuRkmMg8/XE4hIkcQkaF/Ji1",
	"NOSaihI6zXwjiHgvoDWD6N4JpD4Obnq9bu8i+yF+RJBpLnwxoDGfGF8HdMkddDBDzloB4jWBNJMtq7H2",
	"DH1q5zssuY1o8XHrQBcyPqdzDamXqhtuQZIUrUdpiJJeZ/Rzf/DjpNsbdQYf2medyWW396MWM/lFr4tK",
	"nPd/7qlgiYegAcol9qlqvvE3uRJsUjIdgAU3x+tsaEopjZeIeB8BiQ2m2KH8rW7SCCTMJv7aZiutNUYb",
	"0AL6PfRV4+3TJVPXWwA8VcT/heshwEP4EhFAKtS6Q39CWCs6v17un9oJK2nyhwSETwAfbxiCARGKPWEh",
	"Y2LGDHq2g3x+ZS/hDBMYvmlhREIq7pBXJ41U2NSJSmw2fKn6Hiu5dGmy44lKoNIEPO0u9HmM1K2gkzds",
	"ROX215gHlq2G9yjubenwLTp8i46zsN4R0EXklwNbEj8GkIVXwlaAFjX+jGALGbuKgIuqlX8KowkskzZx",
	"7DD4EkMoB8AstgwgVE0SWwFiooNnBKNqiKoISNXEUx6UJmOP1ti0w+hMTmxphOqBl4NSbszZFkJ540Z0",
	"Eteueoh5PGtMBbToRtkKf+m5dgI7gqAsZNyALgNqxozyUr+90OLHQzTwiBxILk5EX3lAKYRwIpPey0Cz",
	"mFkNVpPwK4vT5ApWDQ3OiAmnIor8Rj2kCRNuNiHzRrjxGGSMx0WW4CX0EKGmN96KHsZTrSdSRBWV40/h",
	"O/1wSjhlrTEBXTFCC/q8EJSbpwkwBZYbODa4RcLECVwv+ty1tXV9TFFxTWXsgkyTMSbHYpSaAj7PntGx",
	"G2cdu1UqlI50anr+wyonSHjzCH+MFNgTnUZr3UzAQd0KKpZL74AEBYpj9KAz7N8M9B69yW+DzkW338v8",
	"POyOOip5iY4M6oftZboLb5NkD8/I8CSM6rjq/RU5H4CwfumrLGv7MNjk8S4z5ZnpLc35lE92qJbecKrD",
	"NFwHAXkBWB0EpCJOXT+0CHkBqY7RQUD0AGWt7T44B3IU1YBZkNeSF006gG2FL0/3YcSnwRutMpIqwMfs",
	"/xZOaFRkIqLUTqJ3t7Vy1wxc41KWB7EJmQYkh3EOtwLhqPFnPFvDgI8Vt0NUrfSm0EWMTPhq2Trz6c5A",
	"MzGEcljMYssAQpFjdisQlE0/IwClKmS7+pMoS28GemH3Ows8ZQDlYJdGkxF0yWTBW4JfqpNnBWKKlqqQ",
	"FNUnfli/AjozeZk1OE03v8uQTc90BfCaUGmA8Vbhm2m8hu868PUT2b4rDkBUXoH8TI7xDPHppnd356Vn",
	"uLnOXiy/B5O9bmUnJrt4xn1Yg/jpQVwWsAYcGmFLtwVW+swQpdWBSSuhkRowSHcbeLQa3GgxyKJU+pfu",
	"zL/w3GC5FchpunlGANIsNdXgGDUwcdyZP5nxJkrDMzsZOrBq+9hd8OrmvDSU81BaBtjXnjvFW7r6tR29",
	"FHCH9KwF76VsZDWASxJKQDzs5w8C8mtlOCvAPIPZIqBfIeph6ykO8URPLwHqCYJWxfpCNLLyaa4SkY/2",
	"ZE9/ALgn57863vXQLQn4JzncU329INCve8SHYFz9lE8SUg76f6CzPr0OK8O/7ImffB64FdynunhOuL9Q",
	"NJR4Y5q3/9IPN1urvw2t8hZUBXCa/tK4NeGvAK5bBWoN0TyIrgjO6qjUHf4xESUBuQIU80Goe+tQLdBz",
	"UaCwdKS/ZHyw0LmmbNw/e/VgYaaH4kXBwwq8iSPP4UTql82SWBT+2Z//iB40QB5+BNfBrYMt8CPiybg7",
	"vSRtP6Rixuz5/vwA2Sdv3hy/+zeybB8e+HN4ckCwT5dvTo73wd6n9sGv8OD3o4N3fz38x+e/7oN/7rX+",
	"sv/PREZDfz75gh42mVMi8JGnd5W/kV+i/B48dbe9wCSVnPAkMdJP8OD3z5/EQA4+fztqvjpOphgMOyxK",
	"M6gUlOuQ8rzO7C/NPkwkCq/62iDOWE/RQpPFPJm9PHsNfNFhJ5Ey/QtKxyZ5dfxWF2yo9fmvh8o/5fxG",
	"8zxpff5L+JummPwp/F9jTWWZDDDjwy0YFC+TGtbbV7pRKbQpNLUmB3qaROdFuBGUi7IKYhJI0CDFnMmr",
	"2rG9clylUi8aouxiymVnplwzzJQverWx5SZ05EHt41xAqeiMqYSOyVDC68QxLZkKUkZPNAcR++AhxJkz",
	"ir7SJugPD2y0RITdPS3Qjr0ARQP8wZDfBC5BYIk84GCCwB5B9/wfUZrN/Ra4CnwKiEuB5RIKMQF3yOOZ",
	"2DARbBabkTEB7eXSwUiEpAHUBVcyOmN/iPxNxyQD4zH59vjpc3IG5RTlxh37gjyCHJn7XX8OKAEsv/eB",
	"qABkDXDJpqfPi/vVR73CkNmAU0gRJE0sOQjNKM0XohngWww/WopLyryvEpGEtG+sSseOXJFvotCbofXi",
	"8YdNmN6ZaWOnikoMgXnhceOXPGLQqwY6Fb1NXH/rSaYrxFkzRFkz+f+rwfzVyLNhUDGZGGtMwHAePh/E",
	"BHx/3nn/w8kJEO2CD/wg+55LyefoFkMCfPrAt3GpXa4mBuiKfx+vdsDx7a7EYc0mlUv2kA70ZXiQUJAB",
	"O3Wp5ly7g4BUzffD585eNcpe7pX98Ynu6BXTNyNis41QFPQt8TiP3di56ScRsXkgN63yIgwssUp8Df2l",
	"8bHwlni9lal9zrvEC8jm8i95tDIGeK2CJKSsiBkHviEq5XDuetQUk/Ke/TmHyyUiyAZ2wCM2Ji6cSnEo",
	"zQEo1eRSflHQ7BWoyo8EmQgBmUPfWtEf/WpxH9PLT4M4qXurOFtWfmDHtTNmqYe/7m4gty707E3ECuQP",
	"/llDYIBm2Kc8seC/ApSMFajrUEeXgTurqEYhKmOhSbHpWXNMkRWGMS4SKM6ub4BaJ3NTbUZISJClzW+Z",
	"uFdT+yeXBgMJ3x7ZP0/efvfn3/53PP7reHxQTcLdWCqgaN2BWPjdTQmkTsmNpwnTu9e9uroZtd9fdvbB",
	"zeAyDNQxxQ4K5XU2D4qoruTkC1sX82qYvIQ5JfDwATs+snKtdkiTwNPG2J3ir8gus8xzeIfALUIE8Cri",
	"Jsc+21FRdHepjnixi8wpN65wNBWbX96VprHicseDM601XsCZlllrG0RgcWDyaoJ6CxIRfZp6GN0hG0w9",
	"dyFCG8mMeyJj8UZULeNx6tDihBi4O/5Nu3AMxmzB2B3uY8F0Jse2bYpNyxEmYTErEi/VqH08X0uoUCu5",
	"x1ZW70XCbyz+JlV7yM5V7mUGV7ipwnWKF2cBCZ4in/Gd2JqHu8wPZyPO0yD5xxYYsa0U6mvC5DVT9ncU",
	"CztBuQiJPiaRTR7adyIQui/DHlEXQMdx7xkxAXSAxYQVmQ63P4z8qXiwcD9YCjZRbItbaH1BItFm/jY+",
	"UbdxlkgTfgr0pxXCxvMTaA59cTCJItQFBN3HWpykOkDkCSqvnn029WtoScrOT38J2ZGniYwfWZ80sdBV",
	"/hN0vi5F8nTqcgWhaExwvUJHKAgBX9CDz30VuCnJb/KAWUQGzxJlyk3R0cG7Zms8PpicHqpX4LfE9RfO",
	"TjT20mrp7KJqlAzHJz8U6aL39ssmwwpf8Rdqo6KSYfIzN0oaXMajITmqldwYCpW5OYma4pyI+mkYlbDY",
	"9UWpx2Zj6UDKjpT3AbF1qa7M0I7i//Mc0TLlqjxyZMoU3s6ev89v/LE41aQjCz8ibyFPMiHwHQtvoD88",
	"cNAdckBo67Iw8g9FzO1ApgtrgTFJptQCNprCwKFK+l5Bh3qK5yYqknMxuRWToc/VxE7pnhby7Fcu63LZ",
	"UhYV3A5N4gbcIsclMzZzLXDDEeQ8xBhi1/AULrDzkFKA+5X3T2n+QpI7MYYYFN9/EgxldvDygyS47ODz",
	"00ZxgiQLq9caLl0tMxBv2VbMdt4MLlsqW+B6eIYZ3JKgjRQC27hlGMWmS3i1RPQG/ecmDpsiLejayZ78",
	"OTx581ajz/zYPnnzFlhzZH3xg4XCx8XeVwTM0VdoIwsvoBM7wUCNmeDt62ZjgYn6Z9IzaHp08C65TpKy",
	"TXo05Vu8noDF2q5BLcdeVjmZocGCJlmULVvR5NJ/1oQIS2kcdcrJJG+RvU4T3xUt/bjh3hPkjRsx2Jvi",
	"9ORoEFkzxcEaJdNTU4n0h5PrQf+n7nlnoAvUmfnc7X0YtHUfLju9/k/9xPCTY9LMez9iOtKjZb+r+bHY",
	"n+40zPpJZsCP1FHKSEa/XHeyA+C/ShlP+SWS+5I0c4o0tF6798iTgkVsvdRk7hNxQRnU55DYDiN2yeoC",
	"KSIk8v1c93/uDCZn/aurdu98ct2/7J79khqBtkj36qpz3m2POqYC/cF5Z5BM9KMZgWmcOVlq5q5P5YB4",
	"wprsaHRpaNQvPNRr4ocPH1K/DC87nevUbx+77zuDnjpkmQapM+yMUr/JKfnlLLm6yth0I8/dgXzfKXHT",
	"EuPO2UHJb+/bg85VZ9S+TJBVsE0ygdeqen6GNOfZLZb4zEOckYSOKSllupnv/ThrTly5Ve5IL+KNxmOT",
	"rfjboxQ8qx3ncIknCpmad1NwiTvEXrqY0PIz0L7uAiRrrcD+lfAFZISHPejGKwQcowwWEZ0QhDSa8A0t",
	"R5jxSFBVSfDXze8qPgYlPdHC7spI7zrSVpPh/5YgPmy3LHOt0Jwzoh9LpHJPazPCuj8hYhebua+TpVeW",
	"Q3J8MTY3aUUOfquaxHXxI+UpLjGnHimaIz+PJ7zOrEdacma/R9H48+6lnzq98/7AdDPJr4KDm1z+z1k7",
	"52v/rK0biCRSM7mpyI1V7y4RHTHn5sJkjjxMkX1l1LOOeOILYvMnWpFqNTIcCQplPoM9f39MEqamqIMQ",
	"rgOZviDzgiK8DJMvKbh4xM0CQhHGmiUujewDmMj3Y6XfiiWc/3NyW0aUT7J62OjSM6unlfQdiRcRaZ10",
	"NCNjUn5OVh2r4XLPGaD5ugkKXaDjUKXb8YXOT8AhM2xIfGZumxCnIq8LL4NT2VObwizE7fCI0CpIVE/f",
	"N+nRiu5MrsTmlBvalPy8tBhk9TCwMuVHiRvcNI2lLu3kDOiHb759JIlP4cC4OaK3cGXKV6lDffgytkj8",
	"OyDB4lY4APCIXXHyopnpSa8xGzh/4psKW6YGJIiziySQpbmPjVEyq19poqGDMJRfzu1meS45hw9XLmEr",
	"mp4x9lWq0mzIlf4LVhDsHR+8Ot4XaXLEJSaT5BDnQWaVlvsdgg98xyddX/c+/eXzv/c+HR+84/9z8pmB",
	"5vP+v199Ojr+vL+31zR+2//L/n5CCvBcMrHhw4QTppVexAh/RuhLmQHeI/QF7B0dvF1/eEcHb+Vg+L+M",
	"pLMuTZR/dANd4AKF7jkrwSg+ebUJkt99/vex+J+TT0cHr6IBZH7XDocTYxrLFSaBdmMqo1mIMmw8b95V",
	"Gk/LPCCGpjcSR8p4Ej9rhyOpMQ6ocNdE2+X4ZEPb5fjT0fGJukfkD3r6TZvCllL6EFkusQ1nZViIEeaL",
	"gqE0EB4xIDximvxdX/iX9ghdwK94wQSHH96+5roaTMTfx4rTpuxyIvvTehibGa6wf71Yv7kHZsmDugxz",
	"kJmwDUUaCNtlzZa/elOhlquzDuvK2xsZRb4VUI5tGL1NyDUCJktHL+o+uj6tnLI4qmniu+XDO8lTd8/D",
	"XRVtnzEBbMj8vawsLA+OKLpAYrtl2G6V64a+gevOPDKfuz4teL7HipR+wMerrMp4q7Vf+ERWFF/kVIpC",
	"1SaTcbaVY+tGNQumkXGxLwiNjJyCKWRFtvucNG2ETZ4T2Ys0yemoPFwzyWurHESSSU2kJDSIBBrxYZg5",
	"8HRKKtUdQSa8jC8k8b5H1fANzz52zm8uO9zudTNMafjSX6/a3d6o02v3zjqar/3h5Ob6vJ1MujhMT2jm",
	"IB9m3TlSXhnJAqpZl6FYfgUWXMJb7GDKn9aKNKGxVBQNuHN2M+iOfpl86LRHN4O0nTHzudfvdXS/8x86",
	"k/f9/mjS7p1PPtxcXk7Ou8MfJ53e2eAXrvhKzENqlNqJuEOsyCW6Qxrfokt3BoR3Gt9nobtvFARPmmdS",
	"u3MR+FTwobfcUQ0TxohOwRdMbID+FUCHu9GNOpedq85o8MvkrN/70L2QNvn+xTA5eT91+Cxcdn7qXGam",
	"LvHxbNAddc/al9kvncGgP8j+/HN70Mv+2u196Gd/Pe+8v7lITq86d7rJ1YfHryp6i8jzoITgjYidy3wj",
	"YvMXewrzHWXGTfUilhQJz1tWJm5brC8TONhSspV0PXCLZzPE0AGF2iOqx595ypotlWN/ffLu9bu3fzt5",
	"90bPtiNiv3COfYumo3cJGsXavCBGNpkMoYysYgLxyhbJdWcolZlCL66o4DVgjZUovamq4F+8j87bAU8g",
	"TnDPmVqYqIWJWpjYUWEicYSp3IueOdEJAepyVWdeKKoN4bUhfPOGcIas7/0njAG2LPnmSpdz1lvPUmyb",
	"tgX7qmOhVDM734JpI3sr5wTclEm92v2xVavyqxS3SDfGSbNbqxT/S9GKnO7qtEviDGRfQoPH6Ay5jisC",
	"wQAHUkwDG8UcLeX357WLCfV5FAv11IB+VOPAcclM1OWHRmgQ7/wtpTIaE7Bno5mHkGhvETgU84hbbIGP",
	"j/7yl7/xR6CeGxA7PrYIgh7yKZAM8T6jSg4rklBDGzwkMz6Cvx4egHdHQPaWb1F6dyT/o7DnB8qP6iRP",
	"HEj1UYwYQWRWYp6jydqdiSaz3Ik+/iGaabCHieUEPr5D+/mzfvyDbtrVX5PzTmbbCRiUYHp0TFE6YpJJ",
	"OqQBWxAZhymh2BIazG7vvHvWZld1WreV+R4psTJfur3J9aB/MegMh/rv58lHBRnqNUdElKfizHUcZFHX",
	"8MiAjdMKi3AdnzpKVcl3edk5G/W1Lw6MxT72h6O872eXN8NRZ6AOzkB43hCzKdmq8bnmhjTeMenpLJVt",
	"JTmWx2ZjZsh6FMfJddwZEKX4o2XRQKv827UyEZRS72tLvmowZkAqHcAvUkVHg9Qwfco7yOPt6/zE02ZF",
	"PI215DoCT5LXelSYl92Uw1sGlt2CiBeFg8gyLBNsb2NoukSI23SFl0tupc4MCVXd8ZI9NDT3RG5SvKrC",
	"dLwYDPbhu3O2FSCYY+RBz5o/yEAa2YPHcWeRmSf/8bJq13hssopioOuluHTyQGgOKJwAoWm7V4JcnB2j",
	"AFhyhos2DaNdt2Nk9TSpb/SkytIV3tTwkAF6yvMOqmcht1S46q4S+zWP5jBGbCzjZkYhBV48I0LcHRNw",
	"BklklXQJiqNVh902QayJ5LFmVA1voTaQEVWgDYxi2xpnINZF541fqpPveQKj5xn+Ohpl8/BD7XHe4Lkk",
	"/ZxDX1UPvLWrKzrYk2es6c5K30J5t5Y2u+WKvLGurZo9rtnj52ePVWTuIoecyCz7sphk7QFS4sTZHKss",
	"Jqcyt7xQCF87GfCiAGAluV85lI0xwGVwI8vw1EZ3UOMjJsbMtYOsANiL/SD2NR5jIZdZzmWM131YokK3",
	"MfZL92yoVy5qvCvCoYdka7WINf9f8/81/1/z/y+c/08f0Zn7JudiLiMMJGiskDeHB/1FdrvQPW3mujMH",
	"tZaeS93bYNqKk05EweTWa0Ux7Cij0Yw1nZkv5RVOIUXRe7W5K+JGh6YO4YiuD4iV/HbZHnW4WSP586g9",
	"uOiM1NXS5zSK4RMmwtVbZgah9c+P71Elz69K+8/9wY+X/fa5zjaT/KYxuCSoyKFSJq+uxspxVC+QjaHi",
	"SMT4gMi2yb3uZUTLW0TvESIARqPkFk0IGF4CtYU93EKtZnSV7Ot8k1bPRBTWrczshRXzD528uyZsoazf",
	"xZcScnZyBUMZexGtZ9Xp2eozwORUhTgQxD5zJIGQmFUSa4d1TZCKAJ/1MsmNSxTWM+EpSjBfEk/JBPNl",
	"eOccyss8Xt3Eeqey6GuXPZ3kVpx2yrIktr3mfJTnn+ba0eyvsqc5VSdQUK892K86V+/10f60ReQxP+n1",
	"zzvmsRSd+CuL73zfYwvcQ56tkAuomTOci4PuLU/pChPXWupZzFcGDugUC0NhyaiLZpQOwcHki7h2ws7d",
	"gPrYRpIjhw6P3duxZwh0ydSDPvUCnrsIXEECZ5ltWDUgXEib4UiqcownD3DflEyaf0xjrLTvZwr1OZ6u",
	"IRmbUHiqZO5CHtjq5/Lqefy0TzhTkyk9ljSLvvkYkeb0euver9u/ddZcrLxL1XDRhLtEcxjnSW+WSwiy",
	"aAt5npvDewvykjPWYVXEReMhGnhEoPlMtHgK5pQu/dPDQ9mFt7Ralrs4tF2LCWOHvEf/8E+s2EHSE1Fj",
	"9bFRrgsdK9CUGW38KGw3JIBddPFrw09SCGS0nLk2+pz5Qb0cLXZXO4jNbkC+EPee8Dv8DjrYnkBvFiwQ",
	"j15qI2g7mKAJ+mohZPMKxKWTqRvwpYEOW+eHCQ9ZxgC9RN4C+z52ycRGBPMK0f5EX+cw8Cn/cQoxz1nj",
	"cYUplnMDb3k+nEaz4QZ04k4n3K+SU4kXMqsEEvyGuBP4J3gHscM2MaMYUjhxXN8XXwI6Z+Dm6GcAQl8h",
	"a8fnOv1oIJ+1SfYoxE5V0btN5OsEnqVTZ4Wz0R1yGAIOptDCZAY4WsK8ntmVxgR0yMzB/rwF2uRBhMHT",
	"VVXqOK4FHfw7EjIgFxWln6qKCuEL2ZLJkD7nfBK6aq4fipuWx7vlYCRi6WY3c7hd5cYBfF/p9qpuGivt",
	"2LMw1xMkAHq3mHrQewA+8rCkNpwk6LhkJnORgP/iWzyVSjXNY2YbyTJaNroNZkUUZ0ZNZTz1DPb4rmZf",
	"Io3+LSbQe9BPctFk5mQybYPoY6xW8AEEPAYqB4144BnmaKEi9cmD+P13rlOUoBgTYEEHERt6qWRjlhuI",
	"imHcI4bKqQctnuMl8YGOCSCQuOIHfgs5AY+ADIS7LWsJ+1LvcSfybRGAlq41B5CCm9EZWGCb4NmcAu74",
	"/d+QBAwLx01w/O5vR81wJyw910FLii1w4aGZ62EY0y83IWM8GVV0jsZEV+wWWl/uoWdzfvwBQQ+4BLXG",
	"rNu240Tht6CHwNujaJAMgS1wieAyHreHwLjhLxD0kD1uAN8VqCQucBBcjkPDEhC5y7EPCD+OOffHz8Kl",
	"h8QNwxh3djZA8Onk9cHcDTzGwSPosUZYB5/3wusrOor8lsQMu8XYyh7ykvtiKKPIvx374vnZ0dHR8QH/",
	"v9HR0Sn/v1/ZFLx79+7dwfHJwavj0cmr0zfvTt+8a70L//NrC7x/4G+tGHgtnhiAynHy5pvgHgFE/MCT",
	"e/Ie8VdnlkvukEfFUstcaZ8GH87GBLx69epdPJ77+/sWRnTacr3ZoTe12P+zEi36le4DmZ+X7RtfDOxP",
	"oCOvA/6n/AMcn4IzKXDFu4P3et0fdv8H/MZmaG//N9EI+09cLOLf/i4/RT+0fBQ9at7jLfRuLi/39/UF",
	"+R7YO2JfFcpOiiibIcracac2fEhQKGQy3skddAC9C7tN1BBJYOldE3Da/r7GAO9a9I79lTs+USrwkQX+",
	"Ao6PjtLjfWUc78+YvDoBv10gKtJ1sM9t/wN20Ci9OB+6l51R96oDpjSkxVRNjH9KI6Jvur3R29eAYuuL",
	"D/4B9vb2xC/7U9qy7z/i2fwcUl53HygsvwVeneyDfwNe6tK9DwvFE3p4CNpsELZ77/Pm2d46PjpSDj+/",
	"FRUQx9vx2+yui5tj9Y/fvn79+m+v3h7Fh80tmroeAjcEfw2befe3o3QzrVXXeU9MB9jbE3N0CI7le5V9",
	"cKASVAR11hCbtLCh75SGODb2U9h4bcTGf8M7CH6TKXBlpmFW5Ao7DvYT2ODMwIL/Dv4BzFVydwL4R/xr",
	"i6D79wF2bOTt7bPhyQfIe7ITMT/7sjH2H1aoJ6YAE8omQBYVMyBHzydiv3XLmt5LzcSbgpkQemjaIu59",
	"YvDyd0Dce/APkChVMF6F/OKRE/e+NUO0w8AnftvbVycgOQmyNPtjzzTgt8YBy6WLwlJcP9C5S+Iha9ds",
	"bz+DywtEz2IUsAL8uuAJ8q7gconJjP/UJTJpHufTRII6ZcYYF4n9JDMkMzwKLmRM+E1W6R4TfTF+CDJW",
	"qCnbET+z7saNb4wXeTz4xiNWPh58s+HD4+gb4wUeT78tMHk8/eYj6/FT6xvjwthmfvz867gxDi3roj63",
	"Jzv38MEH6CvjDX1kS+ZiytgKG88w9Rmv5CAg+2oC3llzTIDorwl4h01+dfNeObPzO/LcgyW0w9d2927Y",
	"HILWXDB7IYfIWcsowIjM7QoJmLkgWHK2I6zLTVvyx2M9H7nPSGMUuEvRtuhr3PiVsV3BdIq/hq/WQlkA",
	"LxBndPfGjZvR2bix//fE72MiGFKht2gBnsGFuq8EMiLpwQvlMzmlgY84t7oHo2dyXKgaE0HMvohluvQw",
	"EaxSFlrCwKf2toSeH/d0y2jjDCNjnSwLLSm4demc98squ3SOvGggfoYWxlq706mPqGQFP7gekCJ0E4wb",
	"J0fHf2NXyfGb0dHx6auj0+M3raNjNpMC8j7gP0SX0RL6jMHnZTkRrsKfv2kC1l4r2ljwDg65rNLkvgsq",
	"KwgBu1LDzKlhrlW5BQRExa5gZ5oNPZttNOp2h/0h3357+xouuLVwf8eOA/m2Q+TgZig0Oj+j28OYmMNB",
	"mBLz8MJxb6Ez6XMq/ENG0qHSCTtWFojOXbvFxiPOoiY/AgRR4DfGk7Lpb4X/+C0ck4ziIAeM2AB0w2Tj",
	"+s2n3pRXVgblWn5rKU4/NpyTQwffMpmYs/etOV04f+L/Cuvuc5l4TCJoh934S2SB77/75eC7xcF39ui7",
	"j6ffXZ1+N2x9N/31+xa4xF/QPfYRF6vYJMVrFfhINvffrg05dr/3waffusN+yA+JVHN88JJt+7w3Jly9",
	"dnp4+H+uDQ8EkVx/NHW9GWoRRA/hEvOVYSNjpYTMIgg+zLbPRxt3MiZgP2FAERUp8kRYO4eL/lKPzaEU",
	"qVrFsR2tQcLpjnXAydVI6dwwPnWFwo9QaHGfDqHkb/SXiAjzybXMTQouMP0Y3IK+N4ME/x5qDgPPaZw2",
	"wiWeYToPbrnI5i4ROUD2DB2E2U2FBiuh0zTbZ0D7uttoNhxsIeIjhbL2ElpzBE5aR5ne2R0F+WeOL1nX",
	"P7zsnnV6w87BSeuIz3tDUQPlkNBoNsIUoKeNoxbr8bHZYOOCS9w4bbxqHXMilpDOucblkA8Xs8ZarmfN",
	"mVDJHxrDJfYP704ORa7aMx6mj9eYIc2r/wtElWgfMr9tKgdtgxMi/urajdPGmdL0EHl32EKX2KdniR55",
	"qgS4QJTbmT5l0z3JNLg80RzwESvNTt2QFq5y44oFtgPx9IEdHK7HAel6NvJ4HkeEImW0FOEhXrZsdHd4",
	"/OqEawfCXOdcado4bfwrQFyRJJeYN/We/SBUmrnxVJ6D6CqPD5opOwvvcnKr1ZsZF0REABEWTxp40oEO",
	"U7QQmfUp8pBPiwby9qjM7E/D+ORVJn9bBFaa6dPDf8hsYt+nJj0aU+GUn3N3Z8FlwUWoJOQ2VpkhXabw",
	"D8O5y6hySzjjbtTnMhW0OwUnR6YpZoWH+HdUbpI3TlIc38EUpZ1VnfiCwmzKi28ZrzAbfQ1V01Ps+VSs",
	"fIQGGd8GOo577wP/C+bSihiC8RDgPF65GVqbAHVG1Mc/ERGZSfjMbUhLl10wjLaTo6PwJkUi+R9cLh0Z",
	"0eHw/3zhRxyPJc+Akzm4B7IncWun3CADy0K+Ly5XvtAboyNprdT03ZEfmg0/WCyg99A4behuHQpn3Lql",
	"uaQanx+bjaWMmpiyn3C7PIDaK7DUDShaUD80hDUX+fS9az9sbKbULmI3seyEcXuBZjT80Zt0Q3jcIrLK",
	"0vnSQKVdyHxUPTYr8mOH32L/gkeBRgfpPODP+e/r4FK0kBpOLmsWZvinEYBEr/ICEKTa0VnKWNL4KFX8",
	"ZFRnBmEBNB2v5XtM+7x0dV4U2zwvs9O5SwemFgxFJ2aO4CC4XGytDk+uaVwNm/JwRbax923gs7jXZ8fo",
	"rp68WSysf+zOXZ+WFX952SxqP7o+VcTcj6509anF21q8rcXbWrytxduXLd7yA3vXxNrwlglvQOUSKiPG",
	"hk8UjTeZKMlTCGxHTE1mHtCLpzzJwBOJo0X0vEwxVC6QHgWl+Z9DD82wT8WTPT1yBrJEGeyEZbeOHkn0",
	"4+NjjYwYGanpXxcblVURhfgQJSV5pcU5fhiEJ8L29Qw53b0QJYPE5Y4pF3JRWU6ZUAiwC5n8ZiVlQdj6",
	"dpUDYS/PjqVdO93itTWyPpBamkTJ1+znMscTL1gGP2rclTj8wC0CMjLFJlFUpq/yWHp6dk4ErLDFgyw/",
	"epUpFqO+vWN8q+gzIjzQHJJihssAXJRc9/7dAshLdlfj/A+A8wQIN8mjHsp3mlAwqdq90o2KlNkvceky",
	"e4aVAcqT7w3uD03TipIuLwde7lbJaJn4G8ooQ5qHoO9yB2pgzUUeDyYGTj2EuDMe1/oaVEvEpXmqt9U6",
	"Uh+cH59Uilcqoq+mn5+PG+lX/q4uKtdW+bAkyHaJr89sj43uZpfcutDjz/YNjF1flCizk2XRP+Y23iY6",
	"lYnbJWgm13ujuEyozPTATHBkQFQwmb7T8kdKiZOC6upI3BjQap3ek0sFm1XsTaLWc43fspTKlqu5+4t0",
	"MP5Q9lLWIF7bX7dkf93m9SAXW671Lt0QWZiuvq3CIG9l/Umi8tmNFMZGVPxKulHrtW9J7VtSn221b0nt",
	"W/LifUuiQ3vX/EvU2ya8EVOXUhk/EzVqce4NJ2p04zj425AwshGH9X4ncRqBp/E9KUPXy/Q/URbMjJJK",
	"vFN1f4PSGBM1FJJL2z4iQKjI2L4PQoluX4gvgoLgHfNHKIXgcn4JpYF4oWQ0WclHQe1pu34Kak/PjrVd",
	"PCeTa517leb7LZRGF69QFl+1D0M1eBnsu/Hi1HyCRnNZdgfk+jWU3gCiRr0D6h3wgjwdtswpV/Z6KL2b",
	"4lqld1TIrW7HfGpovmQWnGdkXtLzuJtG/o0BmUdFbls8ZnFZlbn0FfE0KvNLpTlFbX6Z6KVWndeq81p1",
	"XqvOa9X5i1edJw7uXVOfp2+d8KbUXFJl1OjqVVnq5hM11Q9bUqmrXRSp1fkooCj7VKr1svS9TPV6agHz",
	"UVSZ56quag/Zr1IYFLVSQyit7EyDZfva9vweX4iiPYXnHVO2V8JzOaV7JUheILoqHmOVuIqT7Svg0709",
	"Ow539UTNrv1mjlMeBLek+BqV16OV/ZESXUXrBTj9IGSPqHVw+wBkokLtowzxqQRbmdPwxnMoZrnqgRCk",
	"eF53R5kL3Zj8uXs/xJT7K5QYmKnpKAPh3L3nudmVLIS3rusgSHIolen3y9AqMshXo1bTfIJeL2ozQ/FT",
	"MOucpl1k1KPJVM4DZSuWPAvkdiazic/zpJQ9E/pDzWnQDxsTOVeUQyH1pVZp1SqtWqVVq7RqldYOqLTS",
	"Z/euXZaauye8M/UXVgndFgH9YcnrT1RJfduSXivVS5Fqy/WfSqFVgbCXqdPKrl8hhlZivyprtxgSy3Ji",
	"ok52KKXVCa4vMbN9vZahqxei0Mriecd0WivguZxmqzwaLxBdA4qxrsn1t6/PEn08/4P23T1Gtatd5h7O",
	"9S+tcvrxKhURV7vZrQQ+g7cd20U1l2F2OF1tg+S5n1bZH6LOhriDLcfZMnRVb48/6PYwYXMzTLg/ERia",
	"LF0HWw+lVaBAbrNrVg3rXsT3h6IIL/HApdHEL7UetNaD1nrQWg9a60F3QA+aOLl3TguavneiqzP5oZzu",
	"M3HzPRTde1KFlqZgK1xYshOD4jMegLjxn0wNWkjdC9V+lgbPKvxWdY++qgCUOq9KrJcqbqT7exoVaHGv",
	"L0UburMnowEYOWdjOR1oNXheILo6Nv8zFaE7d5Dq1nhDp6gXkC2IrIOAqHzDICC1sFoLq7WwWgurtbC6",
	"O8LqICC7KqmKGyd9R7JfV7gg15ExBgHJvSaTTGSJizJlyRBUAi8gT+ZakdflCxMqdgzBOjDoMVxVliiC",
	"ocJhVsTgf7QIweZqt+SHdQ/GKBzF+uErruUnxdX/Omq9FhdqcaEWF2pxoRYXXry4EB3auyYsqLdNeCOm",
	"LqUyoSrM77FTjYka4Y9bMmKFzRf574dUP5X5qgxdL9OApSyYGSWVeKdNhqFIkSJqKCSXZuQjQKjI2L5A",
	"WaLbFyJUKgjeMYmyFILXDT6RavEC0VVQGIt6ak/bFSrVnp4da7t4TibXer1DMnzSX068lKWzaBTRBhTR",
	"Mg4/UAuWtWBZC5a1YFkLlmsKlplJ+ODAGT9k8IxtCCyIoS6FjrJqPAQNXyQZ3sWfu4Fjs0UUlCrMpiaO",
	"zIg1VyHwzUaJSkSf4W2YY+ZsW+6WN9quSd3xRRwyCom7uozELZao4NIXpcVPW5K1ReNFkrYE1BPJ2cU0",
	"vUwpO1ooEyoqMI/V5etSiBKlI0IryDQcADEOti9VF3T5QiTqCKs7Jk8XYrWcLF0KdBeIroK4ULaN+9iu",
	"DB338+zY2r0TUF3jnEsxP1tSKTRFWbWL8VQ/X68CKcOz3HBR6htfm9u9CPG52ZFKAV76N2zkzt7yu/SC",
	"Lmv8/2HwnwLlOhwvo8MOnNIZ2KPyYE+oSA49tGT8t72f3UlDWVhRow6j/go2U61EqpVIKymRmMg8d30K",
	"uueAQm+GaEhQhN0W6E4BcWnISiO7KenjpMUFxwTszfAdIsJ3lc6RB/j0AI5df5+3pGkl0R2gc0jBHN6h",
	"sWgoqhARyg8QZLOJonO0aALcQq1mSD8mlhPYbKJE3rg58jD3ZiSCxCX0EKFSByVGRgLHEdSxfyWHlyTu",
	"HtO5G7A9HhHjy45NkGAF+fVRAhL1cmx0ORTdPftuytnGvk2wXUZbzxaIk7oLCxQSuvoCsYO40jJEXYbL",
	"YNItY4qqbIp6zqvNuYJ89tmEfPatAvIlt1xpHcZEvxJF6yBmofxKpNYhJjW9EmNSfi2i40k2lzigqq6T",
	"QlLRnSGKVtkg9dJsYWmUXSRKmLN+sq8ld5LMenELfT4UYSHDC+RTuFg2Afq6RBYVs3KLwE2v+z8ALV1r",
	"Dm5GZ3FBxjT7yHKJbWRGA4K/dljNStk4NkuXMoVs7pJWckbgBEkKnzTJjCpc7ZpNT5UKQ2k2JTxWlWcj",
	"ubS0J5AoHpFSSpwdpGvVYm0t1tZibS3W1stRi7W1WFvPeS3W1mJtLdbWYm0t1q7jqJoSsnbPZTUrJZrF",
	"3BLuq6K5SbhBCkXV0EUyScbWvFqT3RT7t6aG83SuruUJfalOr5kV3bT6ZBVf2KrwDL0iM4Op4G6TxpAW",
	"VU/hOLsCIS/GnTazH3bOsbbCfijrZFsVzdwbcx0oxz6xmq637Yar6fIFeOTu7kGtR0Pu7V/kp1sVkNJd",
	"shoka/fd1fBndGTMrFrN2uR691bbMwWevlW3TOhh+RQcydbdglcgpN5t/ym7zYj0TQkSwlpY1r2YF65m",
	"gx0m69QW2NoCW1tgawtsvRy1Bba2wNZzXltgawtsbYGtLbC1BXYNx+KkiLVz7sUZCXEN66uQvaraXpMk",
	"bMnymuykyO6aGshTWV3LE/kyba6ZldysoqS6vbUqIEXFzDBKazbTuNHgaPt21spEvBAbawb9O2ZhrYD+",
	"cvbVqui9QHR16MaGTk2327Wsajp8dkju7lGsQ8EaNtWqIOT1qsGwtqeugjuDfSezXjXDYrSkVtsnuXbU",
	"qttEVNw2p7Fl+2llIuqd9cffWQZkrykK8EjAZQ2lVGsexTRpGqWoDllfh6yvQ9bXIetrp4AdyIXGD+zd",
	"U6/SpFI1voTKKVQpyr3JQr0b3Z7elJbQltInVJHSnVSMUmREQWn+ZxX9ZwF+Qs0VrSh80HjVn0Khaezu",
	"xagu6U4qLHNQWVZFWQAwro2iK2si6ZOoH+lL0TnS3dM05kKoULdYgB6ppaG1CnGDMDKqN+q7W6sjzEd4",
	"gVawAOChsmS9+3fraj5jdzXO/wA4T4BwdR6VIgctEPUeDmeeGyz9Q8edldXZRXUnrNJENJDdOaOw2KU7",
	"8y9YIUWjl/1YP3iodRvbefBQK4afVzG8bWWT5izZNdWT/jgMj3fjSVpGLaU7rSsc1qKd7OctqbCyHRUp",
	"tHTjeyoFVzVqX6a6S7u0ZZC3MptRXTW2JoZFO9qBlmbj9TAzYG/7arY1yHkhajjt3tkxpdzKe6ecwm5N",
	"2F8guh7mY7WbiZLtKvtMvT47gnf73DfhYmuHPvsDW5XFyytR7aJIvlTL6UTMRDu1lFlLmbWUWUuZq0uZ",
	"ieNkZwXN9KGYOfw1p2o1cVOe+oVsi6ajlGSilti23Kn2VV70TIz1yaXPsjS/cAE0tcwlEbkOR7KOJLoG",
	"vFPCQ2rcK4ikKfiZYfmUgumKRL008TS1uXZVQl1tc1WVU9fYFKpUsuqO0ImOGZKeSmbNdPxyxNZdvTBy",
	"MLKV22LpuVPsoNWso0x6vpYNFGhtZDGTfTRspZZda9m1ll3/E57ODGQAG/4OJcFWgfBMErF2oIcA9H08",
	"YxvoHtM5Ly1i+WDiU0gsBLCNCMVTjDzTxIdFy4Yf2iZ9ypSyEqb4O2HtkhF4NkIxD2F23tpAgLMNk7P5",
	"2F8bIVDGtDrfTMyrjZO0nVhPXWIzlgj5AE/5WaRyhTGl/twNHJvdgOgrRcSOSA2Ljklc2GMFPGSDqecu",
	"wBwjD3rW/EFeDVMHzgCWExP4yAbQcclMtOcSNCbhU8suj9wlJh24Hoj3vQiCl1uEzeuYiIBiiDYBVfvG",
	"M+J6iliZ3htz974bBvMqfTH+Z89jtGvn7v0EK5MnIXjrug6C5Kk9bEJudKd9bBSWWmv2SnLkK/jZSMhV",
	"Yvw1DhmywFN428iuKvrbyHE+i8dNCYp3wOcmXuJySFxDhF3b82YVVGtcJeIhr+p/E8HOiMYn98GpStJL",
	"9MOJd9Que+JU3VEreeOsshXSnhcr7AOjd4xCz5N65Sj9viy/nB28Hcz4KM2k5D/i2wCGeVOroLh+9rc6",
	"UA3Po0zLWXNgBQ8F191luQ8JN7DJRFvPwTNt+XnimiTVe/Y/cs/mboetSk3rua6WMP8lS+a4r9ZGwNoI",
	"WBsBayNgbQSsjYC1EbA2AtZGwNoI+DxGwBRDuutPIPJMgVrufLVnEMVqAG1neh/5JzILJnur/hziuYyD",
	"5enejScROcKuCaHrybubeBixIuD1futrab8ycMwD6nM8kViBsBf6TGL3DYirb7lVH0usuFE0zvAbsidq",
	"CHvqRxMv0qq4u9dKLlaqcD1lzYtrYjtppKmG7trOuBZ0C80WmaWtWboKBse1dl9Js+Oamy9lbXkODuzJ",
	"rJBrEFbv6//sfV20TTYqqt273hfHhfZkgRa3fOeVMkimq2WPgp9liSteQLE/Jj/U2Zfq7Et19qU6+1Jt",
	"et+B7Eupo3vXFPTZmye8SrWXVRl1fOoeLHkNiurJT1tSuac6MWjYU8N4Kr16MXEvU42eWbkiHK3CiVVX",
	"la8GRlE9M6TSwlgaOxosbV/1XZmIF6LmTk777mm3K++Ecrrs1ZB8gejqMI6VxprOt6ul1nT47PDcvaNZ",
	"t/qbPJerisY5MrFGGq7l4FoOruXgWg6u5eAdkoN3VgLWyb4rSL2FN1xSXNqyiFvkRhZS/dTS7e65iSkL",
	"ZkZJJd5pdWG2EGNJQWQVyTWBjKeTVXO6fWHS6e7KpQXnXBVZtBCIigCynuD5dBLnixI1d8zvqSTECjyb",
	"SqOLVyiLr9pVqRq8DD4M8eLUfILG96jsDsj1Liq9AUSNTd7zW3YGKtFtvS/+YPsiA9Ic/vkx+pp9HjnD",
	"LmnFWBQ/hHWzQv5QphiXxdW0zdnCl66YD6VC+JO50kfXp0oF9qe5cFe+RlMqhD+ZK/XF5iez4YNP0UKp",
	"m/pibuLac++wLTTosm74k7nSz8oBJCulF8tc6SrS2KeqJjXNmhWz5sgOZAiHcNnkb+Za2QxqSnVzerWc",
	"htRo9rq2dNHuC+i6jr1DdZSl3NSKactpT+/5poe807YsNyA0BfvwZ3Pls8Cn7uLMJVM8UyqrP+egegjk",
	"VXftOth6UGE9FF/Eh9y6g4BoKg4C0nj8/Pj/BwAA///Toyjd1MICAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
