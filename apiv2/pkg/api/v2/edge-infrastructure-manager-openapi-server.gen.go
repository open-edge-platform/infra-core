// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"D/9/AAAA//8OBzChdcYCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
