// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9CXfbOJYG+lfw1F2n7GpZXrJUJX369Ci24mjKtvwkOTVVUUYFkZCECQWqSdCOK+33",
	"29/BQhIkAS5abKuafWa6YxHLBfABuBvu/daw3MXSJYhQv/H2W8O35mgB+T/bCzr4ErB/IRIsGm8/NdqX",
	"w/Hg55vxzdXgunPafd/tnDWa0a/ty6HyV3dw2fjcbFBMHdR4GzbWbND7Jfvbpx4ms8ZDk3+hkCLWkY18",
	"y8NLil3SeNsYzhHw2SfgTgGdI9C+HIK9tkXxLQKXkMAZWiBCwRBZc+I67ux+H0SjaTWaSbqH7WFHRzn/",
	"/brf+9gddHtXqd9vrkxfzrqD097VVed02DlLD5QPRzPUd9BDC0Shc+oS6rmOg7yfMbH1I2e12cDfXZ6q",
	"Y3nX7ncuO8P2xfi0dzXs9y4uOv3xz92rs9TYzOWueled3ALd68tuboGP1/1eboHrsxt1Tkzj1kzRaeBT",
	"d3Hqkime9ZHvBp7FkQFtG7PJgc615y6RRzHyG2+n0PFRs7FUfmKAZpWzkyoaBZZLKCK00Wws4NcLRGZ0",
	"3nh7/PrFTy9jgmUTGvoSTaZ72OtdD7u9q/bFPpCdqd8THZ68et1sLDCJCGg2lpBS5LF2/vev//7fT/Dg",
	"j/bBbwfjo4M3rcO3f//Hf/3z//lLcxQcHb2w+H+jH/b2Rw3w+W9/bcSEJ/vLUE/gAhknZum5t9hGNpjc",
	"A2gvcIril0cJEhl9n9l/HR28Ofj87aj54vhBpYR3pSHBk4va1cA+/AawjQjFU4y81Kwlp8niYBGLdfDp",
	"6OANPJh+/vYTp8ND0O4R577xlnoBiukK+xhjLf4oXiCfwsWSQ+mvHpo23jb+chgfkofyhDwcxiUf+Lj+",
	"FWAP2WyPyrFLFCkbQYvuiAp38n/IooyKM+QgilKlly7xi/dCckbDamCBfB/OEJi6Hsi23lIWLqdvI6Uf",
	"XJ+uTKGJQNZolrBEV0aCusSnkFho89MWtpylLNOnkboL14JO27LcgNDNU6i2nqVS27eR0t7gZmlDiq5d",
	"B1v3m6e1t0QepJjMBvc+RYssuQYCCgnuB+QJqVV7N5OabO0pyDVQYCT5WlwR3uZpDVvOEpnp00hdH82w",
	"u4VlF+1mKUv1l0PXEkGK7IE1R3bgoG1QmOxBR6uBBiPVA0xmDtoezcn2sxQb+s+hl26FSqqljZagaIgc",
	"xvZ69xfuzD/33GC5efqyfWSpzaGjHO3XnjvF28CArpcC+tO0FI/gElEPW1tfALWbnDFoqSk9iO2vRLKj",
	"4oGUXo9fXO+L40L7Ei0m27hBku1nCTf0X0jv9ig105hH3TmijAceBIsF9FZlyWTtULEyd33qc11L4DOq",
	"kgI18jzXMygpXAodQAI2pawx0dDSQz4T4MgMQAI6rHorRyQT7UdDxYSiGfK4sBgQwgSzCn1jAvqiltAd",
	"5XUcNq/rmrdeoeO8fkRbul4CAh3HtdjNXGWQd5jO3YACCHycP0S1gywBD3FBA6w0ABQS2Az7FHkVYXcp",
	"9wJ1gSdbABCEgl4SdTCgbo9MXOhppua9A2esFR/PCHTYv1jxBaTYgo5zD1xRMQK3utVYybEsEI9v4roO",
	"goQNEBE4cdDHpeeW6ViUBrfX/R5wibZHUWR8y1rUdahXywxlS4B9bqUUIUcF+qKUXsikjfGRh6FzxeGV",
	"Q4EoJmHIlyrue+9T++A3oQf6/O1V8+ToYf+fatei7ljU1dEQ+Mi7uF0M8B+aSbj4eAl8/Adi+/r8ndIs",
	"qzV2bhdj9lW/twJs54zp5qZ7lprVF68zsyqUSu2D95+//fRwoP75ssqfxycJ5RgnLTMVym5M7DHjHiyp",
	"Hk1OQJvvNxDqwTQbL9L756m/pEL/ocnL85sjO9mWu2AH8dRzF8BGt9hi60g9118iixVpgQGiwCXOPZjc",
	"861zdgn6l6llOT46eWk+4eCCjsXNpQNXRFyX2NiCVFxkeQNLFGfDUFuJlH7Zsd4MT0GkPQR3c0RATBq4",
	"gz5woE+BNYdkhmwx8sk9GzAkNuixcfOZyDvN4wbHUVda7E+w6/eRg6CPzrS2lXfd3gDIEuCs4J5krY09",
	"UXhsG4wbrNBHRGwdq8B7Ex8L+7kVbRh78Hyt7l12wb+W6EO0outkYXU1q/vu8hR0rwG0bQ/5fhP4gTUH",
	"0AejxvGbk9ZR66h1PGrk9ruwxnhp6DG0AuXh0mREeWg2rGXQ9qw5psiigadZbfVryPOdXt+AhWsjpwlQ",
	"a9YCX396PX79Mm8I1jIYQ7UfzWCsZXAKl3CCHRyeJynOkxcFDvYpowQ6DqfEUiqBvaXr+3ji3IP/HvSu",
	"9otoUuuaaHI9HTFXEV/FaWCFCjvjLen2nLUMLtl8agws4VSHcx9yPHkd8QqG4Qxc6wuiuQNazu99xgzx",
	"kfmifFGXsphpdMM5q6zpdciZ1LhvKgoCP1guXY8Kk5LEXBENsq6RBnfJLb1ZIhhUwBQjxwY+dTnIQphT",
	"WakJPDRFHuPaPpy1Dz/0L4HtWj4XzVhZ3oTYb4VkhnToFijwPESoatguukl5ubjqtXuHvFKVlZJx9VI1",
	"ObcfVrSRjz1kr0KyrLoqybJ6dZIZE3e+1HEd76D15YCvNCIWFzYgpdCaI1twfufXNxH7w/cEpmjhl+l8",
	"tgwiruvBDBDWy3i2VDkS6HnwPiT7ClsrkH3VPV2RbIKt0mQTRpuebBOXR9FXGkAn0nTQOaTS8j1BPt9Z",
	"XkAYwyJVDOyM4EdgyAT1L/2I9ynN+HFyzZxfTPFarF/cTDXeT6HOzPyp4y4xzAKmT5DqenCGVoCXL2qu",
	"CDFZuzTM/JBOPdRu/MkKQ7gZvFuR/MCflCY9YLTpydYL8h/kl6JVNgnpmMyRhymyLxGFNqRQL9Uu5FcQ",
	"lQ+vXdY4u/ukXk66eEQ82Bd0//YWOgECS4g9n5UkNvJEMa48wi7hUorjzjhP4VMv4Cxg+VkOae9StMib",
	"4oj4cTgezVxjaWov6lQxyUdru0AL17t/d091m+T/DSChmHLFqCgI9vrty32AhWbH54ZS9teENZC3oqL6",
	"mJfTrerCuJiKG1FiXaHvuxaGbP3uMJ2vsLQrr9YCfu2KesdHR+oYjUtUXaf1akM6LeKanAnZF+Mspqk5",
	"Ptmkg5YJJZxYzSCkfhKT2Rq3btzIRi/euNmc6zc9gLUu4XRj1a7iDL3rXciZ5gqu5SXjd0/dxQISW7ix",
	"lOKQkzXCdnqEjb3UsENg89HyysgGoc5NaJ5KqJx4xbFL+CDN49s4bygoNhBbGqqCejNKFdrXAqjSTjVs",
	"qgTmKglLL1U5THquHVj0SntIC28gcC3KgKsC1kW2NTadx9KvtHBeFUcfhRGbYZ96fJ6f30GoUpcDsuwg",
	"1sJatrlqkNNQvd6BqGmwAH55TsDh8oPuWRPMEEEev6tdAk49JBXV6gq9SFzM7MDbkCtwvm1scMk1ztKq",
	"kTGQmfostIb5uFgPIt2Pol3C6nQNti72ja27h+ILAftA2oTzJ/Ov//5fVj09n9FYMNXOXbNxxzj4ePgr",
	"+1VXMg7mmsFXtBamWPHIcKh4qP9d/uCDgOB/BYgLSnixCCicOOjZWRgzfuqf01ZHs1t6rH/TqPUhRb7q",
	"T6I+WvnQG+hf4CgfzjoXnWH6x97Vu167f5b++eZq2L8ZZEr3O+fdwbDTT77IianWbLe0Vq+aLZVvMCQM",
	"GbcQO9wTINIxWtCzNe40Vq59hDU5RZAL12I6sc9bEydNE1iMLwQ+WkIv3MGRSJeBf/YqMqi0tSaUSJjL",
	"ffXCN0awgOSAtc6nIKZXfQGTt0ELHq6IxvTsCuuMIRlAnwnCkcGhN8jvkLVoZlosbDpRlcFdn3aVkyCX",
	"SbKw4ZqR7FNhX9weVIIP29yrlmbj1mDPTZF2W2jZNRl1Uy4P6k40nD+qLntTm5VdA94USqVhcrdOFlY3",
	"/JydiF/miM6RJ3Yp9gEEk4UVtwdcDxCXFtqFow503kF52GdjkovAt8BebxC942oCB39BANH5URMgsjz2",
	"2f9Sq7W/xr7AS2kCN51d0Vi+9xWDOVdIldY+da/boloZnaxKUfbkcjD5Usq2dIXonet9idb6IqrI1V8W",
	"o6hgxOCyfRoOOFczCK0xK6bVCtIg28sl/IoXwQJQDxJ/gX0fu4RxGzS8byMScrulgV4WZEdd9N4u03ny",
	"jAOCVGkyxT4gYt7KkSBOQeVtX5b99bB72+H+cprjt5saLphDHwz63d5H6YZn5/LerO2xLKjdarzEx6l/",
	"xdgWrQYxsnF/fO8DaW517sWeY8siJJUEkU2Ap2DQP2BUYsUoXkzq7dRnkoJ21UJSh2Y/1YWETZLo5ARK",
	"avz1iDQ7uK78nlK9FtQz33AtpO1Pm7oaQquYyiDpWToLU5NVQTxkFw3J0/pU1gB7TCLZL2VRCHsx2xSK",
	"rooUEQU3h2/DJvDtibw1Vr80Fnq3GA1FhUyO0StGCNalOpFyWkWZ/bH4qkGS2NV5q2bj7s7kAaufkXKs",
	"LG+1iJNL70fDtlXtritvWb3tN+XUqr2+WaUzuQnEIQl9H89IGQEieYOrvpdan5TAV85hOe2WSwiyQktU",
	"LpcYGDyiHOjr/G7Zz8BGUyyHcjN4d9B9n3u48JYqninsLukNDqLIAcqBsg6PaV+bZKIP6Cu0kYUX8aOI",
	"yPbJ2JLuWcgSsaWV5EjBKI8ibI9zxCdsmxxbV6KneEtjO8cN1nTSDdTzLEbZY55sqUNA3d2aAyBi80WY",
	"gUtE566txpvpXo/bZ2f9zmAwPu1dve+ejy87ww+9dKgTY7HBsD3snuaVOPv1qn3ZPVXVRXqqNFOUlVKq",
	"xSmRkoLGXbR71o9hJLwvJIpiiaroaEL63WylprqUGJaYidXU95N70CW3iFDXu491+Snt86uEclQIdptS",
	"5kfGo1IjlramqOIZohBr9tyNj7yDqYcRsZ370LZE3ZCTAjav5wM4cQMqrJ3h/PhSJWncm8KQIlrYyhbN",
	"Ajhvk8bmN832ZDvtZmDel/J7ezDonl9ddq6G406/3+vnFDK0ILbvTb897PauchoJyxma6XcuOu2B4aNo",
	"VXckDIw2vtDTyBzPKSwBvmBiq8rx7tVg2L467eiiOCW/8WBLCcLUXnOoWpHHSldXrKqQAOGERYUrTW8g",
	"/nacJpDPKtk2R5irx+BIOEQC1wPz+yXybrEvbsCUHCUE6l4horORKyI9URUf6HCAigN1HPZGv4yhZ5Uo",
	"CcR5qnUqwkqkmFJqL210oDylPS8/TgerinRf6mC6Z1sZzmqxmYrNhSu2q5uY7ll6anQdSjf0tZBXxZU9",
	"gzz0Ffus2dNbkwbh9GPHF84N0EMJ3RPnE0K9U9hyEyBiuYwrhz6A4m1DqIVNvCQ9Ojpawbftb//f3v6o",
	"MRqNRoD9FxmNvo1GD6PRp9Hoc77LWzjSsXWLjJ7bZZx21blndUwYZ9++97NCbiHMq7kZqK68KuhyYB52",
	"pqP8jDGA3EjfBEOFMN1IWqDtYMjthRFvdpY/AtZcWd5KIVPrnhxDeUX/HAnmaIxhKIK1vHPCxnI8c5Kk",
	"m5i8oW4AM3yLfMnfIVtxK6LJtfLdKb3jGzYCsXYUBRvwn/+VdS4tcC1NjT+Hk0xOw1rOScmmqjkmpQhe",
	"zykpPfp8h6QvJR5gJpith2bDUSKpmY6e7JnjTrnvjQOgqAnusOOACapyGKWuRN6ebM50KPEyYxhRW+Z0",
	"UtstmpxUWLnoXDa7gSt7JOU9sEXfcHed+931Ky1zbxALe/zIWAQ+ZSstGWXVVCSXmR/04g0j9kHgI5sJ",
	"k7aHb4X3lg3vj4ArKHSJ30z6GgGXH51ICJpT7PmUb7H0eZNEj+ubMMPHWwYori/C3rVD24nuNlMF4d4A",
	"iBq+Ym+JTIpRiEXQnQK0WNL7JhuRhzjjQ1wQpOtmTtQyPI3uSFU5mvzT1fXHgoxxRIUecGr8QoEfdSe/",
	"SK2FaHPJS5vXJex6GbZaZpUiG+V6jwrUZpRrL160de5stfE8t+3MUNbz3s40V9GJO0v1epeXpsEn86it",
	"wigWKOGkp/81tL7o3yiy428pvyonQ0qyAZCGjwaST59yBZ1XR48u6Ugix+GQ9Np8K/AwvX8vfP4K4Zsq",
	"voYRknqBT5HdppT9uKaHvWxsDOPWNn44aPrIOSNMw1vrpDA1Wu28MA9kvWPD3G7B6REod1Qhg5SIyBvX",
	"XgM8ooGN40VekmaIqISbhD9VDA9ZdQ8t3FtkA0xA5/I9uH3ROmkdNRm/BpQIwJytQ9BuAU1oitAwoAw2",
	"OQ3ZoYN3iMIm8AOum2eMocCIjvk5KjkrOUKhOjlr7Rm1oWr7JEHqelsjOer83XCXiBRpuKbCQmAhSuXL",
	"b2CSebrOvofxHsFlthFeROGGy2qRk3Eu8/TH4RDGcggZFfJD1tKQaypK6DTzjSDivYDWDKJ7J5D62L+5",
	"uupenWc/xI8IMs2FLwY05hPj64AuuYUOZshZK8K9JhJosmU1WKChT+18hyW3Ee4+bh3oYt7ndK4h9UJ1",
	"wy3I8qL1KA1RctUZ/tLr/zzuXg07/fft0874onv1sxYz+UWvi0qc9X65UsESD0EDlAvsU9V8429yJdik",
	"ZDoAC26O19nQlFIaLxHxPgISG0yxQ/mj4KQRSJhN/LXNVlprjDZyBvSv0FeNt0+XTF1vAfBUEf8XrocA",
	"j0FMRKSqUOsO/TFhrej8erl/aiespEmAEhA+AXy8YawHRCj2hIWMiRkz6NkO8vmVvYQzTGD4poURCam4",
	"Q16cNFJxX8cqsdn4q+p7rOTSpcmOJyqBShPwtLvQ50Fet4JO3rARldtfYx4Ztxreo8C9pePE6PAtOs7C",
	"ekdAF5FfDmxJ/BhAFl4JWwFa1PgTgi1k7CoCLqpW/imMJoJN2sSxw+BLDKEcALPYMoBQNUlsBYiJDp4Q",
	"jKohqiIgVRNPeVCajD1aY9MOozM5saURqgdeDkq5MWdbCOWNG9FJXLvqIebxtDcV0KIbZSv85cq1E9gR",
	"BGUh4wZ0GVAzZpSX+u2FFj8eooFH5EBycSL6ygNKIYQTqQCfB5rFzGqwmoRfWZwmV7BqDHJGTDgVUYg5",
	"6iFNPHKzCZk3wo3HIGM8LrIEL6GHCDW98Vb0MJ5qPZEiqqgcfwrf6YdTwilrjQjoihFa0OeFoNw8TYAp",
	"sNzAscEECRMncL3oc9fW1vUxRcU1lbELMk3GmByLUWoK+Dx7RsdunHXsVqlQOtKp6fkPq5wg4c0j/DFS",
	"YE90Gq11MwEHdSuoWC69AxIUKI7R/c6gd9PXe/Qmv/U7593eVebnQXfYUclLdGRQP2wvVV94myR7eEKG",
	"J2FUx1Xvr8j5AIT1S19lWduHwSaPd5kpz0xvac6nfLZGtfSGczWm4doPyDPAaj8gFXHq+qFFyAtIdYz2",
	"A6IHKGtt98HZl6OoBsyCxJy8aNIBbCt8eboPIz4N3miVkVQBPmb/t3BCoyJjEQ53HL27rZW7ZuAal7I8",
	"iE3INCA5DKi4FQhHjT/h2RpGlqy4HaJqpTeFLjRlwlfL1plPdwaaiSGUw2IWWwYQiiS5W4GgbPoJAShV",
	"IdvVn0RphjPQC7vfWeApAygHuzSajKBLZjveEvxSnTwpEFO0VIWkqD72w/oV0JlJLK3Babr5XYZseqYr",
	"gNeESgOMtwrfTOM1fNeBr59IV15xAKLyCuRnkqRniE83vbs7Lz3DzXX2Yvk9mOx1Kzsx2cUT7sMaxI8P",
	"4rKANeDQCFu6LbDSJ4YorQ5MWgmN1IBButvAo9XgRotBNuTdU+/+wp35554bLLcCOU03TwhAmqWmGhyj",
	"BsaOO/PHM95EaXhmJ0MHVm0fuwte3ZyXhnIeSssA+9pzp3hLV7+2o+cC7pCeteC9lI2sBnBJQgmIh/38",
	"SUB+rQxnBZhnMFsE9EtEPWw9xiGe6Ok5QD1B0KpYX4hGVj7NVSLy0Z7s6U8A9+T8V8e7HrolAf8oh3uq",
	"r2cE+nWP+BCMq5/ySULKQf9PdNan12Fl+Jc98ZPPA7eC+1QXTwn3Z4qGEm9M8/Zf+uFma/W3oVXegqoA",
	"TtNfGrcm/BXAdatArSGaB9EVwVkdlbrDPyaiJCBXgGI+CHVvHaoFei4KFJaO9JeMDxY615SN+2evHizM",
	"9FC8KHhYgTdx5DmcSP2yWRKLwj/785/RvQbIgw/gOpg42AI/I571u3OVpO2nVMyYPd+fHyD75NWr4zf/",
	"RpbtwwN/Dk8OCPbp8tXJ8T7Y+9Q++A0e/HF08OZvh//4/Ld98M+91g/7/0ykTvTn4y/ofpM5JQIfeXpX",
	"+Rv5JcrvwXOE2wtMUskJTxIj/QQP/vj8SQzk4PO3o+aL42SKwbDDojSDSkG5DinP68z+0uzDREbyqq8N",
	"4tT4FC006dKTadKz18AXHXYSudm/oHRskhfHr3XBhlqf/3ao/FPObzTP49bnH8LfNMXkT+H/Gmsqy2SA",
	"GR9uwaB4mdSwXr/QjUqhTaGpNT7Q0yQ6L8KNoFyUVRCTQIIGKeZMXtWO7ZXjKpV60RBlF1MuOzPlmmGm",
	"fNGrjS03oSMPah/nAkpFZ0wldEyGEl4njmnJVJAyeqI5iNh7DyHOnFH0lTZBb3BgoyUi7O5pgXbsBSga",
	"4A+G/CZwCQJL5AEHEwT2CLrj/4jSbO63wGXgU0BcCiyXUIgJuEUez8SGiWCz2IyMCGgvlw5GIiQNoC64",
	"lNEZewPks+8VIwqFzwrCsGgyPKSMLVQqxll0H7XG2hBno9GBiHLGY5p9ewBR9MPEU2PHyY1k9gV5BDky",
	"bb3+ZFFCYn7vA1EByBrggk14jxf3tzePotOxJTstmM0VwsXt7Y8aKUQn+9TNnfniNm/ELYZJLcXNZd6B",
	"iYhH2rdgpWNcrsjfUejN0Hp5A8ImTO/htDFeRSWG67wwvvGLIzHoVQOyit7Grr/1rNuc2p8fc0Nvaetp",
	"d7053NmO3iqPdAukrqKcaSwVSdAQR9D0wkVNV6HGVg7D5snUbyMCBvPwgSwm4PuzzrufTk6AaBe855P6",
	"PdcDnaEJhgT49J5PZCmQqqkvuuLfx6uFFeVoVSINZ9MmJntIh7IzPLkpyPGeYhtzGMt+QKpmtOJzZ68a",
	"RzKXKf3wSFzoignKEbHZEVoU1jDx/JSdHrkJVhGxeahCrXouDJ2ySgQZPbvxoZC/eLmVqX1KLsQLyOYy",
	"jHm0MgZ4rYI0u6yIGQe+Ie7qYO561BR19Y79OYfLJSLIBnbAY5ImWJVKkVbNIVbV9Gl+UVj4FajKj3Wa",
	"CHKaQ99a8U39apFN08tPAx94qES25TKhS9fOCace/rq7gUxc6NmbiIbJQ1qwhkAfzbBPeerMfwUoGQ1T",
	"16GOLgNfX1FRSFTGQpNE1rPmmCIrDNRdxA+fXt8AtU7mptoMj5sgS5vBNXGvpvZPLg0GEr49sH+evP7u",
	"r7//72j0t9HooJoOZ2PJrqJ1B2LhdzfplTolN54mEPVe9/LyZth+d9HZBzf9izAUzRQ7KJQd2DwoYoOS",
	"dTJsXcyrYfISBsPAwwfs+MiKZdohjQNPG0V6ir8iu8wyz+EtAhOECOBVxE2OfbajovwFUjR6tovMKTeu",
	"cDQVm1/elaax4nLHgzOtNV7AmZZZaxuUJ+LA5NUE9RYkQotHPYxukQ2mnrsQwbtkTkmRk3sjmoLRKHVo",
	"cUIM3B3/pl04BmO2YOwO97FgOpNj2zbFpuUI0wyZlRoXalxKnpEolO1L7rGVk2pEwq9J1YzsXD1DZnCF",
	"mypcp3hxFpDgKfIZ34mtebjL/HA24kwkkn9sgSHbSqGmL0zPNGV/R9HeE5QL9fKIRF4n0L4Vof59GdiL",
	"ugA6jnvHiAmgAywmrMiEz71B5DHIw+H7wVKwiWJbTKD1BYlUsvnb+ETdxlkiTfgp0OdXUL/zE2gOfXEw",
	"iSLUBQTdxVqcpDpAZMIqr118MsV9aCvNzk9vCdmRp8n9ENlXNdH+Vf4TdL4ukSW/TlC4DQXXK7TLghDw",
	"Bd373BuHG0v9Jg8JR2R4OFGm3BQdHbxptkajg/HbQ/UK/Ja4/sLZicZe2qCRXVSNkuH45KciK8beftl0",
	"b2GcikJtVFQyTO/nRmmxy/jsJEe1kqNOoRkgJxVZnPVTPw3DEjbpnij10GwsHUjZkfIuILYumZsZ2lGG",
	"C54FXSYVlkeOTArE29nz9/mNPxKnmnTV4kfkBPI0KgLfsfAGeoMDB90iB4R6dwsj/1BElQ9kQrwWGJFk",
	"0jhgoykMHKokqBZ0qKd4biouORfjiZgMfTYydkpfaSHPfuWyLpctZVHB7dAkbsAEOS6ZsZlrgRuOIOc+",
	"xhC7hqdwgZ37lALcr7x/SvMXktyxMYim+P5RMJTZwcsPkuCyg89PjMYJkiysXmu4dLXMQLxlWzHbedO/",
	"aKlsgevhGWZwS4I2Ughs45ZhFJsu4RXyupkjcm7isCnSgq6dzsyfw5NXrzX6zA/tk1evgTVH1hc/WCh8",
	"XOxfSMAcfYU2svACOrGbF9SYCV6/bDYWmKh/Jn3fpkcHb5LrJCnbpM9evsXrEVis7RrUcuxlldN1Gixo",
	"kkXZshVNLv1nTRC8lMZRp5xM8hbZ6zTxXdHSjxruHUHeqBGDvSlOT44GkRdWHKxRukg1WU5vML7u9z52",
	"zzp9XSjazOfu1ft+W/fhonPV+9hLDD85Js289yKmIz1a9ruaAY796U7DvLZkBvxIHaWMZPjrdSc7AP6r",
	"lPGUXyK5L0kzp0hD67V7hzwpWMTWS01uShH5lkF9DontMGKXrC6QIkIio9V175dOf3zau7xsX52Nr3sX",
	"3dNfUyPQFuleXnbOuu1hx1Sg1z/r9JOprDQjMI0zJw/T3PWpHBBPyZQdjS7RkvqFBzNO/PD+feqXwUWn",
	"c5367UP3Xad/pQ5ZJvrqDDrD1G9ySn49Ta6uMjbdyHN3IN93SmTAxLhzdlDy27t2v3PZGbYvEmQVbJNM",
	"aMGqvs0hzXl2iyU+9RBnJKFjSruabuZ7P84LFVdulTvSi3ij0chkK/72IAXPasc5XOKxQqbmZSBc4g6x",
	"ly4mtPwMtK+7AMlaK7B/JbxdGeFhD7rxCgHHKINFRCcEIY0mfEPLEeb0ElRVEvx187uKj0FJH8awuzLS",
	"u4601WT4HxPEh+2WZa4VmnNGFJ5hZSKWhtqMsO5HROxiM/d1svTKckiOL8bmJq3INXRVk7guQqo8xSXm",
	"1CNFc+Tn8YTXmfVIS87s9yjfRN699LFzddbrm24m+VVwcOOL/zlt53ztnbZ1A5FEaiY3FZu06t0l4n/m",
	"3FyYzJGHKbIvjXrWIU/tQmz+CDFSrUaGI0GhzNix5++PSMLUFHUQwrUvE3Rk3giFl2HyrRAXj7hZQCjC",
	"WLPEpZF9ABP5QrL0a8jE85ac7K0R5eOsHja69MzqaSVBTeLNT1onHc3IiJSfk1XHarjccwZovm6CQuf5",
	"OBjvdrzo81PMyBwyEp+Z2ybEqchcxMvgVH7gpjALcTs8IrQKEtXT91V6tKI7kxO6OamMzgNdlBaDrB7o",
	"WCa1KXGDm6ax1KWdnAH98M23jyTxMRwYN0f0Fq5M+e56oA/QxxaJfwckWEyEAwCPSRen55qZHq0b893z",
	"R+ypwHxqyI04f04CWZr72BgHtvqVJho6CINV5txulueSM3h/6RK2oukZY1+lKs2GXOm/YAXB3vHBi+N9",
	"kQhKXGIyDRRx7mXedLnfIXjPd3zS9XXv0w+f/7336fjgDf+fk88MNJ/3//3i09Hx5/29vabx2/4P+/sJ",
	"KcBzydiG92NOmFZ6ESP8BaEvZQZ4h9AXsHd08Hr94R0dvJaD4f8yks66NFH+wQ10oTkUuuesBKP45MUm",
	"SH7z+d/H4n9OPh0dvIgGkPldOxxOjGksl5gE2o2pjGYhyrDxvHpTaTwt84AYml5JHCnjSfysHY6kxjig",
	"wl0TbZfjkw1tl+NPR8cn6h6RP+jpN20KW0rpA2S5xDaclWEhRpgvCobSQHjEgPCIafI3RuFf2iN0Ab/i",
	"BRMcfnr9kutqMBF/HytOm7LLsexP62FsZrjC/vVi/eaeJiYP6jLMQWbCNhRLI2yXNVv+6k0FE6/OOqwr",
	"b29kFPlWQDm2QfQ2IdcImCwdvcX84Pq0clLuqKaJ75ZPNiVP3T0Ld1W0fUYEsCHzt3uysDw4ovgZie2W",
	"YbtVrhv6Bq47E0Zh7vq04OEnK1L66SevsirjrdZ+5hNZUXyRUykKVZtMxtlWjh4d1SyYRsbFPiM0MnIK",
	"ppAV2e5D5LQRNnlOZC/SJKej8nDNJK+tchBJJjWRdNMgEmjEh0HmwNMpqVR3BJnSNb6QxPseVcM3OP3Q",
	"Obu56HC7180gpeFLf71sd6+Gnav21WlH87U3GN9cn7WTaUUH6QnNHOSDrDtHyisjWUA16zIUy6/Agks4",
	"wQ6m/GmtSIQbS0XRgDunN/3u8Nfx+057eNNP2xkzn696Vx3d7/yHzvhdrzcct6/Oxu9vLi7GZ93Bz+PO",
	"1Wn/V674SsxDapTaibhFrMgFukUa36ILdwaEdxrfZ6G7bxTmUZpnUrtzEfhU8KET7qiGCWNEp+ALJjZA",
	"/wqgw93ohp2LzmVn2P91fNq7et89lzb53vkgOXkfO3wWLjofOxeZqUt8PO13h93T9kX2S6ff7/WzP//S",
	"7l9lf+1eve9lfz3rvLs5T06vOne6ydUngKgqeovcCqCE4I2Inct8I2LzF3sK8x3lfk71IpYUCc9bViZu",
	"W6wvEzjYUrKVdD0wwbMZYuiAQu0R1ePPPGXNlsqxvzx58/LN6x9P3rzSs+2I2M+cY9+i6ehNgkaxNs+I",
	"kU2m+ygjq5hAvLJFct0ZSuVe0YsrKngNWGMlSm+qKvgX76PzdsAjiBPcc6YWJmphohYmdlSYSBxhKvei",
	"Z050QoC6XNWZF4pqQ3htCN+8IZwh63v/EaPHLUu+udJlVfbWsxTbpm3BvupYKNXMzrdg2sjeyjkBN2VS",
	"r3Z/bNWq/CLFLdKNcdLs1irF/1K0Iqe7Ou2SOAPZF9DgMTpDruOKQDDAgRTTwEYxR0v5/XntYkJ9HsVC",
	"PTWgH9U4cFwyE3X5oREaxDs/plRGIwL2bDTzEBLtLQKHYh5xiy3w8dEPP/zIH4F6bkDs+NgiCHrIp0Ay",
	"xPuMKjmsSEINbfCQzPgI/nZ4AN4cAdlbvkXpzZH8j8KeHyg/qpM8diDVRzFiBJFZiXmOJmt3JprMcif6",
	"+KdopsEeJpYT+PgW7efP+vFPumlXf03OO5ltJ2BQgunRMUXpiEkm6ZAGbEFkHKaEYktoMLtXZ93TNruq",
	"07qtzPdIiZX50r0aX/d75/3OYKD/fpZ8VJChXnNERJlYTl3HQRZ1DY8M2DitsAjX8amjVJV8Fxed02FP",
	"++LAWOxDbzDM+356cTMYdvrq4AyE5w0xm3SwGp9rbkjjHZOezlL5hJJjeWg2Zoa8XnHMTsedAVGKP1oW",
	"DbTKv10rE0Ep9b625KsGY46v0gH8IlV0NEgN06e8gzzevs5PPG1WxNNYS64j8CR5rUeFedlNObxlYNkt",
	"iHhROIgswzLG9jaGpkv1uU1XeLnkVurMkFDVHS/ZQ0NzT+SmfawqTMeLwWAfvjtnWwGCOUYe9Kz5vQyk",
	"kT14HHcWmXnyHy+rdo2HJqsoBrpeElcnD4TmUNQJEJq2eyXIxflfCoAlZ7ho0zDadTtGVk+T+kpPqixd",
	"4U0NDxmgpzzvoHoScksFOu8qsV/zaA5jxMYybmYUUuDFMyLE3REBp5BEVkmXoDjOedhtE8SaSB5rRtXw",
	"FmoDGVEF2sAotq1xBmJddN74pTr5jqfoeprhr6NRNg8/1B7nDZ5L0k859FX1wFu7uqKDPXnGmu6s9C2U",
	"d2tp87euyBvr2qrZ45o9fnr2WEXmLnLIidzJz4tJ1h4gJU6czbHKYnIqc8sLhfC1010vCgBWkvuVQ9kY",
	"A1wGN7IMT951CzU+YmLMXDvICoC92A9iX+MxFnKZ5VzGeN37JSp0G2O/dE8HeuWixrsiHHpItlaLWPP/",
	"Nf9f8/81///M+f/0EZ25b3Iu5jLCQILGCnlzeNBfZLcL3dNmrjtzUGvpudSdBNNWnHQiCia3XiuKYUcZ",
	"jWas6dyTKa9wCimK3qvNXRE3OjR1CEd0fUCs5LeL9rDDzRrJn4ft/nlnqK6WPqdRDJ8w1bPeMtMPrX9+",
	"fI8qmaxV2n/p9X++6LXPdLaZ5DeNwSVBRQ6VMj17NVaOo3qBbAwVRyLGB0S2Te51LyNaThC9Q4gAGI2S",
	"WzQhYHgJ1Bb2cAu1mtFVsq/zTVo9E1FYtzKzF1bMP3Ty7pqwhbJ+F19KyNnJFQxl7EW0nlWnZ6vPAJNT",
	"FeJAEPvEkQRCYlZJHR/WNUEqAnzWyyQ3LlFYz4Sn8HtZPN0lsFKGd86hvMzj1U2sdzRIUU277Ok0zuK0",
	"U5Ylse0156M8/zTXjmZ/lT3NqTqBgnrtwX7ZuXynj/anLSKP+fFV76xjHkvRib+y+M73PbbAHeTZCrmA",
	"mjnDuTjoTnh6SZi41lLPYr4ycECnWBgKS0ZdNKN0CA4mX8S1E3buBtTHNpIcOXR47N6OPUOgS6Ye9KkX",
	"8NxF4BISOMtsw6oB4ULaDEdSlWM8eYD7pnTp/GMaY6V9P1Ooz/F0DcnYhMJTJXMXMghXP5dXz+OnfcKZ",
	"mkzpsaRZ9M3HiDSn11v3ft3+rbPmYuVdqoaLJtwlmsM4T3qzXEKQRVvI89wc3luQl5yxDqsiLhoP0cAj",
	"As2nosW3YE7p0n97eCi78JZWy3IXh7ZrMWHskPfoH/6FFTtIeiJqrD42ynWhYwWaMqONH4XthgSwiy5+",
	"bfhJCoGMllPXRp8zP6iXo8Xuagex2Q3IF+LeEX6H30IH22PozYIF4tFLbQRtBxM0Rl8thGxegbh0PHUD",
	"vjTQYet8P+Yhyxigl8hbYN/HLhnbiGBeIdqf6OscBj7lP04h5jlrPK4wxXJu4ITnw2k0G25Ax+50zP0q",
	"OZV4IbNKIMFviDuBf4K3EDtsEzOKIYVjx/V98SWgcwZujn4GIPQVsnZ8rtOPBvJZm2SPQuxUFb3bRL5O",
	"4Fk6dVY4G90ihyHgYAotTGaAoyXM65ldaUxAh8wc7M9boE3uRRg8XVWljuNa0MF/ICEDclFR+qmqqBC+",
	"kC2ZDOlzziehq+b6obhpebxbDkYilm52M4fbVW4cwPeVbq/qprHSjj0Ncz1BAqA3wdSD3j3wkYclteEk",
	"QcclM5mLBPwX3+KpVKppHjPbSJbRstEkmBVRnBk1lfHUM9jju5p9iTT6E0ygd6+f5KLJzMlk2gbRx1it",
	"4AMIeAxUDhrxwDPKjS5Sn9yL3//gOkUJihEBFnQQsaGXSjZmuYGoGMY9YqicetDiOV4SH+iIAAKJK37g",
	"t5AT8AjIQLjbspawL/UetyLfFgFo6VpzACm4GZ6CBbYJns0p4I7f/w1JwLBw3ATHb348aoY7Yem5DlpS",
	"bIFzD81cD8OYfrkJGePJqKJzNCK6YhNofbmDns358XsEPeAS1BqxbtuOE4Xfgh4Cr4+iQTIEtsAFgst4",
	"3B4Co4a/QNBD9qgBfFegkrjAQXA5Cg1LQOQuxz4g/Djm3B8/C5ceEjcMY9zZ2QDBp5OXB3M3EMnqocca",
	"YR183guvr+go8lsSM+wWYyt7yEvui6EMI/927IvnZ0dHR8cH/P+GR0dv+f/9xqbgzZs3bw6OTw5eHA9P",
	"Xrx99ebtqzetN+F/fmuBd/f8rRUDr8UTA1A5Tt58E9whgIgfeHJP3iH+6sxyyS3yqFhqmSvtU//96YiA",
	"Fy9evInHc3d318KITluuNzv0phb7f1aiRb/SfSDz87J944uB/QV05HXA/5R/gOO34FQKXPHu4L1e9wbd",
	"/wG/sxna2/9dNML+ExeL+Le/y0/RDy0fRY+a93gLVzcXF/v7+oJ8D+wdsa8KZSdFlM0QZe24UxveJygU",
	"Mhnv5BY6gN6G3SZqiCSw9LYJOG1/X2OAty16y/7KHZ8oFfjIAj+A46Oj9HhfGMf7CyYvTsDv54iKdB3s",
	"c9t/jx00TC/O++5FZ9i97IApDWkxVRPjn9KI6Jvu1fD1S0Cx9cUH/wB7e3vil/0pbdl3H/BsfgYpr7sP",
	"FJbfAi9O9sG/AS914d6FheIJPTwEbTYI273zefNsbx0fHSmHn9+KCojj7fh1dtfFzbH6x69fvnz544vX",
	"R/FhM0FT10PghuCvYTNvfjxKN9NadZ33xHSAvT0xR4fgWL5X2QcHKkFFUGcNsUkLG/pOaYhjYz+FjZdG",
	"bPw3vIXgd5kCV2YaZkUuseNgP4ENzgws+O/gH8BcJXcngH/Ev7YIunsXYMdG3t4+G558gLwnOxHzsy8b",
	"Y/9hha7EFGBC2QTIomIG5Oj5ROy3JqzpvdRMvCqYCaGHpi3i3iUGL38HxL0D/wCJUgXjVcgvHjlx71oz",
	"RDsMfOK3vX11ApKTIEuzP/ZMA35tHLBcuigsxfU9nbskHrJ2zfb2M7g8R/Q0RgErwK8LniDvEi6XmMz4",
	"T10ik+ZxPk0kqFNmjHGR2E8yQzLDo+BCRoTfZJXuMdEX44cgY4Wash3xM+tu1PjGeJGHg288YuXDwTcb",
	"3j8MvzFe4OHttwUmD2+/+ch6+NT6xrgwtpkfPv82aoxCy7qoz+3Jzh289wH6ynhDH9mSuZgytsLGM0x9",
	"xis5CMi+moB31hwRIPprAt5hk1/dvFfO7PyBPPdgCe3wtd2dGzaHoDUXzF7IIXLWMgowInO7QgJmLgiW",
	"nO0I63LTlvzxWM9H7jPSGAXuUrQt+ho1fmNsVzCd4q/hq7VQFsALxBndvVHjZng6auz/PfH7iAiGVOgt",
	"WoBncKHuC4GMSHrwQvlMTmngI86t7sHomRwXqkZEELMvYpkuPUwEq5SFljDwqb0toefHPU0YbZxhZKyT",
	"ZaElBROXznm/rLJL58iLBuJnaGGstTud+ohKVvC96wEpQjfBqHFydPwju0qOXw2Pjt++OHp7/Kp1dMxm",
	"UkDeB/yH6DJaQp8x+LwsJ8JV+PNXTcDaa0UbC97CAZdVmtx3QWUFIWBXapg5Ncy1KreAgKjYFexMs6Fn",
	"s41G3e6gN+Dbb29fwwW3Fu4f2HEg33aIHNwMhEbnFzQ5jIk57IcpMQ/PHXcCnXGPU+EfMpIOlU7YsbJA",
	"dO7aLTYecRY1+REgiAK/M56UTX8r/Mfv4ZhkFAc5YMQGoBsmG9fvPvWmvLIyKNfyW0tx+rHhnBw6eMJk",
	"Ys7et+Z04fyF/yusu89l4hGJoB124y+RBb7/7teD7xYH39nD7z68/e7y7XeD1nfT375vgQv8Bd1hH3Gx",
	"ik1SvFaBj2Rz/+3akGP3ex98+r076IX8kEg1xwcv2bbPeyPC1WtvDw//z7XhgSCS64+mrjdDLYLoIVxi",
	"vjJsZKyUkFkEwYfZ9vlo405GBOwnDCiiIkWeCGvncNFf6rE5lCJVqzi2ozVION2xDji5GimdG8anrlD4",
	"EQot7tMhlPyN3hIRYT65lrlJwTmmH4IJ6HkzSPAfoeYw8JzG20a4xDNM58GEi2zuEpEDZM/QQZjdVGiw",
	"EjpNs30GtK+7jWbDwRYiPlIoay+hNUfgpHWU6Z3dUZB/5viSdf3Di+5p52rQOThpHfF5byhqoBwSGs1G",
	"mAL0beOoxXp8aDbYuOASN942XrSOORFLSOdc43LIh4tZYy3Xs+ZMqOQPjeES+4e3J4ciV+0pD9PHa8yQ",
	"5tX/OaJKtA+Z3zaVg7bBCRF/de3G28ap0vQAebfYQhfYp6eJHnmqBLhAlNuZPmXTPck0uDzRHPARK81O",
	"3ZAWrnLjigW2A/H0nh0crscB6Xo28ngeR4QiZbQU4SFetmx0e3j84oRrB8Jc51xp2njb+FeAuCJJLjFv",
	"6h37Qag0c+OpPAXRVR4fNFN2Ft7leKLVmxkXREQAERZPGnjSgQ5TtBCZ9SnykE+LBvL6qMzsT8P45FUm",
	"f1sEVprpt4f/kNnEvk9NejSmwik/4+7OgsuCi1BJyG2sMkO6TOEfhnOXUeWWcMbdqM9kKmh3Ck6OTFPM",
	"Cg/wH6jcJG+cpDi+gylKO6s69gWF2ZQX3zJeYTb6Gqqmp9jzqVj5CA0yvg10HPfOB/4XzKUVMQTjIcB5",
	"vHIztDYB6oyoj38iIjKT8JnbkJYuu2AYbSdHR+FNikTyP7hcOjKiw+H/+cKPOB5LngEnc3D3ZU/i1k65",
	"QQaWhXxfXK58oTdGR9Jaqem7Iz80G36wWEDvvvG2obt1KJxx65bmkmp8fmg2ljJqYsp+wu3yAGqvwFI3",
	"oGhB/dAQ1lzk03eufb+xmVK7iN3EshPG7QWa0fBHb9IN4WGLyCpL53MDlXYh81H10KzIjx1+i/0LHgQa",
	"HaTzgD/jv6+DS9FCaji5rFmY4Z9GABK9ygtAkGpHZyljSeOjVPGTUZ0ZhAXQdLyW7zHt89LVeVFs87zM",
	"TucuHZhaMBSdmDmCg+BysbU6PLmmcTVsysMV2cbet4HP4l6fHKO7evJmsbD+sTt3fVpW/OVls6j94PpU",
	"EXM/uNLVpxZva/G2Fm9r8bYWb5+3eMsP7F0Ta8NbJrwBlUuojBgbPlE03mSiJE8hsB0xNZl5QC+e8iQD",
	"jySOFtHzPMVQuUB6FJTmfw49NMM+FU/29MjpyxJlsBOW3Tp6JNEPDw81MmJkpKZ/XWxUVkUU4kOUlOSV",
	"Fuf4YRCeCNvXM+R090yUDBKXO6ZcyEVlOWVCIcDOZfKblZQFYevbVQ6EvTw5lnbtdIvX1sj6QGppEiVf",
	"s5/LHE+8YBn8qHFX4vADEwRkZIpNoqhMX+Wx9PjsnAhYYYsHWX70KlMsRn17x/hW0WdEeKA5JMUMlwG4",
	"KLnu/bsFkJfsrsb5nwDnCRBukkc9lO80oWBStXulGxUps1/i0mX2DCsDlCffG9wfmqYVJV1eDrzcrZLR",
	"MvE3lFGGNA9B3+UO1MCaizweTAyceghxZzyu9TWolohL81Rvq3WkPjg/PqkUr1REX00/Px810q/8XV1U",
	"rq3yYUmQ7RJfn9keG93NLpm40OPP9g2MXU+UKLOTZdE/5zbeJjqVidslaCbXe6O4TKjM9MBMcGRAVDCZ",
	"vtPyR0qJk4Lq6kjcGNBqnd6jSwWbVeyNo9Zzjd+ylMqWq7n7i3Qw/kD2UtYgXttft2R/3eb1IBdbrvUu",
	"3RBZmK6+rcIgb2X9SaLy2Y0UxkZU/Eq6Ueu1b0ntW1KfbbVvSe1b8ux9S6JDe9f8S9TbJrwRU5dSGT8T",
	"NWpx7g0nanTjOPjbkDCyEYf1fidxGoHH8T0pQ9fz9D9RFsyMkkq8U3V/g9IYEzUUkkvbPiJAqMjYvg9C",
	"iW6fiS+CguAd80coheByfgmlgXiuZDRZyUdB7Wm7fgpqT0+OtV08J5NrnXuV5vstlEYXr1AWX7UPQzV4",
	"Gey78eLUfIJGc1l2B+T6NZTeAKJGvQPqHfCMPB22zClX9noovZviWqV3VMitbsd8ami+ZBacJ2Re0vO4",
	"m0b+jQGZR0VuWzxmcVmVufQV8TQq8wulOUVtfpHopVad16rzWnVeq85r1fmzV50nDu5dU5+nb53wptRc",
	"UmXU6OpVWermEzXVD1tSqatdFKnV+SigKPtYqvWy9D1P9XpqAfNRVJnnqq5qD9mvUhgUtVJDKK3sTINl",
	"+9r2/B6fiaI9hecdU7ZXwnM5pXslSJ4juioeY5W4ipPtK+DTvT05Dnf1RM2u/WaOUx4Et6T4GpXXo5X9",
	"kRJdResFOH0vZI+odTC5BzJRofZRhvhUgq3MaXjjORSzXHVfCFI8r7ujzIVuTP7cvRtgyv0VSgzM1HSU",
	"gXDu3vHc7EoWwonrOgiSHEpl+v0ytIoM8tWo1TSfoNeL2sxQ/BjMOqdpFxn1aDKV80DZiiXPArmdyWzs",
	"8zwpZc+E3kBzGvTCxkTOFeVQSH2pVVq1SqtWadUqrVqltQMqrfTZvWuXpebuCe9M/YVVQrdFQG9Q8voT",
	"VVLftqTXSvVSpNpy/cdSaFUg7HnqtLLrV4ihldivytothsSynJiokx1KaXWC60vMbF+vZejqmSi0snje",
	"MZ3WCngup9kqj8ZzRNeAYqxrcv3t67NEH0//oH13j1Htape5h3P9S6ucfrxKRcTVbnYrgc/gbcd2Uc1l",
	"mB1OV9sgee6nVfaHqLMh7mDLcbYMXdXb40+6PUzY3AwT7o8FhsZL18HWfWkVKJDb7JpVw7oX8b2BKMJL",
	"3HNpNPFLrQet9aC1HrTWg9Z60B3QgyZO7p3TgqbvnejqTH4op/tM3Hz3RfeeVKGlKdgKF5bsxKD4jAcg",
	"bvxHU4MWUvdMtZ+lwbMKv1Xdo68qAKXOqxLrpYob6f4eRwVa3Otz0Ybu7MloAEbO2VhOB1oNnueIro7N",
	"/0xF6M4dpLo13tAp6gVkCyJrPyAq39APSC2s1sJqLazWwmotrO6OsNoPyK5KquLGSd+R7NcVLsh1ZIx+",
	"QHKvySQTWeKiTFkyBJXAC8ijuVbkdfnMhIodQ7AODHoMV5UlimCocJgVMfgfLUKwudot+WHdgzEKR7F+",
	"+Ipr+Ulx9b+OWq/FhVpcqMWFWlyoxYVnLy5Eh/auCQvqbRPeiKlLqUyoCvN77FRjokb445aMWGHzRf77",
	"IdWPZb4qQ9fzNGApC2ZGSSXeaZNhKFKkiBoKyaUZ+QgQKjK2L1CW6PaZCJUKgndMoiyF4HWDT6RaPEd0",
	"FRTGop7a03aFSrWnJ8faLp6TybVe75AMn/SXEy9l6SwaRbQBRbSMww/UgmUtWNaCZS1Y1oLlmoJlZhLe",
	"O3DGDxk8YxsCC2KoS6GjrBoPQcMXSYZ38edu4NhsEQWlCrOpiSMzZM1VCHyzUaIS0Wd4G+aYOduWu+WN",
	"tmtSd3wRh4xC4q4uI3GLJSq49EVp8dOWZG3ReJGkLQH1SHJ2MU3PU8qOFsqEigrMY3X5uhSiROmI0Aoy",
	"DQdAjIPtS9UFXT4TiTrC6o7J04VYLSdLlwLdOaKrIC6UbeM+titDx/08ObZ27wRU1zjnUszPllQKTVFW",
	"7WI81c/Xq0DK8Cw3XJT6xtfmdi9CfG52pFKAl/4NG7mzt/wuvaDLGv9/GvynQLkOx8vosAOndAb2qDzY",
	"EyqSQw8tGf9t72d30kAWVtSog6i/gs1UK5FqJdJKSiQmMs9dn4LuGaDQmyEaEhRhtwW6U0BcGrLSyG5K",
	"+jhpccERAXszfIuI8F2lc+QBPj2AY9ff5y1pWkl0B+gcUjCHt2gkGooqRITyAwTZbKLoHC2aALdQqxnS",
	"j4nlBDabKJE3bo48zL0ZiSBxCT1EqNRBiZGRwHEEdexfyeElibvDdO4GbI9HxPiyYxMkWEF+fZSARL0c",
	"G10ORXfPvptytrFvY2yX0dazBeKk7sIChYSuvkDsIK60DFGX4TKYdMuYoiqbop7zanOuIJ99NiGffauA",
	"fMktV1qHEdGvRNE6iFkovxKpdYhJTa/EiJRfi+h4ks0lDqiq66SQVHRniKJVNki9NFtYGmUXiRLmrJ/s",
	"a8mdJLNeTKDPhyIsZHiBfAoXyyZAX5fIomJWJgjcXHX/B6Cla83BzfA0LsiYZh9ZLrGNzGhA8NcOq1kp",
	"G8dm6VKmkM1d0krOCBwjSeGjJplRhatds+mpUmEozaaEx6rybCSXlvYEEsUjUkqJs/10rVqsrcXaWqyt",
	"xdp6OWqxthZr6zmvxdparK3F2lqsrcXadRxVU0LW7rmsZqVEs5hbwn1VNDcON0ihqBq6SCbJ2JpXa7Kb",
	"Yv/W1HAez9W1PKHP1ek1s6KbVp+s4gtbFZ6hV2RmMBXcbdIY0qLqMRxnVyDk2bjTZvbDzjnWVtgPZZ1s",
	"q6KZe2OuA+XYJ1bT9bbdcDVdPgOP3N09qPVoyL39i/x0qwJSuktWg2Ttvrsa/oyOjJlVq1mbXO/eanum",
	"wNO36pYJPSwfgyPZulvwCoTUu+0/ZbcZkb4pQUJYC8u6F/PC1Wywg2Sd2gJbW2BrC2xtga2Xo7bA1hbY",
	"es5rC2xtga0tsLUFtrbAruFYnBSxds69OCMhrmF9FbJXVdtrkoQtWV6TnRTZXVMDeSyra3kin6fNNbOS",
	"m1WUVLe3VgWkqJgZRmnNZho3Ghxt385amYhnYmPNoH/HLKwV0F/OvloVveeIrg7d2NCp6Xa7llVNh08O",
	"yd09inUoWMOmWhWEvF41GNb21FVwZ7DvZNarZliMltRq+yTXjlp1m4iK2+Y0tmw/rUxEvbP+/DvLgOw1",
	"RQEeCbisoZRqzaOYJk2jFNUh6+uQ9XXI+jpkfe0UsAO50PiBvXvqVZpUqsaXUDmFKkW5N1mod6Pb05vS",
	"EtpS+ogqUrqTilGKjCgozf+sov8swE+ouaIVhQ8ar/pjKDSN3T0b1SXdSYVlDirLqigLAMa1UXRlTSR9",
	"FPUjfS46R7p7msZcCBXqFgvQI7U0tFYhbhBGRvVGfXdrdYT5CC/QChYAPFSWrHf/bl3NZ+yuxvmfAOcJ",
	"EK7Oo1LkoAWi3v3hzHODpX/ouLOyOruo7phVGosGsjtnGBa7cGf+OSukaPSyH+sHD7VuYzsPHmrF8NMq",
	"hretbNKcJbumetIfh+HxbjxJy6ildKd1hcNatJP9vCUVVrajIoWWbnyPpeCqRu3zVHdpl7YM8lZmM6qr",
	"xtbEsGhHO9DSbLweZgbsbV/NtgY5z0QNp907O6aUW3nvlFPYrQn7c0TXw3ysdjNRsl1ln6nXJ0fwbp/7",
	"Jlxs7dBnf2Crsnh5KaqdF8mXajmdiJlop5YyaymzljJrKXN1KTNxnOysoJk+FDOHv+ZUrSZuylO/kG3R",
	"dJSSTNQS25Y71b7Ki56JsT669FmW5mcugKaWuSQi1+FI1pFE14B3SnhIjXsFkTQFPzMsH1MwXZGo5yae",
	"pjbXrkqoq22uqnLqGptClUpW3RE60TFD0mPJrJmOn4/YuqsXRg5GtnJbLD13ih20mnWUSc/XsoECrY0s",
	"ZrKPhq3Usmstu9ay63/C05m+DGDD36Ek2CoQnkki1g70EIC+j2dsA91hOuelRSwfTHwKiYUAthGheIqR",
	"Z5r4sGjZ8EPbpE+ZUlbCFH8nrF0yAs9GKOYhzM5aGwhwtmFyNh/7ayMEyphWZ5uJebVxkrYT66lLbMYS",
	"IR/gKT+LVK4wptSfu4FjsxsQfaWI2BGpYdERiQt7rICHbDD13AWYY+RBz5rfy6th6sAZwHJiAh/ZADou",
	"mYn2XIJGJHxq2eWRu8SkA9cD8b4XQfByi7B5HRERUAzRJqBq33hGXE8RK9N7Y+7edcNgXqUvxv/seYx2",
	"7dy9G2Nl8iQEJ67rIEge28Mm5EZ32sdGYam1Zq8kR76Cn42EXCXGX+OQIQs8hreN7Kqiv40c55N43JSg",
	"eAd8buIlLofENUTYtT1vVkG1xlUiHvKq/jcR7IxofHQfnKokPUc/nHhH7bInTtUdtZI3zipbIe15scI+",
	"MHrHKPQ8qleO0u/z8svZwdvBjI/STEr+I74NYJg3tQqK62d/qwPV8DzKtJw1B1bwUHDdXZb7kHADm0y0",
	"9RQ805afJ65JUr1n/yP3bO522KrUtJ7ragnzX7JkjvtqbQSsjYC1EbA2AtZGwNoIWBsBayNgbQSsjYBP",
	"YwRMMaS7/gQizxSo5c5XewZRrAbQdqb3kX8ks2Cyt+rPIZ7KOFie7t14EpEj7JoQup68u4mHESsCXu+3",
	"vpb2KwPHPKA+xROJFQh7ps8kdt+AuPqWW/WxxIobReMMvyF7ooawx3408Sytirt7reRipQrXU9a8uCa2",
	"k0aaauiu7YxrQbfQbJFZ2pqlq2BwXGv3lTQ7rrn5UtaWp+DAHs0KuQZh9b7+z97XRdtko6Lanet9cVxo",
	"jxdoMeE7r5RBMl0texT8Iktc8gKK/TH5oc6+VGdfqrMv1dmXatP7DmRfSh3du6agz9484VWqvazKqONT",
	"92DJa1BUT37akso91YlBw54axmPp1YuJe55q9MzKFeFoFU6suqp8NTCK6pkhlRbG0tjRYGn7qu/KRDwT",
	"NXdy2ndPu115J5TTZa+G5HNEV4dxrDTWdL5dLbWmwyeH5+4dzbrV3+S5XFU0zpGJNdJwLQfXcnAtB9dy",
	"cC0H75AcvLMSsE72XUHqLbzhkuLSlkXcIjeykOrHlm53z01MWTAzSirxTqsLs4UYSwoiq0iuCWQ8nqya",
	"0+0zk053Vy4tOOeqyKKFQFQEkPUEz8eTOJ+VqLljfk8lIVbg2VQaXbxCWXzVrkrV4GXwYYgXp+YTNL5H",
	"ZXdArndR6Q0gamzynt+yM1CJbut98SfbFxmQ5vDPD9HX7PPIGXZJK8ai+CGsmxXyBzLFuCyupm3OFr5w",
	"xXwoFcKfzJU+uD5VKrA/zYW78jWaUiH8yVypJzY/mQ3ufYoWSt3UF3MT1557i22hQZd1w5/MlX5RDiBZ",
	"Kb1Y5kqXkcY+VTWpadasmDVHdiBDOITLJn8z18pmUFOqm9Or5TSkRrPXtaWLdl9A13XsHaqjLOWmVkxb",
	"Tnt6zzc95J22ZbkBoSnYhz+bK58GPnUXpy6Z4plSWf05B9UDIK+6a9fB1r0K64H4Ij7k1u0HRFOxH5DG",
	"w+eH/z8AAP//GFfCKIHGAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
