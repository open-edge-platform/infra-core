// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VByGpPXw6eH/DwAA//8RzKuVx6gCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
