// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"NB4+P/z/AQAA//8NJt1gn8MCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
