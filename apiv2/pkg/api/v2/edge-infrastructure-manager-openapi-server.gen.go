// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
