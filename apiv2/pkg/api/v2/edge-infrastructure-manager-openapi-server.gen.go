// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VBwEpPHw+eH/DwAA///YCk5qlcMCAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
