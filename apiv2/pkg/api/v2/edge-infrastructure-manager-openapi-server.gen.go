// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9+XbbOLY3+iq46q5VdrcsDxmqkl69+ii24uiUbflKcupURWkVREISTihQTYJ2XGnf",
	"dd/s/vG92F0YSIIkwEGDbVWz1vedjkUMG8APwJ6w97eG5S6WLkGE+o233xq+NUcLyP/ZXtDBl4D9C5Fg",
	"0Xj7qdG+HI4HP92Mb64G153T7vtu56zRjH5tXw6Vv7qDy8bnZoNi6qDG27CxZoPeL9nfPvUwmTUemvwL",
	"hRSxjmzkWx5eUuySxtvGcI6Azz4BdwroHIH25RDstS2KbxG4hATO0AIRCobImhPXcWf3+yAaTavRTNI9",
	"bA87Osr579f93sfuoNu7Sv1+c2X6ctYdnPaurjqnw85ZeqB8OJqhvoMeWiAKnVOXUM91HOT9hImtHzmr",
	"zQb+7vJUHcu7dr9z2Rm2L8anvathv3dx0emPf+penaXGZi531bvq5BboXl92cwt8vO73cgtcn92oc2Ia",
	"t2aKTgOfuotTl0zxrI98N/Asjgxo25hNDnSuPXeJPIqR33g7hY6Pmo2l8hMDNKucnVTRKLBcQhGhjWZj",
	"Ab9eIDKj88bb49cvfnwZEyyb0NCXaDLdw17vetjtXbUv9oHsTP2e6PDk1etmY4FJRECzsYSUIo+1888/",
	"//ufn+DB7+2DXw/GRwdvWodv//b3//rH//Wn5ig4Onph8f+L/rK3P2qAz3/9cyMmPNlfhnoCF8g4MUvP",
	"vcU2ssHkHkB7gVMUvzxKkMjo+8z+z9HBm4PP346aL44fVEp4VxoSPLmoXQ3sw28A24hQPMXIS81acpos",
	"DhaxWAefjg7ewIPp528/cjo8BO0ece4bb6kXoJiusI8x1uKP4gXyKVwsOZT+7KFp423jT4fxIXkoT8jD",
	"YVzygY/rXwH2kM32qBy7RJGyEbTojqhwJ/+LLMqoOEMOoihVeukSv3gvJGc0rAYWyPfhDIGp64Fs6y1l",
	"4XL6NlL6wfXpyhSaCGSNZglLdGUkqEt8ComFNj9tYctZyjJ9Gqm7cC3otC3LDQjdPIVq61kqtX0bKe0N",
	"bpY2pOjadbB1v3lae0vkQYrJbHDvU7TIkmsgoJDgfkCekFq1dzOpydaeglwDBUaSr8UV4W2e1rDlLJGZ",
	"Po3U9dEMu1tYdtFulrJUfzl0LRGkyB5Yc2QHDtoGhckedLQaaDBSPcBk5qDt0ZxsP0uxof8ceulWqKRa",
	"2mgJiobIYWyvd3/hzvxzzw2Wm6cv20eW2hw6ytF+7blTvA0M6HopoD9NS/EILhH1sLX1BVC7yRmDlprS",
	"g9j+SiQ7Kh5I6fX42fW+OC60L9Fiso0bJNl+lnBD/4X0bo9SM4151J0jynjgQbBYQG9VlkzWDhUrc9en",
	"Pte1BD6jKilQI89zPYOSwqXQASRgU8oaEw0tPeQzAY7MACSgw6q3ckQy0X40VEwomiGPC4sBIUwwq9A3",
	"JqAvagndUV7HYfO6rnnrFTrO60e0peslINBxXIvdzFUGeYfp3A0ogMDH+UNUO8gS8BAXNMBKA0Ahgc2w",
	"T5FXEXaXci9QF3iyBQBBKOglUQcD6vbIxIWeZmreO3DGWvHxjECH/YsVX0CKLeg498AVFSNwq1uNlRzL",
	"AvH4Jq7rIEjYABGBEwd9XHpumY5FaXB73e8Bl2h7FEXGt6xFXYd6tcxQtgTY51ZKEXJUoC9K6YVM2hgf",
	"eRg6VxxeORSIYhKGfKnivvc+tQ9+FXqgz99eNU+OHvb/oXYt6o5FXR0NgY+8i9vFAP+umYSLj5fAx78j",
	"tq/P3ynNslpj53YxZl/1eyvAds6Ybm66Z6lZffE6M6tCqdQ+eP/5248PB+qfL6v8eXySUI5x0jJToezG",
	"xB4z7sGS6tHkBLT5fgOhHkyz8SK9f576Syr0H5q8PL85spNtuQt2EE89dwFsdIstto7Uc/0lsliRFhgg",
	"Clzi3IPJPd86Z5egf5laluOjk5fmEw4u6FjcXDpwRcR1iY0tSMVFljewRHE2DLWVSOmXHevN8BRE2kNw",
	"N0cExKSBO+gDB/oUWHNIZsgWI5/cswFDYoMeGzefibzTPG5wHHWlxf4Eu34fOQj66ExrW3nX7Q2ALAHO",
	"Cu5J1trYE4XHtsG4wQp9RMTWsQq8N/GxsJ9b0YaxB8/X6t5lF/xriT5EK7pOFlZXs7rvLk9B9xpA2/aQ",
	"7zeBH1hzAH0wahy/OWkdtY5ax6NGbr8La4yXhh5DK1AeLk1GlIdmw1oGbc+aY4osGnia1Va/hjzf6fUN",
	"WLg2cpoAtWYt8PXH1+PXL/OGYC2DMVT70QzGWgancAkn2MHheZLiPHlR4GCfMkqg43BKLKUS2Fu6vo8n",
	"zj3470Hvar+IJrWuiSbX0xFzFfFVnAZWqLAz3pJuz1nL4JLNp8bAEk51OPchx5PXEa9gGM7Atb4gmjug",
	"5fzeZ8wQH5kvyhd1KYuZRjecs8qaXoecSY37pqIg8IPl0vWoMClJzBXRIOsaaXCX3NKbJYJBBUwxcmzg",
	"U5eDLIQ5lZWawENT5DGu7cNZ+/BD/xLYruVz0YyV5U2I/VZIZkiHboECz0OEqobtopuUl4urXrt3yCtV",
	"WSkZVy9Vk3P7YUUb+dhD9ioky6qrkiyrVyeZMXHnSx3X8Q5aXw74SiNicWEDUgqtObIF53d+fROxP3xP",
	"YIoWfpnOZ8sg4roezABhvYxnS5UjgZ4H70Oyr7C1AtlX3dMVySbYKk02YbTpyTZxeRR9pQF0Ik0HnUMq",
	"Ld8T5POd5QWEMSxSxcDOCH4EhkxQ/9KPeJ/SjB8n18z5xRSvxfrFzVTj/RTqzMyfOu4Swyxg+gSprgdn",
	"aAV4+aLmihCTtUvDzA/p1EPtxp+sMISbwbsVyQ/8SWnSA0abnmy9IP9BfilaZZOQjskceZgi+xJRaEMK",
	"9VLtQn4FUfnw2mWNs7tP6uWki0fEg31B929voRMgsITY81lJYiNPFOPKI+wSLqU47ozzFD71As4Clp/l",
	"kPYuRYu8KY6IH4fj0cw1lqb2ok4Vk3y0tgu0cL37d/dUt0n+7wASiilXjIqCYK/fvtwHWGh2fG4oZX9N",
	"WAN5Kyqqj3k53aoujIupuBEl1hX6vmthyNbvDtP5Cku78mot4NeuqHd8dKSO0bhE1XVarzak0yKuyZmQ",
	"fTHOYpqa45NNOmiZUMKJ1QxC6icxma1x68aNbPTijZvNuX7TA1jrEk43Vu0qztC73oWcaa7gWl4yfvfU",
	"XSwgsYUbSykOOVkjbKdH2NhLDTsENh8tr4xsEOrchOaphMqJVxy7hA/SPL6N84aCYgOxpaEqqDejVKF9",
	"LYAq7VTDpkpgrpKw9FKVw6Tn2oFFr7SHtPAGAteiDLgqYF1kW2PTeSz9SgvnVXH0URixGfapx+f5+R2E",
	"KnU5IMsOYi2sZZurBjkN1esdiJoGC+CX5wQcLj/onjXBDBHk8bvaJeDUQ1JRra7Qi8TFzA68DbkC59vG",
	"Bpdc4yytGhkDmanPQmuYj4v1INL9KNolrE7XYOti39i6eyi+ELAPpE04fzL//O9/surp+YzGgql27pqN",
	"O8bBx8Nf2a+6knEw1wy+orUwxYpHhkPFQ/1v8gcfBAT/K0BcUMKLRUDhxEHPzsKY8VP/nLY6mt3SY/2b",
	"Rq0PKfJVfxL10cqH3kD/Akf5cNa56AzTP/au3vXa/bP0zzdXw/7NIFO63znvDoadfvJFTky1ZrultXrV",
	"bKl8gyFhyLiF2OGeAJGO0YKerXGnsXLtI6zJKYJcuBbTiX3emjhpmsBifCHw0RJ64Q6ORLoM/LNXkUGl",
	"rTWhRMJc7qsXvjGCBSQHrHU+BTG96guYvA1a8HBFNKZnV1hnDMkA+kwQjgwOvUF+h6xFM9NiYdOJqgzu",
	"+rSrnAS5TJKFDdeMZJ8K++L2oBJ82OZetTQbtwZ7boq020LLrsmom3J5UHei4fxRddmb2qzsGvCmUCoN",
	"k7t1srC64efsRPw8R3SOPLFLsQ8gmCysuD3geoC4tNAuHHWg8w7Kwz4bk1wEvgX2eoPoHVcTOPgLAojO",
	"j5oAkeWxz/6XWq39NfYFXkoTuOnsisbyva8YzLlCqrT2qXvdFtXK6GRVirInl4PJl1K2pStE71zvS7TW",
	"F1FFrv6yGEUFIwaX7dNwwLmaQWiNWTGtVpAG2V4u4Ve8CBaAepD4C+z72CWM26DhfRuRkNstDfSyIDvq",
	"ovd2mc6TZxwQpEqTKfYBEfNWjgRxCipv+7Lsr4fd2w73l9Mcv93UcMEc+mDQ7/Y+Sjc8O5f3Zm2PZUHt",
	"VuMlPk79K8a2aDWIkY3743sfSHOrcy/2HFsWIakkiGwCPAWD/gGjEitG8WJSb6c+kxS0qxaSOjT7qS4k",
	"bJJEJydQUuOvR6TZwXXl95TqtaCe+YZrIW1/2tTVEFrFVAZJz9JZmJqsCuIhu2hIntansgbYYxLJfimL",
	"QtiL2aZQdFWkiCi4OXwbNoFvT+StsfqlsdC7xWgoKmRyjF4xQrAu1YmU0yrK7I/FVw2SxK7OWzUbd3cm",
	"D1j9jJRjZXmrRZxcej8atq1qd115y+ptvymnVu31zSqdyU0gDkno+3hGyggQyRtc9b3U+qQEvnIOy2m3",
	"XEKQFVqicrnEwOAR5UBf53fLfgY2mmI5lJvBu4Pu+9zDhbdU8Uxhd0lvcBBFDlAOlHV4TPvaJBN9QF+h",
	"jSy8iB9FRLZPxpZ0z0KWiC2tJEcKRnkUYXucIz5h2+TYuhI9xVsa2zlusKaTbqCeZzHKHvNkSx0C6u7W",
	"HAARmy/CDFwiOndtNd5M93rcPjvrdwaD8Wnv6n33fHzZGX7opUOdGIsNhu1h9zSvxNkvV+3L7qmqLtJT",
	"pZmirJRSLU6JlBQ07qLds34MI+F9IVEUS1RFRxPS72YrNdWlxLDETKymvp/cgy65RYS63n2sy09pn18l",
	"lKNCsNuUMj8yHpUasbQ1RRXPEIVYs+dufOQdTD2MiO3ch7Yl6oacFLB5PR/AiRtQYe0M58eXKknj3hSG",
	"FNHCVrZoFsB5mzQ2v2m2J9tpNwPzvpTf24NB9/zqsnM1HHf6/V4/p5ChBbF9b/rtYbd3ldNIWM7QTL9z",
	"0WkPDB9Fq7ojYWC08YWeRuZ4TmEJ8AUTW1WOd68Gw/bVaUcXxSn5jQdbShCm9ppD1Yo8Vrq6YlWFBAgn",
	"LCpcaXoD8bfjNIF8Vsm2OcJcPQZHwiESuB6Y3y+Rd4t9cQOm5CghUPcKEZ2NXBHpiar4QIcDVByo47A3",
	"+mUMPatESSDOU61TEVYixZRSe2mjA+Up7Xn5cTpYVaT7UgfTPdvKcFaLzVRsLlyxXd3EdM/SU6PrULqh",
	"r4W8Kq7sGeShr9hnzZ7emjQIpx87vnBugB5K6J44nxDqncKWmwARy2VcOfQBFG8bQi1swuuO/beCc9tf",
	"/5+9/VFjNBqN/s//e/B//j/A/kVGo2+j0cNo9Gk0+pzv+BaOd2zdIqP/dhnXXXUFWB0T0tm37/2sqFsI",
	"9mrOBqpDrwq9HLCHnekoP2NsIDfVN8FQIUw3khZoOxhyq2HEoZ3lj4A1V5bDUsjUOinHgF7RS0dCOhpj",
	"GJBgLR+dsLEc/5wk6SZWb6gbwAzfIl9yechWnItocq18d0rv+LaNQKwdRcEu/Md/ZV1MCxxMU+PP4SeT",
	"07CWi1KyqWruSSmC13NNSo8+3y3pS4lnmAmW66HZcJR4aqajJ3vmuFPugeMAKGqCO+w4YIKqHEapi5G3",
	"J5szHUq8zBhG1JY5ndR2iyYnFVwuOpfNzuDKHkn5EGzRQ9xd55Z3/UrL3BvEIh8/MhaBT9lKS3ZZNRjJ",
	"ZeYHvXjJiH0Q+MhmIqXt4Vvhw2XD+yPgCgpd4jeTHkfA5UcnEuLmFHs+5Vssfd4k0eP6Jszw8ZYBiuuL",
	"4Hft0IKiu81Ucbg3AKKGr1hdIsNiFGgRdKcALZb0vslG5CHO/hAXBOm6mRO1DGOjO1IFWyM4mvzT1fXH",
	"goxxRIUecGoUQ4EfdSe/SK2FaHPJS5vXJex6GbZaZpUiS+V6TwvUZpRrL160de5stfE85+3MUNbz4c40",
	"V9GVO0v1epeXpsEn86utwigWqOKkv/81tL7oXyqy428pvyonQ0q+AZCGTweSD6C2Le5UlXQkkeNwSHqd",
	"vhV4mN6/F55/hfBNFV/DFEm9wKfIblPKflzTz142NoZxaxs/HDR95JwRpuGtdVKYGq12XpgHst6xYW63",
	"4PQIlDuqkEFKxOWNa68BHtHAxvEiL0kzRFTCTcKfKoaHrLqHFu4tsgEmoHP5Hty+aJ20jpqMXwNKHGDO",
	"1iFot4AmQEVoHlAGm5yG7NDBO0RhE/gB19AzxlBgRMf8HJWclRyhUJ2ctfaM2lC1fZIgdb2tkRx1/m64",
	"S8SLNFxTYSGwEKXy5TcwyTxgZ9/DqI/gMtsIL6Jww2V1yclol3la5HAIYzmEjCL5IWtvyDUYJTSb+aYQ",
	"8WpAawzRvRZIfezfXF11r86zH+KnBJnmwncDGiOK8Y1Al9xCBzPkrBXnXhMPNNmyGjLQ0Kd2vsOS2wh6",
	"H7cOdJHvczrXkHqhOuMW5HrR+pWGKLnqDH/u9X8ad6+Gnf779mlnfNG9+kmLmfyi10Ulzno/X6lgiYeg",
	"AcoF9qlqxPE3uRJsUjIdgAU3yussaUopja+IeCUBiQ2m2KH8aXDSFCSMJ/7axiutTUYbPwP6V+irxuen",
	"S6autwB4qoj/C9dDgEciJiJeVah1h/6YsFZ03r3cS7UTVtKkQQkInwA+3jDiAyIUe8JOxsSMGfRsB/n8",
	"yl7CGSYwfNnCiIRU3CEvThqp6K9jldhsFFb1VVZy6dJkxxOVQKUJeNpd6PNQr1tBJ2/YiMrtrzGPj1sN",
	"71H43tLRYnT4Fh1nYb0joIvILwe2JH4MIAuvhK0ALWr8CcEWMnYVARdVK/8gRhPHJm3i2GHwJYZQDoBZ",
	"bBlAqJoktgLERAdPCEbVEFURkKqJpzwoTcYerbFph9GZnNjSCNUDLwel3JizLYTyxo3oJK5d9RDzePKb",
	"CmjRjbIV/nLl2gnsCIKykHEDugyoGTPKe/32QosfD9HAI3IguTgRfeUBpRDCiYSAzwPNYmY1WE3CryxO",
	"kytYNRI5IyaciijQHPWQJiq52YTMG+HGY5AxHhdZgpfQQ4SaXnorehhPtZ5IEVVUjj+Fr/XDKeGUtUYE",
	"dMUILejzQlBunibAFFhu4NhggoSJE7he9Llra+v6mKLimsrYBZkmY0yOxSg1BXyePaN7N866d6tUKB3p",
	"1PT8h1VOkPDmEf4YKbAnOo3WupmAg7oVVCyX3gEJChT36H5n0Lvp6/16k9/6nfNu7yrz86A77KjkJToy",
	"qB+2l7AvvE2SPTwhw5MwquOq91fkfADC+qWvsqztw2CTx7vMlGemtzTnUz5no1p6wxkb03DtB+QZYLUf",
	"kIo4df3QIuQFpDpG+wHRA5S1tvvg7MtRVANmQXpOXjTpALYVvjzdhxGfBm+0ykiqAB+z/1s4oVGRsQiK",
	"O45e39bKXTNwjUtZHsQmZBqQHIZV3AqEo8af8GwN40tW3A5RtdKbQhegMuGrZevMpzsDzcQQymExiy0D",
	"CEWq3K1AUDb9hACUqpDt6k+iZMMZ6IXd7yzwlAGUg10aTUbQJXMebwl+qU6eFIgpWqpCUlQf+2H9CujM",
	"pJfW4DTd/C5DNj3TFcBrQqUBxluFb6bxGr7rwNdPJC2vOABReQXyM6nSM8Snm97dnZee4eY6e7H8Hkz2",
	"upWdmOziCfdhDeLHB3FZwBpwaIQt3RZY6RNDlFYHJq2ERmrAIN1t4NFqcKPFIBvy7ql3f+HO/HPPDZZb",
	"gZymmycEIM1SUw2OUQNjx5354xlvojQ8s5OhA6u2j90Fr27OS0M5D6VlgH3tuVO8patf29FzAXdIz1rw",
	"XspGVgO4JKEExMN+/iAgv1aGswLMM5gtAvoloh62HuMQT/T0HKCeIGhVrC9EIyuf5ioR+WhP9vQHgHty",
	"/qvjXQ/dkoB/lMM91dczAv26R3wIxtVP+SQh5aD/Bzrr0+uwMvzLnvjJ54FbwX2qi6eE+zNFQ4k3pnn7",
	"L/1ws7X629Aqb0FVAKfpL41bE/4K4LpVoNYQzYPoiuCsjkrd4R8TURKQK0AxH4S6tw7Vwj0XBQpLR/pL",
	"xgcLnWvKxv2zVw8WZnooXhQ8rMCbOPIcTiSA2SyJRUGg/flP6F4D5MEHcB1MHGyBnxDP/d25StL2Yypm",
	"zJ7vzw+QffLq1fGbfyPL9uGBP4cnBwT7dPnq5Hgf7H1qH/wKD34/Onjz18O/f/7rPvjHXusv+/9IJFD0",
	"5+Mv6H6TmSUCH3l6V/kb+SXK8sEzhdsLTFIpCk8SI/0ED37//EkM5ODzt6Pmi+NkosGww6Jkg0pBuQ4p",
	"z+vM/tLsw0Re8qqvDeIE+RQtNEnTk8nSs9fAFx12Ehnav6B0bJIXx691wYZan/96qPxTzm80z+PW57+E",
	"v2mKyZ/C/zXWVJbJADM+3IJB8TKpYb1+oRuVQptCU2t8oKdJdF6EG0G5KKsgJoEEDVLM+byqHdsrx1Uq",
	"9aIhyjGmXHZmyjXDTPmiVxtbblpHHto+zgiUis6YSuuoHuMrBt1LxW4sSAgpoyeag4i99xDizBlFX2kT",
	"9AYHNloiwu6eFmjHXoCiAf5gyG8ClyCwRB5wMEFgj6A7/o8o2eZ+C1wGPgXEpcByCYWYgFvk8XxsmAg2",
	"i83IiID2culgJELSAOqCSxmdsTdAPvteMaJQ+KwgDIsmw0PK2EKlYpxF91FrrA1xNhodiChnPKbZtwcQ",
	"RT9MPDV2nNxIZl+QR5Ajk9frTxYlJOb3PhAVgKwBLtiE93hxf3vzKDodW7LTgtlcIVzc3v6okUJ0sk/d",
	"3JkvbvNG3GKY1FLcXOYdmIh4pH0LVjrG5Yr8HYXeDK2XPSBswvQeThvjVVRiuM4L4xu/OBKDXjUgq+ht",
	"7Ppbz73Nqf3pMTf0lraedtebw53t6K3ySLdA6irKmcZSkQQNcQRNL1zUpBVqbOUwbJ5MADciYDAPH8hi",
	"Ar4/67z78eQEiHbBez6p33M90BmaYEiAT+/5RJYCqZoAoyv+fbxaWFGOViXScDZ5YrKHdCg7w5Obgkzv",
	"KbYxh7HsB6RqXis+d/aqcSRzmdIPj8SFrpimHBGbHaFFYQ0Tz0/Z6ZGbZhURm4cq1KrnwtApq0SQ0bMb",
	"Hwr5i5dbmdqn5EK8gGwuz5hHK2OA1ypItsuKmHHgG+KuDuauR01RV+/Yn3O4XCKCbGAHPCZpglWpFGnV",
	"HGJVTaLmF4WFX4Gq/FiniSCnOfStFd/UrxbZNL38NPCBh0rkXC4TunTtzHDq4a+7G8jEhZ69iWiYPKQF",
	"awj00Qz7lCfQ/FeAktEwdR3q6DLw9RUVhURlLDSpZD1rjimywkDdRfzw6fUNUOtkbqrN8LgJsrR5XBP3",
	"amr/5NJgIOHbA/vnyevv/vzbP0ejv45GB9V0OBtLeRWtOxALv+upr9SJufE04aj3upeXN8P2u4vOPrjp",
	"X4QBaabYQaEEwWZDER6UDJRh62J2DVOYMBsGHj5gh0hWONMOaRx42ljSU/wV2WUWew5vEZggRACvIu5z",
	"7LN9FWUxkALSM19qTr9xnaMJ2fwirzSZFRc9HpxpxfECzrSMW9ugSBGHJ68mqLcgERo96mF0i2ww9dyF",
	"COQls0yKLN0b0RqMRqkDjBNi4PT4N+3CMTCzBWP3uY8FA5oc27YpNi1HmHLIrOC4UGNU8uxEoZy/7Z0W",
	"CcImtTOyc3UOmcEVbqpwneLFWUCCp8hnPCi25uEu88PZiLOSSF6yBYZsK4VavzBV05T9HUV+T1AuVM0j",
	"EnmgQPtWhP33ZZAv6gLoOO4dIyaADrCY4CJTQPcGkfcgD43vB0vBMoptMYHWFySSy+Zv4xN1G2eJNOGn",
	"QLdfQRXPT6A59MXBJIpQFxB0F2t0kqoBkRWrvKbxyZT4od00Oz+9JWRHniYPRGRr1UT+V3lR0Pm6RJb8",
	"OkHhNhQcsNA0C0LAF3Tvc88cbjj1mzw8HJGh4kSZclN0dPCm2RqNDsZvD9X0N98S1184O9HYSxs3souq",
	"UTgcn/xYZNHY2y+b+i2MWVGomYpKhqn+3ChRdhn/neSoVnLaKTQJ5KQlizOA6qdhWMI+3ROlHpqNpQMp",
	"O1LeBcTWJXYzQzvKdsHzoss0w/LIkQmCeDt7/j6/8UfiVJNuW/yInECeUkXgOxbkQG9w4KBb5IBQB29h",
	"5B+KCPOBTI7XAiOSTCAHbDSFgUOVlNWCDvUUz03LJediPBGToc9Mxk7pKy3k2a9c7uVypiwquB2axA2Y",
	"IMclMzZzLXDDEeTcxxhi1/AULrBzn1KG+5X3T2n+QpI7NgbUFN8/CoYyO3j5QRJcdvD5SdI4QZKF1WsQ",
	"l66WGYi3bCtmO2/6Fy2VLXA9PMMMbknQRsqBbdwyjGLTJbxCjjdzdM5NHDZFGtG1U5v5c3jy6rVGt/mh",
	"ffLqNbDmyPriBwuFj4t9DQmYo6/QRhZeQCd2+YIak8Hrl83GAhP1z6Qf3PTo4E1ynSRlm/Tfy7d+PQKL",
	"tV3jWo7trHLqToM1TbIoW7aoyaX/rAmIl9I+6hSVSd4ie50mvisa+1HDvSPIGzVisDfF6cnRIHLEioM1",
	"Sh2pJs7pDcbX/d7H7lmnrwtLm/ncvXrfb+s+XHSueh97ieEnx6SZ917EdKRHy35Xs8GxP91pmOOWzIAf",
	"KaWUkQx/ue5kB8B/lTKe8ksk9yVp5hRpaL1275AnBYvYkqnJUymi4DKozyGxHUbsktUFUkRIZLe67v3c",
	"6Y9Pe5eX7auz8XXvonv6S2oE2iLdy8vOWbc97JgK9PpnnX4yrZVmBKZx5uRkmrs+lQPi6Zmyo9ElXVK/",
	"8MDGiR/ev0/9MrjodK5Tv33ovuv0r9Qhy6RfnUFnmPpNTskvpxfa0uN+57rTHmYmx5jHKX9z8i2pBBBM",
	"TEnO5kp+e9fudy47w/ZFgqyCHZSJQFjVBTqkOc+8scSnHuI8JnRM2VnTzXzvx+mj4sqtcqd9Eds0GplM",
	"yt8epExa7aSHSzxWyNQ8IIRL3CH20sWElp+B9nUXIFlrBc6whFMsIzzsQTdeIfsYxbOI6ISMlPWc2NRy",
	"hKm/BFWVdAK6+V3FFaGkq2PYXRnBXkfaauL9Dwniw3bL8t0KzTkjCs+wMoFNQ0VHWPcjInaxNfw6WXpl",
	"ESXHZWNzk1bkQbqq5VwXSFWe4hJz6pGiOfLz2MXrzHqkhWr2e5SWIu9e+ti5Ouv1TTeT/CqYu/HF/5y2",
	"c772Ttu6gUgiNZObCmFa9e4SYUJzbi5M5sjDFNmXRhXskGeAITZ/qxhpXSObkqBQJvbY8/dHJGGFijoI",
	"4dqXeTwyT4nCyzD5pIhLTtxiIHRkrFni0sh0gIl8SFn60WTiFUxOkteI8nFWRRtdembNtZLHJvE0KK2u",
	"jmZkRMrPyapjNVzuOQM0XzdBoY99HLN3O872+ZloZKoZic/MbRPiVCQ44mVwKo1wU1iMuKEeEVoFierp",
	"+yo9WtGdyVfdnHtG56guSotBVo+HLHPflLjBTdNY6tJOzoB++ObbR5L4GH6OmyN6C1emfJ490MfxY4vE",
	"vwMSLCbCN4CHrouzeM1Mb9uNafH5W/dU/D41MkecZieBLM19bAwXW/1KEw0dhDEtc243y3PJGby/dAlb",
	"0fSMsa9Sy2ZDbg9YsIJg7/jgxfG+yBclLjGZLYo49zK9utzvELznOz7pIbv36S+f/7336fjgDf+fk88M",
	"NJ/3//3i09Hx5/29vabx2/5f9vcTUoDnkrEN78ecMK30Ikb4M0JfygzwDqEvYO/o4PX6wzs6eC0Hw/9l",
	"JJ11aaL8gxvoIngodM9ZCUbxyYtNkPzm87+Pxf+cfDo6eBENIPO7djicGNNYLjEJtBtTGc1ClGHjefWm",
	"0nha5gExNL2SOFLGk/hZOxxJjXFAhbsm2i7HJxvaLsefjo5P1D0if9DTb9oUtpTSB8hyiW04K8NCjDBf",
	"FAylgfCIAeER0+RPkcK/tEfoAn7FCyY4/Pj6JdfVYCL+PlZ8O2WXY9mf1hHZzHCF/evF+s29YEwe1GWY",
	"g8yEbSjkRtgua7b81ZuKOV6ddVhX3t7IKPINhHJsg+gJQ659MFk6erL5wfVp5dzdUU0T3y1fdkqeunsW",
	"7qpo+4wIYEPmT/xkYXlwRGE2Etstw3arXDf0DVx3JtrC3PVpwftQVqT0C1FeZVXGW639zCeyovgip1IU",
	"qjaZjLOtHGQ6qlkwjYyLfUZoZOQUTCErst33ymn7bPKcyF6kSU5H5eGaSV5b5SCSTGoiN6dBJNCID4PM",
	"gadTUqmeCjLza3whiWdAqoZvcPqhc3Zz0eGGr5tBSsOX/nrZ7l4NO1ftq9OO5mtvML65Pmsns48O0hOa",
	"OcgHWU+PlMNGsoBq8WUoll+BBZdwgh1M+QtckS83loqiAXdOb/rd4S/j95328KafNkFmPl/1rjq63/kP",
	"nfG7Xm84bl+djd/fXFyMz7qDn8adq9P+L1zxlZiH1Ci1E3GLWJELdIs0bkcX7gwIxzW+z0JP4CgapDTP",
	"pHbnIvCp4EMn3IcNE8aITsEXTGyA/hVAh3vYDTsXncvOsP/L+LR39b57Ls31vfNBcvI+dvgsXHQ+di4y",
	"U5f4eNrvDrun7Yvsl06/3+tnf/653b/K/tq9et/L/nrWeXdznpxede50k6vPE1FV9BYpGEAJwRsRO5f5",
	"RsTmD/sU5jtKEZ3qRSwpEk65rEzctlhfJnCwpWQr6XpggmczxNABhdojqsdfg8qaLZVjf3ny5uWb1z+c",
	"vHmlZ9sRsZ85x75F09GbBI1ibZ4RI5vMClJGVjGBeGWL5LozlErRohdXVPAasMZKlN5UVfAvnlHn7YBH",
	"ECe4U00tTNTCRC1M7KgwkTjCVO5Fz5zohAB1uaozLxTVhvDaEL55QzhD1vf+IwaZW5Z8jqVLvuytZym2",
	"TduCfdWxUKqZnW/BtJG9lXMCbsqkXu3+2KpV+UWKW6Qb46TZrVWK/6VoRU53ddolcQayL6DBY3SGXMcV",
	"8WKAAymmgY1ijpby+/PaxYT6PNiFempAP6px4LhkJuryQyM0iHd+SKmMRgTs2WjmISTaWwQOxTwwF1vg",
	"46O//OUH/j7UcwNix8cWQdBDPgWSId5nVMlhRRJqaIOHZMZH8NfDA/DmCMje8i1Kb47kfwp7fqD8qE7y",
	"2IFUH+yIEURmJeY5mqzdmWgyy53o4x+jmQZ7mFhO4ONbtJ8/68c/6qZd/TU572S2nbhCCaZHxxSlAyuZ",
	"pEMasAWR4ZoSii2hwexenXVP2+yqTuu2Mt8jJVbmS/dqfN3vnfc7g4H++1nyNUmGes0RESVsOXUdB1nU",
	"NTwyYOO0wiJcx6eOUlXyXVx0Toc97YsDY7EPvcEw7/vpxc1g2OmrgzMQnjfEbG7CanyuuSGNd0x6Okul",
	"HUqO5aHZmBnSf8WhPR13BkQp/p5ZNNAq/6ytTKCl1NPbkq8ajKnASsf5i1TR0SA1TJ/yRPJ4+zo/8epZ",
	"EU9jLbmOwJPktR4V5mU35fCWgWW3IBhG4SCyDMsY29sYmi4j6DZd4eWSW6kzQ0JVd7xkDw3NPZGbHbKq",
	"MB0vBoN9+CSdbQUI5hh50LPm9zLGRvbgcdxZZObJf9es2jUemqyiGOh6uV6dPBCaI1YnQGja7pUgF6eJ",
	"KQCWnOGiTcNo1+0YWT1N6is9qbJ0hTc1PJqAnvK8g+pJyC0VD72rhIjNozkMJRvLuJlRSIEXz4gQd0cE",
	"nEISWSVdguJw6GG3TRBrInkYGlXDW6gNZEQVaAOjELjGGYh10Xnjl+rkO57J62mGv45G2Tz8UHucN3gu",
	"ST/l0FfVA2/t6ooO9uQZa7qz0rdQ3q2lTfO6Im+sa6tmj2v2+OnZYxWZu8ghJ1IsPy8mWXuAlDhxNscq",
	"i8mpzC0vFMLXzoq9KABYSe5XDmVjDHAZ3MgyPMfXLdT4iIkxc+0gKwD2Yj+IfY3HWMhllnMZ43Xvl6jQ",
	"bYz90j0d6JWLGu+KcOgh2VotYs3/1/x/zf/X/P8z5//TR3Tmvsm5mMsIAwkaK6TX4fGAkd0udE+bue7M",
	"Qa2l51J3EkxbcW6KKM7ceq0ohh1lNJqxplNUprzCKaQoeq82d0VI6dDUIRzR9bGykt8u2sMON2skfx62",
	"++edRPAnfeqjGD5hRmi9ZaYfWv/8+B5VEl6rtP/c6/900Wuf6WwzyW8ag0uCihwqZRb3aqwcR/UC2Rgq",
	"jkSMD4hsm9zrXga7nCB6hxABMBolt2hCwPASqC3s4RZqNaOrZF/nm7R6wqKwbmVmL6yYf+jk3TVhC2X9",
	"Lr6UkLOTKxjK2ItoPatOz1afASanKsSBIPaJIwmExKySYT6sa4JUBPisl0luXKKwnglP4feyeLpLYKUM",
	"75xDeZnHq5tY72iQopp22dPZnsVppyxLYttrzkd5/mmuHc3+KnuaU3UCBfXag/2yc/lOH+1PW0Qe8+Or",
	"3lnHPJaiE39l8Z3ve2yBO8iTGnIBNXOGc3HQnfAslDBxraWexXxl4IBOsTAUloy6aEaZEhxMvohrJ+zc",
	"DaiPbSQ5cujwsL4de4ZAl0w96FMv4CmOwCUkcJbZhlUDwoW0GY6kKsd48gD3TVnV+cc0xkr7fqZQn+Pp",
	"GpKxCYWnSuYuJBqufi6vnu5P+4QzNZnSY0mz6JuPEWnOwrfu/br9W2fNxcq7VA0XTbhLNIdxnvRmuYQg",
	"i7aQ57k5vLcgLzljHVZFXDQeooFHBJpPRYtvwZzSpf/28FB24S2tluUuDm3XYsLYIe/RP/wTK3aQ9ETU",
	"WH1slOtCxwo0ZbIbP4roDQlgF1382vCTFAIZLaeujT5nflAvR4vd1Q5isxuQL8S9I/wOv4UOtsfQmwUL",
	"xKOX2gjaDiZojL5aCNm8AnHpeOoGfGmgw9b5fsxDljFAL5G3wL6PXTK2EcG8QrQ/0dc5DHzKf5xCzNPZ",
	"eFxhiuXcwAlPldNoNtyAjt3pmPtVcirxQiacQILfEHcC/wRvIXbYJmYUQwrHjuv74ktA5wzcHP0MQOgr",
	"ZO34XKcfDeSzNhcfhdipKnq3iXydwJN56qxwNrpFDkPAwRRamMwAR0uY/jO70piADpk52J+3QJvcizB4",
	"uqpKHce1oIN/R0IG5KKi9FNVUSF8IVsyT9LnnE9CV831Q3HT8ni3HIxELN3sZg63q9w4gO8r3V7VTWOl",
	"HXsapoGCBEBvgqkHvXvgIw9LasNJgo5LZjJNCfgvvsVTGVfTPGa2kSyjZaNJMCuiODNqKkOtZ7DHdzX7",
	"Emn0J5hA714/yUWTmZPwtA2ij7FawQcQ8BioHDTigWeUQl1kRbkXv//OdYoSFCMCLOggYkMvlYfMcgNR",
	"MYx7xFA59aDF078kPtARAQQSV/zAbyEn4BGQgXC3ZS1hX+o9bkUqLgLQ0rXmAFJwMzwFC2wTPJtTwB2/",
	"/xuSgGHhuAmO3/xw1Ax3wtJzHbSk2ALnHpq5HoYx/XITMsaTUUXnaER0xSbQ+nIHPZvz4/cIesAlqDVi",
	"3bYdJwq/BT0EXh9Fg2QIbIELBJfxuD0ERg1/gaCH7FED+K5AJXGBg+ByFBqWgEhxjn1A+HHMuT9+Fi49",
	"JG4YxrizswGCTycvD+ZuIHLaQ481wjr4vBdeX9FR5LckZtgtxlb2kJfcF0MZRv7t2BfPz46Ojo4P+P8b",
	"Hh295f/vVzYFb968eXNwfHLw4nh48uLtqzdvX71pvQn/+7UF3t3zt1YMvBbPGUDlOHnzTXCHACJ+4Mk9",
	"eYf4qzPLJbfIo2KpZRq1T/33pyMCXrx48SYez93dXQsjOm253uzQm1rs/7MSLfqV7gOZxpftG18M7E+g",
	"I68D/qf8Axy/BadS4Ip3B+/1ujfo/g/4jc3Q3v5vohH2X1ws4t/+Jj9FP7R8FD1q3uMtXN1cXOzv6wvy",
	"PbB3xL4qlJ0UUTZDlLXjTm14n6BQyGS8k1voAHobdpuoIXLF0tsm4LT9bY0B3rboLfsrd3yiVOAjC/wF",
	"HB8dpcf7wjjenzF5cQJ+O0dUZPJgn9v+e+ygYXpx3ncvOsPuZQdMaUiLqZoY/5RGRN90r4avXwKKrS8+",
	"+DvY29sTv+xPacu++4Bn8zNIed19oLD8Fnhxsg/+DXipC/cuLBRP6OEhaLNB2O6dz5tne+v46Eg5/PxW",
	"VEAcb8evs7subo7VP3798uXLH168PooPmwmauh4CNwR/DZt588NRupnWquu8J6YD7O2JOToEx/K9yj44",
	"UAkqgjpriE1a2NB3SkMcG/spbLw0YuO/4S0Ev8kcuTIhMStyiR0H+wlscGZgwX8HfwfmKrk7Afw9/rVF",
	"0N27ADs28vb22fDkA+Q92YmYn33ZGPuPFboSU4AJZRMgi4oZkKPnE7HfmrCm91Iz8apgJoQemraIe5cY",
	"vPwdEPcO/B0kShWMVyG/eOTEvWvNEO0w8Inf9vbVCUhOgizN/tgzDfi1ccBy6aKwFNf3dO6SeMjaNdvb",
	"z+DyHNHTGAWsAL8ueO68S7hcYjLjP3WJzKfH+TSRu06ZMcZFYj/JDMnkj4ILGRF+k1W6x0RfjB+CjBVq",
	"ynbEz6y7UeMb40UeDr7xiJUPB99seP8w/MZ4gYe33xaYPLz95iPr4VPrG+PC2GZ++PzrqDEKLeuiPrcn",
	"O3fw3gfoK+MNfWRL5mLK2AobzzD1Ga/kICD7agLeWXNEgOivCXiHTX518145s/M78tyDJbTD13Z3btgc",
	"gtZcMHshh8hZyyjAiEz7CgmYuSBYcrYjrMtNW/LHYz0fuc9IYxS4S9G26GvU+JWxXcF0ir+Gr9ZCWQAv",
	"EGd090aNm+HpqLH/t8TvIyIYUqG3aAGewYW6LwQyIunBC+UzOaWBjzi3ugejZ3JcqBoRQcy+iGW69DAR",
	"rFIWWsLAp/a2hJ4f9zRhtHGGkbFOloWWFExcOuf9ssounSMvGoifoYWx1u506iMqWcH3rgekCN0Eo8bJ",
	"0fEP7Co5fjU8On774ujt8avW0TGbSQF5H/AfostoCX3G4POynAhX4c9fNQFrrxVtLHgLB1xWaXLfBZUV",
	"hIBdqWFS1TANq9wCAqJiV7AzzYaezTYadbuD3oBvv719DRfcWri/Y8eBfNshcnAzEBqdn9HkMCbmsB9m",
	"yzw8d9wJdMY9ToV/yEg6VDphx8oC0blrt9h4xFnU5EeAIAr8xnhSNv2t8B+/hWOSURzkgBEbgG6YbFy/",
	"+dSb8srKoFzLby3F6ceGc3Lo4AmTiTl735rThfMn/q+w7j6XiUckgnbYjb9EFvj+u18OvlscfGcPv/vw",
	"9rvLt98NWt9Nf/2+BS7wF3SHfcTFKjZJ8VoFPpLN/bdrQ47d733w6bfuoBfyQyILHR+8ZNs+740IV6+9",
	"PTz8X9eGB4JIrj+aut4MtQiih3CJ+cqwkbFSQmYRBB9m2+ejjTsZEbCfMKCIihR5Iqydw0V/qcfmUIpU",
	"reLYjtYg4XTHOuDkaqR0bhifukLhRyi0uE+HUPI3ektEhPnkWqYtBeeYfggmoOfNIMG/h5rDwHMabxvh",
	"Es8wnQcTLrK5S0QOkD1DB2HiU6HBSug0zfYZ0L7uNpoNB1uI+EihrL2E1hyBk9ZRpnd2R0H+meNL1vUP",
	"L7qnnatB5+CkdcTnvaGogXJIaDQbYXbQt42jFuvxodlg44JL3HjbeNE65kQsIZ1zjcshHy5mjbVcz5oz",
	"oZI/NIZL7B/enhyKNLanPEwfrzFDmlf/54gq0T5k6ttUetoGJ0T81bUbbxunStMD5N1iC11gn54meuSp",
	"EuACUW5n+pRN9yQz5PIcdMBHrDQ7dUNauMqNKxbYDsTTe3ZwuB4HpOvZyOMpHhGKlNFShId42bLR7eHx",
	"ixOuHQjToHOlaeNt418B4ookucS8qXfsB6HSzI2n8hREV3l80EzZWXiX44lWb2ZcEBEBRFg8aeBJBzpM",
	"0UIk3afIQz4tGsjrozKzPw3jk1eZ/G0RWGmm3x7+XWYT+z416dGYCqf8jLs7Cy4LLkIlIbexyuTpMrt/",
	"GM5dRpVbwhl3oz6TWaLdKTg5Mk0xKzzAv6Nyk7xxkuL4DqYo7azq2BcUZlNefMt4hdnoa6ianmLPp2Ll",
	"IzTI+DbQcdw7H/hfMJdWxBCMhwDn8crN0NoEqDOiPv6JiMhMwmduQ1q67IJhtJ0cHYU3KRLJ/+By6ciI",
	"Dof/6ws/4ngseQaczMHdlz2JWzvlBhlYFvJ9cbnyhd4YHUlrpabvjvzQbPjBYgG9+8bbhu7WoXDGrVua",
	"S6rx+aHZWMqoiSn7CbfLA6i9AkvdgKIF9UNDWHORT9+59v3GZkrtInYTy04YtxdoRsMfvUk3hIctIqss",
	"nc8NVNqFzEfVQ7MiP3b4LfYveBBodJDOA/6M/74OLkULqeHksmZh8n8aAUj0Ki8AQaodnaWMJY2PUsVP",
	"RnVmEBZA0/Favse0z0tX50WxzfMyO527dGBqwVB0YuYIDoLLxdbq8OSaxtWwKQ9XZBt73wY+i3t9cozu",
	"6smbxcL6x+7c9WlZ8ZeXzaL2g+tTRcz94EpXn1q8rcXbWrytxdtavH3e4i0/sHdNrA1vmfAGVC6hMmJs",
	"+ETReJOJkjyFwHbE1GTmAb14ypMMPJI4WkTP8xRD5QLpUVCa/zn00Az7VDzZ0yOnL0uUwU5YduvokUQ/",
	"PDzUyIiRkZr+dbFRWRVRiA9RUpJXWpzjh0F4Imxfz5DT3TNRMkhc7phyIReV5ZQJhQA7l8lvVlIWhK1v",
	"VzkQ9vLkWNq10y1eWyPrA6mlSZR8zX4uczzxgmXwo8ZdicMPTBCQkSk2iaIyfZXH0uOzcyJghS0eZPnR",
	"q0yxGPXtHeNbRZ8R4YHmkBQzXAbgouS69+8WQF6yuxrnfwCcJ0C4SR71UL7ThIJJ1e6VblSkzH6JS5fZ",
	"M6wMUJ58b3B/aJpWlHR5OfByt0pGy8TfUEYZ0jwEfZc7UANrLvJ4MDFw6iHEnfG41tegWiIuzVO9rdaR",
	"+uD8+KRSvFIRfTX9/HzUSL/yd3VRubbKhyVBtkt8fWZ7bHQ3u2TiQo8/2zcwdj1RosxOlkX/mNt4m+hU",
	"Jm6XoJlc743iMqEy0wMzwZEBUcFk+k7LHyklTgqqqyNxY0CrdXqPLhVsVrE3jlrPNX7LUipbrubuL9LB",
	"+APZS1mDeG1/3ZL9dZvXg1xsuda7dENkYbr6tgqDvJX1J4nKZzdSGBtR8SvpRq3XviW1b0l9ttW+JbVv",
	"ybP3LYkO7V3zL1Fvm/BGTF1KZfxM1KjFuTecqNGN4+BvQ8LIRhzW+53EaQQex/ekDF3P0/9EWTAzSirx",
	"TtX9DUpjTNRQSC5t+4gAoSJj+z4IJbp9Jr4ICoJ3zB+hFILL+SWUBuK5ktFkJR8Ftaft+imoPT051nbx",
	"nEyude5Vmu+3UBpdvEJZfNU+DNXgZbDvxotT8wkazWXZHZDr11B6A4ga9Q6od8Az8nTYMqdc2euh9G6K",
	"a5XeUSG3uh3zqaH5kllwnpB5Sc/jbhr5NwZkHhW5bfGYxWVV5tJXxNOozC+U5hS1+UWil1p1XqvOa9V5",
	"rTqvVefPXnWeOLh3TX2evnXCm1JzSZVRo6tXZambT9RUP2xJpa52UaRW56OAouxjqdbL0vc81eupBcxH",
	"UWWeq7qqPWS/SmFQ1EoNobSyMw2W7Wvb83t8Jor2FJ53TNleCc/llO6VIHmO6Kp4jFXiKk62r4BP9/bk",
	"ONzVEzW79ps5TnkQ3JLia1Rej1b2R0p0Fa0X4PS9kD2i1sHkHshEhdpHGeJTCbYyp+GN51DMctV9IUjx",
	"vO6OMhe6Mflz926AKfdXKDEwU9NRBsK5e8dzsytZCCeu6yBIciiV6ffL0CoyyFejVtN8gl4vajND8WMw",
	"65ymXWTUo8lUzgNlK5Y8C+R2JrOxz/OklD0TegPNadALGxM5V5RDIfWlVmnVKq1apVWrtGqV1g6otNJn",
	"965dlpq7J7wz9RdWCd0WAb1ByetPVEl925JeK9VLkWrL9R9LoVWBsOep08quXyGGVmK/Kmu3GBLLcmKi",
	"TnYopdUJri8xs329lqGrZ6LQyuJ5x3RaK+C5nGarPBrPEV0DirGuyfW3r88SfTz9g/bdPUa1q13mHs71",
	"L61y+vEqFRFXu9mtBD6Dtx3bRTWXYXY4XW2D5LmfVtkfos6GuIMtx9kydFVvjz/o9jBhczNMuD8WGBov",
	"XQdb96VVoEBus2tWDetexPcGoggvcc+l0cQvtR601oPWetBaD1rrQXdAD5o4uXdOC5q+d6KrM/mhnO4z",
	"cfPdF917UoWWpmArXFiyE4PiMx6AuPEfTQ1aSN0z1X6WBs8q/FZ1j76qAJQ6r0qslypupPt7HBVoca/P",
	"RRu6syejARg5Z2M5HWg1eJ4jujo2/zMVoTt3kOrWeEOnqBeQLYis/YCofEM/ILWwWgurtbBaC6u1sLo7",
	"wmo/ILsqqYobJ31Hsl9XuCDXkTH6Acm9JpNMZImLMmXJEFQCLyCP5lqR1+UzEyp2DME6MOgxXFWWKIKh",
	"wmFWxOB/tAjB5mq35Id1D8YoHMX64Suu5SfF1f86ar0WF2pxoRYXanGhFheevbgQHdq7Jiyot014I6Yu",
	"pTKhKszvsVONiRrhj1syYoXNF/nvh1Q/lvmqDF3P04ClLJgZJZV4p02GoUiRImooJJdm5CNAqMjYvkBZ",
	"ottnIlQqCN4xibIUgtcNPpFq8RzRVVAYi3pqT9sVKtWenhxru3hOJtd6vUMyfNJfTryUpbNoFNEGFNEy",
	"Dj9QC5a1YFkLlrVgWQuWawqWmUl478AZP2TwjG0ILIihLoWOsmo8BA1fJBnexZ+7gWOzRRSUKsymJo7M",
	"kDVXIfDNRolKRJ/hbZhj5mxb7pY32q5J3fFFHDIKibu6jMQtlqjg0helxU9bkrVF40WStgTUI8nZxTQ9",
	"Tyk7WigTKiowj9Xl61KIEqUjQivINBwAMQ62L1UXdPlMJOoIqzsmTxditZwsXQp054iugrhQto372K4M",
	"Hffz5NjavRNQXeOcSzE/W1IpNEVZtYvxVD9frwIpw7PccFHqG1+b270I8bnZkUoBXvo3bOTO3vK79IIu",
	"a/z/YfCfAuU6HC+jww6c0hnYo/JgT6hIDj20ZPy3vZ/dSQNZWFGjDqL+CjZTrUSqlUgrKZGYyDx3fQq6",
	"Z4BCb4ZoSFCE3RboTgFxachKI7sp6eOkxQVHBOzN8C0iwneVzpEH+PQAjl1/n7ekaSXRHaBzSMEc3qKR",
	"aCiqEBHKDxBks4mic7RoAtxCrWZIPyaWE9hsokTeuDnyMPdmJILEJfQQoVIHJUZGAscR1LF/JYeXJO4O",
	"07kbsD0eEePLjk2QYAX59VECEvVybHQ5FN09+27K2ca+jbFdRlvPFoiTugsLFBK6+gKxg7jSMkRdhstg",
	"0i1jiqpsinrOq825gnz22YR89q0C8iW3XGkdRkS/EkXrIGah/Eqk1iEmNb0SI1J+LaLjSTaXOKCqrpNC",
	"UtGdIYpW2SD10mxhaZRdJEqYs36yryV3ksx6MYE+H4qwkOEF8ilcLJsAfV0ii4pZmSBwc9X9H4CWrjUH",
	"N8PTuCBjmn1kucQ2MqMBwV87rGalbBybpUuZQjZ3SSs5I3CMJIWPmmRGFa52zaanSoWhNJsSHqvKs5Fc",
	"WtoTSBSPSCklzvbTtWqxthZra7G2Fmvr5ajF2lqsree8FmtrsbYWa2uxthZr13FUTQlZu+eympUSzWJu",
	"CfdV0dw43CCFomroIpkkY2tercluiv1bU8N5PFfX8oQ+V6fXzIpuWn2yii9sVXiGXpGZwVRwt0ljSIuq",
	"x3CcXYGQZ+NOm9kPO+dYW2E/lHWyrYpm7o25DpRjn1hN19t2w9V0+Qw8cnf3oNajIff2L/LTrQpI6S5Z",
	"DZK1++5q+DM6MmZWrWZtcr17q+2ZAk/fqlsm9LB8DI5k627BKxBS77b/lN1mRPqmBAlhLSzrXswLV7PB",
	"DpJ1agtsbYGtLbC1BbZejtoCW1tg6zmvLbC1Bba2wNYW2NoCu4ZjcVLE2jn34oyEuIb1VcheVW2vSRK2",
	"ZHlNdlJkd00N5LGsruWJfJ4218xKblZRUt3eWhWQomJmGKU1m2ncaHC0fTtrZSKeiY01g/4ds7BWQH85",
	"+2pV9J4jujp0Y0OnptvtWlY1HT45JHf3KNahYA2balUQ8nrVYFjbU1fBncG+k1mvmmExWlKr7ZNcO2rV",
	"bSIqbpvT2LL9tDIR9c764+8sA7LXFAV4JOCyhlKqNY9imjSNUlSHrK9D1tch6+uQ9bVTwA7kQuMH9u6p",
	"V2lSqRpfQuUUqhTl3mSh3o1uT29KS2hL6SOqSOlOKkYpMqKgNP+ziv6zAD+h5opWFD5ovOqPodA0dvds",
	"VJd0JxWWOagsq6IsABjXRtGVNZH0UdSP9LnoHOnuaRpzIVSoWyxAj9TS0FqFuEEYGdUb9d2t1RHmI7xA",
	"K1gA8FBZst79u3U1n7G7Gud/AJwnQLg6j0qRgxaIeveHM88Nlv6h487K6uyiumNWaSwayO6cYVjswp35",
	"56yQotHLfqwfPNS6je08eKgVw0+rGN62sklzluya6kl/HIbHu/EkLaOW0p3WFQ5r0U7285ZUWNmOihRa",
	"uvE9loKrGrXPU92lXdoyyFuZzaiuGlsTw6Id7UBLs/F6mBmwt3012xrkPBM1nHbv7JhSbuW9U05htybs",
	"zxFdD/Ox2s1EyXaVfaZenxzBu33um3CxtUOf/YGtyuLlpah2XiRfquV0ImainVrKrKXMWsqspczVpczE",
	"cbKzgmb6UMwc/ppTtZq4KU/9QrZF01FKMlFLbFvuVPsqL3omxvro0mdZmp+5AJpa5pKIXIcjWUcSXQPe",
	"KeEhNe4VRNIU/MywfEzBdEWinpt4mtpcuyqhrra5qsqpa2wKVSpZdUfoRMcMSY8ls2Y6fj5i665eGDkY",
	"2cptsfTcKXbQatZRJj1fywYKtDaymMk+GrZSy6617FrLrv8JT2f6MoANf4eSYKtAeCaJWDvQQwD6Pp6x",
	"DXSH6ZyXFrF8MPEpJBYC2EaE4ilGnmniw6Jlww9tkz5lSlkJU/ydsHbJCDwboZiHMDtrbSDA2YbJ2Xzs",
	"r40QKGNanW0m5tXGSdpOrKcusRlLhHyAp/wsUrnCmFJ/7gaOzW5A9JUiYkekhkVHJC7ssQIessHUcxdg",
	"jpEHPWt+L6+GqQNnAMuJCXxkA+i4ZCbacwkakfCpZZdH7hKTDlwPxPteBMHLLcLmdUREQDFEm4CqfeMZ",
	"cT1FrEzvjbl71w2DeZW+GP+z5zHatXP3boyVyZMQnLiugyB5bA+bkBvdaR8bhaXWmr2SHPkKfjYScpUY",
	"f41DhizwGN42squK/jZynE/icVOC4h3wuYmXuBwS1xBh1/a8WQXVGleJeMir+t9EsDOi8dF9cKqS9Bz9",
	"cOIdtcueOFV31EreOKtshbTnxQr7wOgdo9DzqF45Sr/Pyy9nB28HMz5KMyn5j/g2gGHe1Coorp/9rQ5U",
	"w/Mo03LWHFjBQ8F1d1nuQ8INbDLR1lPwTFt+nrgmSfWe/Y/cs7nbYatS03quqyXMf8mSOe6rtRGwNgLW",
	"RsDaCFgbAWsjYG0ErI2AtRGwNgI+jREwxZDu+hOIPFOgljtf7RlEsRpA25neR/6RzILJ3qo/h3gq42B5",
	"unfjSUSOsGtC6Hry7iYeRqwIeL3f+lrarwwc84D6FE8kViDsmT6T2H0D4upbbtXHEituFI0z/IbsiRrC",
	"HvvRxLO0Ku7utZKLlSpcT1nz4prYThppqqG7tjOuBd1Cs0VmaWuWroLBca3dV9LsuObmS1lbnoIDezQr",
	"5BqE1fv6P3tfF22TjYpqd673xXGhPV6gxYTvvFIGyXS17FHwsyxxyQso9sfkhzr7Up19qc6+VGdfqk3v",
	"O5B9KXV075qCPnvzhFep9rIqo45P3YMlr0FRPflpSyr3VCcGDXtqGI+lVy8m7nmq0TMrV4SjVTix6qry",
	"1cAoqmeGVFoYS2NHg6Xtq74rE/FM1NzJad897XblnVBOl70aks8RXR3GsdJY0/l2tdSaDp8cnrt3NOtW",
	"f5PnclXROEcm1kjDtRxcy8G1HFzLwbUcvENy8M5KwDrZdwWpt/CGS4pLWxZxi9zIQqofW7rdPTcxZcHM",
	"KKnEO60uzBZiLCmIrCK5JpDxeLJqTrfPTDrdXbm04JyrIosWAlERQNYTPB9P4nxWouaO+T2VhFiBZ1Np",
	"dPEKZfFVuypVg5fBhyFenJpP0Pgeld0Bud5FpTeAqLHJe37LzkAluq33xR9sX2RAmsM/P0Rfs88jZ9gl",
	"rRiL4oewblbIH8gU47K4mrY5W/jCFfOhVAh/Mlf64PpUqcD+NBfuytdoSoXwJ3Olntj8ZDa49ylaKHVT",
	"X8xNXHvuLbaFBl3WDX8yV/pZOYBkpfRimStdRhr7VNWkplmzYtYc2YEM4RAum/zNXCubQU2pbk6vltOQ",
	"Gs1e15Yu2n0BXdexd6iOspSbWjFtOe3pPd/0kHfaluUGhKZgH/5srnwa+NRdnLpkimdKZfXnHFQPgLzq",
	"rl0HW/cqrAfii/iQW7cfEE3FfkAaD58f/v8AAAD//wAru+auxgIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
