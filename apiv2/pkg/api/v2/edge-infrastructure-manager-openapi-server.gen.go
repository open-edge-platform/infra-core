// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListCustomConfigs
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceListCustomConfigs(ctx echo.Context, params CustomConfigServiceListCustomConfigsParams) error
	// CreateCustomConfig
	// (POST /edge-infra.orchestrator.apis/v2/customConfigs)
	CustomConfigServiceCreateCustomConfig(ctx echo.Context) error
	// DeleteCustomConfig
	// (DELETE /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceDeleteCustomConfig(ctx echo.Context, resourceId string) error
	// GetCustomConfig
	// (GET /edge-infra.orchestrator.apis/v2/customConfigs/{resourceId})
	CustomConfigServiceGetCustomConfig(ctx echo.Context, resourceId string) error
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CustomConfigServiceListCustomConfigs converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceListCustomConfigs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomConfigServiceListCustomConfigsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceListCustomConfigs(ctx, params)
	return err
}

// CustomConfigServiceCreateCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceCreateCustomConfig(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceCreateCustomConfig(ctx)
	return err
}

// CustomConfigServiceDeleteCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceDeleteCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceDeleteCustomConfig(ctx, resourceId)
	return err
}

// CustomConfigServiceGetCustomConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CustomConfigServiceGetCustomConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CustomConfigServiceGetCustomConfig(ctx, resourceId)
	return err
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceListCustomConfigs)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs", wrapper.CustomConfigServiceCreateCustomConfig)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceDeleteCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/customConfigs/:resourceId", wrapper.CustomConfigServiceGetCustomConfig)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9i3fbuJkH+q/gqp0zdivLj0zSSXp6uo6tONqxLV/Jntk2ympgEpKwoUCVAO14Ut+/",
	"/R48SIIkwIcetjVlz24bi3h8AH4Avhe+71vL8ecLnyDCaOvdtxZ1ZmgOxT+P52zIIEP83y6iToAXDPuk",
	"9a51PUOA8k/AnwA2Q+D44hrsHDsM3yFwAQmcojkiDFwjZ0Z8z58+7IK4m06r3UIknLfefWodX1yPh9fH",
	"193xzeXwqnvS+9Drnrba2u9Xg/7PvWGvf5n5/ebS9uW0NzzpX152T667p63P7RbDzEOtd8lw2i32sOC/",
	"UBZgMm09tlvvYYDmiEHvxCcs8D0PBT9h4ppHzmvzgb+/ONHH8v540L3oXh+fj0/6l9eD/vl5dzD+qXd5",
	"mhmbvdxl/7JbWKB3ddErLPDz1aBfWODq9EafE9u4DVN0ElLmz098MsHTAaJ+GDgCGdB1MZ8c6F0F/gIF",
	"DCPaejeBHkXt1kL7iSONV85PqmwUOD5hiLBWuzWHX88RmbJZ693hm1c//pAQrJow0JdqMtvDTv/qute/",
	"PD7fBaoz/Xuqw6PXb9qtOSYxAe3WAjKGAt7O//7x3//7Ce79drz3z73xwd7bzv67v/7tv/7+//yhPQoP",
	"Dl454r/Rn3Z2Ry3w+c9/bCWEp/vLUU/gHFknZhH4d9hFLrh9ANCd4wzFPxykSOT0feb/dbD3du/zt4P2",
	"q8NHnRLRlYGEQC1qzwD76BvALiIMTzAKMrOWniZHgEUu1t6ng723cG/y+duPgo4AQbdPvIfWOxaEKKEr",
	"6mOMjfhjeI4og/OFgNIfAzRpvWv9YT85vfbV0bV/nZR8FOP6V4gD5PI9qsauUKRtBCO6Yyr82/9DDuNU",
	"nCIPMZQpvfAJLd8L6RmNqoE5ohROEZj4Aci33tEWrqBvK6UffcqWptBGIG80T1iqKytBPUIZJA5a/7RF",
	"Lecpy/Vppe7cd6B37Dh+SNj6KdRbz1Np7NtKaX94s3AhQ1e+h52H9dPaX6AAMkymwwfK0DxProWAUoIH",
	"IXlGavXe7aSmW3sOci0UWEm+kldEsH5ao5bzROb6tFI3QFPsb2DZZbt5yjL9FdC1QJAhd+jMkBt6aBMU",
	"pnsw0WqhwUr1EJOphzZHc7r9PMWW/gvoZRuhkhlpYxUoukYeZ3uDh3N/Ss8CP1ysn758H3lqC+ioRvtV",
	"4E/wJjBg6qWE/iwt5SO4QCzAzsYXQO+mYAxGaioPYvMrke6ofCCV1+MXP/ji+dC9QPPbTdwg6fbzhFv6",
	"L6V3c5TaaSyi7gwxzgMPw/kcBsuyZKp2pFiZ+ZRRoWsJKacqLVCjIPADi5LCZ9ADJORTyhuTDS0CRLkA",
	"R6YAEtDl1TsFIplsPx4qJgxNUSCExZAQLpjV6BsTMJC1pO6oqOOoeVPXovUaHRf1I9sy9RIS6Hm+w2/m",
	"OoO8x2zmhwxAQHHxEPUO8gQ8JgUtsDIAUEpgU0wZCmrC7kLtBeaDQLUAIIgEvTTqYMj8Prn1YWCYmg8e",
	"nPJWKJ4S6PF/8eJzyLADPe8B+LJiDG59q/GSY1UgGd+t73sIEj5AROCth35eBH6VjmVpcHc16AOfGHuU",
	"RcZ3vEVTh2a1zLVqCfDPnYwi5KBEX5TRC9m0MRQFGHqXAl4FFMhiCoZiqZK+dz4d7/1T6oE+f3vdPjp4",
	"3P273rWsO5Z1TTSEFAXnd/Mh/s0wCec/XwCKf0N8X5+915rltcbe3XzMv5r3VojdgjHd3PROM7P66k1u",
	"VqVS6Xjvw+dvPz7u6X/+UOfPw6OUckyQlpsKbTem9ph1D1ZUj6Yn4FjsNxDpwQwbb86GX8L8zDn+nJ+q",
	"k8CfAxfdYYcvCgt8ukBOXsH59o39UIJzNqZfQhMYoFSfh7R+/x0wRAz4xHsAtw9iH55egMFFZo0PD45+",
	"KKFM9l9EXI+42IFM3opFSsJUcT4MvZVYg5gf6831CYhVkeB+hghISAP3kAIPUgacGSRT5MqR3z7wAUPi",
	"gj4ft5iJoqshaXAcd2XcSLfYpwPkIUjRqdFQ877XHwJVApyWXLq8tXEgC49di6WEF/oZEdfEd4je5MfS",
	"fu5kG9YeAmpU5KsuxNcKfchWTJ3MnZ5hdd9fnIDeFYCuGyBK24CGzgxACkatw7dHnYPOQedw1Crsd+6M",
	"8cLSY2RSKsKlzSLz2G45i/A4cGaYIYeFgWG19a8RA3lydQPmvou8NkCdaQd8/fHN+M0PRUNwFuEY6v0Y",
	"BuMswhO4gLfYw9HhlGFjRVHgYco4JdDzBCWOVgnsLHxK8a33AP572L/cLaNJr2ujyQ9MxFzGTJqggRcq",
	"7Uy0ZNpzziK84PNpsNZEUx3NfcQ+FXUkKliGM/SdL4gVDmgxe6CcsxIjo7J8WZeqmG101zNe2dDrteB4",
	"k76ZLAhouFj4AZP2KYW5MhpUXSsN/kKYjfNEcKiACUaeCyjzBcgimDNVqQ0CNEEBZwE/nh7vfxxcANd3",
	"qJDzeFnRhNxvpWRGdJgWKAwCRJhuJS/a2HG5pOqVf4+CSpW1kkn1SjWF6BBVdBHFAXKXIVlVXZZkVb0+",
	"yZwjPFuYuI730PmyJ1YaEUdILpAx6MyQK9nIs6ubmJcSewIzNKdVOp8uwpiFe7QDhPcyni50jgQGAXyI",
	"yL7EzhJkX/ZOliSbYKcy2YTTZibbxuUx9JWF0IvVJmwGmTKj3yIqdlYQEs6wKH0FPyPEERgxQYMLGvM+",
	"lRk/Qa6d80soXon1S5qpx/tp1NmZP33cFYZZwvRJUv0ATtES8KKy5pIQU7Urw4xGdJqhdkNvlxjCzfD9",
	"kuSH9LYy6SGnzUy2WSvwUX0pW2WbxI/JDAWYIfcCMehCBs0i8lx9BXH56NrljfO7Tyn5lL9IzIN9QQ/v",
	"7qAXIrCAOKC8JHFRIIsJTRT2iZBSPH8qeArKglCwgNVnOaK9x9C8aIpj4sfReAxzjZXdvqxTzb4fr+0c",
	"zf3g4f0DM22S/zeEhGEmtKyyINgZHF/sAizVRFRYXflft7yBohWV1ceinGlV59bF1HySUusKKfUdDPn6",
	"3WM2W2Jpl16tOfzak/UODw70MVqXqL6C7PWaFGTEt3km8i/WWcxSc3i0Tm8vG0oEsYZBKGUnJtMVbt2k",
	"kbVevEmzBddvdgArXcLZxupdxTl6V7uQc82VXMsLzu+e+PM5JK70ianEIadrRO30CR97pWFHwBajFZWR",
	"CyKdm9Q8VVA5iYpjn4hB2se3dt5QUmwhtjJUJfV2lGq0rwRQrZ162NQJLFQSVl6qapgMfDd02KXxkJau",
	"ReBKlgGXJayLamtsO4+Vk2rpvGpeQxojNsWUBWKeX95BqFNXALL8IFbCWr65epAzUL3agWhosAR+RR7F",
	"0fKD3mkbTBFBgbirfQJOAqQU1foKvUpdzPzAW5NfcbGhbXghNM7KqpGzttn6LDWtUVyuB1G+TPEu4XV6",
	"FsMZ/8bXPUDJhYApUAbm4sn847//l1fPzmc8FsyMc9du3XMOPhn+0k7atSyNhTb1JU2PGVY8tkJq7u5/",
	"VT9QEBL8rxAJQQnP5yGDtx56cebKnNP756wJ0+7jnujfDGp9yBDVnVP0FzAf+0Pzcx7tw2n3vHud/bF/",
	"+b5/PDjN/nxzeT24GeZKD7pnveF1d5B+3pNQbdhuWa1ePcOs2GBIGjLuIPaEW0GsY3Rg4Bp8c5xC+whv",
	"coKgEK7ldGIqWpMnTRs4nC8EFC1gEO3gWKTLwT9/FVlU2kYTSizMFT6hERsjnEOyx1sXU5DQqz+nKdqg",
	"Ja9gZGNmdoV3xpEMIOWCcGxw6A+LO+Qt2pkWB9tOVG1wVyc97SQoZJIcbLlmFPtU2pewB1Xgw9b3RKbd",
	"urPYczOk3ZVadm1G3Yz/hL4TLeePrste12bl10AwgUppmN6tt3OnF33OT8QvM8RmKJC7FFMAwe3cSdoD",
	"fgCIz0rtwnEHJlejIuzzMalFEFtgpz+MH4W1gYe/IIDY7KANEFkcUv6/zOnsrrAv8EKZwG1nVzyW76lm",
	"MBcKqcrap97VsaxWRSerU5Q/uTxMvlSyLV0idu8HX+K1Po8rCvWXwykqGTG4OD6JBlyoGYTOmBczagWZ",
	"wY3nAn7F83AOWAAJnWNKsU84t8Gi+zYmobBbFpplQX7UxY/3cp2nzzggSVUmU0wBkfNWjQR5CmoPBfPs",
	"b4D9u65wvjMcv73McMEMUjAc9Po/K58+t5D35m2PVUHjVhMlfp7QS862GDWIsY375w8UKHOr9yD3HF8W",
	"KamkiGwDPAHDwR6nEmtG8XJS7yaUSwrGVYtIvbY7vc4VbNJEpydQUUNXI9LuLbv040z9WtDPfMu1kLU/",
	"retqiKxiOoNkZukczGxWBfkqXjakTusTVQPscIlkt5JFIerFblMouyoyRJTcHNSFbUDdW3VrLH9pzM1u",
	"MQaKSpkcq1eMFKwrdaLktJoy+1PxVcM0scvzVu3W/b3NndY8I9VYWdFqGSeX3Y+WbavbXZfesmbbb8ZD",
	"1nh980qnahPIQxJSiqekigCRvsF130ujT0pItXNYTbvjE4KcyBJVyCWGFo8oD1KT3y3/GbhogtVQbobv",
	"93ofCg8X0VLNM4XfJf3hXhyGQDtQVuEx3SubTPQRfYUucvA8eWER2z45W9I7jVgivrSKHCUYFVGE3XGB",
	"+IRdm2PrUvSUb2nsFrjB2k66oX6eJSh7ypMtcwjou9twAMRsvoxZcIHYzBfnVaQ26l2Nj09PB93hcHzS",
	"v/zQOxtfdK8/9rNxU6zFhtfH172TohKn/7g8vuid6OoiM1WGKcpLKfWCnihJweAu2jsdJDCS3hcKRYlE",
	"VXY0IfNudjJTXUkMS83Ecur72wfQI3eIMD94SHT5Ge3z65RyVAp261Lmx8ajSiNWtqa44iliEBv23A1F",
	"wd4kwIi43kNkW2J+xEkBV9SjAN76IZPWzmh+qFJJWvemNKTIFjayRfMALtqkifnNsD35TrsZ2vel+n48",
	"HPbOLi+6l9fj7mDQHxQUsrQgt+/N4Pi6178saCQqZ2lm0D3vHg8tH2WrpiNhaLXxRZ5G9uBQUQnwBRNX",
	"V473LofXx5cnXVNIqPQ3EbkpRZjeawFVS/JY2eqaVRUSIJ2wmHSl6Q/l357XBuqNJt/mCAv1GBxJh0jg",
	"B2D2sEDBHabyBszIUVKg7pciOh8GI9YT1fGBjgaoOVAnMXTMyxh5VsmSQJ6nRqcirIWdqaT2MoYaKlLa",
	"i/LjbOSrWPelD6Z3upHhLBfoqdxcuGS7ponpnWanxtShckNfCXl1XNlzyENfMeXNntzZNAgnP3epdG6A",
	"AUrpngSfEOmdopbbABHH51w5pADKtw2RFjb1LPXg4GAJ37Y//387u6PWaDQaAf5fZDT6Nho9jkafRqPP",
	"xS5v0UjHzh2yem5XcdrV557XsWGcf/ue5oXcUpjXczPQXXl10BXAPOrMRPkpZwCFkb4NrjXCTCPpgGMP",
	"Q2EvjHmz0+IR8Oaq8lYamUb35ATKS/rnKDDHY4ziGqzknRM1VuCZkybdxuRdmwYwxXeIKv4OuZpbEUuv",
	"FfUn7F5s2BjExlGUbMC//1feubTEtTQz/gJOMj0NKzknpZuq55iUIXg1p6Ts6Isdkr5UeICZYrYe2y1P",
	"C8tmO3ryZ44/Eb43HoCyJrjHngduUZ3DKHMlivZUc7ZDSZQZw5jaKqeT3m7Z5GRi1MXnst0NXNsjGe+B",
	"DfqG+6vc7z6ttcz9YSLsiSNjHlLGV1oxyrqpSC2zOOjlG0ZMQUiRy4VJN8B30nvLhQ8HwJcU+oS2075G",
	"wBdHJ5KC5gQHlIktlj1v0ujxqQ0zYrxVgOJTGUPvOLKdmG4zXRDuD4GsQTV7S2xSjOM1gt4EoPmCPbT5",
	"iAIkGB/igzBbN3eiVuFpTEeqztEUn64+HUsyxjEVZsDpwRAlfvSd/CqzFrLNhShtX5eo60XUapVVim2U",
	"qz0q0JvRrr1k0Va5s/XGi9y2c0NZzXs711xNJ+481atdXoYGn82jtg6jWKKEU57+V9D5Yn6jyI+/hfqq",
	"nQwZyQZAFj0aSD99KhR0Xh88uaSjiBxHQzJr850wwOzhg/T5K4VvpvgKRkgWhJQh95gx/uOKHvaqsTFM",
	"Wlv74WDoo+CMsA1vpZPC1mi988I+kNWODXu7JadHqN1RpQxSKrxvUnsF8MgG1o4XdUnaIaITbhP+dDE8",
	"YtUDNPfvkAswAd2LD+DuVeeoc9Dm/BrQwgkLtg5BtwMMoSkiw4A22PQ05IcO3iMG24CGQjfPGUOJERPz",
	"c1BxVgqEQn1yVtozekP19kmK1NW2RnrUxbvhPhV20nJNRYXAXJYqlt/Abe7pOv8eBY8EF/lGRBGNG66q",
	"RU4HzSzSH0dDGKsh5FTIj3lLQ6GpKKXTLDaCyPcCRjOI6Z1A5uPg5vKyd3mW/5A8Isg1F70YMJhPrK8D",
	"euQOepgjZ6Vw+YawoumW9ciDlj6N8x2V3ETs/KR1YAqgX9C5gdRz3Q23JGWM0aM0Qsll9/qX/uCnce/y",
	"ujv4cHzSHZ/3Ln8yYqa46FVZidP+L5c6WJIhGIByjinTzTd0nSvBJyXXAZgLc7zJhqaVMniJyPcRkLhg",
	"gj0mHgWnjUDSbEJXNlsZrTHGyBmQXqKvBm+fHpn4wRzgiSb+z/0AARHQmMhIVZHWHdIx4a2Y/HqFf2o3",
	"qmTIphISMQFivFGsB0QYDqSFjIsZUxi4HqLiyl7AKSYwetPCiYRM3iGvjlqZILJjndh8MFf9PVZ66bJk",
	"JxOVQqUNeMZdSEXE2I2gUzRsReXm11iE2a2H9zgKcOU4MSZ8y47zsN4S0MXkVwNbGj8WkEVXwkaAFjf+",
	"jGCLGLuagIurVX8KY4hgkzVxbDH4UkOoBsA8tiwg1E0SGwFiqoNnBKNuiKoJSN3EUx2UNmOP0di0xehM",
	"T2xlhJqBV4BSYczZFEJF41Z0Et+te4gFIodODbSYRtmJfrn03RR2JEF5yPghW4TMjhntpf7x3IifALEw",
	"IGoghTiRfRUBpRTCqbyCLwPNcmYNWE3DrypO0ytYN6A5JyaaijjEHAuQIbi53YQsGhHGY5AzHpdZghcw",
	"QITZ3nhrephAt54oEVVWTj5F7/SjKRGUdUYE9OQIHUhFIag2TxtgBhw/9Fxwi6SJE/hB/LnnGutSzFB5",
	"TW3skkybMabAYpSZAjHPgdWxG+cdu3UqtI5ManrxwzInSHTzSH+MDNhTncZr3U7BQd8KOpYr74AUBZpj",
	"9KA77N8MzB696W+D7lmvf5n7edi77urkpTqyqB82l/cvuk3SPTwjw5MyquO691fsfACi+pWvsrztw2KT",
	"x9vMlOemtzLnUz31o156zYkfs3AdhOQFYHUQkpo49WlkEQpCUh+jg5CYAcpb235wDtQo6gGzJMunKJp2",
	"ANsIX57tw4pPizdabSTVgI/d/y2a0LjIWIbDHcfvbhvlrh241qWsDmIbMi1IjgIqbgTCcePPeLZGkSVr",
	"boe4WuVNYQpNmfLVck3m062BZmoI1bCYx5YFhDLj7kYgqJp+RgAqVchm9SdxzuIc9KLutxZ42gCqwS6L",
	"Jivo0qmTNwS/TCfPCsQMLXUhKauPaVS/BjpzWaoNOM02v82Qzc50DfDaUGmB8Ubhm2u8ge8q8KWp3Oc1",
	"ByArL0F+LuN6jvhs09u787Iz3F5lL1bfg+leN7IT01084z5sQPz0IK4KWAsOrbBlmwIre2aIsvrAZLXQ",
	"yCwYZNsNPFYPbqwcZNeiexY8nPtTehb44WIjkDN084wAZHlq6sExbmDs+VM6noomKsMzPxkmsBr72F7w",
	"mua8MpSLUFoF2FeBP8EbuvqNHb0UcEf0rATvhWpkOYArEipAPOrndwLyK204S8A8h9kyoF8gFmDnKQ7x",
	"VE8vAeopgpbF+lw2svRprhNRjPZ0T78DuKfnvz7ezdCtCPgnOdwzfb0g0K96xEdgXP6UTxNSDfq/o7M+",
	"uw5Lw7/qiZ9+HrgR3Ge6eE64v1A0VHhjWrT/sg83O8u/Da3zFlQHcJb+yri14a8ErhsFagPRIoguCc76",
	"qDQd/gkRFQG5BBSLQWh661Av0HNZoLBspL90fLDIuaZq3D93+WBhtofiZcHDSryJY8/hVOqX9ZJYFv6Z",
	"zn5CDwYgDz+Cq/DWww74CYms393LNG0/ZmLG7FA620Pu0evXh2//jRyXwj06g0d7BFO2eH10uAt2Ph3v",
	"/RPu/Xaw9/bP+3/7/Odd8Pedzp92/55KnUhn4y/oYZ05JUKKArOr/I36Euf3EDnC3TkmmeSER6mRfoJ7",
	"v33+JAey9/nbQfvVYTrFYNRhWZpBraBah4zndW5/GfZhKiN53dcGSWp8huaGdOnpNOn5a+CLCTup3Oxf",
	"UDY2yavDN6ZgQ53Pf97X/qnmN57ncefzn6LfDMXUT9H/Wmtqy2SBmRhuyaBEmcyw3rwyjUqjTaOpM94z",
	"0yQ7L8ONpFyW1RCTQoIBKfZMXvWO7aXjKlV60RBnF9MuOzvlhmFmfNHrja0woaMIap/kAspEZ8wkdEyH",
	"El4ljmnFVJAqeqI9iNiHACHBnDH0lbVBf7jnogUi/O7pgOPEC1A2IB4M0TbwCQILFAAPEwR2CLoX/4jT",
	"bO52wEVIGSA+A45PGMQE3KFAZGLDRLJZfEZGBBwvFh5GMiQNYD64UNEZ+0NE1x2TDIxG5Nvjp8/pGVRT",
	"VBh37AsKCPJUknnzOaAFsPyeAlkBqBrgnE9PXxSn9Ue9xJD5gDNIkSSNHTUIwyjtF6Id4BsMP1qJS8q9",
	"r5KRhIxvrCrHjlySb2IwmKLV4vFHTdjemRljp8pKHIFF4XGTlzxy0MsGOpW9jX268WzWNeKsWaKs2fz/",
	"9WD+euTZKKiYSow1ImA4i54PYgK+P+2+//HoCMh2wQdxkH0vpORTdIshAZQ9iG1caZfriQF68t+Hyx1w",
	"YrtrcVjzSeXSPWQDfVkeJJRkwM5cqgXX7iAkdfP9iLlzl42yV3hlf3yiO3rJ9M2IuHwjlAV9Sz3O4zd2",
	"YfpJRFwRyM2ovIgCSywTX8N8aXwsvSV+2MjUPuddEoRkffmXAlYbA6JWSRJSXsSOA2qJSjmc+QGzxaS8",
	"53/O4GKBCHKBG4qIjakLp1YcSnsASj25FC0Lmr0EVcWRIFMhIAvoWyn6I60X9zG7/CxMkrp3yrNlFQd2",
	"XDljln74m+4GcuvDwF1HrEDx4J83BAZoiikTiQX/FaJ0rEBThya6LNxZTTUK0RkLQ4rNwJlhhpwojHGZ",
	"QHFydQP0Ormbaj1CQoosY37L1L2a2T+FNFhI+PbI/3n05rs//vq/o9GfR6O9ehLu2lIBxesO5MJvb0og",
	"fUpuAkOY3p3excXN9fH78+4uuBmcR4E6JthDkbzO50ET1bWcfFHrcl4tk5cyp4QB3uPHR16uNQ5pHAbG",
	"GLsT/BW5VZZ5Bu8QuEWIAFFF3uSY8h0VR3dX6ogXu8iCcusKx1Ox/uVdahprLncyONta4zmcGpm1Y4sI",
	"LA9MUU1S70Aio0+zAKM75IJJ4M9laCOVcU9mLF6LqmU0yhxaghALdye+GReOw5gvGL/DKZZMZ3psm6bY",
	"thxREha7IvFcj9on8rVECrWKe2xp9V4s/Cbib1q1h9xC5V5ucKWbKlqnZHHmkOAJopzvxM4s2mU0mo0k",
	"T4PiHzvgmm+lSF8TJa+Z8L/jWNgpymVI9BGJbfLQvZOB0KkKe8R8AD3Pv+fEhNADDhdWVDrc/jD2pxLB",
	"wmm4kGyi3Ba30PmCZKLN4m18pG/jPJE2/JToT2uEjRcn0AxSeTDJIswHBN0nWpy0OkDmCaqunn029Wtk",
	"ScrPT38B+ZFniIwfW58MsdB1/hN0vy5k8nTmCwWhbExyvVJHKAkBX9ADFb4KwpRE2yJgFlHBs2SZalN0",
	"sPe23RmN9sbv9vUr8Fvq+otmJx57ZbV0flENSobDox/LdNE7u1WTYUWv+Eu1UXHJKPmZHycNruLRkB7V",
	"Um4MpcrcgkRNSU5E8zRcV7DY9WWpx3Zr4UHGj5T3IXFNqa7s0I7j/4sc0SrlqjpyVMoU0c4O3RU3/kie",
	"asqRRRyRt1AkmZD4ToQ30B/ueegOeSCydTkY0X0ZcztU6cI6YETSKbWAiyYw9JiWvlfSoZ/ihYmK1FyM",
	"b+VkmHM18VP60gh5/quQdYVsqYpKboelcQNukeeTKZ+5DrgRCPIeEgzxa3gC59h7yCjAae39U5m/UOSO",
	"rSEG5fefJUOZH7z6oAiuOvjitFGCIMXCmrWGC9/IDCRbtpOwnTeD847OFvgBnmIOtzRoY4XAJm4ZTrHt",
	"El4uEb1F/7mOw6ZMC7pysic6g0ev3xj0mR+Pj16/Ac4MOV9oONf4uMT7ioAZ+gpd5OA59BInGGgwE7z5",
	"od2aY6L/mfYMmhzsvU2vk6JsnR5NxRavJ2CxNmtQK7CX1U5maLGgKRZlw1Y0tfSfDSHCMhpHk3IyzVvk",
	"r9PUd01LP2r59wQFo1YC9rY8PQUaZNZMebDGyfT0VCL94fhq0P+5d9odmAJ15j73Lj8Mjk0fzruX/Z/7",
	"qeGnx2SY937MdGRHy3/X82PxP/1JlPWTTAGN1VHaSK7/cdXND0D8qmQ87ZdY7kvTLCgy0Hrl36NACRaJ",
	"9dKQuU/GBeVQn0HiepzYBa8LlIiQyvdz1f+lOxif9C8uji9Px1f9897JPzIjMBbpXVx0T3vH111bgf7g",
	"tDtIJ/oxjMA2zoIsNTOfMjUgkbAmPxpTGhr9iwj1mvrhw4fML8Pzbvcq89vH3vvu4FIfskqD1B12rzO/",
	"qSn5x0l6dbWxmUZeuAPFvtPipqXGXbCD0t/eHw+6F93r4/MUWSXbJBd4ra7nZ0Rzkd1igU8CJBhJ6NmS",
	"Umab+Z4mWXOSyp1qR3oZbzQa2WzF3x6V4FnvOIcLPNbINLybggvcJe7Cx4RVn4Hjqx5AqtYS7F8FX0BO",
	"eNSDabxSwLHKYDHRKUHIoAlf03JEGY8kVbUEf9P8LuNjUNETLequivRuIm05Gf4vKeKjdqsy1xrNBSP6",
	"qUIq96w2I6r7MyJuuZn7Kl16aTmkwBdjfZNW5uC3rEncFD9SneIKc/qRYjjyi3jCq9x6ZCVn/nscjb/o",
	"Xvq5e3naH9huJvVVcnDj8/85OS742j85Ng1EEWmY3Ezkxrp3l4yOWHBzYTJDAWbIvbDqWa9F4gviiida",
	"sWo1NhxJClU+gx26OyIpU1PcQQTXgUpfkHtBEV2G6ZcUQjwSZgGpCOPNEp/F9gFM1Puxym/FUs7/Bbkt",
	"Y8rHeT1sfOnZ1dNa+o7Ui4isTjqekRGpPifLjtVyuRcM0H7dhKUu0Emo0s34Qhcn4FAZNhQ+c7dNhFOZ",
	"10WUwZnsqW1pFhJ2eERYHSTqp+/r7GhldzZXYnvKDWNKflFaDrJ+GFiV8qPCDW6bxkqXdnoGzMO33z6K",
	"xKdwYFwf0Ru4MtWr1KE5fBlfJPEdkHB+Kx0ARMSuJHnR1Pak15oNXDzxzYQt0wMSJNlFUsgy3MfWKJn1",
	"rzTZ0F4Uyq/gdnMCn5zChwuf8BXNzhj/qlRpLhRK/zkvCHYO914d7so0OfISU0lyiPegskqr/Q7BB7Hj",
	"066vO5/+9PnfO58O996K/zn6zEHzefffrz4dHH7e3dlpW7/t/ml3NyUFBD4Zu/BhLAgzSi9yhL8g9KXK",
	"AO8R+gJ2DvberD68g703ajDiX1bSeZc2yj/6oSlwgUb3jJfgFB+9WgfJbz//+1D+z9Gng71X8QByvxuH",
	"I4ixjeUCk9C4MbXRzGUZPp7Xb2uNp2MfEEfTa4UjbTypn43DUdRYB1S6a+Ltcni0pu1y+Ong8EjfI+oH",
	"M/22TeEqKX2IHJ+4lrMyKsQJo7JgJA1ERwyIjpi2eNcX/WU8QufwK55zweHHNz8IXQ0m8u9DzWlTdTlW",
	"/Rk9jO0MV9S/Waxf3wOz9EFdhTnITdiaIg1E7fJmq1+9mVDL9VmHVeXttYyi2AqoxjaM3yYUGgHTpeMX",
	"dR99ymqnLI5r2vhu9fBO8dS902hXxdtnRAAfsngvqwqrgyOOLpDabjm2W+e6IbVw3blH5jOfspLne7xI",
	"5Qd8osqyjLde+4VPZE3xRU2lLFRvMjlnWzu2blyzZBo5F/uC0MjJKZlCXmSzz0mzRtj0OZG/SNOcjs7D",
	"tdO8ts5BpJnUVEpCi0hgEB+GuQPPpKTS3RFUwsvkQpLve3QN3/DkY/f05rwr7F43w4yGL/v14rh3ed29",
	"PL486Rq+9ofjm6vT43TSxWF2QnMH+TDvzpHxykgX0M26HMXqK3DgAt5iDzPxtFamCU2konjA3ZObQe/6",
	"H+MP3ePrm0HWzpj7fNm/7Jp+Fz90x+/7/evx8eXp+MPN+fn4tDf8ady9PBn8Qyi+UvOQGaVxIu4QL3KO",
	"7pDBt+jcnwLpnSb2WeTuGwfBU+aZzO6ch5RJPvRWOKphwhnRCfiCiQvQv0LoCTe66+5596J7PfjH+KR/",
	"+aF3pmzy/bNhevJ+7opZOO/+3D3PTV3q48mgd907OT7Pf+kOBv1B/udfjgeX+V97lx/6+V9Pu+9vztLT",
	"q8+daXLN4fHrit4y8jyoIHgj4hYy34i44sWexnzHmXEzvcglRdLzlpdJ2pbrywUOvpR8Jf0A3OLpFHF0",
	"QKn2iOuJZ56qZkfn2H84evvD2zd/OXr72sy2I+K+cI59g6ajtyka5dq8IEY2nQyhiqxiA/HSFslVZyiT",
	"mcIsrujgtWCNl6i8qergX76PLtoBTyBOCM+ZRphohIlGmNhSYSJ1hOnci5k5MQkB+nLVZ14YagzhjSF8",
	"/YZwjqzv6RPGAFtUfHNlyjkbrGYpdm3bgn81sVC6mV1swayRvVNwAq7LpF7v/tioVflVhltka+Ok+a1V",
	"if9laElOd3naFXEWss+hxWN0inzPl4FggAcZZqGLEo6WifvzyseEURHFQj81II1r7Hk+mcq64tCIDOLd",
	"v2RURiMCdlw0DRCS7c1Dj2ERcYsv8OHBn/70F/EINPBD4ibHFkEwQJQBxRDvcqrUsGIJNbLBQzIVI/jz",
	"/h54ewBUb8UWpbcH6j8ae76n/ahP8tiDzBzFiBNEphXmOZ6s7ZloMi2c6MMf45kGO5g4XkjxHdotnvXD",
	"H03Trv+anncy3UzAoBTTY2KKshGTbNIhC/mCqDhMKcWW1GD2Lk97J8f8qs7qtnLfYyVW7kvvcnw16J8N",
	"usOh+ftp+lFBjnrDERHnqTjxPQ85zLc8MuDjdKIiQsenj1JX8p2fd0+u+8YXB9ZiH/vD66LvJ+c3w+vu",
	"QB+chfCiIeZTstXjc+0NGbxjstNZKdtKeiyP7dbUkvUoiZPr+VMgS4lHy7KBTvW3a1UiKGXe11Z81WDN",
	"gFQ5gF+sio4HaWD6tHeQh5vX+cmnzZp4mmjJTQQepa/1uLAouy6HtxwseyURL0oHkWdYxtjdxNBMiRA3",
	"6QqvltzJnBkKqqbjJX9oGO6JwqR4dYXpZDE47KN353wrQDDDKICBM3tQgTTyB4/nT2MzT/HjZd2u8djm",
	"FeVAV0tx6RWB0B5QOAVC23avBbkkO0YJsNQMl20aTrtpx6jqWVJfm0lVpWu8qREhA8yUFx1Uz0JupXDV",
	"PS32axHNUYzYRMbNjUIJvHhKpLg7IuAEktgq6ROURKuOum2DRBMpYs3oGt5SbSAnqkQbGMe2tc5Aoosu",
	"Gr9SJ9+LBEbPM/xVNMr24Ufa46LBC0n6OYe+rB54Y1dXfLCnz1jbnZW9hYpuLWN2yyV5Y1NbDXvcsMfP",
	"zx7ryNxGDjmVWfZlMcnGA6TCibM+VllOTm1uea4RvnIy4HkJwCpyv2ooa2OAq+BGlRGpje6gwUdMjllo",
	"B3kBsJP4QewaPMYiLrOay5io+7BApW5j/JfeydCsXDR4V0RDj8g2ahEb/r/h/xv+v+H/Xzj/nz2ic/dN",
	"wcVcRRhI0Vgjb44I+ovc41L3tKnvTz3UWQQ+82/DSSdJOhEHk1utFc2wo43GMNZsZr6MVziDDMXv1Wa+",
	"jBsdmTqkI7o5IFb62/nxdVeYNdI/Xx8PzrrX+mqZcxol8IkS4ZotM4PI+keTe1TL86vT/kt/8NN5//jU",
	"ZJtJfzMYXFJUFFCpklfXY+UEqufIxVBzJOJ8QGzbFF73KqLlLWL3CBEA41EKiyYEHC+h3sIO7qBOO75K",
	"dk2+SctnIorq1mb2oorFh07RXRO1UNXv4ksFOTu9gpGMPY/Xs+70bPQZYHqqIhxIYp85kkBEzDKJtaO6",
	"NkjFgM97mRTGJYrq2fAUJ5iviKd0gvkqvHMB5VUer65jvTNZ9I3Lnk1yK087bVlS295wPqrzz3DtGPZX",
	"1dOc6RMoqTce7Bfdi/fmaH/GIuqYH1/2T7v2sZSd+EuL72LfYwfcQ5GtUAiouTNciIP+rUjpClPXWuZZ",
	"zFcODuiVC0NRybiLdpwOwcPki7x2os79kFHsIsWRQ0/E7u26UwR6ZBJAyoJQ5C4CF5DAaW4b1g0IF9Fm",
	"OZLqHOPpA5zakkmLj1mMVfb9zKC+wNM1ImMdCk+dzG3IA1v/XF4+j5/xCWdmMpXHkmHR1x8j0p5eb9X7",
	"dfO3zoqLVXSpWi6aaJcYDuMi6c3xCUEO66Ag8At4b0leesa6vIq8aALEwoBINJ/IFt+BGWML+m5/X3UR",
	"LJyO48/3Xd/hwti+6JHu/4EX20t7IhqsPi4qdKHjBdoqow2Nw3ZDAvhFl7w2/KSEQE7Lie+iz7kf9MvR",
	"4Xe1h/jshuQL8e+JuMPvoIfdMQym4RyJ6KUugq6HCRqjrw5CrqhAfDae+KFYGujxdX4Yi5BlHNALFMwx",
	"pdgnYxcRLCrE+xN9ncGQMvHjBGKRsyYQClOs5gbeinw4rXbLD9nYn4yFX6WgEs9VVgkk+Q15J4hP8A5i",
	"j29iTjFkcOz5lMovIZtxcAv0cwChr5C3Q4VOPx7IZ2OSPQaxV1f0PibqdYLI0mmywrnoDnkcAXsT6GAy",
	"BQItUV7P/EpjArpk6mE664Bj8iDD4JmqanU834Ee/g1JGVCIispPVUeF9IXsqGRInws+SV210A8lTavj",
	"3fEwkrF085s52q5q4wCxr0x71TSNtXbsSZTrCRIAg1vMAhg8AIoCrKiNJgl6PpmqXCTgv8QWz6RSzfKY",
	"+UbyjJaLbsNpGcW5UTMVTz2HPbGr+ZdYo3+LCQwezJNcNpkFmUyPQfwxUStQAIGIgSpAIx94RjlamEx9",
	"8iB//03oFBUoRgQ40EPEhUEm2Zjjh7JiFPeIo3ISQEfkeEl9YCMCCCS+/EHcQl4oIiAD6W7LW8JU6T3u",
	"ZL4tAtDCd2YAMnBzfQLm2CV4OmNAOH7/NyQhx8JhGxy+/ctBO9oJi8D30IJhB5wFaOoHGCb0q03IGU9O",
	"FZuhETEVu4XOl3sYuIIff0AwAD5BnRHv9tjz4vBbMEDgzUE8SI7ADjhHcJGMO0Bg1KJzBAPkjlqA+hKV",
	"xAcegotRZFgCMnc5poCI41hwf+IsXARI3jCccednAwSfjn7Ym/lhwDl4BAPeCO/g8050fcVHEe0ozPBb",
	"jK/svii5K4dyHfu3Yyqfnx0cHBzuif+7Pjh4J/7vn3wK3r59+3bv8Gjv1eH10at3r9++e/228zb6zz87",
	"4P2DeGvFweuIxABMjVM03wb3CCBCw0DtyXskXp05PrlDAZNLrXKlfRp8OBkR8OrVq7fJeO7v7zsYsUnH",
	"D6b7wcTh/89LdNhXtgtUfl6+b6gc2B9AV10H4k/1Bzh8B06UwJXsDtHrVX/Y+x/wK5+hnd1fZSP8P0mx",
	"mH/7q/oU/9ChKH7UvCNauLw5P9/dNRcUe2DngH/VKDsqo2yKGG/Hn7jwIUWhlMlEJ3fQA+wu6jZVQyaB",
	"ZXdtIGj76woDvOuwO/5X4fhkqZAiB/wJHB4cZMf7yjreXzB5dQR+PUNMpuvgn4/pB+yh6+zifOidd697",
	"F10wYREttmpy/BMWE33Tu7x+8wNg2PlCwd/Azs6O/GV3wjru/Uc8nZ1CJuruAo3ld8Cro13wbyBKnfv3",
	"UaFkQvf3wTEfhOvfU9E831uHBwfa4Uc7cQF5vB2+ye+6pDle//DNDz/88JdXbw6Sw+YWTfwAgRuCv0bN",
	"vP3LQbaZzrLrvCOnA+zsyDnaB4fqvcou2NMJKoM6b4hPWtTQd1pDAhu7GWz8YMXGf8M7CH5VKXBVpmFe",
	"5AJ7HqYpbAhmYC5+B38D9iqFOwH8Lfm1Q9D9+xB7Lgp2dvnw1APkHdWJnJ9d1Rj/Dy90KacAE8YnQBWV",
	"M6BGLyZit3PLm97JzMTrkpmQemjWIf59avDqd0D8e/A3kCpVMl6N/PKRE/++M0Wsy8Enf9vZ1ScgPQmq",
	"NP9jxzbgN9YBq6WLw1JcPbCZT5IhG9dsZzeHyzPEThIU8ALiuhAJ8i7gYoHJVPzUIyppnuDTZII6bcY4",
	"F4lpmhlSGR4lFzIi4iardY/Jvjg/BDkr1FbtyJ95d6PWN86LPO59ExErH/e+ufDh8fob5wUe332bY/L4",
	"7htFzuOnzjfOhfHN/Pj5n6PWKLKsy/rCnuzdwwcK0FfOG1LkKuZiwtkKF08xo5xX8hBQfbWB6Kw9IkD2",
	"1waiw7a4ukWvgtn5DQX+3gK60Wu7ez9qDkFnJpm9iEMUrGUcYETldoUETH0QLgTbEdUVpi3146GZj9zl",
	"pHEK/IVsW/Y1av2Ts13hZIK/Rq/WIlkAz5FgdHdGrZvrk1Fr96+p30dEMqRSb9EBIoML819JZMTSQxDJ",
	"Z2pKQ4oEt7oD42dyQqgaEUnMroxluggwkaxSHlrSwKf3toABTXq65bQJhpGzTo6DFgzc+mwm+uWVfTZD",
	"QTwQmqOFs9b+ZEIRU6zgBz8ASoRug1Hr6ODwL/wqOXx9fXD47tXBu8PXnYNDPpMS8hSIH+LLaAEpZ/BF",
	"WUGEr/Hnr9uAt9eJNxa8g0Mhq7SF74LOCkLAr9Qoc2qUa1VtAQlRuSv4mebCwOUbjfm9YX8ott/OroEL",
	"7sz937DnQbHtENm7GUqNzi/odj8hZn8QpcTcP/P8W+iN+4IKus9J2tc64cfKHLGZ73b4eORZ1BZHgCQK",
	"/Mp5Uj79negfv0ZjUlEc1IARH4BpmHxcv1IWTERlbVC+QzsLefrx4Rzte/iWy8SCve/M2Nz7g/hXVHdX",
	"yMQjEkM76oYukAO+/+4fe9/N975zr7/7+O67i3ffDTvfTf75fQec4y/oHlMkxCo+SclahRSp5v7bd6HA",
	"7vcUfPq1N+xH/JBMNScGr9i2zzsjItRr7/b3/8934Z4kUuiPJn4wRR2C2D5cYLEyfGS8lJRZJMH7+fbF",
	"aJNORgTspgwosiJDgQxr5wnRX+mxBZRiVas8tuM1SDnd8Q4EuQYpXRjGJ75U+BEGHeHTIZX8rf4CEWk+",
	"uVK5ScEZZh/DW9APppDg3yLNYRh4rXetaImnmM3CWyGy+QtE9pA7RXtRdlOpwUrpNO32GXB81Wu1Wx52",
	"EKFIo+x4AZ0ZAkedg1zv/I6C4rPAl6pL9897J93LYXfvqHMg5r2lqYEKSGi1W1EK0Hetgw7v8bHd4uOC",
	"C9x613rVORRELCCbCY3Lvhgu5o11/MCZcaFSPDSGC0z37472Za7aExGmT9SYIsOr/zPEtGgfKr9tJgdt",
	"SxAi/+q5rXetE63pIQrusIPOMWUnqR5FqgQ4R0zYmT7l0z2pNLgi0RygiJfmp25Ei1C5CcUC34F48sAP",
	"Dj8QgPQDFwUijyNCsTJaifAQLzouuts/fHUktANRrnOhNG29a/0rREKRpJZYNPWe/yBVmoXxVJ6D6DqP",
	"D9oZO4vocnxr1JtZF0RGAJEWTxYGyoEOMzSXmfUZChBlZQN5c1Bl9idRfPI6k78pAmvN9Lv9v6lsYt9n",
	"Jj0eU+mUnwp3Z8llwXmkJBQ2VpUhXaXwj8K5q6hyCzgVbtSnKhW0PwFHB7Yp5oWH+DdUbZLXTlIS38EW",
	"pZ1XHVNJYT7lxbecV5iLvkaq6QkOKJMrH6NBxbeBnuffU0C/YCGtyCFYDwHB41WboZUJ0GdEf/wTE5Gb",
	"hM/ChrTw+QXDaTs6OIhuUiST/8HFwlMRHfb/j0o/4mQsRQac3ME9UD3JWzvjBhk6DqJUXq5ioddGR9pa",
	"aei7qz60WzScz2Hw0HrXMt06DE6FdctwSbU+P7ZbCxU1MWM/EXZ5AI1XYKUbULagf2hJay6i7L3vPqxt",
	"pvQuEjex/IQJe4FhNOLRm3JDeNwgsqrS+dJAZVzIYlQ9tmvyY/vfEv+CR4lGD5k84E/F76vgUraQGU4h",
	"axZl+GcxgGSv6gKQpLrxWcpZ0uQo1fxkdGcGaQG0Ha/Ve8z6vPRMXhSbPC/z07lNB6YRDGUnZoHgILlc",
	"7CwPT6FpXA6b6nBFrrX3TeCzvNdnx+i2nrx5LKx+7M58yqqKv6JsHrUffco0Mfejr1x9GvG2EW8b8bYR",
	"bxvx9mWLt+LA3jaxNrplohtQu4SqiLHRE0XrTSZLihQCmxFT05kHzOKpSDLwROJoGT0vUwxVC2RGQWX+",
	"Zz9AU0yZfLJnRs5AlaiCnajsxtGjiH58fGyQkSAjM/2rYqO2KqIUH7KkIq+yOCcOg+hE2LyeoaC7F6Jk",
	"ULjcMuVCISqrKRNKAXamkt8spSyIWt+sciDq5dmxtG2nW7K2VtYHMseQKPmK/1zleBIFq+BHj7uShB+4",
	"RUBFplgniqr0VR1LT8/OyYAVrnyQReNXmXIxmts7wbeOPivCQ8MhKWe4CsBlyVXv3w2AvGJ3Dc5/BzhP",
	"gXCdPOq+eqcJJZNq3Cu9uEiV/ZKUrrJneBmgPfle4/4wNK0p6Ypy4BVulZyWSbyhjDOkBQhSXzhQA2cm",
	"83hwMXASICSc8YTW16JaIj4rUr0t15H+4PzwqFa8Uhl9Nfv8fNTKvvL3TVG5NsqHpUG2TXx9bnusdTf7",
	"5NaHgXi2b2Hs+rJElZ2siv4+t/Em0alN3DZBM73ea8VlSmVmBmaKIwOygs30nZU/MkqcDFSXR+LagNbo",
	"9J5cKlivYm8ct15o/FaldLZcz91fpoOhQ9VLVYN4Y3/dkP11k9eDWmy11tt0Q+Rhuvy2ioK8VfUnicvn",
	"N1IUG1HzK+nFrTe+JY1vSXO2Nb4ljW/Ji/ctiQ/tbfMv0W+b6EbMXEpV/Ez0qMWFN5ys0Uvi4G9CwshH",
	"HDb7nSRpBJ7G96QKXS/T/0RbMDtKavFO9f0NKmNM1tBIrmz7iAGhI2PzPggVun0hvggagrfMH6ESgqv5",
	"JVQG4pmW0WQpHwW9p836Keg9PTvWtvGcTK914VVa7LdQGV2iQlV8NT4M9eBlse8mi9PwCQbNZdUdUOjX",
	"UHkDyBrNDmh2wAvydNgwp1zb66HybkpqVd5REbe6GfOppfmKWXCekXnJzuN2GvnXBmQRFfnYETGLq6rM",
	"la9IYFCZn2vNaWrz81Qvjeq8UZ03qvNGdd6ozl+86jx1cG+b+jx760Q3peGSqqJG16/KSjefrKl/2JBK",
	"Xe+iTK0uRgFl2adSrVel72Wq1zMLWIyi2jxXfVV7xH5VwqCslRlCZWVnFiyb17YX9/hCFO0ZPG+Zsr0W",
	"nqsp3WtB8gyxZfGYqMR1nGxeAZ/t7dlxuK0nan7t13OciiC4FcXXuLwZrfyPjOgqWy/B6Qcpe8Stg9sH",
	"oBIVGh9lyE8V2MqChteeQzHPVQ+kICXyunvaXJjGRGf+/RAz4a9QYWC2puMMhDP/XuRm17IQ3vq+hyAp",
	"oFSl369Cq8wgX49aQ/MpeoO4zRzFT8GsC5q2kVGPJ1M7D7StWPEsUNuZTMdU5Empeib0h4bToB81JnOu",
	"aIdC5kuj0mpUWo1Kq1FpNSqtLVBpZc/ubbssDXdPdGeaL6wKui0C+sOK15+skvm2Ib1Wppcy1ZZPn0qh",
	"VYOwl6nTyq9fKYaWYr9qa7c4EqtyYrJOfiiV1Qk+VZjZvF7L0tULUWjl8bxlOq0l8FxNs1UdjWeIrQDF",
	"RNfk083rs2Qfz/+gfXuPUeNqV7mHC/1L65x+okpNxDVudkuBz+Jtx3dRw2XYHU6X2yBF7qd19oessybu",
	"YMNxtixdNdvjd7o9bNhcDxNOxxJD44XvYeehsgoUqG12xath04v4/lAWESUehDSa+qXRgzZ60EYP2uhB",
	"Gz3oFuhBUyf31mlBs/dOfHWmP1TTfaZuvoeye0+p0LIUbIQLS3diUXwmA5A3/pOpQUupe6Haz8rgWYbf",
	"qu/RVxeASudVi/XSxY1sf0+jAi3v9aVoQ7f2ZLQAo+BsrKYDrQfPM8SWx+Z/piJ06w5S0xqv6RQNQrIB",
	"kXUQEp1vGISkEVYbYbURVhthtRFWt0dYHYRkWyVVeeNk70j+6xIX5CoyxiAkhddkmomscFFmLBmSShCE",
	"5MlcK4q6fGFCxZYh2AQGM4bryhJlMNQ4zJoY/I8WIfhcbZf8sOrBGIejWD18xZX6pLn6X8WtN+JCIy40",
	"4kIjLjTiwosXF+JDe9uEBf22iW7EzKVUJVSF/T12pjFZI/pxQ0asqPky//2I6qcyX1Wh62UasLQFs6Ok",
	"Fu+0zjAUGVJkDY3kyox8DAgdGZsXKCt0+0KESg3BWyZRVkLwqsEnMi2eIbYMChNRT+9ps0Kl3tOzY20b",
	"z8n0Wq92SEZP+quJl6p0Ho0y2oAmWibhBxrBshEsG8GyESwbwXJFwTI3CR88OBWHDJ7yDYElMcxn0NNW",
	"TYSgEYukwrvQmR96Ll9ESanGbBriyFzz5moEvlkrUanoM6INe8ycTcvd6kbbNqk7uYgjRiF1V1eRuOUS",
	"lVz6srT8aUOytmy8TNJWgHoiObucppcpZccLZUNFDeaxvnxdCVGydExoDZlGACDBweal6pIuX4hEHWN1",
	"y+TpUqxWk6Urge4MsWUQF8m2SR+blaGTfp4dW9t3AuprXHApFmdLqoSmOKt2OZ6a5+t1IGV5lhstSnPj",
	"G3O7lyG+MDtSJcAr/4a13Nkbfpde0mWD/98N/jOgXIXj5XS4oVc5A3tcHuxIFcl+gBac/3Z38ztpqApr",
	"atRh3F/JZmqUSI0SaSklEheZZz5loHcKGAymiEUExdjtgN4EEJ9FrDRy24o+QVpScETAzhTfISJ9V9kM",
	"BUBMDxDYpbuiJUMrqe4Am0EGZvAOjWRDcYWYUHGAIJdPFJuheRvgDuq0I/oxcbzQ5RMl88bNUICFNyOR",
	"JC5ggAhTOig5MhJ6nqSO/ys9vDRx95jN/JDv8ZgYqjq2QYIXFNdHBUg0y7HW5dB09/y7LWcb/zbGbhVt",
	"PV8gQeo2LFBE6PILxA/iWssQdxktg023jBmqsymaOa835xry+Wcb8vm3GshX3HKtdRgR80qUrYOcheor",
	"kVmHhNTsSoxI9bWIjyfVXOqAqrtOGklld4YsWmeDNEuzgaXRdpEsYc/6yb9W3Ekq68UtpGIo0kKG54gy",
	"OF+0Afq6QA6Ts3KLwM1l738AWvjODNxcnyQFOdNMkeMT18qMhgR/7fKatbJxrJcubQr53KWt5JzAMVIU",
	"PmmSGV242jabni4VRtJsRnisK8/GcmllTyBZPCalkjg7yNZqxNpGrG3E2kasbZajEWsbsbaZ80asbcTa",
	"RqxtxNpGrF3FUTUjZG2fy2peSrSLuRXcV2Vz42iDlIqqkYtkmoyNebWmuyn3b80M5+lcXasT+lKdXnMr",
	"um71yTK+sHXhGXlF5gZTw90miyEjqp7CcXYJQl6MO21uP2ydY22N/VDVybYumoU35ipQTnxiDV1v2g3X",
	"0OUL8Mjd3oPajIbC27/MT7cuIJW7ZD1INu67y+HP6siYW7WGtSn07q23Z0o8fetumcjD8ik4ko27BS9B",
	"SLPb/lN2mxXp6xIkpLWwqnuxKFzPBjtM12kssI0FtrHANhbYZjkaC2xjgW3mvLHANhbYxgLbWGAbC+wK",
	"jsVpEWvr3ItzEuIK1lcpe9W1vaZJ2JDlNd1Jmd01M5CnsrpWJ/Jl2lxzK7leRUl9e2tdQMqKuWFU1mxm",
	"cWPA0ebtrLWJeCE21hz6t8zCWgP91eyrddF7htjy0E0MnYZuN2tZNXT47JDc3qPYhIIVbKp1QSjq1YNh",
	"Y09dBncW+05uvRqGxWpJrbdPCu2odbeJrLhpTmPD9tPaRDQ76/e/syzIXlEUEJGAqxpKmdE8ilnaNMpQ",
	"E7K+CVnfhKxvQtY3TgFbkAtNHNjbp15laaVqcglVU6gyVHiTRXo3tjm9KaugLWVPqCJlW6kYZciKgsr8",
	"zzL6zxL8RJorVlP4YMmqP4VC09rdi1Fdsq1UWBagsqqKsgRgQhvFltZEsidRP7KXonNk26dpLIRQqW6x",
	"BD1KS8MaFeIaYWRVbzR3t1FHWIzwEq1gCcAjZclq9+/G1XzW7hqc/w5wngLh8jwqQx6aIxY87E8DP1zQ",
	"fc+fVtXZxXXHvNJYNpDfOddRsXN/Ss94IU2jl//YPHhodBubefDQKIafVzG8aWWT4SzZNtWT+TiMjnfr",
	"SVpFLWU6rWsc1rKd/OcNqbDyHZUptEzjeyoFVz1qX6a6y7i0VZC3NJtRXzW2IoZlO8aBVmbjzTCzYG/z",
	"arYVyHkhajjj3tkypdzSe6eawm5F2J8hthrmE7WbjZLNKvtsvT47grf73LfhYmOHPv8DO7XFywtZ7axM",
	"vtTLmUTMVDuNlNlImY2U2UiZy0uZqeNkawXN7KGYO/wNp2o9cVOd+qVsi6GjjGSil9i03Kn3VV30TI31",
	"yaXPqjS/cAE0s8wVEbkKR7KKJLoCvDPCQ2bcS4ikGfjZYfmUgumSRL008TSzubZVQl1uc9WVU1fYFLpU",
	"suyOMImOOZKeSmbNdfxyxNZtvTAKMLKR22IR+BPsoeWso1x6vlINlGhtVDGbfTRqpZFdG9m1kV3/E57O",
	"DFQAG/EOJcVWgehMkrF2YIAApBRP+Qa6x2wmSstYPphQBomDAHYRYXiCUWCb+Kho1fBDm6RPm1JewhZ/",
	"J6pdMQLPWigWIcxOO2sIcLZmctYf+2stBKqYVqfriXm1dpI2E+upR1zOEiEK8EScRTpXmFBKZ37oufwG",
	"RF8ZIm5MalR0RJLCAS8QIBdMAn8OZhgFMHBmD+pqmHhwCrCamJAiF0DPJ1PZnk/QiERPLXsicpecdOAH",
	"INn3MgheYRE+ryMiA4oh1gZM7xtPiR9oYmV2b8z8+14UzKvyxfifPY/xrp3592OsTZ6C4K3vewiSp/aw",
	"ibjRrfax0Vhqo9krzZEv4WejIFeL8Tc4ZKgCT+Fto7qq6W+jxvksHjcVKN4Cn5tkiashcQURdmXPm2VQ",
	"bXCVSIa8rP9NDDsrGp/cB6cuSS/RDyfZUdvsiVN3Ry3ljbPMVsh6XiyxD6zeMRo9T+qVo/X7svxytvB2",
	"sOOjMpNS/IhvDRgWTS2D4ubZ3/JAtTyPsi1nw4GVPBRcdZcVPiRcwyaTbT0Hz7Th54krktTs2f/IPVu4",
	"HTYqNa3mulrB/JcuWeC+2hgBGyNgYwRsjICNEbAxAjZGwMYI2BgBGyPg8xgBMwzptj+BKDIFGrnz5Z5B",
	"lKsBjJ2ZfeSfyCyY7q3+c4jnMg5Wp3s7nkQUCLs2hK4m767jYcSSgDf7ra+k/crBsQioz/FEYgnCXugz",
	"ie03IC6/5ZZ9LLHkRjE4w6/Jnmgg7KkfTbxIq+L2XiuFWKnD9VQ1L66I7bSRph66GzvjStAtNVvklrZh",
	"6WoYHFfafRXNjituvoy15Tk4sCezQq5AWLOv/7P3ddk2Wauodu8HXzwfuuM5mt+KnVfJIJmtlj8KflEl",
	"LkQBzf6Y/tBkX2qyLzXZl5rsS43pfQuyL2WO7m1T0OdvnugqNV5WVdTxmXuw4jUoq6c/bUjlnunEomHP",
	"DOOp9OrlxL1MNXpu5cpwtAwnVl9VvhwYZfXckCoLY1nsGLC0edV3bSJeiJo7Pe3bp92uvROq6bKXQ/IZ",
	"YsvDOFEaGzrfrJba0OGzw3P7jmbT6q/zXK4rGhfIxAZpuJGDGzm4kYMbObiRg7dIDt5aCdgk+y4h9Zbe",
	"cGlxacMibpkbWUT1U0u32+cmpi2YHSW1eKflhdlSjKUFkWUk1xQynk5WLej2hUmn2yuXlpxzdWTRUiBq",
	"AshqgufTSZwvStTcMr+nihAr8WyqjC5RoSq+GlelevCy+DAki9PwCQbfo6o7oNC7qPIGkDXWec9v2Bmo",
	"QrfNvvid7YscSAv458f4a/555BT7pJNgUf4Q1c0L+UOVYlwV19M25wuf+3I+tArRT/ZKH33KtAr8T3vh",
	"nnqNplWIfrJX6svNT6bDB8rQXKub+WJv4irw77ArNeiqbvSTvdIv2gGkKmUXy17pItbYZ6qmNc2GFXNm",
	"yA1VCIdo2dRv9lr5DGpadXt6tYKG9Gj2prZM0e5L6LpKvENNlGXc1MppK2jP7Plmhrx37Dh+SFgG9tHP",
	"9sonIWX+/MQnEzzVKus/F6B6CNRVd+V72HnQYT2UX+SHwrqDkBgqDkLSevz8+P8HAAD//x+EFLyFwwIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
