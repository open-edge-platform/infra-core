// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// RegisterUpdateHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/register)
	HostServiceRegisterUpdateHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServiceRegisterUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterUpdateHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/register", wrapper.HostServiceRegisterUpdateHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
