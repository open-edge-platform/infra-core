// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// PatchRegisterHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resourceId}/register)
	HostServicePatchRegisterHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resourceId}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resourceId})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resourceId})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context, params OSUpdatePolicyListOSUpdatePolicyParams) error
	// CreateOSUpdatePolicy
	// (POST /edge-infra.orchestrator.apis/v2/os_update_policy)
	OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error
	// DeleteOSUpdatePolicy
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// GetOSUpdatePolicy
	// (GET /edge-infra.orchestrator.apis/v2/os_update_policy/{resourceId})
	OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resourceId})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resourceId})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resourceId})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resourceId})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resourceId})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resourceId})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resourceId})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resourceId})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resourceId})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resourceId})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resourceId})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resourceId})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServicePatchRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchRegisterHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchRegisterHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdatePolicyListOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyListOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdatePolicyListOSUpdatePolicyParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyListOSUpdatePolicy(ctx, params)
	return err
}

// OSUpdatePolicyCreateOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyCreateOSUpdatePolicy(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyCreateOSUpdatePolicy(ctx)
	return err
}

// OSUpdatePolicyDeleteOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyDeleteOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyDeleteOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdatePolicyGetOSUpdatePolicy converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdatePolicyGetOSUpdatePolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdatePolicyGetOSUpdatePolicy(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", ctx.Param("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resourceId/register", wrapper.HostServicePatchRegisterHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resourceId/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resourceId", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resourceId", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyListOSUpdatePolicy)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy", wrapper.OSUpdatePolicyCreateOSUpdatePolicy)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyDeleteOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_policy/:resourceId", wrapper.OSUpdatePolicyGetOSUpdatePolicy)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resourceId", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resourceId", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resourceId", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resourceId", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resourceId", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resourceId", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resourceId", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resourceId", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resourceId", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resourceId", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resourceId", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resourceId", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9C3fbNrY/+lVwNdNVuyPLjzRpk1mz5ji2kmhqW76S3Z5plFFhEpJwQoEaArTjZnw/",
	"+114kARJgA89bKvDrvP/TyzisQH8AOwX9v7acvz5wieIMNp687VFnRmaQ/HP4zkbMsgQ/7eLqBPgBcM+",
	"ab1pXc0QoPwT8CeAzRA4Pr8CO8cOw7cInEMCp2iOCANXyJkR3/On97sg7qbTarcQCeetNx9bx+dX4+HV",
	"8VV3fH0xvOye9N71uqettvb75aD/c2/Y619kfr++sH057Q1P+hcX3ZOr7mnrU7vFMPNQ600ynHaL3S/4",
	"L5QFmExbD+3WWxigOWLQO/EJC3zPQ8FPmLjmkfPafOBvz0/0sbw9HnTPu1fHZ+OT/sXVoH921h2Mf+pd",
	"nGbGZi930b/oFhboXZ73Cgv8fDnoFxa4PL3W58Q2bsMUnSIPMfTBp2yA6MInVOACui7mUwO9y8BfoIBh",
	"RFtvJtCjqJ2ZugEStcAcUQqnCEz8ACSN8pmMqDJ0FRPk3/wfclhCUI9QBomDliaK2qiKWs5TluvTSt2Z",
	"70Dv2HH8kLD1U6i3nqfS2LeV0v7weuFChi59Dzv366e1v0ABZJhMh/eUoXmeXAsBpQQPQvKE1Oq920lN",
	"t/YU5FoosJJ8Gfi32EXB+mmNWs4TmevTSt0ATbG/gWWX7eYpy/RXQNcCQYbcoTNDbuihTVCY7sFEq4UG",
	"K9VDTKYe2hzN6fbzFFv6L6CXbYRKZqSNVaDoCnn8Gg3uz/wpfR/44WL99OX7yFNbQEc12i8Df4I3gQFT",
	"LyX0Z2kpH8E5YgF2Nr4AejcFYzBSU3kQm1+JdEflA6m8Hr/4wWfPh+45mt9s4gZJt58n3NJ/Kb2bo9RO",
	"YxF17xHjPPAwnM9hsCxLpmpHgtrMp4wK2S2knKqFVv9rCwWBH1iEHp9BD5CQTylvTDa0CBBFhDMWABLQ",
	"5dV5qwGCbp949603LAhRMnbZfjxUTBiaooCPNQgJ4YJGjb4xAQNZS8qiRR1HzZu6Fq3X6LioH9mWqZeQ",
	"QM/zHX4z1xnkHWYzP2QAAoqLh6h3kCfgISlogZUBgFICm2LKUFATdudqLzAfBKoFAEEk6KVRB0Pm98mN",
	"DwPD1Lzz4JS3QvGUQI//ixefQ4Yd6Hn3wJcVY3DrW42XHKsCyfhufN9DkPABIgJvPPTzIvCrdCxLg9vL",
	"QR/4xNijLDK+5S2aOiRwblGn8JYA/8ybm8MvZ4hM2az15uig3VpAxlDAS/7rz//510e49/vx3q9744O9",
	"1539N+DTX/6sUSB6MIjvFAUYehcCXgUUyGIKhmKpkr53Ph7v/Qr3fj/Ye/3p68v20cHD7t/1rmXdsaxr",
	"oiEMsVvQ9/V17zQz+hevcqM/2HsN9ybHe+8+ff3xYU//8/s6fx4ePei0C9JyJGu7JrUXrHuF+mHg1D2i",
	"j8W+AIGqbdggczb8HOZnzvHn/PSbBP4cuOgWOwhgwgKfLpAjiqTm8vUr++EB52xMP4emRYNSbRbS+v13",
	"wBAx4BPvHtzci/1yeg4G55k1Pjw4+r6EMtl/EXE94mIHMnl7/TlAk9ab1p/2E9XmvtJr7qeK82HorVzh",
	"OaIMzhf5sV5fnQAWfQZ3M0RAQhq4gxR4kDLgzCCZIleO/OaeDxgSF/T5uMVMFB3hSYPjuCvjZXKDfTpA",
	"HoIUnRoVtG97/SFQJcBpyeXIWxsHsvDYtWhIeaGfEXFN/IHoTX4s7edWtmHtIaCiTUsX4muFPmQrpk7m",
	"Ts+wum/PT0DvEkDXDRClbUBDZwYgBaPW4eujzkHnoHM4ahX2O3fGeGHpMVIlF+HSpol9aLecRXgcODPM",
	"kMPCwLDa+teI0Tu5vAZz30VeG6DOtAO+/Phq/Or7oiE4i3AM9X4Mg3EW4QlcwBvs4ehwyrCboijwMGWc",
	"Euh5ghJHqwR2Fj6l+Ma7B/8Y9i92y2jS69po8gMTMRcxMyVo4IVKOxMtmfacswjP+Xzmu4mnOpr7iM0p",
	"6khUsAxn6DufESsc0GJ2TzkHJEZGZfmyLlUx2+iuZryyodcrwZkmfTNZENBwsfADhtzodD+5vC6jQdW1",
	"0uAvhLkoTwSHCphg5LmAMl+ALII5U5XaIEATFHBW7cPp8f6HwTlwfYcKeYyXFU3I/VZKZkSHaYHCIECE",
	"6daxoo0dl0uqXvp3KKhUWSuZVK9UU7D4UUUXURwgdxmSVdVlSVbV65PMOcL3CxPX8RY6n/fESiPiCAkD",
	"MgadGXIlG/n+8jrmpcSewAzNaZXOp4swZuEe7ADhvYynC50jgUEA7yOyL7CzBNkXvZMlySbYqUw24bSZ",
	"ybZxeQx9YSH0YvUGm0EGZJEbRMXOCkLCGRalV+BnhDgCIyZocE5j3qcy4yfItXN+CcUrsX5JM/V4P406",
	"O/Onj7vCMEuYPkmqH8ApWgJeVNZcEmKqdmWY0YhOM9Su6c0SQ7gevl2S/JDeVCY95LSZyTZL7x/Ul7JV",
	"tknmmMxQgBlyzxGDLmTQLCLP1VcQl4+uXd44v/uUMk5+gDEP9hndv7mFXojAAuKA8pLERYEsJjRG2CdC",
	"SvH8qeApKAtCwQJWn+WI9h5D86IpjokfR+MxzDVW9vWyTjU7fLy2czT3g/u398y0Sf7fEBKGmdCGyoJg",
	"Z3B8vguwVOdQYR3lf93wBopWVFYfi3KmVZ1bF3Onf3nV618cn+2C1LpCSn0HQ75+d5jNlljapVdrDr/0",
	"ZL3DgwN9jNYlqq/IerkmRRbxbR5J/It1FrPUHB61W3NM4ruohLi//u1//v7//Kk9Cg8OXjji/0ff7eyO",
	"WopoG0oEsYZBKKUkJtMVbt2kkbVevEmzBddvdgArXcLZxupdxTl6V7uQc82VXMsLzu+e+PM5JK70XanE",
	"IadrRO30CR97pWFHwBajFZWRCyKdm9Q8VVA5iYpjn4hB2se3dt5QUmwhtjJUJfV2lGq0rwRQrZ162NQJ",
	"LFQSVl6qapgMfDd02IXxkJYuQOBSlgEXJayLamtsO48XymunFPWJd4/GiE0xZYGY5+d3EOrUFYAsP4iV",
	"sJZvrh7kDFSvdiAaGiyBX8Sk9wzWnmj5Qe+0DaaIoEDc1T4BJwFSimp9hV6kLmZ+4EVmnE9ff3z4cyHd",
	"sqcxdusbxIbnQuOsrBo5q5itz1ITGMXlehDlcxTvEl6nZzGc8W983QOUXAiYAmUILp7MP//nX7x6dj7j",
	"sWBmnLt2645z8MnwhZVM4aGU9bxKSlotghkOOTYOAuwiwvAEo+Cv6gcKQoL/HSIhv+D5PGTwxkPPzooY",
	"oH+HOEBu681Hydh+yloW1XJbLIsWP3zxM9V9O3SH9A/9odm7Xvtw2j3rXmV/7F+87R8PTrM/X19cDa6H",
	"udKD7vve8Ko7SHvbJ1QbdkFW2VbPXipwj6R94RZiT1jlY9WfAwPX4NriFJoteJMTBIXMK6cTU9GaPADa",
	"wOHsGqBoAYNoY8WSVu4wyN8QFk2z0bIRy1gpEo2iVjiHZI+3LqYgoRdoZYuOK71JA92yMTMXwTvjSAaQ",
	"cvk0tgP0h8Ud8hbtvISDbQedNrjLk552EhTyLg62nP6KqyntS5hpKrBHpj6WPRRvLWbWDGm3pQZXm601",
	"49ag70TL+aOrmNe1WTnDEEyg0uWld+vN3OlFn/MT8csMsRkK5C7FFEBwM3eS9oAfAOKzUnNt3IHJU6cI",
	"+3xMahHEFtjpD4Fig9028PBnBBCbHbQBIotDyv+XOZ3dFfYFXijLtO3sisfyLdXs2EJPVFkp1Ls8ltWq",
	"qEp1ivInl4fJ50omnwvE7vzgc7zWZ3FFoZVyOEUlIwbnxyfRgAsVdtAZ82JGZR0zeNecwy94Hs4BCyCh",
	"c0wp9gnnNlh038YkFHbLQrOIxo+66AzLd54+44AkVVkyMQVEzls1EuQpGPdl4koD7N92he+a4fjtZYYL",
	"ZpCC4aDX/1m5xLmFLDFve6wKGreaKPHzhF5wtsWo2ItNzz+/o0BZQb17uef4skgBIkVkG+AJGA72OJVY",
	"s1WXk3o7oZyBN65aROqV3Wd0rmCTJjo9gYoauhqRdmfT5W6ezLWgn/mWayFrFlrX1RAZq3QGyczSOZjZ",
	"lP3ykapsSJ3WJ6oG2KH4d7RbSdEf9WJX9ZddFRkiSm4O6sI2oO6NujWWvzTmZm8VA0WlTI7VWUXKu5U6",
	"UXJaTVH6sfiqYZrY5Xmrduvuzublap6RaqysaLWMk8vuR8u21c2hS29Zs0k247hqvL55pVO1CeQhCSnF",
	"U1JFgEjf4LpLpNFVJKTaOaym3fEJQU5kICrkEkOLo5IHqckdlv8MXDTBaijXw7d7vXeFh4toqeaZwu+S",
	"/nAvOjf0A2UVHtO9tMlEH9AX6CIHz5MHCrFJkrMlvdOIJeJLq8hRglERRdgdF4hP2LX5my5FT/mWxm6B",
	"d6rtpBvq51mCssc82TKHgL67DQdAzOaf+GSCp+eIzXxxXkVqo97l+Pj0dNAdDscn/Yt3vffj8+7Vh342",
	"jIG12PDq+Kp3UlTi9J8Xx+e9E11dZKbKMEV5KaXsBMsfSci0e096p4MERtIpQqEokajKjiZk3s1OZqor",
	"iWGpmVhOq35zD3rkFhHmB/eJij2jFH6ZUo5KwW5dOvbYplNpxMoEFFc8RQxiw567pijYmwQYEde7j0w+",
	"zI84KeCKehTAGz9k0ggZzQ9VKknr3pT2DdnCRrZoHsBFmzSxihm2J99p10P7vlTfj4fD3vuL8+7F1bg7",
	"GPQHBYUsLcjtez04vur1LwoaicpZmhl0z7rHQ8tH2arpSBhaTW+RA5A9VktUAnzGxNWV472L4dXxxUnX",
	"FKEl/U0EUkkRpvdaQNWSPFa2umbshARI3ygmPVz6Q/m357WBeuLItznCQj0GR9JPEfgBmN0vUHCLqbwB",
	"M3KUFKj7pYjOR5GI9UR1XJOjAWadhFcioI6jcY4A9AVT3uzJrU2QPPm5S6XpGQYopYIQ10WkfohabgNE",
	"HJ8zZ5ACKD3PI2Vc6nHfwcHBEp5Hf/n/dnZHrdEIjEbk68PHT8VOSNHoxs4tsvrSVnGj1Oeb1+md2l3A",
	"vqV5+cbonIW1MDv1DL+6c2XvtJKdMurMRPkpv/uF2bQNrjTCTCPpgGMPQ2Eqiq/l0+IR8OaqXqsamUaH",
	"0QS+S3pMKADHY4xehK/kLxE1VuArkSbddr9fmQYwxbeIqqsduZqjB0uvFfUn7E5s0hjExlGUbLq//0/e",
	"3a/E2S8z/gImIj0NK7mLpJuq5yqSIXg1N5Hs6ItdRD5XeBKXumcf2i1PC2hlO3ryZ44/Ed4QHoCyJrjD",
	"ngduUJ3D6CjtHiraU83ZDiVRZgxjaqucTnq7ZZOTie4Vn8t2x1xtj2QMxxv01vVXudN9WmuZ+8OEzxdH",
	"xjykjK+04pF0K4FaZnHQy1dlmIKQIpfLEW6Ab6U/jQvvD4AvKfQJbafdTIAvjk4kZYwJDigTWyx73qTR",
	"41MbZsR4qwDFpzL62HGkNjfdZroM1B8CWYNqqvbYmhRHugO9CUDzBbtv8xEFSDA7xAdhtm7uRK3Cx5iO",
	"1IiLKT5ZfTqWJIxjCsxg00PISezou/hFZh1kmwtR2r4mUdeLqNUqKxSbplZz8dab0a68ZMFWua/1xouc",
	"aHNDWc2XNtdcTZfaPNWrXVyGBp/Mv7EOk1iie1F+15fQ+Wx+McaPvoX6qp0KGUkGQBa5cKcfohQKNi8P",
	"HkWyUYSNo2GYFbdOGGB2/066d5VCNlN8BXsTC0LKkHvMGP9xRR9n1dgYJq2t/UAw9FFwLtiGt9LpYGu0",
	"3hlhH8hqR4W93ZITI9TupVKGKBUINam9AnhkA2vHi7oY7RDRCbcJe7rYHbHmAZr7t8gFmIDu+Ttw+6Jz",
	"1Dloc/4MaIFXBRuHoNsBhuAAkQ5YG2x6GvJDB28Rg21AQ6GG5YygxIiJ2TmoOCsFQqA+OSvtGb2hevsk",
	"RepqWyM96uLdcJcK0Ge5mqJCYC5LFctr4Cb3eJh/j8LsgfN8I6KIxv1W9ZNLhxcscpKLhjBWQ8h5yj3k",
	"lcqFVoGU3rJY3y1dw40ab5NLeObj4PrionfxPv8h8RfPNRc5hxs05VZH8B65hR7myFkpsLghAGO6ZT1G",
	"m6VP43xHJTcRZTxpHZhCjRd0biD1TPe4LAnWb3QejFBy0b36pT/4ady7uOoO3h2fdMdnvYufjJgpLnpZ",
	"VuK0/8uFDpZkCAagnGEqohbSda4An4y4YTAXlta8eWQG6QX6YnCL6JGJH8wBnmjC8twPEBCBU4mMtBPp",
	"qCEdE96KyQFShHo0uBZIp3pIXDDBHhMPPKOX33EkysoxEHTFiq45N/nvCs/CbjSKvKlc6NH8CRCdR4/n",
	"EWE4QIJCLilMYeB6iIobeAGnmMDoNQKfNcjklfDiqJWJnjnWZy8fxVJ/SROTnyK3Ha9YClxZ/Bg3EWXR",
	"ZtsI0OLGnxBs0ZVZE3Bxter+5IboDFll8RaDLzWEagDMY8sCQl25uxEgpjp4QjDqKv2agNSV5dVBaVOb",
	"G9X2W4zO9MRWRqgZeAUoFWrxTSFUNG5FJ/HduodYIPI41ECLaZSd6JcL301hRxKUh4wfskXI7JjRnrse",
	"z434CRALA6IGUogT2VcRUEohrJHzXNAsZ9aA1TT8quI0vYJ1g/VyYqKpiMMnsQAZAvfajXGiEWGGAzkz",
	"XJlNbQEDRJjtoaQm4Qa6Llox/7Jy8il67BpNiaCsMyKgJ0foQCoKQbV52gAz4Pih54IbJI1FwA/izz3X",
	"WJdihspramOXZNpU2wX698wUiHkOrN6ROO8dqVOhdWRSgIofljlBoptHWrYzYE91Gq91OwUHfSvoWK68",
	"A1IUaN6Fg+6wfz0wu8Wlvw2673v9i9zPw95VVycv1ZFFsNtc7qnoNkn38IQMT8pEieveX7EZF0T1K19l",
	"ea2yxcKJt5kpz01vZc6nevoxvfSak49l4ToIydZi1aeRvn2xLFYHIWmAagNqSeY5UTTtWrMRPj3bhxWv",
	"Fj+f2qiqASO7Z1E0oXGRsQz9OI4fs5lCgG58x20JeK1LWR3ENmRakBwFD9sIhOPGn/CsjaKo1dwOcbXK",
	"m8IUhi3lCeOaDFVbA83UEKphMY8tCwhlFsiNQFA1/YQAVKqRzepT4jyaOehF3W8t8LQBVINdFk1W0KXT",
	"eW4IfplOnhSIGVrqQlJWH9Oofg105jKnGnCabX6bIZud6RrgtaHSAuONwjfXeAPfVeBLU/l4aw5AVl6C",
	"/FwW4Bzx2aa3d+dlZ7i9yl6svgfTvW5kJ6a7eMJ92ID48UFcFbAWHFphyzYFVvbEEGX1gclqoZFZMMi2",
	"G3isHtxYOcjymdM3AjlDN08IQJanph4c4wbGnj+l46loojI8jdnqc2A19rG94DXNeWUoF6G0CrBVCvfN",
	"Qzvq6LmAO6JnJXgvVCPLATxJn18G8aifPwjIL7XhLAHzHGbLgH6OWICdxzjEUz09B6inCFoW63PZyNKn",
	"uU5EMdrTPf0B4J6e//p4N0O3IuAf5XDP9PWMQL/qER+BcflTPk1INej/gc767DosDf+qJ376IdZGcJ/p",
	"4inh/kzRUOE1X9H+yz6R6yz/Cq/OqzsdwFn6K+PWhr8SuG4UqA1EiyC6JDjro9J0+CdEVATkElAsBqHp",
	"7UO96KllIZiyMdTSkZci55qqEdXc5cMw2Z7kloVlKvEujj2JU/kU1ktiWUxVOvsJGRLkD4cfwGV442EH",
	"/IREhtvuRZq2HzMROXYone0h9+jly8PX/0GOS+EencGjPYIpW7w8OtwFOx+P936Fe78f7L3+y/7fPv1l",
	"F/x9p/Pd7t9TacLobPwZ3a8zUHtIUWB2nb9WX+Kg+SIfrjvHJJPx6yg10o9w7/dPH+VA9j59PWi/OEzn",
	"7Yo6LMvdpRVU65DxxM7tL8M+TGXfrfv6IEkDzdDckBo4nRI4fw18NmEnlYf4M8pGgXhx+MoUyqXz6S/7",
	"2j/V/MbzPO58+i76zVBM/RT9r7WmtkwWmInhlgxKlMkM69UL06g02jSaOuM9M02y8zLcSMplWQ0xKSQY",
	"kGJPj1Pv2F46gk2lFw5xyh7tsrNTbhhmxje93tgKs6SJSNFJgo1M3LtMlrR0YNZVIkRWzK+m4tLZQzS9",
	"CxASzBlDX1gb9Id7Llogwu+eDjhOvABlA+IBEW0DnyCwQAHwMEFgh6A78Y84d91uB5yHlAHiM+D4hEFM",
	"wC0KRHojTCSbxWdkRMDxYuFhJIN/AOaDcxX3rj9EdLMRn1IPhT2vMMLTZxQQ5KmEyuZzQAsN+C0FsgJQ",
	"NcAZn56+KE7rj3q1xOHJ0cZJGjtqEKa859YL0Q7wDQZ2rMQl5d5byZgtxjdXlSPzLck3MRhM0WpBrqMm",
	"bO/OjFEpZSWOwKLAo8nLHjnoZUNIyt7GPt145tYaEa0s8axs/v9CcEhePMVoisI3qWwzIwKGs+g5ISbg",
	"29Pu2x+PjoBsF7wTB9m3Qko+RTcYEkDZvdjGlXZ5LO/VP9GyYS0NjHE6aJLlyUFJ4tjMtVlwsQ5CUjdN",
	"hpgdd9mIZYWX8odHuoWXzHqKiBsl4S8a9NT3px7qLAKf+TfhpJNE3tKCbCwTI8N80H8oPdm/38hkPeX5",
	"H4RkfYlIArbyqlJLBL7hzA+YLf7eHf9zBhcLRJAL3FBEp0sd+bVi7tmD7ek5U2hZQOAlqCqOepcKd1dA",
	"30qR7mg+xt3Si7lyIhf9cDWdveTGh4G7jrhm4gk9bwgMRC5+ke/q3yFKxzUzdWiiy8Lf1FREEP1qNmR+",
	"C5wZZsiJQq6WseQnl9dAr5O7CdbDZqfIMqZdS91bGfwX0mAh4esD/+fRq2/+/Nu/RqO/jEZ79WTEtaUm",
	"idcdyIXfrhQl+jRcB6acUIOzKMTFBHsokmz5eDWhVksJFbUo588ySWsT90ajzLKnRjwOA2OI0An+gtwq",
	"Kz+DtwjcIESAqCKvWkz5JosDUisZ/1mtu6DWuujx8Nez4ktN1+YQkIzdtvx4DqdGBuvYImrKY1VUkwN1",
	"IJHxdFmA0S1ywSTw5zKkkEoXJdNtbmaEghALRya+GdeVI5uvbYAWPsWSUUyPbdMU25YjSiNhV9id6dHy",
	"RMaJSHFVcdstrUYTl91I/EcqpKnhtBUq1XKDNa7VTu/8/Prq+O1ZdxdE65Ys1hwSPEGUc5vYmUUblEaz",
	"k0SfV1xjB1zxXRjpSaJ0HBP+dxztN0W5DPo8IrEtHLq3MtQzVeGHmA+g5/l3nJgQesDhAofK7dgfxn5M",
	"IhxynH9bbpMb6HxGxF1CKK2Kttx4bNArUXHWiKEtzrkZpPL4k0WYDwi6SxQtaXleJkmprkF9Mg1pZOzJ",
	"z09/AflpaQgTHhuIDIGhdQYXdL8sZNJg5gsdnmxMstVSjady9H9G91S4EwhrD22LGFdExbuSZapN0cHe",
	"63Znb/xmnyNHXKijERmNvo5GD6PRx9EooymPR19Zd5xfVoNW4fDoxzKF8c5u1VxA0VP7UoVSXDLK/eTH",
	"6TKruB2kR7WUr0GpxrUgV02SEs48DVcVzGp9Weqh3Vp4kHF25m1IXFOmHzu443DoIjuqE1Lmz6NDVGWQ",
	"EO3s0F3BLozkEai8TcR5egNFzH2J8EQ+BP3hnodukQcig5SDEd2XeW5DlS2pA0YknVEIuGgCQ49piSsl",
	"HfqRX5irRc3F+EZOhjldDT/Szamz+a9CnBbiqyoqWSWWxg24QZ5PpnzmOuBaIMi7TzDE7/AJnGPvPqOl",
	"prX3T+XrQpFrzeCtvv8sGdf84NUHRXDVwRdnzhEEKVbZrCZc+EbOIdmynYRnvR6cdXQewg/wFHO4pUEb",
	"6xw2cc9wim3X8HIpmC0Kz3UcNmVqz5Vz39AZPHr5yqDy/HB89PIVcGbI+UzDucb0JS5SBMy0RO3p1NpZ",
	"V4zv2605JvqfafedycHe6/Q6KcrW6XZUbJZ6BCZrs1Yv3ag1h1968t+HfOPUzuVWZPXSZJA8j5budzlD",
	"mFr6T4Y4Xhmlpkn/meYt8tdp6rumyB+1/DuCglErAXtbnp4CDTJpoDxY43xiemaF/nB8Oej/3DvtDkzR",
	"NXOfexfvBsemD2fdi/7P/dTw02MyzHs/Zjqyo+W/6+mC+J/+JEp6SKaAxpowbSRX/7zs5gcgflUCofZL",
	"LCSmaRYUGWi99O9QoESLxABpSF4mg3lyqM8gcT1O7ILXBUpISKU/uez/0h2MT/rn58cXp+PL/lnv5J+Z",
	"ERiL9M7Pu6e946uurUB/cNodpPOeGEZgG2dB0g6Ru1sOSOTvyI/GlJVD/yLis6Z+ePcu88vwrNu9zPz2",
	"ofe2O7jQh6yywnSH3avcOK05O4r3mdhdWgiz1OgK9kn629vjQTeXoL1sM+RioNV1woxoLjKALPBJgAS7",
	"CD1b9r1sM9/S+Apwksqdagf3yxV91ioe1XCBxxpxhodLcIG7xF34mLDq4z6+7AGkai3B2lVwxuOERz2Y",
	"xiuFF6t8FROdEnIMWvN10KpoqSXKm2Z1GTeBig5gUXdV5HETactJ5T+kiI/arcouazQXjOinCrmps/qJ",
	"qO7PiLjltu3LdOmlJYsCd4r1TVqZX92ydnRT2EZ1YivM6QeJ4Xgv4vIuc+uRlYX573FQ/KI76OfuxWl/",
	"YLuF1FfJk43P/vfkuOBr/+TYNBBFpGFyMwET695TMihhwS2FyQwFmCH33Ko7vRL5J4grXkbF6tLYjiQp",
	"VGkFdujuiKQsT3EHEVwHKotA7uFCdPGlHzAIgUdYBaRqizdLfBabBzBRz7YqP9FK+dw/FJlJFOXjvGY1",
	"vursKmcti0bqIUJWzxzPyIhUn5Nlx2q50gsGaL9uwlLP4yRC6GZckIvzYKhEFwqfudsmwqlMryLK4Ex6",
	"yLa0CglLPSKsDhL10/dldrSyO5sHrz3zhTHPuCgtB1k/+qrKvFHhBrdNY6VLOz0D5uHbbx9F4mP4IK6P",
	"6A1cmeox6NAcNYwvkvgOSDi/kf4AIlBWkkNoantJa013LF7WZqKF6XEAkiQfKWQZ7mNrcMr6V5psaC+K",
	"oFdwuzmBT07h/blP+IpmZ4x/VcoxFwo1/pwXBDuHey8Od2W2GnmJqVw1xLtXaXPVfofgndjxae/VnY/f",
	"ffrPzsfDvdfif44+cdB82v3Pi48Hh592d3ba1m+73+3upqSAwCdjF96PBWFGmUWO8BeEPlcZ4B1Cn8HO",
	"wd6r1Yd3sPdKDUb8y0o679JG+Qc/NMUL0Oie8RKc4qMX6yD59af/HMr/Ofp4sPciHkDud+NwBDG2sZxj",
	"Eho3pjaauSzDx/Pyda3xdOwD4mh6qXCkjSf1s3E4ihrrgEp3TbxdDo/WtF0OPx4cHul7RP1gpt+2KVwl",
	"mw+R4xPXclZGhThhVBaMpIHoiAHREdMWz+miv4xH6Bx+wXMuOPz46nuhl8FE/n2oeXqqLseqP2OoAjvD",
	"FfVvFuvX964rfVBXYQ5yE7amB/5Ru7zZ6ldvJsJxfdZhVXl7LaMotuupsQ3jBwmFZr106fgh2wefstqZ",
	"g+OaNr5bvXdTPHXvNNpV8fYZEcCHLJ6pqsLq4Igf9ae2W47t1rluSC1cd+5t98ynrOTVHC9S+d2cqLIs",
	"463XfuYTWVN8UVMpC9WbTM7Z1g5pG9csmUbOxT4jNHJySqaQF9nsK86sWTV9TuQv0jSno/Nw7TSvrXMQ",
	"aSY1lRnQIhIYxIdh7sAzKal0BwOVdzK5kOTbIV3DNzz50D29PusK69b1MKPhy349P+5dXHUvji9Ouoav",
	"/eH4+vL0OJ37cJid0NxBPsw7aGT8LNIFdEMtR7H6Chy4gDfYw0y8aJXZOhOpKB5w9+R60Lv65/hd9/jq",
	"epC1HOY+X/QvuqbfxQ/d8dt+/2p8fHE6fnd9djY+7Q1/GncvTgb/FIqv1DxkRmmciFvEi5yhW2TwFjrz",
	"p0D6m4l9Fnn7xrHnlFEmszvnIWWSD70RrmeYcEZ0Aj5j4gL07xB6wjHuqnvWPe9eDf45PulfvOu9V1b2",
	"/vthevJ+7opZOOv+3D3LTV3q48mgd9U7OT7Lf+kOBv1B/udfjgcX+V97F+/6+V9Pu2+v36enV5870+Sa",
	"o9LXFb1lwHdQQfBGxC1kvhFxAT+yNOY7TlCb6UUuKZLetLxM0rZcXy5w8KXkK+kH4AZPp4ijA0q1R1xP",
	"PAFVNTs6x/790evvX7/64ej1SzPbjoj7zDn2DZqOXqdolGvzjBjZdA6CKrKKDcRLWyRXnaFMQgizuKKD",
	"14I1XqLypqqDf9Fy4Q54BHFC+MI0wkQjTDTCxJYKE6kjTOdezMyJSQjQl6s+88JQYwhvDOHrN4RzZH1L",
	"HzH01qLiKypTqtdgNUuxa9sW/KuJhdLN7GILZo3snYITcF0m9Xr3x0atyi8y3CJbGyfNb61K/C9DS3K6",
	"y9OuiLOQfQYtfqJT5Hu+jP4CPMgwC12UcLRM3J+XPiaMitAX+qkBaVxjz/PJVNYVh0ZkEO/+kFEZjQjY",
	"cdE0QEi2Nw89hkUYLL7AhwffffeDeNgZ+CFxk2OLIBggyoBiiHc5VWpYsYQa2eAhmYoR/GV/D7w+AKq3",
	"YovS6wP1n8ae72k/6pM89iAzsuiCIDKtMM/xZG3PRJNp4UQf/hjPNNjBxPFCim/RbvGsH/5omnb91/S8",
	"k6lZNFo1ylCK6TExRdkwSTbpkIV8QVTwpZRiS2owexenvZNjflVndVu577ESK/eldzG+HPTfD7rDofn7",
	"afoRSI56wxERp4c48T0POcy3PCjg43SiIkLHp49SV/KdnXVPrvrG1wXWYh/6w6ui7ydn18Or7kAfnIXw",
	"oiHmM6HV43PtDRm8Y7LTWSnJSXosD+3W1JJsKAlP6/lTIEuJZ8iygU7112hVwi5lXsxWfMtgTTxUOQZf",
	"rIqOB2lg+rSXjYeb1/nJx8qaeJpoyU0EHqWv9biwKLsuh7ccLHslUSxKB5FnWMbY3cTQTPkHN+kKr5bc",
	"yZwZCqqm4yV/aBjuicJcdHWF6WQxOOyjl+R8K0AwwyiAgTO7V8Ex8geP509jM0/xc2TdrvHQ5hXlQFfL",
	"LOkVgdAexzcFQtt2rwW5JClFCbDUDJdtGk67aceo6llSX5pJVaVrvKkRQQDMlBcdVE9CbqUo0T0tfGsR",
	"zVGY10TGzY1CCbx4SqS4OyLgBJLYKukTlASJjrptg0QTKeLH6BreUm0gJ6pEGxiHp7XOQKKLLhq/Uiff",
	"ibxBTzP8VTTK9uFH2uOiwQtJ+imHvqweeGNXV3ywp89Y252VvYWKbi1jUskleWNTWw173LDHT88e68jc",
	"Rg45ldD1eTHJxgOkwomzPlZZTk5tbnmuEb5yDt55CcAqcr9qKGtjgKvgRpURGYVuocFHTI5ZaAd5AbCT",
	"+EHsGjzGIi6zmsuYqHu/QKVuY/yX3snQrFw0eFdEQ4/INmoRG/6/4f8b/r/h/585/589onP3TcHFXEUY",
	"SNFYI5mNiPmL3GO2UsIIGaNstVY0w442GsNYswnxMl7hDDIUv1eb+TKMdGTqkI7o5hBX6W9nx1ddYdZI",
	"/3x1PHifDvRkTjSUwCfKP2u2zAwi6x9N7lEtva5O+y/9wU9n/eNTk20m/c1gcElRUUClyhldj5UTqJ4j",
	"F0PNkYjzAbFtU3jdqxiVN4jdIUQAjEcpLJoQcLyEegs7uIM67fgq2TX5Ji2fTCiqW5vZiyoWHzpFd03U",
	"QlW/i88V5Oz0CkYy9jxez7rTs9FngOmpinAgiX3iSAIRMcvks47q2iAVAz7vZVIYlyiqZ8NTnNe9Ip7S",
	"ed2r8M4FlFd5vLqO9c4krzcueza3rDzttGVJbXvD+ajOP8O1Y9hfVU9zpk+gpN54sJ93z9+aI/sZi6hj",
	"fnzRP+3ax1J24i8tvot9jx1wB0WSQCGg5s5wIQ76NyKTKkxda5lnMV84OKBXLgxFJeMu2nE2BA+Tz/La",
	"iTr3Q0axixRHDj0RjbfrThHokUkAKQtCkfAInEMCp7ltWDcgXESb5Uiqc4ynD3Bqy+EsPmYxVjsnv0J9",
	"gadrRMY6FJ46mduQfrX+ubx8Kj7jE87MZCqPJcOirz8ypD2n3qr36+ZvnRUXq+hStVw00S4xHMZF0pvj",
	"E4Ic1kFB4Bfw3pK89Ix1eRV50QSIhQGRaD6RLb4BM8YW9M3+vuoiWDgdx5/vu77DhbF90SPd/xMvtpf2",
	"RDRYfVxU6ELHC7RVQhsaB+KGBPCLLnlt+FEJgZyWE99Fn3I/6Jejw+9qD/HZDcln4t8RcYffQg+7YxhM",
	"wzkSMUtdBF0PEzRGXxyEXFGB+Gw88UOxNNDj63w/FiHLOKAXKJhjSrFPxi4iWFSI9yf6MoMhZeLHCcQi",
	"D00gFKZYzQ28EelwWu2WH7KxPxkLv0pBJZ6rPBFI8hvyThCf4C3EHt/EnGLI4NjzKZVfQjbj4Bbo5wBC",
	"XyBvhwqdfjyQT8bMfAxir67ofUzU6wSRmtNkhXPRLfI4AvYm0MFkCgRaomSe+ZXGBHTJ1MN01gHH5F6G",
	"wTNV1ep4vgM9/DuSMqAQFZWfqo4K6QvZUbmQPhV8krpqoR9KmlbHu+NhJCPo5jdztF3VxgFiX5n2qmka",
	"a+3YkyjVEyQABjeYBTC4BxQFWFEbTRL0fDJV2UXA/4gtnsmfmuUx843kGS0X3YTTMopzo2YqQnoOe2JX",
	"8y+xRv8GExjcmye5bDJT6UuzcIw/JmoFCiAQMVAFaOQDzyjrCpPJTO7l778LnaICxYgAB3qIuDDI5B5z",
	"/FBWjOIecVROAuiIrC2pD2xEAIHElz+IW8gLRdxjIN1teUuYKr3HrUy3RQBa+M4MQAaur07AHLsET2cM",
	"CMfvf0ASciwctsHh6x8O2tFOWAS+hxYMO+B9gKZ+gGFCv9qEnPHkVLEZGhFTsRvofL6DgSv48XsEA+AT",
	"1Bnxbo89Lw6/BQMEXh3Eg+QI7IAzBBfJuAMERi06RzBA7qgFqC9RSXzgIbgYRYYlIFOGYwqIOI4F9yfO",
	"wkWA5A3DGXd+NkDw8ej7vZkfBpyDRzDgjfAOPu1E11d8FNGOwgy/xfjK7ouSu3IoV7F/O6by+dnBwcHh",
	"nvi/q4ODN+L/fuVT8Pr169d7h0d7Lw6vjl68efn6zcvXndfRf792wNt78daKg9cRof6ZGqdovg3uEECE",
	"hoHak3dIvDpzfHKLAiaXWqVK+zh4dzIi4MWLF6+T8dzd3XUwYpOOH0z3g4nD/x8v0WFf2C6QWS3EvqFy",
	"YH8CXXUdiD/VH+DwDThRAleyO0Svl/1h73/Bb3yGdnZ/k43w/5JiMf/2V/Up/qFDUfyoeUe0cHF9dra7",
	"ay4o9sDOAf+qUXZURtkUMd6OP3HhfYpCKZOJTm6hB9ht1G2qhswcy27bQND21xUGeNtht/yvwvHJUiFF",
	"DvgOHB4cZMf7wjreXzB5cQR+e4+YTMDBPx/Td9hDV9nFedc76171zrtgwiJabNXk+CcsJvq6d3H16nvA",
	"sPOZgr+BnZ0d+cvuhHXcuw94OjuFTNTdBRrL74AXR7vgP0CUOvPvokLJhO7vg2M+CNe/o6J5vrcODw60",
	"w4924gLyeDt8ld91SXO8/uGr77///ocXrw6Sw+YGTfwAgWuCv0TNvP7hINtMZ9l13pHTAXZ25Bztg0P1",
	"XmUX7OkElUGdN8QnLWroG60hgY3dDDa+t2LjH/AWgt9UPl2VnpgXOceeh2kKG4IZmIvfwd+AvUrhTgB/",
	"S37tEHT3NsSei4KdXT489QB5R3Ui52dXNcb/44Uu5BRgwvgEqKJyBtToxUTsdm540zuZmXhZMhNSD806",
	"xL9LDV79Doh/B/4GUqVKxquRXz5y4t91poh1Ofjkbzu7+gSkJ0GV5n/s2Ab8yjpgtXRxWIrLezbzSTJk",
	"45rt7OZw+R6xkwQFvIC4LkTKu3O4WGAyFT/1iEqDJ/g0mXJOmzHORWKaZoZU1kbJhYyIuMlq3WOyL84P",
	"Qc4KtVU78mfe3aj1lfMiD3tfRcTKh72vLrx/uPrKeYGHN1/nmDy8+UqR8/Cx85VzYXwzP3z6ddQaRZZ1",
	"WV/Yk707eE8B+sJ5Q4pcxVxMOFvh4ilmlPNKHgKqrzYQnbVHBMj+2kB02BZXt+hVMDu/o8DfW0A3em13",
	"50fNIejMJLMXcYiCtYwDjKjUrpCAqQ/ChWA7orrCtKV+PDTzkbucNE6Bv5Bty75GrV852xVOJvhL9Got",
	"kgXwHAlGd2fUur46GbV2/5r6fUQkQyr1Fh0gsrUw/4VERiw9BJF8pqY0pEhwqzswfiYnhKoRkcTsylim",
	"iwATySrloSUNfHpvCxjQpKcbTptgGDnr5DhowcCNz2aiX17ZZzMUxAOhOVo4a+1PJhQxxQq+8wOgROg2",
	"GLWODg5/4FfJ4curg8M3Lw7eHL7sHBzymZSQp0D8EF9GC0g5gy/KCiJ8jT9/2Qa8vU68seAtHApZpS18",
	"F3RWEAJ+pUbZUKP8qWoLSIjKXcHPNBcGLt9ozO8N+0Ox/XZ2DVxwZ+7/jj0Pim2HyN71UGp0fkE3+wkx",
	"+4MoyeX+e8+/gd64L6ig+5ykfa0TfqzMEZv5boePR55FbXEESKLAb5wn5dPfif7xWzQmFcVBDRjxAZiG",
	"ycf1G2XBRFTWBuU7tLOQpx8fztG+h2+4TCzY+86Mzb0/iX9FdXeFTDwiMbSjbugCOeDbb/6598187xv3",
	"6psPb745f/PNsPPN5NdvO+AMf0Z3mCIhVvFJStYqpEg19w/fhQK731Lw8bfesB/xQzJ5nBi8Yts+7YyI",
	"UK+92d//P9+Fe5JIoT+a+MEUdQhi+3CBxcrwkfFSUmaRBO/n2xejTToZEbCbMqDIigwFMqydJ0R/pccW",
	"UIpVrfLYjtcg5XTHOxDkGqR0YRif+FLhRxh0hE+HVPK3+gtEpPnkUmUbBe8x+xDegH4whQT/HmkOw8Br",
	"vWlFSzzFbBbeCJHNXyCyh9wp2ovylUoNVkqnabfPgOPLXqvd8rCDCEUaZccL6MwQOOoc5HrndxQUnwW+",
	"VF26f9Y76V4Mu3tHnQMx7y1NDVRAQqvdipJ6vmkddHiPD+0WHxdc4Nab1ovOoSBiAdlMaFz2xXAxb6zj",
	"B86MC5XioTFcYLp/e7Q/8ykTJafI8Nr/PWJalA9Rli+mSkInA0+0PviUDVFwix10hqmIGiV0nDCAc8SE",
	"/ehjPnmTSlgrUsIBinhpfppGfQlVmlAY8J2FJ/f8QPADATQ/cFEgMi4iFCuZlWgO8aLjotv9wxdHQuqP",
	"UpgLZWjrTevfIRIKIrV0oqm3/AepqiyMk/IURNd5VNDO2E9El+Mboz7MuiAysoe0ZLIwUI5xmKG5TKDP",
	"UIAoKxvIq4Mqsz+J4o7XmfxNEVhrpt/s/+27nd2vD6PWt5lJj8dUOuWnwo1Zck9wHin/hO1UZTNXmfmj",
	"MO0qWtwCToV79KlK2uxPwNGBbYp54SH+HVWb5LWTlMRtsEVf51XHVFKYT2XxNeft5aIvkcp5ggPK5MrH",
	"aFBxa6Dn+XcU0M9YSCFyCNZDQPBu1WZoZQL0GdEf9cRE5Cbhk7ANLXx+cXDajg4OohsSyVR+cLHwVKSG",
	"/f+j0j84GUuRYSY+sAeqB3kLZ9waQ8dBlMrLUizw2vpPWx8NfXfVh3aLhvM5DO5bb1r6LcPgVFiptEuo",
	"9emh3VqoqIcZ+4ewqwMY+2ZabzJZUsROlNZWRNlb371f28jTIRfzA48zjTIfOMod4GGDSCij57mBILVA",
	"ZhQ8tCvyP/sBmmLKpK+iGTkDVaIKdqKyG0ePIvrh4aFBRoKMzPSvio2viY/Hg8SFh0yvEE7F71XwIUsq",
	"8grZ5AuVri1yJ49PBPEKirfixpca5/mTO01zRNK9RaSJ1XbPVewu61HUM/mobPLWSiZwm66t1LLb7q0C",
	"MUzKFNgpB9h7FfW3BrrUIYXcuPVNgCrfy5NjadtOt2RtrawPZI4hQ9Ql/7nK8SQKVsGP/uAseXdxg4B6",
	"krNOFFXpqzqWHp+dky91XOmJRmN3VLkYze2d4FtHnxXhoeGQlDNcBeCy5Kr37wZAXrG7Bud/AJynQLhO",
	"HnVfOahCyaQa90ovLlJlvySlq+wZXgZovu5r3B+GpjUlXVHw/8KtktMypXIogwBB6gvLMXBmMoApFwMn",
	"AULCCiG0vhbVEvFZkeptuY50T/vDo1qBWmTYmazf/aiVfd7gm54jb5QPS4Nsm/j63PZY6272yY0PA/Fe",
	"wcLY9WWJKjtZFf1jbuNNolObuG2CZnq914rLlMrMDMwURwZkBYnLcvkjo8TJQHV5JK4NaI1O79GlgvUq",
	"9sZx64XGb1VKZ8v1pIVlOhg6VL1UNYg39tcN2V83eT2oxVZrvU03RB6my2+r6HV7VX+SuHx+I0VBITS/",
	"kl7ceuNb0viWNGdb41vS+JY8e9+S+NDeNv8S/baJbsTMpVTFz0QP11R4w8kavSQA4CYkjHyoJbPfSRI/",
	"8XF8T6rQ9Tz9T7QFs6OkFu9U39+gMsZkDY3kyraPGBA6Mjbvg1Ch22fii6AheMv8ESohuJpfQmUgvtdC",
	"uS7lo6D3tFk/Bb2nJ8faNp6T6bUuvEqL/RYqo0tUqIqvxoehHrws9t1kcRo+waC5rLoDCv0aKm8AWaPZ",
	"Ac0OeEaeDhvmlGt7PVTeTUmtyjsq4lY3Yz61NF8x/O8TMi/ZedxOI//agCzCQR07IlhTVZV5lGPcoDI/",
	"05rT1OZnqV4a1XmjOm9U543qvFGdP3vVeerg3jb1efbWiW5KwyVVRY2uX5WVbj5ZU/+wIZW63kWZWl2M",
	"Asqyj6Var0rf81SvZxawGEW1ea76qvaI/aqEQVkrM4TKys4sWDavbS/u8Zko2jN43jJley08V1O614Lk",
	"e8SWxWOiEtdxsnkFfLa3J8fhtp6o+bVfz3EqohNXFF/j8ma08j8yoqtsvQSn76TsEbcObu6BytBgfJQh",
	"P1VgKwsaXnvyiDxXPZCClEho52lzYRoTnfl3Q8yEv0KFgdmajlMvzPw7kZROS79w4/segqSAUpV3sAqt",
	"MnVePWoNzafoDeI2cxQ/BrMuaNpGRj2eTO080LZixbNAbWcyHVMRILbqmdAfGk6DftSYDDarHQqZL41K",
	"q1FpNSqtRqXVqLS2QKWVPbu37bI03D3RnWm+sCrotgjoDytef7JK5tuG9FqZXspUWz59LIVWDcKep04r",
	"v36lGFqK/aqt3eJIrMqJyTr5oVRWJ/hUYWbzei1LV89EoZXH85bptJbAczXNVnU0vkdsBSgmuiafbl6f",
	"Jft4+gft23uMGle7yj1c6F9a5/QTVWoirnGzWwp8Fm87vosaLsPucLrcBilyP62zP2SdNXEHG46zZemq",
	"2R5/0O1hw+Z6mHA6lhgaL3wPO/eVVaBAbbNLXg2bXsT3h7KIKHEvpNHUL40etNGDNnrQRg/a6EG3QA+a",
	"Orm3TguavXfiqzP9oZruM3Xz3Zfde0qFlqVgI1xYuhOL4jMZgLzxH00NWkrdM9V+VgbPMvxWfY++ugBU",
	"Oq9arJcubmT7exwVaHmvz0UburUnowUYBWdjNR1oPXi+R2x5bP53KkK37iA1rfGaTtEgJBsQWQch0fmG",
	"QUgaYbURVhthtRFWG2F1e4TVQUi2VVKVN072juS/LnFBriJjDEJSeE2mmcgKF2XGkiGpBEFIHs21oqjL",
	"ZyZUbBmCTWAwY7iuLFEGQ43DrInB/2oRgs/VdskPqx6McTiK1cNXXKpPmqv/Zdx6Iy404kIjLjTiQiMu",
	"PHtxIT60t01Y0G+b6EbMXEpVQlXY32NnGpM1oh83ZMSKmi/z34+ofizzVRW6nqcBS1swO0pq8U7rDEOR",
	"IUXW0EiuzMjHgNCRsXmBskK3z0So1BC8ZRJlJQSvGnwi0+J7xJZBYSLq6T1tVqjUe3pyrG3jOZle69UO",
	"yehJfzXxUpXOo1FGG9BEyyT8QCNYNoJlI1g2gmUjWK4oWOYm4Z0Hp+KQwVO+IbAkhvkMetqqiRA0YpFU",
	"eBc680PP5YsoKdWYTUMcmSveXI3AN2slKhV9RrRhj5mzablb3WjbJnUnF3HEKKTu6ioSt1yikktflpY/",
	"bUjWlo2XSdoKUI8kZ5fT9Dyl7HihbKiowTzWl68rIUqWjgmtIdMIACQ42LxUXdLlM5GoY6xumTxditVq",
	"snQl0L1HbBnERbJt0sdmZeiknyfH1vadgPoaF1yKxdmSKqEpzqpdjqfm+XodSFme5UaL0tz4xtzuZYgv",
	"zI5UCfDKv2Etd/aG36WXdNng/w+D/wwoV+F4OR1u6FXOwB6XBztSRbIfoAXnv93d/E4aqsKaGnUY91ey",
	"mRolUqNEWkqJxEXmmU8Z6J0CBoMpYhFBMXY7oDcBxGcRK43ctqJPkJYUHBGwM8W3iEjfVTZDARDTAwR2",
	"6a5oydBKqjvAZpCBGbxFI9lQXCEmVBwgyOUTxWZo3ga4gzrtiH5MHC90+UTJvHEzFGDhzUgkiQsYIMKU",
	"DkqOjISeJ6nj/0oPL03cHWYzP+R7PCaGqo5tkOAFxfVRARLNcqx1OTTdPf9uy9nGv42xW0VbzxdIkLoN",
	"CxQRuvwC8YO41jLEXUbLYNMtY4bqbIpmzuvNuYZ8/tmGfP6tBvIVt1xrHUbEvBJl6yBnofpKZNYhITW7",
	"EiNSfS3i40k1lzqg6q6TRlLZnSGL1tkgzdJsYGm0XSRL2LN+8q8Vd5LKenEDqRiKtJDhOaIMzhdtgL4s",
	"kMPkrNwgcH3R+1+AFr4zA9dXJ0lBzjRT5PjEtTKjIcFfurxmrWwc66VLm0I+d2krOSdwjBSFj5pkRheu",
	"ts2mp0uFkTSbER7ryrOxXFrZE0gWj0mpJM4OsrUasbYRaxuxthFrm+VoxNpGrG3mvBFrG7G2EWsbsbYR",
	"a1dxVM0IWdvnspqXEu1ibgX3VdncONogpaJq5CKZJmNjXq3pbsr9WzPDeTxX1+qEPlen19yKrlt9sowv",
	"bF14Rl6RucHUcLfJYsiIqsdwnF2CkGfjTpvbD1vnWFtjP1R1sq2LZuGNuQqUE59YQ9ebdsM1dPkMPHK3",
	"96A2o6Hw9i/z060LSOUuWQ+SjfvucvizOjLmVq1hbQq9e+vtmRJP37pbJvKwfAyOZONuwUsQ0uy2/5bd",
	"ZkX6ugQJaS2s6l4sCtezwQ7TdRoLbGOBbSywjQW2WY7GAttYYJs5byywjQW2scA2FtjGAruCY3FaxNo6",
	"9+KchLiC9VXKXnVtr2kSNmR5TXdSZnfNDOSxrK7ViXyeNtfcSq5XUVLf3loXkLJibhiVNZtZ3BhwtHk7",
	"a20inomNNYf+LbOw1kB/NftqXfS+R2x56CaGTkO3m7WsGjp8ckhu71FsQsEKNtW6IBT16sGwsacugzuL",
	"fSe3Xg3DYrWk1tsnhXbUuttEVtw0p7Fh+2ltIpqd9cffWRZkrygKiEjAVQ2lzGgexSxtGmWoCVnfhKxv",
	"QtY3Iesbp4AtyIUmDuztU6+ytFI1uYSqKVQZKrzJIr0b25zelFXQlrJHVJGyrVSMMmRFQWX+Zxn9Zwl+",
	"Is0Vqyl8sGTVH0Ohae3u2agu2VYqLAtQWVVFWQIwoY1iS2si2aOoH9lz0Tmy7dM0FkKoVLdYgh6lpWGN",
	"CnGNMLKqN5q726gjLEZ4iVawBOCRsmS1+3fjaj5rdw3O/wA4T4FweR6VIQ/NEQvu96eBHy7ovudPq+rs",
	"4rpjXmksG8jvnKuo2Jk/pe95IU2jl//YPHhodBubefDQKIafVjG8aWWT4SzZNtWT+TiMjnfrSVpFLWU6",
	"rWsc1rKd/OcNqbDyHZUptEzjeywFVz1qn6e6y7i0VZC3NJtRXzW2IoZlO8aBVmbjzTCzYG/zarYVyHkm",
	"ajjj3tkypdzSe6eawm5F2L9HbDXMJ2o3GyWbVfbZen1yBG/3uW/DxcYOff4HdmqLl+ey2vsy+VIvZxIx",
	"U+00UmYjZTZSZiNlLi9lpo6TrRU0s4di7vA3nKr1xE116peyLYaOMpKJXmLTcqfeV3XRMzXWR5c+q9L8",
	"zAXQzDJXROQqHMkqkugK8M4ID5lxLyGSZuBnh+VjCqZLEvXcxNPM5tpWCXW5zVVXTl1hU+hSybI7wiQ6",
	"5kh6LJk11/HzEVu39cIowMhGbotF4E+wh5azjnLp+VI1UKK1UcVs9tGolUZ2bWTXRnb9b3g6M1ABbMQ7",
	"lBRbBaIzScbagQECkFI85RvoDrOZKC1j+WBCGSQOAthFhOEJRoFt4qOiVcMPbZI+bUp5CVv8nah2xQg8",
	"a6FYhDA77awhwNmayVl/7K+1EKhiWp2uJ+bV2knaTKynHnE5S4QowBNxFulcYUIpnfmh5/IbEH1hiLgx",
	"qVHREUkKB7xAgFwwCfw5mGEUwMCZ3aurYeLBKcBqYkKKXAA9n0xlez5BIxI9teyJyF1y0oEfgGTfyyB4",
	"hUX4vI6IDCiGWBswvW88JX6giZXZvTHz73pRMK/KF+N/9zzGu3bm342xNnkKgje+7yFIHtvDJuJGt9rH",
	"RmOpjWavNEe+hJ+Nglwtxt/gkKEKPIa3jeqqpr+NGueTeNxUoHgLfG6SJa6GxBVE2JU9b5ZBtcFVIhny",
	"sv43MeysaHx0H5y6JD1HP5xkR22zJ07dHbWUN84yWyHrebHEPrB6x2j0PKpXjtbv8/LL2cLbwY6PykxK",
	"8SO+NWBYNLUMiptnf8sD1fI8yracDQdW8lBw1V1W+JBwDZtMtvUUPNOGnyeuSFKzZ/8r92zhdtio1LSa",
	"62oF81+6ZIH7amMEbIyAjRGwMQI2RsDGCNgYARsjYGMEbIyAT2MEzDCk2/4EosgUaOTOl3sGUa4GMHZm",
	"9pF/JLNgurf6zyGeyjhYne7teBJRIOzaELqavLuOhxFLAt7st76S9isHxyKgPsUTiSUIe6bPJLbfgLj8",
	"llv2scSSG8XgDL8me6KBsMd+NPEsrYrbe60UYqUO11PVvLgittNGmnrobuyMK0G31GyRW9qGpathcFxp",
	"91U0O664+TLWlqfgwB7NCrkCYc2+/u/e12XbZK2i2p0ffPZ86I7naH4jdl4lg2S2Wv4o+EWVOBcFNPtj",
	"+kOTfanJvtRkX2qyLzWm9y3IvpQ5urdNQZ+/eaKr1HhZVVHHZ+7BitegrJ7+tCGVe6YTi4Y9M4zH0quX",
	"E/c81ei5lSvD0TKcWH1V+XJglNVzQ6osjGWxY8DS5lXftYl4Jmru9LRvn3a79k6opsteDsnvEVsexonS",
	"2ND5ZrXUhg6fHJ7bdzSbVn+d53Jd0bhAJjZIw40c3MjBjRzcyMGNHLxFcvDWSsAm2XcJqbf0hkuLSxsW",
	"ccvcyCKqH1u63T43MW3B7CipxTstL8yWYiwtiCwjuaaQ8XiyakG3z0w63V65tOScqyOLlgJRE0BWEzwf",
	"T+J8VqLmlvk9VYRYiWdTZXSJClXx1bgq1YOXxYchWZyGTzD4HlXdAYXeRZU3gKyxznt+w85AFbpt9sUf",
	"bF/kQFrAPz/EX/PPI6fYJ50Ei/KHqG5eyB+qFOOquJ62OV/4zJfzoVWIfrJX+uBTplXgf9oL99RrNK1C",
	"9JO9Ul9ufjId3lOG5lrdzBd7E5eBf4tdqUFXdaOf7JV+0Q4gVSm7WPZK57HGPlM1rWk2rJgzQ26oQjhE",
	"y6Z+s9fKZ1DTqtvTqxU0pEezN7VlinZfQtdl4h1qoizjplZOW0F7Zs83M+S9Y8fxQ8IysI9+LgDmEKjb",
	"6tL3sHOvI3Mov8gPhXUHITFUHISk9fDp4f8PAAD//5/hQrWcqgIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
