// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ListHosts
	// (GET /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceListHosts(ctx echo.Context, params HostServiceListHostsParams) error
	// CreateHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts)
	HostServiceCreateHost(ctx echo.Context) error
	// RegisterHost
	// (POST /edge-infra.orchestrator.apis/v2/hosts/register)
	HostServiceRegisterHost(ctx echo.Context) error
	// DeleteHost
	// (DELETE /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceDeleteHost(ctx echo.Context, resourceId string) error
	// GetHost
	// (GET /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceGetHost(ctx echo.Context, resourceId string) error
	// PatchHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServicePatchHost(ctx echo.Context, resourceId string) error
	// UpdateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id})
	HostServiceUpdateHost(ctx echo.Context, resourceId string) error
	// InvalidateHost
	// (PUT /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/invalidate)
	HostServiceInvalidateHost(ctx echo.Context, resourceId string, params HostServiceInvalidateHostParams) error
	// OnboardHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/onboard)
	HostServiceOnboardHost(ctx echo.Context, resourceId string) error
	// RegisterUpdateHost
	// (PATCH /edge-infra.orchestrator.apis/v2/hosts/{resource_id}/register)
	HostServiceRegisterUpdateHost(ctx echo.Context, resourceId string) error
	// GetHostsSummary
	// (GET /edge-infra.orchestrator.apis/v2/hosts_summary)
	HostServiceGetHostsSummary(ctx echo.Context, params HostServiceGetHostsSummaryParams) error
	// ListInstances
	// (GET /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceListInstances(ctx echo.Context, params InstanceServiceListInstancesParams) error
	// CreateInstance
	// (POST /edge-infra.orchestrator.apis/v2/instances)
	InstanceServiceCreateInstance(ctx echo.Context) error
	// DeleteInstance
	// (DELETE /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceDeleteInstance(ctx echo.Context, resourceId string) error
	// GetInstance
	// (GET /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceGetInstance(ctx echo.Context, resourceId string) error
	// PatchInstance
	// (PATCH /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServicePatchInstance(ctx echo.Context, resourceId string) error
	// UpdateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id})
	InstanceServiceUpdateInstance(ctx echo.Context, resourceId string) error
	// InvalidateInstance
	// (PUT /edge-infra.orchestrator.apis/v2/instances/{resource_id}/invalidate)
	InstanceServiceInvalidateInstance(ctx echo.Context, resourceId string) error
	// ListLocalAccounts
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceListLocalAccounts(ctx echo.Context, params LocalAccountServiceListLocalAccountsParams) error
	// CreateLocalAccount
	// (POST /edge-infra.orchestrator.apis/v2/localAccounts)
	LocalAccountServiceCreateLocalAccount(ctx echo.Context) error
	// DeleteLocalAccount
	// (DELETE /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceDeleteLocalAccount(ctx echo.Context, resourceId string) error
	// GetLocalAccount
	// (GET /edge-infra.orchestrator.apis/v2/localAccounts/{resource_id})
	LocalAccountServiceGetLocalAccount(ctx echo.Context, resourceId string) error
	// ListLocations
	// (GET /edge-infra.orchestrator.apis/v2/locations)
	LocationServiceListLocations(ctx echo.Context, params LocationServiceListLocationsParams) error
	// ListOperatingSystems
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceListOperatingSystems(ctx echo.Context, params OperatingSystemServiceListOperatingSystemsParams) error
	// CreateOperatingSystem
	// (POST /edge-infra.orchestrator.apis/v2/operating_systems)
	OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error
	// DeleteOperatingSystem
	// (DELETE /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context, resourceId string) error
	// GetOperatingSystem
	// (GET /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceGetOperatingSystem(ctx echo.Context, resourceId string) error
	// PatchOperatingSystem
	// (PATCH /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServicePatchOperatingSystem(ctx echo.Context, resourceId string) error
	// UpdateOperatingSystem
	// (PUT /edge-infra.orchestrator.apis/v2/operating_systems/{resource_id})
	OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context, resourceId string) error
	// ListOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run)
	OSUpdateRunListOSUpdateRun(ctx echo.Context, params OSUpdateRunListOSUpdateRunParams) error
	// DeleteOSUpdateRun
	// (DELETE /edge-infra.orchestrator.apis/v2/os_update_run/{resource_id})
	OSUpdateRunDeleteOSUpdateRun(ctx echo.Context, resourceId string) error
	// GetOSUpdateRun
	// (GET /edge-infra.orchestrator.apis/v2/os_update_run/{resource_id})
	OSUpdateRunGetOSUpdateRun(ctx echo.Context, resourceId string) error
	// ListProviders
	// (GET /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceListProviders(ctx echo.Context, params ProviderServiceListProvidersParams) error
	// CreateProvider
	// (POST /edge-infra.orchestrator.apis/v2/providers)
	ProviderServiceCreateProvider(ctx echo.Context) error
	// DeleteProvider
	// (DELETE /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceDeleteProvider(ctx echo.Context, resourceId string) error
	// GetProvider
	// (GET /edge-infra.orchestrator.apis/v2/providers/{resource_id})
	ProviderServiceGetProvider(ctx echo.Context, resourceId string) error
	// ListRegions
	// (GET /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceListRegions(ctx echo.Context, params RegionServiceListRegionsParams) error
	// CreateRegion
	// (POST /edge-infra.orchestrator.apis/v2/regions)
	RegionServiceCreateRegion(ctx echo.Context) error
	// DeleteRegion
	// (DELETE /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceDeleteRegion(ctx echo.Context, resourceId string) error
	// GetRegion
	// (GET /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceGetRegion(ctx echo.Context, resourceId string) error
	// PatchRegion
	// (PATCH /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServicePatchRegion(ctx echo.Context, resourceId string) error
	// UpdateRegion
	// (PUT /edge-infra.orchestrator.apis/v2/regions/{resource_id})
	RegionServiceUpdateRegion(ctx echo.Context, resourceId string) error
	// ListSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules)
	ScheduleServiceListSchedules(ctx echo.Context, params ScheduleServiceListSchedulesParams) error
	// ListRepeatedSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceListRepeatedSchedules(ctx echo.Context, params ScheduleServiceListRepeatedSchedulesParams) error
	// CreateRepeatedSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/repeated)
	ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error
	// DeleteRepeatedSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context, resourceId string) error
	// GetRepeatedSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceGetRepeatedSchedule(ctx echo.Context, resourceId string) error
	// PatchRepeatedSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServicePatchRepeatedSchedule(ctx echo.Context, resourceId string) error
	// UpdateRepeatedSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/repeated/{resource_id})
	ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context, resourceId string) error
	// ListSingleSchedules
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceListSingleSchedules(ctx echo.Context, params ScheduleServiceListSingleSchedulesParams) error
	// CreateSingleSchedule
	// (POST /edge-infra.orchestrator.apis/v2/schedules/single)
	ScheduleServiceCreateSingleSchedule(ctx echo.Context) error
	// DeleteSingleSchedule
	// (DELETE /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceDeleteSingleSchedule(ctx echo.Context, resourceId string) error
	// GetSingleSchedule
	// (GET /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceGetSingleSchedule(ctx echo.Context, resourceId string) error
	// PatchSingleSchedule
	// (PATCH /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServicePatchSingleSchedule(ctx echo.Context, resourceId string) error
	// UpdateSingleSchedule
	// (PUT /edge-infra.orchestrator.apis/v2/schedules/single/{resource_id})
	ScheduleServiceUpdateSingleSchedule(ctx echo.Context, resourceId string) error
	// ListSites
	// (GET /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceListSites(ctx echo.Context, params SiteServiceListSitesParams) error
	// CreateSite
	// (POST /edge-infra.orchestrator.apis/v2/sites)
	SiteServiceCreateSite(ctx echo.Context) error
	// DeleteSite
	// (DELETE /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceDeleteSite(ctx echo.Context, resourceId string) error
	// GetSite
	// (GET /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceGetSite(ctx echo.Context, resourceId string) error
	// PatchSite
	// (PATCH /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServicePatchSite(ctx echo.Context, resourceId string) error
	// UpdateSite
	// (PUT /edge-infra.orchestrator.apis/v2/sites/{resource_id})
	SiteServiceUpdateSite(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context, params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams) error
	// CreateTelemetryLogsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/logs)
	TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error
	// DeleteTelemetryLogsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/logs/{resource_id})
	TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsGroups
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context, params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams) error
	// CreateTelemetryMetricsGroup
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics)
	TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error
	// DeleteTelemetryMetricsGroup
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsGroup
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/{resource_id})
	TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context, resourceId string) error
	// ListTelemetryLogsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context, params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams) error
	// CreateTelemetryLogsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs)
	TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error
	// DeleteTelemetryLogsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryLogsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryLogsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryLogsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/{resource_id})
	TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context, resourceId string) error
	// ListTelemetryMetricsProfiles
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context, params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams) error
	// CreateTelemetryMetricsProfile
	// (POST /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics)
	TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error
	// DeleteTelemetryMetricsProfile
	// (DELETE /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// GetTelemetryMetricsProfile
	// (GET /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// PatchTelemetryMetricsProfile
	// (PATCH /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// UpdateTelemetryMetricsProfile
	// (PUT /edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/{resource_id})
	TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context, resourceId string) error
	// ListWorkloadMembers
	// (GET /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceListWorkloadMembers(ctx echo.Context, params WorkloadMemberServiceListWorkloadMembersParams) error
	// CreateWorkloadMember
	// (POST /edge-infra.orchestrator.apis/v2/workload_members)
	WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error
	// DeleteWorkloadMember
	// (DELETE /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context, resourceId string) error
	// GetWorkloadMember
	// (GET /edge-infra.orchestrator.apis/v2/workload_members/{resource_id})
	WorkloadMemberServiceGetWorkloadMember(ctx echo.Context, resourceId string) error
	// ListWorkloads
	// (GET /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceListWorkloads(ctx echo.Context, params WorkloadServiceListWorkloadsParams) error
	// CreateWorkload
	// (POST /edge-infra.orchestrator.apis/v2/workloads)
	WorkloadServiceCreateWorkload(ctx echo.Context) error
	// DeleteWorkload
	// (DELETE /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceDeleteWorkload(ctx echo.Context, resourceId string) error
	// GetWorkload
	// (GET /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceGetWorkload(ctx echo.Context, resourceId string) error
	// PatchWorkload
	// (PATCH /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServicePatchWorkload(ctx echo.Context, resourceId string) error
	// UpdateWorkload
	// (PUT /edge-infra.orchestrator.apis/v2/workloads/{resource_id})
	WorkloadServiceUpdateWorkload(ctx echo.Context, resourceId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// HostServiceListHosts converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceListHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceListHostsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceListHosts(ctx, params)
	return err
}

// HostServiceCreateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceCreateHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceCreateHost(ctx)
	return err
}

// HostServiceRegisterHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterHost(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterHost(ctx)
	return err
}

// HostServiceDeleteHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceDeleteHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceDeleteHost(ctx, resourceId)
	return err
}

// HostServiceGetHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHost(ctx, resourceId)
	return err
}

// HostServicePatchHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServicePatchHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServicePatchHost(ctx, resourceId)
	return err
}

// HostServiceUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceUpdateHost(ctx, resourceId)
	return err
}

// HostServiceInvalidateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceInvalidateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceInvalidateHostParams
	// ------------- Optional query parameter "note" -------------

	err = runtime.BindQueryParameter("form", true, false, "note", ctx.QueryParams(), &params.Note)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter note: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceInvalidateHost(ctx, resourceId, params)
	return err
}

// HostServiceOnboardHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceOnboardHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceOnboardHost(ctx, resourceId)
	return err
}

// HostServiceRegisterUpdateHost converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceRegisterUpdateHost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceRegisterUpdateHost(ctx, resourceId)
	return err
}

// HostServiceGetHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) HostServiceGetHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params HostServiceGetHostsSummaryParams
	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.HostServiceGetHostsSummary(ctx, params)
	return err
}

// InstanceServiceListInstances converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceListInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params InstanceServiceListInstancesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceListInstances(ctx, params)
	return err
}

// InstanceServiceCreateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceCreateInstance(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceCreateInstance(ctx)
	return err
}

// InstanceServiceDeleteInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceDeleteInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceDeleteInstance(ctx, resourceId)
	return err
}

// InstanceServiceGetInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceGetInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceGetInstance(ctx, resourceId)
	return err
}

// InstanceServicePatchInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServicePatchInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServicePatchInstance(ctx, resourceId)
	return err
}

// InstanceServiceUpdateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceUpdateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceUpdateInstance(ctx, resourceId)
	return err
}

// InstanceServiceInvalidateInstance converts echo context to params.
func (w *ServerInterfaceWrapper) InstanceServiceInvalidateInstance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.InstanceServiceInvalidateInstance(ctx, resourceId)
	return err
}

// LocalAccountServiceListLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceListLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocalAccountServiceListLocalAccountsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceListLocalAccounts(ctx, params)
	return err
}

// LocalAccountServiceCreateLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceCreateLocalAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceCreateLocalAccount(ctx)
	return err
}

// LocalAccountServiceDeleteLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceDeleteLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceDeleteLocalAccount(ctx, resourceId)
	return err
}

// LocalAccountServiceGetLocalAccount converts echo context to params.
func (w *ServerInterfaceWrapper) LocalAccountServiceGetLocalAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocalAccountServiceGetLocalAccount(ctx, resourceId)
	return err
}

// LocationServiceListLocations converts echo context to params.
func (w *ServerInterfaceWrapper) LocationServiceListLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LocationServiceListLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.LocationServiceListLocations(ctx, params)
	return err
}

// OperatingSystemServiceListOperatingSystems converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceListOperatingSystems(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatingSystemServiceListOperatingSystemsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceListOperatingSystems(ctx, params)
	return err
}

// OperatingSystemServiceCreateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceCreateOperatingSystem(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceCreateOperatingSystem(ctx)
	return err
}

// OperatingSystemServiceDeleteOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceDeleteOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceDeleteOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceGetOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceGetOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceGetOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServicePatchOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServicePatchOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServicePatchOperatingSystem(ctx, resourceId)
	return err
}

// OperatingSystemServiceUpdateOperatingSystem converts echo context to params.
func (w *ServerInterfaceWrapper) OperatingSystemServiceUpdateOperatingSystem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OperatingSystemServiceUpdateOperatingSystem(ctx, resourceId)
	return err
}

// OSUpdateRunListOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunListOSUpdateRun(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OSUpdateRunListOSUpdateRunParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunListOSUpdateRun(ctx, params)
	return err
}

// OSUpdateRunDeleteOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunDeleteOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunDeleteOSUpdateRun(ctx, resourceId)
	return err
}

// OSUpdateRunGetOSUpdateRun converts echo context to params.
func (w *ServerInterfaceWrapper) OSUpdateRunGetOSUpdateRun(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.OSUpdateRunGetOSUpdateRun(ctx, resourceId)
	return err
}

// ProviderServiceListProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceListProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProviderServiceListProvidersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceListProviders(ctx, params)
	return err
}

// ProviderServiceCreateProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceCreateProvider(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceCreateProvider(ctx)
	return err
}

// ProviderServiceDeleteProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceDeleteProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceDeleteProvider(ctx, resourceId)
	return err
}

// ProviderServiceGetProvider converts echo context to params.
func (w *ServerInterfaceWrapper) ProviderServiceGetProvider(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProviderServiceGetProvider(ctx, resourceId)
	return err
}

// RegionServiceListRegions converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceListRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RegionServiceListRegionsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceListRegions(ctx, params)
	return err
}

// RegionServiceCreateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceCreateRegion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceCreateRegion(ctx)
	return err
}

// RegionServiceDeleteRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceDeleteRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceDeleteRegion(ctx, resourceId)
	return err
}

// RegionServiceGetRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceGetRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceGetRegion(ctx, resourceId)
	return err
}

// RegionServicePatchRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServicePatchRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServicePatchRegion(ctx, resourceId)
	return err
}

// RegionServiceUpdateRegion converts echo context to params.
func (w *ServerInterfaceWrapper) RegionServiceUpdateRegion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RegionServiceUpdateRegion(ctx, resourceId)
	return err
}

// ScheduleServiceListSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSchedules(ctx, params)
	return err
}

// ScheduleServiceListRepeatedSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListRepeatedSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListRepeatedSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListRepeatedSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateRepeatedSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateRepeatedSchedule(ctx)
	return err
}

// ScheduleServiceDeleteRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateRepeatedSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateRepeatedSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateRepeatedSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceListSingleSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceListSingleSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ScheduleServiceListSingleSchedulesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "hostId" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostId", ctx.QueryParams(), &params.HostId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "unixEpoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unixEpoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unixEpoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceListSingleSchedules(ctx, params)
	return err
}

// ScheduleServiceCreateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceCreateSingleSchedule(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceCreateSingleSchedule(ctx)
	return err
}

// ScheduleServiceDeleteSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceDeleteSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceDeleteSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceGetSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceGetSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceGetSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServicePatchSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServicePatchSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServicePatchSingleSchedule(ctx, resourceId)
	return err
}

// ScheduleServiceUpdateSingleSchedule converts echo context to params.
func (w *ServerInterfaceWrapper) ScheduleServiceUpdateSingleSchedule(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ScheduleServiceUpdateSingleSchedule(ctx, resourceId)
	return err
}

// SiteServiceListSites converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceListSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SiteServiceListSitesParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceListSites(ctx, params)
	return err
}

// SiteServiceCreateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceCreateSite(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceCreateSite(ctx)
	return err
}

// SiteServiceDeleteSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceDeleteSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceDeleteSite(ctx, resourceId)
	return err
}

// SiteServiceGetSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceGetSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceGetSite(ctx, resourceId)
	return err
}

// SiteServicePatchSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServicePatchSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServicePatchSite(ctx, resourceId)
	return err
}

// SiteServiceUpdateSite converts echo context to params.
func (w *ServerInterfaceWrapper) SiteServiceUpdateSite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SiteServiceUpdateSite(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceListTelemetryLogsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsGroupServiceListTelemetryLogsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceListTelemetryLogsGroups(ctx, params)
	return err
}

// TelemetryLogsGroupServiceCreateTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceCreateTelemetryLogsGroup(ctx)
	return err
}

// TelemetryLogsGroupServiceDeleteTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsGroupServiceGetTelemetryLogsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsGroupServiceGetTelemetryLogsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceListTelemetryMetricsGroups converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsGroupServiceListTelemetryMetricsGroupsParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceListTelemetryMetricsGroups(ctx, params)
	return err
}

// TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup(ctx)
	return err
}

// TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryMetricsGroupServiceGetTelemetryMetricsGroup converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceListTelemetryLogsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryLogsProfileServiceListTelemetryLogsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceListTelemetryLogsProfiles(ctx, params)
	return err
}

// TelemetryLogsProfileServiceCreateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceCreateTelemetryLogsProfile(ctx)
	return err
}

// TelemetryLogsProfileServiceDeleteTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceGetTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceGetTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServicePatchTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServicePatchTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryLogsProfileServiceUpdateTelemetryLogsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceListTelemetryMetricsProfiles converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params TelemetryMetricsProfileServiceListTelemetryMetricsProfilesParams
	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles(ctx, params)
	return err
}

// TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile(ctx)
	return err
}

// TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceGetTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServicePatchTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile converts echo context to params.
func (w *ServerInterfaceWrapper) TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile(ctx, resourceId)
	return err
}

// WorkloadMemberServiceListWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceListWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadMemberServiceListWorkloadMembersParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceListWorkloadMembers(ctx, params)
	return err
}

// WorkloadMemberServiceCreateWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceCreateWorkloadMember(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceCreateWorkloadMember(ctx)
	return err
}

// WorkloadMemberServiceDeleteWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceDeleteWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceDeleteWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadMemberServiceGetWorkloadMember converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadMemberServiceGetWorkloadMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadMemberServiceGetWorkloadMember(ctx, resourceId)
	return err
}

// WorkloadServiceListWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceListWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params WorkloadServiceListWorkloadsParams
	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceListWorkloads(ctx, params)
	return err
}

// WorkloadServiceCreateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceCreateWorkload(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceCreateWorkload(ctx)
	return err
}

// WorkloadServiceDeleteWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceDeleteWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceDeleteWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceGetWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceGetWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceGetWorkload(ctx, resourceId)
	return err
}

// WorkloadServicePatchWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServicePatchWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServicePatchWorkload(ctx, resourceId)
	return err
}

// WorkloadServiceUpdateWorkload converts echo context to params.
func (w *ServerInterfaceWrapper) WorkloadServiceUpdateWorkload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resource_id" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resource_id", ctx.Param("resource_id"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WorkloadServiceUpdateWorkload(ctx, resourceId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceListHosts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts", wrapper.HostServiceCreateHost)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/register", wrapper.HostServiceRegisterHost)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceDeleteHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceGetHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServicePatchHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id", wrapper.HostServiceUpdateHost)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/invalidate", wrapper.HostServiceInvalidateHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/onboard", wrapper.HostServiceOnboardHost)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/hosts/:resource_id/register", wrapper.HostServiceRegisterUpdateHost)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/hosts_summary", wrapper.HostServiceGetHostsSummary)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceListInstances)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/instances", wrapper.InstanceServiceCreateInstance)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceDeleteInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceGetInstance)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServicePatchInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id", wrapper.InstanceServiceUpdateInstance)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/instances/:resource_id/invalidate", wrapper.InstanceServiceInvalidateInstance)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceListLocalAccounts)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts", wrapper.LocalAccountServiceCreateLocalAccount)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceDeleteLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/localAccounts/:resource_id", wrapper.LocalAccountServiceGetLocalAccount)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/locations", wrapper.LocationServiceListLocations)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceListOperatingSystems)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems", wrapper.OperatingSystemServiceCreateOperatingSystem)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceDeleteOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceGetOperatingSystem)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServicePatchOperatingSystem)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/operating_systems/:resource_id", wrapper.OperatingSystemServiceUpdateOperatingSystem)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run", wrapper.OSUpdateRunListOSUpdateRun)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resource_id", wrapper.OSUpdateRunDeleteOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/os_update_run/:resource_id", wrapper.OSUpdateRunGetOSUpdateRun)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceListProviders)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/providers", wrapper.ProviderServiceCreateProvider)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceDeleteProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/providers/:resource_id", wrapper.ProviderServiceGetProvider)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceListRegions)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/regions", wrapper.RegionServiceCreateRegion)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceDeleteRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceGetRegion)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServicePatchRegion)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/regions/:resource_id", wrapper.RegionServiceUpdateRegion)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules", wrapper.ScheduleServiceListSchedules)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceListRepeatedSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated", wrapper.ScheduleServiceCreateRepeatedSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceDeleteRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceGetRepeatedSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServicePatchRepeatedSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/repeated/:resource_id", wrapper.ScheduleServiceUpdateRepeatedSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceListSingleSchedules)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single", wrapper.ScheduleServiceCreateSingleSchedule)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceDeleteSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceGetSingleSchedule)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServicePatchSingleSchedule)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/schedules/single/:resource_id", wrapper.ScheduleServiceUpdateSingleSchedule)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceListSites)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/sites", wrapper.SiteServiceCreateSite)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceDeleteSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceGetSite)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServicePatchSite)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/sites/:resource_id", wrapper.SiteServiceUpdateSite)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceListTelemetryLogsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs", wrapper.TelemetryLogsGroupServiceCreateTelemetryLogsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceDeleteTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/logs/:resource_id", wrapper.TelemetryLogsGroupServiceGetTelemetryLogsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceListTelemetryMetricsGroups)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics", wrapper.TelemetryMetricsGroupServiceCreateTelemetryMetricsGroup)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceDeleteTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/groups/metrics/:resource_id", wrapper.TelemetryMetricsGroupServiceGetTelemetryMetricsGroup)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceListTelemetryLogsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs", wrapper.TelemetryLogsProfileServiceCreateTelemetryLogsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceDeleteTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceGetTelemetryLogsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServicePatchTelemetryLogsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/logs/:resource_id", wrapper.TelemetryLogsProfileServiceUpdateTelemetryLogsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceListTelemetryMetricsProfiles)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics", wrapper.TelemetryMetricsProfileServiceCreateTelemetryMetricsProfile)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceDeleteTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceGetTelemetryMetricsProfile)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServicePatchTelemetryMetricsProfile)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/telemetry/profiles/metrics/:resource_id", wrapper.TelemetryMetricsProfileServiceUpdateTelemetryMetricsProfile)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceListWorkloadMembers)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members", wrapper.WorkloadMemberServiceCreateWorkloadMember)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceDeleteWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workload_members/:resource_id", wrapper.WorkloadMemberServiceGetWorkloadMember)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceListWorkloads)
	router.POST(baseURL+"/edge-infra.orchestrator.apis/v2/workloads", wrapper.WorkloadServiceCreateWorkload)
	router.DELETE(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceDeleteWorkload)
	router.GET(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceGetWorkload)
	router.PATCH(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServicePatchWorkload)
	router.PUT(baseURL+"/edge-infra.orchestrator.apis/v2/workloads/:resource_id", wrapper.WorkloadServiceUpdateWorkload)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1SDUmaY/lD8PQtJ6/PT4/wIAAP//qWd+cSiBAgA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
