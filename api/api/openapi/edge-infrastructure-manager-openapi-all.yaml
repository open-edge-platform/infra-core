---
# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
# Generated file do not edit !!!
openapi: 3.0.2
info:
  title: Edge Infrastructure Manager
  version: 0.1.0-dev
  description: Edge Infrastructure Manager API
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: '{apiRoot}/edge-infra.orchestrator.apis/v1'
    variables:
      apiRoot:
        default: 'http://edge-infra.example.intel.com'
        description: Defines the Edge Infrastructure Manager API entry point
paths:
  /regions:
    get:
      description: Gets all region objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details.'
          examples:
            example1:
              value: parentRegion.resourceId="region-3b382a11"
              summary: Through the region's parent region ID.
            example2:
              value: name="region name example"
              summary: Through the region name.
            example3:
              value: 'metadata=''{"key":"exampleKey","value":"exampleValue"}'''
              summary: Through the metadata.
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: parent
          deprecated: true
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$|^null$'
          description: 'The parent region ID that the region belongs to. If not specified, returns all regions. If specified, returns the regions that have the specified parent applied to them. If null, returns all the regions without a parent.'
        - in: query
          name: showTotalSites
          description: Indicates if the region identified by the filter needs to be returned with the field totalSites filled.
          schema:
            type: boolean
      tags:
        - Region
      responses:
        '200':
          description: Array of all region objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionsList'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a region.
      tags:
        - Region
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
      responses:
        '201':
          description: The region was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
          headers:
            Location:
              description: Contains the URI of the created region.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
  /sites:
    get:
      description: Gets all site objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details.'
          examples:
            example1:
              value: region.resourceId="region-3b382a11"
              summary: Through site's region ID
            example2:
              value: name="site name example"
              summary: Through site name
            example3:
              value: 'metadata=''{"key":"exampleKey","value":"exampleValue"}'''
              summary: Through metadata
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: regionID
          deprecated: true
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$|^null$'
          description: 'The region ID that the sites belong to. If not specified, returns all sites (given the other query params). If specified, returns the sites that have the specified region ID applied to them. If null, returns all sites without a region ID.'
        - in: query
          name: ouID
          deprecated: true
          schema:
            type: string
            pattern: '^ou-[0-9a-f]{8}$|^null$'
          description: 'The OUID that the sites belong to. If not specified, returns all sites (given the other query parameters). If specified, returns the sites that have the specified OUID applied to them. If null, returns all sites without an OUID.'
      tags:
        - Site
      responses:
        '200':
          description: Array of all site objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SitesList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a site.
      tags:
        - Site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        '201':
          description: The site was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
          headers:
            Location:
              description: Contains the URI of the created site.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/sites/{siteID}':
    parameters:
      - name: siteID
        schema:
          type: string
          pattern: '^site-[0-9a-f]{8}$'
        description: The unique site identifier.
        in: path
        required: true
    get:
      description: Gets a site.
      tags:
        - Site
      responses:
        '200':
          description: The requested site.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a site.
      tags:
        - Site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        '200':
          description: The site was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a site.
      tags:
        - Site
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        '200':
          description: The site was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Delete a site
      tags:
        - Site
      responses:
        '204':
          description: The site was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/regions/{regionID}':
    parameters:
      - name: regionID
        schema:
          type: string
          pattern: '^region-[0-9a-f]{8}$'
        description: The unique region identifier
        in: path
        required: true
    get:
      description: Gets a region.
      tags:
        - Region
      responses:
        '200':
          description: The requested region.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
    put:
      description: Updates a region.
      tags:
        - Region
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
      responses:
        '200':
          description: The region was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
    patch:
      description: Partially updates a region.
      tags:
        - Region
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Region'
      responses:
        '200':
          description: The region was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Region'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
    delete:
      description: Deletes a region.
      tags:
        - Region
      responses:
        '204':
          description: The region was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /locations:
    get:
      description: Gets a list of location node objects.
      parameters:
        - in: query
          name: name
          schema:
            type: string
            maxLength: 20
            pattern: '^[a-zA-Z-_0-9./: ]+$'
          description: 'The name of the resource to be queried; it can be a region and/or site name, if the query parameters below are stated.'
        - in: query
          name: showSites
          description: Indicates if the filter will be applied on the site resources.
          schema:
            type: boolean
        - in: query
          name: showRegions
          description: Indicates if the filter will be applied on the region resources.
          schema:
            type: boolean
      tags:
        - Location
      responses:
        '200':
          description: 'Array of the location node objects containing the resources that match the query name parameter. For each type of location, the maximum amount of resources to be returned is 20.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationNodeList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /ous:
    get:
      description: Gets all OU objects
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: parent
          deprecated: true
          schema:
            type: string
            pattern: '^ou-[0-9a-f]{8}$|^null$'
          description: 'The parent OUID that the OUs belong to. If not specified, returns all OUs. If specified, returns the OUs that have the specified parent applied to them. If null, returns all OUs without a parent.'
      tags:
        - OU
      responses:
        '200':
          description: Array of all OU objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OUsList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates an OU.
      tags:
        - OU
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OU'
      responses:
        '201':
          description: The OU was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OU'
          headers:
            Location:
              description: Contains the URI of the created OU.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/ous/{ouID}':
    parameters:
      - name: ouID
        schema:
          type: string
          pattern: '^ou-[0-9a-f]{8}$'
        description: The unique OU identifier.
        in: path
        required: true
    get:
      description: Gets an OU.
      tags:
        - OU
      responses:
        '200':
          description: The requested OU.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OU'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates an OU.
      tags:
        - OU
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OU'
      responses:
        '200':
          description: The OU was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OU'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates an OU.
      tags:
        - OU
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OU'
      responses:
        '200':
          description: The OU was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OU'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes an OU.
      tags:
        - OU
      responses:
        '204':
          description: The OU was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /compute:
    get:
      description: Gets a compute object
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
          examples:
            example1:
              value: site.resourceId="site-3b382a11"
              summary: through Host's Site-Id
            example2:
              value: 'metadata=''{"key":"exampleKey","value":"exampleValue"}'''
              summary: through Metadata
            example3:
              value: serialNumber="xxxxx"
              summary: through Serial Number
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: siteID
          deprecated: true
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$|^null$'
          description: 'Returns only the compute elements that are assigned with the given site ID. If equals to ''null'', then it returns all the hosts not associated with any site.'
        - in: query
          name: instanceID
          deprecated: true
          schema:
            type: string
            pattern: '^inst-[0-9a-f]{8}$|^null$'
          description: 'Returns only the compute elements that are assigned to the given instanceID. If equals to ''null'', then it returns all the hosts not associated with any instance.'
        - in: query
          name: uuid
          deprecated: true
          schema:
            type: string
            maxLength: 36
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
          description: 'Returns the compute elements associated with the given UUID. UUID field cannot be null, if specified needs to be filled.'
        - in: query
          name: metadata
          deprecated: true
          description: Filters the metadata associated with the compute element. Values are expected to be in the form of 'key=value'.
          schema:
            type: array
            maxItems: 100
            items:
              type: string
              pattern: '^[a-zA-Z-_0-9. ]+=[a-zA-Z-_0-9. ]+$'
        - in: query
          name: detail
          description: 'Indicates if compute elements identified by the filter need to be returned with all their respective child resources, e.g., USBs, Interfaces, Storages.'
          deprecated: true
          schema:
            type: boolean
      tags:
        - Compute
      responses:
        '200':
          description: A compute object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /compute/hosts:
    get:
      description: Gets all host objects
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
          examples:
            example1:
              value: site.resourceId="site-3b382a11"
              summary: Through the host's site ID
            example2:
              value: 'metadata=''{"key":"exampleKey","value":"exampleValue"}'''
              summary: Through the metadata
            example3:
              value: serialNumber="xxxxx"
              summary: Through the serial number
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: siteID
          deprecated: true
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$|^null$'
          description: 'Returns only the hosts that are assigned with the given site ID. If equals to ''null'', then it returns all the hosts not associated with any site.'
        - in: query
          name: instanceID
          deprecated: true
          schema:
            type: string
            pattern: '^inst-[0-9a-f]{8}$|^null$'
          description: 'Returns only the hosts that are assigned to the given instanceID. If equals to ''null'', then it returns all the hosts not associated with any instance.'
        - in: query
          name: uuid
          deprecated: true
          schema:
            type: string
            maxLength: 36
            pattern: '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}'
          description: 'Returns the host associated with the given UUID. UUID field cannot be null, if specified needs to be filled.'
        - in: query
          name: metadata
          description: Filters the metadata associated with the Host. Values are expected to be in the form 'key=value'.
          schema:
            type: array
            maxItems: 100
            items:
              type: string
              pattern: '^[a-zA-Z-_0-9. ]+=[a-zA-Z-_0-9. ]+$'
        - in: query
          name: detail
          description: 'Indicates if the host identified by the filter needs to be returned with all their respective child resources, e.g., USBs, interfaces, and storages.'
          deprecated: true
          schema:
            type: boolean
      tags:
        - Host
      responses:
        '200':
          description: Array of all host objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a compute host.
      tags:
        - Host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Host'
      responses:
        '201':
          description: The host was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          headers:
            Location:
              description: Contains the URI of the created host.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /compute/hosts/summary:
    get:
      description: Gets the summary of host objects.
      parameters:
        - in: query
          name: siteID
          deprecated: true
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$'
            deprecated: true
          description: 'The site ID the hosts belong to. If not specified, returns the summary of all hosts. If specified, returns the summary of hosts that have the given site ID applied to them.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
          examples:
            example1:
              value: site.resourceId="site-3b382a11"
              summary: Through the host's site ID
            example2:
              value: 'metadata=''{"key":"exampleKey","value":"exampleValue"}'''
              summary: Through the metadata
            example3:
              value: serialNumber="xxxxx"
              summary: Through the serial number
      tags:
        - Host
      responses:
        '200':
          description: 'A summary of host objects associated with the given site ID. '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostsSummary'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /compute/hosts/register:
    post:
      description: Registers a host by providing unique identifiers.
      tags:
        - Host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRegisterInfo'
      responses:
        '201':
          description: The host was registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
          headers:
            Location:
              description: Contains the URI of the registered host.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/compute/hosts/{hostID}':
    parameters:
      - name: hostID
        schema:
          type: string
          pattern: '^host-[0-9a-f]{8}$'
        description: The unique host identifier
        in: path
        required: true
    get:
      description: Queries a host through the host ID.
      tags:
        - Host
      responses:
        '200':
          description: The requested instance based on it's ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a host.
      tags:
        - Host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Host'
              properties:
                uuid:
                  deprecated: true
      responses:
        '200':
          description: The host was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a host.
      tags:
        - Host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Host'
              properties:
                uuid:
                  deprecated: true
      responses:
        '200':
          description: The host was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Host'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a host.
      tags:
        - Host
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostOperationWithNote'
      responses:
        '204':
          description: The host was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/compute/hosts/{hostID}/register':
    parameters:
      - name: hostID
        schema:
          type: string
          pattern: '^host-[0-9a-f]{8}$'
        description: The unique host identifier.
        in: path
        required: true
    patch:
      description: Updates a host registration information.
      tags:
        - Host
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/HostRegisterInfo'
                - properties:
                    serialNumber:
                      readOnly: true
                    uuid:
                      readOnly: true
      responses:
        '200':
          description: The host registration information was updated.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/compute/hosts/{hostID}/onboard':
    parameters:
      - name: hostID
        schema:
          type: string
          pattern: '^host-[0-9a-f]{8}$'
        description: The unique host identifier.
        in: path
        required: true
    patch:
      description: Onboards a host to Edge Orchestrator.
      tags:
        - Host
      responses:
        '200':
          description: The host was onboarded.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/compute/hosts/{hostID}/invalidate':
    parameters:
      - name: hostID
        schema:
          type: string
          pattern: '^host-[0-9a-f]{8}$'
        description: The unique host identifier
        in: path
        required: true
    put:
      description: 'Invalidates a host by marking it as untrusted. Once invalidated, a Host will no longer be able to communicate with Edge Infrastructure Manager unless it is deleted and provisioned again.'
      tags:
        - Host
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostOperationWithNote'
      responses:
        '200':
          description: The host was invalidated
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /schedules:
    get:
      description: Gets all schedules to operate on objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: 'Identifies the paging unique identifier for a single page, starts index at 1.'
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: regionID
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$'
          description: 'The region ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target including the inherited ones (parent region if not null). If null, returns all schedules without a region ID as target.'
        - in: query
          name: siteID
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$|^null$'
          description: 'The site ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target including the inherited ones. If null, returns all schedules without a site ID as target.'
        - in: query
          name: hostID
          schema:
            type: string
            pattern: '^host-[0-9a-f]{8}$|^null$'
          description: 'The host ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target including the inherited ones (parent site if not null). If null, returns all schedules without a host ID as target.'
        - in: query
          name: unix_epoch
          schema:
            type: string
            pattern: '^[0-9]+$'
          description: 'Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds'
      tags:
        - Schedule
      responses:
        '200':
          description: Arrays of all schedule objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesListJoin'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /schedules/single:
    get:
      description: Gets all single schedule objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: regionID
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$'
          description: 'The region ID target of the schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target. If null, returns all single schedules without a region ID as target.'
        - in: query
          name: siteID
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$|^null$'
          description: 'The site ID target of the schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target. If null, returns all single schedules without a site ID as target.'
        - in: query
          name: hostID
          schema:
            type: string
            pattern: '^host-[0-9a-f]{8}$|^null$'
          description: 'The host ID target of the single schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target. If null, returns all single schedules without a host ID as target.'
        - in: query
          name: unix_epoch
          schema:
            type: string
            pattern: '^[0-9]+$'
          description: 'Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds'
      tags:
        - Schedule
      responses:
        '200':
          description: Arrays of all single schedule objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedulesList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a single schedule to operate on an object.
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleSchedule'
      responses:
        '201':
          description: The single schedule was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
          headers:
            Location:
              description: Contains the URI of the created single schedule.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/schedules/single/{singleScheduleID}':
    parameters:
      - name: singleScheduleID
        schema:
          type: string
          pattern: '^singlesche-[0-9a-f]{8}$'
        description: The unique single schedule identifier.
        in: path
        required: true
    get:
      description: Gets a single schedule based on its ID.
      tags:
        - Schedule
      responses:
        '200':
          description: The requested single schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a single schedule.
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleSchedule'
      responses:
        '200':
          description: The single schedule was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a single schedule.
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleSchedule'
      responses:
        '200':
          description: The single schedule was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSchedule'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a single schedule.
      tags:
        - Schedule
      responses:
        '204':
          description: The single schedule was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /schedules/repeated:
    get:
      description: Gets all repeated schedule objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: regionID
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$'
          description: 'The region ID target of the schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target. If null, returns all repeated schedules without a region ID as target.'
        - in: query
          name: siteID
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$|^null$'
          description: 'The site ID target of the schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target. If null, returns all repeated schedules without a site ID as target.'
        - in: query
          name: hostID
          schema:
            type: string
            pattern: '^host-[0-9a-f]{8}$|^null$'
          description: 'The host ID target of the repeated schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target. If null, returns all repeated schedules without a host ID as target.'
        - in: query
          name: unix_epoch
          schema:
            type: string
            pattern: '^[0-9]+$'
          description: 'Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds.'
      tags:
        - Schedule
      responses:
        '200':
          description: Arrays of all repeated schedule objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedulesList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a repeated schedule.
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedSchedule'
      responses:
        '201':
          description: The repeated schedule was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
          headers:
            Location:
              description: Contains the URI of the repeated schedule created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/schedules/repeated/{repeatedScheduleID}':
    parameters:
      - name: repeatedScheduleID
        schema:
          type: string
          pattern: '^repeatedsche-[0-9a-f]{8}$'
        description: The unique repeated schedule identifier.
        in: path
        required: true
    get:
      description: Gets a repeated schedule.
      tags:
        - Schedule
      responses:
        '200':
          description: The requested repeated schedule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a repeated schedule.
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedSchedule'
      responses:
        '200':
          description: The repeated schedule was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a repeated schedule.
      tags:
        - Schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedSchedule'
      responses:
        '200':
          description: The repeated schedule was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedSchedule'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a repeated schedule.
      tags:
        - Schedule
      responses:
        '204':
          description: The repeated schedule was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /OSResources:
    get:
      description: Gets all OS resources' objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - OS
      responses:
        '200':
          description: Array of all OS resource objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResourceList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates an OS resource.
      tags:
        - OS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
      responses:
        '201':
          description: The OS resource was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          headers:
            Location:
              description: Contains the URI of the created OS resource.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/OSResources/{OSResourceID}':
    parameters:
      - name: OSResourceID
        schema:
          type: string
          pattern: '^os-[0-9a-f]{8}$'
        description: The unique OS resource identifier.
        in: path
        required: true
    get:
      description: Gets an OS resource.
      tags:
        - OS
      responses:
        '200':
          description: The requested OS resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates an OS resource.
      tags:
        - OS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OperatingSystemResource'
              properties:
                securityFeature:
                  deprecated: true
                profileName:
                  deprecated: true
                sha256:
                  deprecated: true
                osType:
                  readOnly: true
                osProvider:
                  readOnly: true
      responses:
        '200':
          description: The OS resource was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates an OS resource.
      tags:
        - OS
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/OperatingSystemResource'
              properties:
                securityFeature:
                  deprecated: true
                profileName:
                  deprecated: true
                sha256:
                  deprecated: true
                osType:
                  readOnly: true
                osProvider:
                  readOnly: true
      responses:
        '200':
          description: The OS resource was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes an OS resource.
      tags:
        - OS
      responses:
        '204':
          description: The OS resource was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /workloads:
    get:
      description: Gets all workload objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: kind
          deprecated: true
          schema:
            $ref: '#/components/schemas/WorkloadKind'
      tags:
        - Workload
      responses:
        '200':
          description: Array of all workload objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a workload object.
      tags:
        - Workload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
      responses:
        '201':
          description: The workload was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
          headers:
            Location:
              description: Contains the URI of the workload created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/workloads/{workloadID}':
    parameters:
      - name: workloadID
        schema:
          type: string
          pattern: '^workload-[0-9a-f]{8}$'
        description: The unique workload identifier.
        in: path
        required: true
    get:
      description: Gets a workload object.
      tags:
        - Workload
      responses:
        '200':
          description: The requested workload object given its ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a workload object.
      tags:
        - Workload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
      responses:
        '200':
          description: The workload was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a workload object.
      tags:
        - Workload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workload'
      responses:
        '200':
          description: The workload was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workload'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: 'Deletes a workload, provided that the workload does not contain members.'
      tags:
        - Workload
      responses:
        '204':
          description: The workload was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /workloadMembers:
    get:
      description: Gets the list of workload members.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: workload_id
          deprecated: true
          schema:
            type: string
            pattern: '^workload-[0-9a-f]{8}$'
          description: The unique workload identifier.
      tags:
        - Workload
      responses:
        '200':
          description: The requested workload members.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMemberList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Adds a workload member object.
      tags:
        - Workload
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadMember'
      responses:
        '201':
          description: The member was added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          headers:
            Location:
              description: Contains the URI of the workload member created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/workloadMembers/{workloadMemberID}':
    parameters:
      - name: workloadMemberID
        schema:
          type: string
          pattern: '^workloadmember-[0-9a-f]{8}$'
        description: The unique identifier of the workload member.
        in: path
        required: true
    get:
      description: Gets the workload member based on its given ID.
      tags:
        - Workload
      responses:
        '200':
          description: The requested workload member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Removes the workload member.
      tags:
        - Workload
      responses:
        '204':
          description: The workload member was removed.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /instances:
    get:
      description: Gets all instance objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details.'
          examples:
            example1:
              value: host.resourceId="host-3b382a11"
              summary: Through the instance's host ID
            example2:
              value: name="instance name example"
              summary: Through the instance's name
            example3:
              value: os.resourceId="os-a3b1c66d"
              summary: Through the instance's OS ID
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
        - in: query
          name: workloadMemberID
          deprecated: true
          schema:
            type: string
            pattern: '^$|^workloadmember-[0-9a-f]{8}$|^null$'
          allowEmptyValue: true
          description: 'Returns only the instances that are assigned to the given workload member. If equals to ''null'', returns all instances not associated with any workload member. If equal to '''' (empty string), returns all instances that have a workload member associated.'
        - in: query
          name: hostID
          deprecated: true
          schema:
            type: string
            pattern: '^host-[0-9a-f]{8}$'
          description: Returns the instances associated with the host with the given host ID.
        - in: query
          name: siteID
          deprecated: true
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$'
          description: Returns the instances associated with the hosts in the site identified. by the given siteID
      tags:
        - Instance
      responses:
        '200':
          description: Array of all instance objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates an instance.
      tags:
        - Instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Instance'
              required:
                - kind
                - hostID
                - osID
      responses:
        '201':
          description: The instance was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
          headers:
            Location:
              description: Contains the URI of the created instance.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/instances/{instanceID}':
    parameters:
      - name: instanceID
        schema:
          type: string
          pattern: '^inst-[0-9a-f]{8}$'
        description: The unique instance identifier.
        in: path
        required: true
    get:
      description: Gets an instance.
      tags:
        - Instance
      responses:
        '200':
          description: The requested instance based on its ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates an instance.
      tags:
        - Instance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Instance'
              properties:
                securityFeature:
                  deprecated: true
      responses:
        '200':
          description: The instance was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instance'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: 'Deletes an instance, provided that the instance does not contain members.'
      tags:
        - Instance
      responses:
        '204':
          description: The instance was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/instances/{instanceID}/invalidate':
    parameters:
      - name: instanceID
        schema:
          type: string
          pattern: '^inst-[0-9a-f]{8}$'
        description: The unique instance identifier.
        in: path
        required: true
    put:
      description: 'Invalidates an instance by marking it as untrusted. Once invalidated, the instance will no longer be able to communicate with Edge Infrastructure Manager unless it is deleted and provisioned again.'
      tags:
        - Instance
      responses:
        '200':
          description: The instance was invalidated
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /telemetry/groups/logs:
    get:
      description: Gets all telemetry log groups.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - TelemetryLogsGroup
      responses:
        '200':
          description: Array of all telemetry log groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroupList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a telemetry log group.
      tags:
        - TelemetryLogsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsGroup'
      responses:
        '201':
          description: The telemetry log group was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroup'
          headers:
            Location:
              description: Contains the URI of the telemetry log group created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
  '/telemetry/groups/logs/{telemetryLogsGroupId}':
    parameters:
      - name: telemetryLogsGroupId
        schema:
          type: string
          pattern: '^telemetrygroup-[0-9a-f]{8}$'
        description: The unique telemetry group resource identifier.
        in: path
        required: true
    get:
      description: Gets a telemetry log group.
      tags:
        - TelemetryLogsGroup
      responses:
        '200':
          description: The requested telemetry log group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroup'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a telemetry log group.
      tags:
        - TelemetryLogsGroup
      responses:
        '204':
          description: The telemetry log group was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /telemetry/groups/metrics:
    get:
      description: Gets all telemetry metric groups.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - TelemetryMetricsGroup
      responses:
        '200':
          description: Array of all telemetry metric groups.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroupList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a telemetry metric group.
      tags:
        - TelemetryMetricsGroup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsGroup'
      responses:
        '201':
          description: The telemetry metric group was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroup'
          headers:
            Location:
              description: Contains the URI of the telemetry metric group created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
  '/telemetry/groups/metrics/{telemetryMetricsGroupId}':
    parameters:
      - name: telemetryMetricsGroupId
        schema:
          type: string
          pattern: '^telemetrygroup-[0-9a-f]{8}$'
        description: The unique telemetry group resource identifier.
        in: path
        required: true
    get:
      description: Gets a telemetry metric group.
      tags:
        - TelemetryMetricsGroup
      responses:
        '200':
          description: The requested telemetry metric group.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroup'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a telemetry metric group.
      tags:
        - TelemetryMetricsGroup
      responses:
        '204':
          description: The telemetry metric group was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /telemetry/profiles/logs:
    get:
      description: Gets all telemetry log profiles.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: siteId
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$'
          description: Returns only the telemetry profiles that are assigned with the given site ID.
        - in: query
          name: regionId
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$'
          description: Returns only the telemetry profiles that are assigned with the given region ID.
        - in: query
          name: instanceId
          schema:
            type: string
            pattern: '^inst-[0-9a-f]{8}$'
          description: Returns only the telemetry profiles that are assigned with the given instance identifier.
        - in: query
          name: showInherited
          description: 'Indicates if the listed telemetry profiles will be extended with telemetry profiles rendered from the hierarchy. This flag is used along with one of site ID, region ID or instance ID. If site ID, region ID, or instance ID are not set, this flag is ignored.'
          schema:
            type: boolean
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - TelemetryLogsProfile
      responses:
        '200':
          description: Array of all telemetry log profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a telemetry log profile.
      tags:
        - TelemetryLogsProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfile'
      responses:
        '201':
          description: The telemetry profile was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
          headers:
            Location:
              description: Contains the URI of the telemetry log profile created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /telemetry/profiles/metrics:
    get:
      description: Gets all telemetry metric profiles.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: siteId
          schema:
            type: string
            pattern: '^site-[0-9a-f]{8}$'
          description: Returns only the telemetry profiles that are assigned with the given site ID.
        - in: query
          name: regionId
          schema:
            type: string
            pattern: '^region-[0-9a-f]{8}$'
          description: Returns only the telemetry profiles that are assigned with the given region ID.
        - in: query
          name: instanceId
          schema:
            type: string
            pattern: '^inst-[0-9a-f]{8}$'
          description: Returns only the telemetry profiles that are assigned with the given instance identifier.
        - in: query
          name: showInherited
          description: 'Indicates if the listed telemetry profiles will be extended with telemetry profiles rendered from the hierarchy. This flag is only used along with one of site ID, region ID or instance ID. If site ID, region ID, or instance ID are not set, this flag is ignored.'
          schema:
            type: boolean
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - TelemetryMetricsProfile
      responses:
        '200':
          description: Array of all telemetry metric profiles.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a telemetry metric profile.
      tags:
        - TelemetryMetricsProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfile'
      responses:
        '201':
          description: The telemetry profile was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
          headers:
            Location:
              description: Contains the URI of the telemetry profile created.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/telemetry/profiles/logs/{telemetryLogsProfileId}':
    parameters:
      - name: telemetryLogsProfileId
        schema:
          type: string
          pattern: '^telemetryprofile-[0-9a-f]{8}$'
        description: The unique telemetry profile identifier.
        in: path
        required: true
    get:
      description: Gets a telemetry log profile.
      tags:
        - TelemetryLogsProfile
      responses:
        '200':
          description: The requested telemetry log profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a telemetry log profile.
      tags:
        - TelemetryLogsProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfile'
      responses:
        '200':
          description: The telemetry log profile was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a telemetry log profile.
      tags:
        - TelemetryLogsProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfile'
      responses:
        '200':
          description: The telemetry log profile was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfile'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a telemetry log profile.
      tags:
        - TelemetryLogsProfile
      responses:
        '204':
          description: The telemetry log profile was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/telemetry/profiles/metrics/{telemetryMetricsProfileId}':
    parameters:
      - name: telemetryMetricsProfileId
        schema:
          type: string
          pattern: '^telemetryprofile-[0-9a-f]{8}$'
        description: The unique telemetry profile identifier.
        in: path
        required: true
    get:
      description: Gets a telemetry metric profile.
      tags:
        - TelemetryMetricsProfile
      responses:
        '200':
          description: The requested telemetry metric profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    put:
      description: Updates a telemetry metric profile.
      tags:
        - TelemetryMetricsProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfile'
      responses:
        '200':
          description: The telemetry metric profile was updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    patch:
      description: Partially updates a telemetry metric profile.
      tags:
        - TelemetryMetricsProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfile'
      responses:
        '200':
          description: The telemetry metric profile was patched.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfile'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
    delete:
      description: Deletes a telemetry metric profile.
      tags:
        - TelemetryMetricsProfile
      responses:
        '204':
          description: The telemetry metric profile was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /providers:
    get:
      description: Gets all provider objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - Provider
      responses:
        '200':
          description: Array of all provider objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Creates a provider resource.
      tags:
        - Provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Provider'
      responses:
        '201':
          description: The provider resource was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
          headers:
            Location:
              description: Contains the URI of the created provider resource.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/providers/{providerID}':
    parameters:
      - name: providerID
        schema:
          type: string
          pattern: '^provider-[0-9a-f]{8}$'
        description: The provider resource's unique identifier.
        in: path
        required: true
    get:
      description: Gets a provider resource.
      tags:
        - Provider
      responses:
        '200':
          description: The requested provider resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Provider'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Deletes a provider resource.
      tags:
        - Provider
      responses:
        '204':
          description: The provider resource was deleted.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  /localAccounts:
    get:
      description: Gets all local account objects.
      parameters:
        - in: query
          name: offset
          schema:
            default: 0
            type: integer
            minimum: 0
            maximum: 10000
          description: Index of the first item to return. This allows skipping of items.
        - in: query
          name: pageSize
          schema:
            default: 20
            type: integer
            minimum: 1
            maximum: 100
          description: 'Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.'
        - in: query
          name: filter
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9.,:/=*(){}\"'' ]+$'
          description: 'Optional filter to return only items of interest. See https://google.aip.dev/160 for details.'
        - in: query
          name: orderBy
          schema:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9., ]+$'
          description: 'Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.'
      tags:
        - LocalAccount
      responses:
        '200':
          description: Array of all local account objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccountList'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    post:
      description: Create a Local account instance
      tags:
        - LocalAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalAccount'
      responses:
        '201':
          description: Local account created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccount'
          headers:
            Location:
              description: Contains the URI of the created Local account resource.
              required: true
              schema:
                type: string
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
  '/localAccounts/{localAccountID}':
    parameters:
      - name: localAccountID
        schema:
          type: string
          pattern: '^localaccount-[0-9a-f]{8}$'
        description: The unique identifier of the local account.
        in: path
        required: true
    get:
      description: Get a local account object by ID.
      tags:
        - LocalAccount
      responses:
        '200':
          description: Local account object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccount'
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
    delete:
      description: Delete a local account object by ID.
      tags:
        - LocalAccount
      responses:
        '204':
          description: The locallaccount was removed.
        '400':
          $ref: '#/components/responses/400-BadRequest'
        '401':
          $ref: '#/components/responses/401-Unauthorized'
        '403':
          $ref: '#/components/responses/403-Forbidden'
        '404':
          $ref: '#/components/responses/404-NotFound'
        '406':
          $ref: '#/components/responses/406-NotAcceptable'
        '408':
          $ref: '#/components/responses/408-Timeout'
        '409':
          $ref: '#/components/responses/409-Conflict'
        '412':
          $ref: '#/components/responses/412-PreconditionFailed'
        '422':
          $ref: '#/components/responses/422-UnprocessableEntity'
        '429':
          $ref: '#/components/responses/429-TooManyRequests'
        '500':
          $ref: '#/components/responses/500-InternalServerError'
        '501':
          $ref: '#/components/responses/501-Unimplemented'
        '503':
          $ref: '#/components/responses/503-ServiceUnavailable'
components:
  schemas:
    Amount:
      description: 'Defines an amount of resources related to memory and disk by default, specified in bytes.'
      type: string
      minLength: 1
      maxLength: 20
      pattern: '^[0-9]+$'
    Metadata:
      description: 'A metadata list, represented by a list of key:value pairs.'
      type: array
      maxItems: 1000
      items:
        type: object
        required:
          - key
          - value
        properties:
          key:
            type: string
            minLength: 0
            maxLength: 316
            pattern: '^$|^[a-z.]+/$|^[a-z.]+/[a-z0-9][a-z0-9-_.]*[a-z0-9]$|^[a-z.]+/[a-z0-9]$|^[a-z]$|^[a-z0-9][a-z0-9-_.]*[a-z0-9]$'
          value:
            type: string
            minLength: 0
            maxLength: 63
            pattern: '^$|^[a-z0-9]$|^[a-z0-9][a-z0-9._-]*[a-z0-9]$'
    MetadataJoin:
      description: The joint set of location's and host's logical metadata.
      type: object
      properties:
        location:
          description: The rendered metadata from location objects.
          $ref: '#/components/schemas/Metadata'
        ou:
          description: The rendered metadata from OU objects.
          $ref: '#/components/schemas/Metadata'
    ProblemDetails:
      description: Carries a message in an HTTP error response.
      type: object
      properties:
        message:
          description: 'Contains detailed information about the problem, such as its source data that can be used for debugging purposes.'
          type: string
          readOnly: true
    SecurityFeature:
      description: Security capabilities of a resource.
      type: string
      format: enum
      enum:
        - SECURITY_FEATURE_UNSPECIFIED
        - SECURITY_FEATURE_NONE
        - SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION
    StatusIndicator:
      description: The status indicator.
      readOnly: true
      type: string
      format: enum
      enum:
        - STATUS_INDICATION_UNSPECIFIED
        - STATUS_INDICATION_ERROR
        - STATUS_INDICATION_IN_PROGRESS
        - STATUS_INDICATION_IDLE
    Timestamps:
      description: A structure to hold Update and Create timestamps.
      type: object
      readOnly: true
      required:
        - createdAt
        - updateAt
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          type: string
          format: date-time
          readOnly: true
        updatedAt:
          description: Timestamp for the last update of the resource.
          type: string
          format: date-time
          readOnly: true
    Region:
      description: A region resource
      type: object
      properties:
        resourceId:
          type: string
          pattern: '^region-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create'
          readOnly: true
        regionID:
          description: The region's unique identifier. Alias of resourceId.
          title: regionID
          type: string
          pattern: '^region-[0-9a-f]{8}$'
          readOnly: true
        name:
          description: The region's name.
          title: region-name
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        parentId:
          description: 'The parent region''s unique identifier that the region is associated to, if it exists. This field cannot be used in filter.'
          type: string
          pattern: '^$|^region-[0-9a-f]{8}$'
          writeOnly: true
        parentRegion:
          description: The parent region's resource associated with the region.
          $ref: '#/components/schemas/Region'
          readOnly: true
        metadata:
          description: 'The metadata associated with the region, represented by a list of key:value pairs.'
          $ref: '#/components/schemas/Metadata'
        inheritedMetadata:
          description: 'The rendered metadata from the region''s parent(s) that can be inherited by the region, represented by a list of key:value pairs. This field cannot be used in filter.'
          $ref: '#/components/schemas/Metadata'
          readOnly: true
        totalSites:
          description: 'Total number of sites associated to this region, directly or by child regions.'
          type: integer
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: Region
    Site:
      description: A site resource.
      type: object
      properties:
        resourceId:
          type: string
          pattern: '^site-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create.'
          readOnly: true
        siteID:
          description: The site's unique identifier. Alias of resourceId.
          type: string
          pattern: '^site-[0-9a-f]{8}$'
          readOnly: true
        name:
          description: The site's human-readable name.
          title: site-name
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        siteLat:
          description: The geolocation latitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLat must be in the range of +/- 90 degrees.
          title: site-latitude
          type: integer
          minimum: -900000000
          maximum: 900000000
        siteLng:
          description: The geolocation longitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLng must be in the range of +/- 180 degrees (inclusive).
          title: site-longitude
          type: integer
          minimum: -1800000000
          maximum: 1800000000
        dnsServers:
          description: The list of DNS servers that the site has available.
          title: site-dns-servers
          type: array
          maxItems: 1000
          items:
            type: string
            maxLength: 100
            pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        proxy:
          $ref: '#/components/schemas/Proxy'
        dockerRegistries:
          description: The set of Docker* registries that the site has available.
          title: site-docker-registries
          type: array
          maxItems: 1000
          items:
            type: string
            maxLength: 100
            pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        metricsEndpoint:
          description: 'The set of site-available metrics, specified in a single JSON object.'
          title: site-metrics
          type: string
          maxLength: 100
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        metadata:
          description: 'The metadata assigned to the site, represented by a list of key:value pairs.'
          $ref: '#/components/schemas/Metadata'
        regionId:
          description: The region's unique identifier that the site is associated to. This field cannot be used in filter.
          type: string
          pattern: '^$|^region-[0-9a-f]{8}$'
          writeOnly: true
        region:
          description: The region's resource associated with the site.
          $ref: '#/components/schemas/Region'
          readOnly: true
        ouId:
          description: 'The OU unique identifier that the site is associated to, if it exists. This field cannot be used in filter.'
          type: string
          pattern: '^$|^ou-[0-9a-f]{8}$'
          writeOnly: true
        ou:
          description: The OU resource associated with the site.
          $ref: '#/components/schemas/OU'
          readOnly: true
        provider:
          readOnly: true
          description: The provider associated with the site.
          $ref: '#/components/schemas/Provider'
        inheritedMetadata:
          description: 'The rendered metadata from the site''s parent(s) that can be inherited by the site, from location (region) and OU. Represented by a list of key:value pairs. This field cannot be used in filter.'
          $ref: '#/components/schemas/MetadataJoin'
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: Site
    Proxy:
      description: The proxy information.
      type: object
      properties:
        httpProxy:
          description: The HTTP proxy.
          type: string
        httpsProxy:
          description: The HTTPS proxy.
          type: string
        ftpProxy:
          description: The FTP proxy.
          type: string
        noProxy:
          description: The no-proxy info.
          type: string
    RegionsList:
      description: A list of region objects.
      required:
        - regions
        - hasNext
        - totalElements
      properties:
        regions:
          type: array
          items:
            $ref: '#/components/schemas/Region'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more location objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: RegionsList
      type: object
    SitesList:
      description: A list of site objects.
      required:
        - sites
        - hasNext
        - totalElements
      properties:
        sites:
          type: array
          items:
            $ref: '#/components/schemas/Site'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: SitesList
      type: object
    LocationType:
      description: The type of the location node.
      readOnly: true
      type: string
      format: enum
      enum:
        - RESOURCE_KIND_REGION
        - RESOURCE_KIND_SITE
    LocationNode:
      description: 'A location node''s resource, region, or site.'
      type: object
      required:
        - resourceId
        - parentId
        - name
        - type
      properties:
        resourceId:
          type: string
          description: 'The associated node''s resource ID, generated by the inventory on Create.'
          readOnly: true
        parentId:
          type: string
          description: 'The associated resource ID of the parent resource of this location node. For a region, it could be empty or a regionId. For a site, it could be empty or a regionId.'
          readOnly: true
        name:
          description: The node's human-readable name.
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          readOnly: true
        type:
          readOnly: true
          $ref: '#/components/schemas/LocationType'
    LocationNodeList:
      description: 'A LocationNodeList object. Contains all the required information to build a tree of regions and sites, given their associations.'
      required:
        - nodes
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/LocationNode'
          minItems: 0
          readOnly: true
          description: The ordered list of nodes (root to leaf) of the location's hierarchy tree of regions and sites. The relationship of the root to leaf is limited by the maximum depth of seven items.
        outputElements:
          description: The number of items returned in the nodes's array that match the query parameters of the request.
          type: integer
          readOnly: true
        totalElements:
          description: The total number of items that match the query parameters of the request.
          type: integer
          readOnly: true
    OU:
      description: An OU resource.
      type: object
      required:
        - name
      properties:
        resourceId:
          type: string
          pattern: '^ou-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create.'
          readOnly: true
        ouID:
          description: The OU resource's unique identifier. Alias of resourceId.
          title: ouID
          type: string
          pattern: '^ou-[0-9a-f]{8}$'
          readOnly: true
        name:
          description: The OU's name.
          title: ou-name
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        parentOu:
          description: 'The parent OU''s unique identifier that the OU is associated to, when it exists.'
          type: string
          pattern: '^$|^ou-[0-9a-f]{8}$'
        ouKind:
          description: 'The kind of OU resource, e.g. BU and client.'
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        metadata:
          description: 'The metadata associated to the OU resource, represented by a list of key:value pairs.'
          $ref: '#/components/schemas/Metadata'
        inheritedMetadata:
          description: 'The rendered metadata from the OU parent(s) that can be inherited by the OU resource, represented by a list of key:value pairs.'
          $ref: '#/components/schemas/Metadata'
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: OU
    OUsList:
      description: A list of OU objects.
      required:
        - OUs
        - hasNext
        - totalElements
      properties:
        OUs:
          type: array
          items:
            $ref: '#/components/schemas/OU'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more OU objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: OUsList
      type: object
    HostState:
      description: State of the host.
      type: string
      format: enum
      enum:
        - HOST_STATE_UNSPECIFIED
        - HOST_STATE_DELETED
        - HOST_STATE_ONBOARDED
        - HOST_STATE_UNTRUSTED
        - HOST_STATE_REGISTERED
    HostResourcesStorage:
      description: The set of available host storage capabilities.
      type: object
      required:
        - capacity
      properties:
        deviceName:
          description: The storage device name.
          type: string
          readOnly: true
        capacityBytes:
          description: 'The storage device capacity, specified in bytes.'
          $ref: '#/components/schemas/Amount'
          readOnly: true
        vendor:
          description: The storage vendor.
          type: string
          readOnly: true
        model:
          description: The storage model.
          type: string
          readOnly: true
        serial:
          description: The storage device's unique serial number.
          type: string
          readOnly: true
        wwid:
          description: The storage device's unique identifier.
          type: string
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    HostResourcesInterface:
      description: The set of available host interfaces.
      type: object
      properties:
        deviceName:
          description: The interface name.
          type: string
          readOnly: true
        ipaddresses:
          description: The interface's IP address list.
          type: array
          items:
            $ref: '#/components/schemas/IPAddress'
          readOnly: true
        pciIdentifier:
          description: The interface's PCI identifier.
          type: string
          readOnly: true
        macAddr:
          description: The interface's MAC address.
          type: string
          readOnly: true
        sriovEnabled:
          description: Flag that represents if the interface has SR-IOV support.
          type: boolean
          readOnly: true
        sriovVfsNum:
          description: 'The number of virtual functions (VFs) currently provisioned on the interface, if SR-IOV is supported.'
          type: integer
          readOnly: true
        sriovVfsTotal:
          description: 'The maximum number of VFs the interface supports, if SR-IOV is supported.'
          type: integer
          readOnly: true
        mtu:
          description: The maximum transmission unit of the interface.
          $ref: '#/components/schemas/Amount'
          readOnly: true
        linkState:
          description: Link state observed by the system.
          $ref: '#/components/schemas/LinkState'
          readOnly: true
        bmcInterface:
          description: Defines if the card is the Baseboard Management Controller (BMC) interface.
          type: boolean
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    HostResourcesUSB:
      description: The set of host USB resources.
      type: object
      properties:
        deviceName:
          description: The USB device name.
          type: string
          readOnly: true
        class:
          description: 'Class defined by USB Implementers Forum, Inc (USB-IF).'
          type: string
          readOnly: true
        serial:
          description: Serial number of the USB device.
          type: string
          readOnly: true
        idVendor:
          description: Hexadecimal number representing the ID of the USB device vendor.
          type: string
          readOnly: true
        idProduct:
          description: Hexadecimal number representing the ID of the USB device product.
          type: string
          readOnly: true
        bus:
          description: Bus number that the device connects to.
          type: string
          readOnly: true
        addr:
          description: USB device number assigned by the OS.
          type: string
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    HostResourcesGPU:
      description: The set of available host GPU cards.
      type: object
      properties:
        deviceName:
          description: The GPU device name.
          type: string
          readOnly: true
        vendor:
          description: The GPU device vendor.
          type: string
          readOnly: true
        product:
          description: The GPU device model.
          type: string
          readOnly: true
        pciId:
          description: The GPU device's PCI identifier.
          type: string
          readOnly: true
        description:
          description: The human-readable GPU device description.
          type: string
          readOnly: true
        capabilities:
          description: 'The specific GPU device capabilities [e.g., PCI Express*, MSI*, power management (PM)].'
          type: array
          items:
            type: string
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    HostPowerState:
      description: The representation of a host power state.
      type: string
      format: enum
      enum:
        - POWER_STATE_UNSPECIFIED
        - POWER_STATE_ERROR
        - POWER_STATE_ON
        - POWER_STATE_OFF
    HostOperationWithNote:
      description: A freeform field associated with the host invalidate or delete operations to store the reason for change.
      required:
        - note
      properties:
        note:
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
      title: HostOperationWithNote
      type: object
    Host:
      description: A host resource.
      required:
        - name
      properties:
        resourceId:
          type: string
          pattern: '^host-[0-9a-f]{8}$'
          description: 'Resource ID, generated on Create.'
          readOnly: true
        serialNumber:
          type: string
          description: SMBIOS device serial number.
          readOnly: true
        memoryBytes:
          type: string
          description: 'Quantity of the RAM in the system, in bytes.'
          readOnly: true
        cpuModel:
          type: string
          description: CPU model of the host.
          readOnly: true
        cpuSockets:
          type: integer
          description: Number of physical CPU sockets.
          format: uint32
          readOnly: true
        cpuCores:
          type: integer
          description: Number of CPU cores.
          format: uint32
          readOnly: true
        cpuCapabilities:
          type: string
          description: String list of all CPU capabilities (possibly JSON).
          readOnly: true
        cpuArchitecture:
          type: string
          description: 'Architecture of the CPU model, e.g. x86_64.'
          readOnly: true
        cpuThreads:
          type: integer
          description: Total number of threads supported by the CPU.
          format: uint32
          readOnly: true
        cpuTopology:
          type: string
          description: 'A JSON field describing the CPU topology. The CPU topology may contain, among others, information about CPU core types, their layout, and mapping to CPU sockets.'
          readOnly: true
        bmcKind:
          enum:
            - BAREMETAL_CONTROLLER_KIND_UNSPECIFIED
            - BAREMETAL_CONTROLLER_KIND_NONE
            - BAREMETAL_CONTROLLER_KIND_IPMI
            - BAREMETAL_CONTROLLER_KIND_VPRO
            - BAREMETAL_CONTROLLER_KIND_PDU
          type: string
          description: The type of BMC.
          format: enum
          readOnly: true
        bmcIp:
          type: string
          description: 'BMC IP address, such as "192.0.0.1".'
          readOnly: true
        hostname:
          description: The host name.
          type: string
          readOnly: true
        productName:
          description: The host's product name.
          type: string
          readOnly: true
        biosVersion:
          description: The version of the host BIOS.
          type: string
          readOnly: true
        biosReleaseDate:
          description: The release date of the host BIOS.
          type: string
          readOnly: true
        biosVendor:
          description: The vendor of the host BIOS.
          type: string
          readOnly: true
        desiredPowerState:
          $ref: '#/components/schemas/HostPowerState'
          description: Desired power state of the host.
        currentPowerState:
          $ref: '#/components/schemas/HostPowerState'
          readOnly: true
          description: Current power state of the host.
        name:
          description: The host name.
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        siteId:
          description: The site where the host is located.
          type: string
          pattern: '^$|^site-[0-9a-f]{8}$'
          writeOnly: true
        site:
          description: The site resource associated with the host.
          $ref: '#/components/schemas/Site'
          readOnly: true
        metadata:
          description: 'The metadata associated with the host, represented by a list of key:value pairs.'
          $ref: '#/components/schemas/Metadata'
        uuid:
          description: The host UUID identifier; UUID is unique and immutable.
          type: string
          format: uuid
          maxLength: 36
        hostStorages:
          description: The list of storage capabilities.
          type: array
          items:
            $ref: '#/components/schemas/HostResourcesStorage'
          readOnly: true
        hostNics:
          description: The list of interface capabilities.
          type: array
          items:
            $ref: '#/components/schemas/HostResourcesInterface'
          readOnly: true
        hostUsbs:
          description: The list of USB capabilities.
          type: array
          items:
            $ref: '#/components/schemas/HostResourcesUSB'
          readOnly: true
        hostGpus:
          description: The list of GPU capabilities.
          type: array
          items:
            $ref: '#/components/schemas/HostResourcesGPU'
          readOnly: true
        inheritedMetadata:
          description: 'The metadata inherited by the host, represented by a list of key:value pairs, rendered by location and logical structures.'
          $ref: '#/components/schemas/MetadataJoin'
          readOnly: true
        instance:
          readOnly: true
          description: The instance associated with the host.
          $ref: '#/components/schemas/Instance'
        provider:
          readOnly: true
          description: The provider associated with the host.
          $ref: '#/components/schemas/Provider'
        note:
          readOnly: true
          description: The note associated with the host.
          type: string
        hostStatus:
          description: The host's lifecycle status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        hostStatusIndicator:
          description: The host's lifecycle status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        hostStatusTimestamp:
          description: 'A Unix, UTC timestamp when the host''s lifecycle status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        onboardingStatus:
          description: The host's onboarding status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        onboardingStatusIndicator:
          description: The host's onboarding status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        onboardingStatusTimestamp:
          description: 'A Unix, UTC timestamp when the host''s onboarding status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        registrationStatus:
          description: The host's registration status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        registrationStatusIndicator:
          description: The host's registration status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        registrationStatusTimestamp:
          description: 'A Unix, UTC timestamp when the host''s registration status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        currentState:
          $ref: '#/components/schemas/HostState'
          readOnly: true
        desiredState:
          $ref: '#/components/schemas/HostState'
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    HostsList:
      description: A list of host objects.
      required:
        - hosts
        - hasNext
        - totalElements
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/Host'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more hosts available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: HostsList
      type: object
    HostsSummary:
      description: A summary of host object status.
      properties:
        total:
          type: integer
          minimum: 0
          readOnly: true
        error:
          type: integer
          minimum: 0
          readOnly: true
        running:
          type: integer
          minimum: 0
          readOnly: true
        unallocated:
          type: integer
          minimum: 0
          readOnly: true
      title: HostsSummary
      type: object
    HostRegisterInfo:
      description: Host registration information.
      properties:
        name:
          description: The host name.
          type: string
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        serialNumber:
          description: The host's SMBIOS serial number.
          type: string
          pattern: '^([A-Za-z0-9]{5,20})?$'
        uuid:
          description: The host's UUID identifier.
          type: string
          format: uuid
          maxLength: 36
        autoOnboard:
          description: 'Set to enforce auto-onboarding of the host, which means that no confirmation will be required when the host connects for the first time, to Edge Orchestrator.'
          type: boolean
          default: false
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    InstanceKind:
      description: Type of the instance.
      type: string
      format: enum
      enum:
        - INSTANCE_KIND_UNSPECIFIED
        - INSTANCE_KIND_METAL
    InstanceState:
      description: State of the instance.
      type: string
      format: enum
      enum:
        - INSTANCE_STATE_UNSPECIFIED
        - INSTANCE_STATE_RUNNING
        - INSTANCE_STATE_UNTRUSTED
        - INSTANCE_STATE_DELETED
    Instance:
      description: An instance resource.
      properties:
        resourceId:
          type: string
          pattern: '^inst-[0-9a-f]{8}$'
          description: 'Resource ID, generated by the inventory on Create.'
          readOnly: true
        instanceID:
          readOnly: true
          description: The instance's unique identifier. Alias of resourceID.
          title: instance_id
          type: string
          pattern: '^inst-[0-9a-f]{8}$'
        name:
          description: The instance's human-readable name.
          type: string
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        kind:
          $ref: '#/components/schemas/InstanceKind'
        hostID:
          description: The host's unique identifier associated with the instance.
          type: string
          pattern: '^host-[0-9a-f]{8}$'
          writeOnly: true
        host:
          description: The host's resource associated with the instance.
          $ref: '#/components/schemas/Host'
          readOnly: true
        osID:
          deprecated: true
          description: The unique identifier of OS resource that must be installed on the instance.
          title: osResourceID
          type: string
          pattern: '^os-[0-9a-f]{8}$'
          writeOnly: true
        os:
          deprecated: true
          description: The OS resource that must be installed on the instance. Deprecated. Use desiredOs to filter os.
          $ref: '#/components/schemas/OperatingSystemResource'
          readOnly: true
        desiredOs:
          description: The OS resource that must be installed on the instance.
          $ref: '#/components/schemas/OperatingSystemResource'
          readOnly: true
        currentOs:
          description: The OS resource that is currently installed on the instance.
          $ref: '#/components/schemas/OperatingSystemResource'
          readOnly: true
        currentState:
          $ref: '#/components/schemas/InstanceState'
          readOnly: true
        desiredState:
          $ref: '#/components/schemas/InstanceState'
          readOnly: true
        securityFeature:
          description: Select to enable security features such as Secure Boot (SB) and Full Disk Encryption (FDE). Immutable after creation.
          $ref: '#/components/schemas/SecurityFeature'
        instanceStatus:
          description: The instance's lifecycle status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        instanceStatusIndicator:
          description: The instance's lifecycle status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        instanceStatusTimestamp:
          description: 'A Unix, UTC timestamp when the instance''s lifecycle status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        provisioningStatus:
          description: The instance's provisioning status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        provisioningStatusIndicator:
          description: The instance's provisioning status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        provisioningStatusTimestamp:
          description: 'A Unix, UTC timestamp when the instance''s provisioning status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        updateStatus:
          description: The instance's software update status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        updateStatusIndicator:
          description: The instance's software update status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        updateStatusTimestamp:
          description: 'A Unix, UTC timestamp when the instance''s software update status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        updateStatusDetail:
          description: 'Beta: The detailed description of the instance''s last software update.'
          readOnly: true
          type: string
          maxLength: 100000
        trustedAttestationStatus:
          description: The instance's software trusted attestation status message.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        trustedAttestationStatusIndicator:
          description: The instance's software trusted attestation status indicator.
          readOnly: true
          $ref: '#/components/schemas/StatusIndicator'
        trustedAttestationStatusTimestamp:
          description: 'A Unix, UTC timestamp when the instance''s software trusted attestation status was last updated.'
          readOnly: true
          type: integer
          format: uint64
        workloadMembers:
          description: The workload members associated with the instance.
          type: array
          items:
            $ref: '#/components/schemas/WorkloadMember'
          minItems: 0
          readOnly: true
        localAccountID:
          description: The unique identifier of local account will be associated with the instance.
          title: localAccountResourceID
          type: string
          pattern: '^localaccount-[0-9a-f]{8}$'
          writeOnly: true
        localAccount:
          description: The local account resource associated with the instance.
          title: localAccountResource
          $ref: '#/components/schemas/LocalAccount'
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
        instanceStatusDetail:
          description: The detailed status of the instance's software components.
          type: string
          readOnly: true
          maxLength: 1024
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
    InstanceList:
      description: A list of instance objects.
      required:
        - instances
        - hasNext
        - totalElements
      properties:
        instances:
          type: array
          items:
            $ref: '#/components/schemas/Instance'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more instance objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: InstanceList
      type: object
    ScheduleStatus:
      description: The representation of a schedule's status.
      type: string
      format: enum
      enum:
        - SCHEDULE_STATUS_UNSPECIFIED
        - SCHEDULE_STATUS_MAINTENANCE
        - SCHEDULE_STATUS_OS_UPDATE
    SingleSchedule:
      description: A single schedule resource.
      type: object
      required:
        - startSeconds
        - scheduleStatus
      properties:
        resourceId:
          type: string
          pattern: '^singlesche-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create.'
          readOnly: true
        singleScheduleID:
          readOnly: true
          description: The single schedule resource's unique identifier. Alias of resourceId.
          title: singleScheduleID
          type: string
          pattern: '^singlesche-[0-9a-f]{8}$'
        scheduleStatus:
          $ref: '#/components/schemas/ScheduleStatus'
        name:
          description: The schedule's name.
          type: string
          maxLength: 20
          pattern: '^[a-zA-Z-_0-9. ]+$'
        targetHostId:
          description: The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          title: targetHostId
          type: string
          pattern: '^$|^host-[0-9a-f]{8}$'
          writeOnly: true
        targetHost:
          description: The host resource associated with the single schedule.
          $ref: '#/components/schemas/Host'
          readOnly: true
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          title: targetSiteId
          type: string
          pattern: '^$|^site-[0-9a-f]{8}$'
          writeOnly: true
        targetSite:
          description: The site resource associated with the single schedule.
          $ref: '#/components/schemas/Site'
          readOnly: true
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          title: targetRegionId
          type: string
          pattern: '^$|^region-[0-9a-f]{8}$'
          writeOnly: true
        targetRegion:
          description: The region resource associated with the single schedule.
          $ref: '#/components/schemas/Region'
          readOnly: true
        startSeconds:
          description: 'The start time in seconds, of the single schedule.'
          title: startSeconds
          type: integer
          minLength: 1
          maxLength: 19
          pattern: '^[0-9]+$'
        endSeconds:
          description: 'The end time in seconds, of the single schedule. The value of endSeconds must be equal to or bigger than the value of startSeconds.'
          title: endSeconds
          type: integer
          minLength: 1
          maxLength: 19
          pattern: '^[0-9]+$'
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: SingleSchedule
    RepeatedSchedule:
      description: A repeated-schedule resource.
      type: object
      required:
        - durationSeconds
        - scheduleStatus
        - cronMinutes
        - cronHours
        - cronDayMonth
        - cronMonth
        - cronDayWeek
      properties:
        resourceId:
          type: string
          pattern: '^repeatedsche-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create.'
          readOnly: true
        repeatedScheduleID:
          readOnly: true
          description: The repeated schedule's unique identifier. Alias of resourceId.
          title: repeatedScheduleID
          type: string
          pattern: '^repeatedsche-[0-9a-f]{8}$'
        scheduleStatus:
          $ref: '#/components/schemas/ScheduleStatus'
        name:
          description: The schedule's name.
          type: string
          maxLength: 20
          pattern: '^[a-zA-Z-_0-9. ]+$'
        targetHostId:
          description: The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          title: targetHostId
          type: string
          pattern: '^$|^host-[0-9a-f]{8}$'
          writeOnly: true
        targetHost:
          description: The host resource associated with the repeated schedule.
          $ref: '#/components/schemas/Host'
          readOnly: true
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          title: targetSiteId
          type: string
          pattern: '^$|^site-[0-9a-f]{8}$'
          writeOnly: true
        targetSite:
          description: The site resource associated with the repeated schedule.
          $ref: '#/components/schemas/Site'
          readOnly: true
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
          title: targetRegionId
          type: string
          pattern: '^$|^region-[0-9a-f]{8}$'
          writeOnly: true
        targetRegion:
          description: The region resource associated with the single schedule.
          $ref: '#/components/schemas/Region'
          readOnly: true
        durationSeconds:
          description: 'The duration in seconds of the repeated schedule, per schedule.'
          title: durationSeconds
          minimum: 1
          maximum: 86400
          type: integer
        cronMinutes:
          pattern: '^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$'
          type: string
        cronHours:
          pattern: '^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$'
          type: string
        cronDayMonth:
          pattern: '^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$'
          type: string
        cronMonth:
          pattern: '^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$'
          type: string
        cronDayWeek:
          pattern: '^([*]|([0-6])((,([0-6]))*))$'
          type: string
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: SingleSchedule
    SingleSchedulesList:
      description: A list of single schedule objects.
      required:
        - SingleSchedules
        - hasNext
        - totalElements
      properties:
        SingleSchedules:
          type: array
          items:
            $ref: '#/components/schemas/SingleSchedule'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: SingleSchedulesList
      type: object
    RepeatedSchedulesList:
      description: A list of repeated schedule objects.
      required:
        - RepeatedSchedules
        - hasNext
        - totalElements
      properties:
        RepeatedSchedules:
          type: array
          items:
            $ref: '#/components/schemas/RepeatedSchedule'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more repeated schedule objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: RepeatedSchedulesList
      type: object
    SchedulesListJoin:
      description: 'List of all schedule objects, repeated and single.'
      type: object
      required:
        - SingleSchedules
        - RepeatedSchedules
        - hasNext
        - totalElements
      properties:
        SingleSchedules:
          type: array
          items:
            $ref: '#/components/schemas/SingleSchedule'
          minItems: 0
          readOnly: true
          description: 'Contains a flat list of single schedules, possibly including all inherited ones.'
        RepeatedSchedules:
          type: array
          items:
            $ref: '#/components/schemas/RepeatedSchedule'
          minItems: 0
          readOnly: true
          description: 'Contains a flat list of repeated schedules, possibly including all inherited ones.'
        hasNext:
          description: Indicates if there are more schedule objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
    OperatingSystemType:
      description: OsType describes the immutability of the OS. This field is immutable after creation.
      type: string
      format: enum
      enum:
        - OPERATING_SYSTEM_TYPE_UNSPECIFIED
        - OPERATING_SYSTEM_TYPE_MUTABLE
        - OPERATING_SYSTEM_TYPE_IMMUTABLE
    OperatingSystemProvider:
      description: Describes the OS owner that drives the OS provisioning.
      type: string
      format: enum
      enum:
        - OPERATING_SYSTEM_PROVIDER_UNSPECIFIED
        - OPERATING_SYSTEM_PROVIDER_INFRA
        - OPERATING_SYSTEM_PROVIDER_LENOVO
    OperatingSystemResource:
      description: An OS resource.
      type: object
      required:
        - updateSources
        - sha256
      properties:
        resourceId:
          type: string
          pattern: '^os-[0-9a-f]{8}$'
          description: 'Resource ID, generated by inventory on Create'
          readOnly: true
        osResourceID:
          readOnly: true
          description: The OS resource's unique identifier. Alias of resourceId.
          title: osResourceID
          type: string
          pattern: '^os-[0-9a-f]{8}$'
        name:
          description: The OS resource's name.
          type: string
          maxLength: 128
          pattern: '^[a-zA-Z-_0-9. ()]+$'
        description:
          description: The OS resource's description.
          type: string
          maxLength: 1000
          pattern: '^$|^[a-zA-Z-_0-9.:;=@?!#,<>*(){}&%$`^+- ]+$'
        architecture:
          description: The OS resource's architecture.
          title: architecture
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
          maxLength: 20
        kernelCommand:
          description: The OS resource's kernel command.
          title: kernelCommand
          maxLength: 500
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
        updateSources:
          description: The list of OS resource update sources.
          title: updateSources
          type: array
          maxItems: 100
          items:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*+()\" \\\n]+$'
            maxLength: 10000
        repoUrl:
          deprecated: true
          description: The URL repository of the OS update sources. Deprecated. Use imageUrl to filter repoUrl.
          title: repoUrl
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
          maxLength: 500
        imageUrl:
          description: 'The URL repository of the OS image. If set, overwrites repoUrl.'
          title: imageUrl
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
          maxLength: 500
        imageId:
          description: A unique identifier of the OS image that can be retrieved from the running OS.
          title: imageId
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
        sha256:
          description: SHA256 checksum of the OS resource in hexadecimal representation.
          type: string
          minLength: 64
          maxLength: 64
          pattern: '^[a-f0-9]+$'
        profileName:
          description: Name of the OS profile that the OS resource belongs to.
          type: string
          maxLength: 128
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
        profileVersion:
          description: Version of OS profile that the OS resource belongs to.
          type: string
          readOnly: true
        installedPackages:
          description: 'Freeform text, OS-dependent. A list of package names, one per line (newline separated). Must not contain version information.'
          title: installedPackages
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\" \\\n]+$'
        securityFeature:
          description: Indicating if this OS is capable of supporting features like Secure Boot (SB) and Full Disk Encryption (FDE). Immutable after creation.
          $ref: '#/components/schemas/SecurityFeature'
        osType:
          $ref: '#/components/schemas/OperatingSystemType'
        osProvider:
          $ref: '#/components/schemas/OperatingSystemProvider'
        platformBundle:
          description: 'Opaque JSON field storing references to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations. If empty, the default OS installation will be used.'
          type: string
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: OperatingSystemResource
    OperatingSystemResourceList:
      description: A list of OS resource objects.
      required:
        - OperatingSystemResources
        - hasNext
        - totalElements
      properties:
        OperatingSystemResources:
          type: array
          items:
            $ref: '#/components/schemas/OperatingSystemResource'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more OS objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: OperatingSystemResourceList
      type: object
    Workload:
      description: A generic way to group compute resources to obtain a workload.
      required:
        - kind
        - members
      properties:
        resourceId:
          type: string
          pattern: '^workload-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create'
          readOnly: true
        workloadId:
          readOnly: true
          description: The workload's unique identifier. Alias of resourceId.
          title: workloadId
          type: string
          pattern: '^workload-[0-9a-f]{8}$'
        name:
          description: Human-readable name for the workload.
          type: string
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        kind:
          $ref: '#/components/schemas/WorkloadKind'
        status:
          description: Human-readable status of the workload.
          type: string
          maxLength: 500
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        members:
          type: array
          items:
            $ref: '#/components/schemas/WorkloadMember'
          minItems: 0
          readOnly: true
        externalId:
          description: 'The ID of the external resource, used to link to resources outside the realm of Edge Infrastructure Manager.'
          type: string
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          maxLength: 40
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    WorkloadKind:
      description: Type of workload.
      type: string
      format: enum
      enum:
        - WORKLOAD_KIND_UNSPECIFIED
        - WORKLOAD_KIND_CLUSTER
    WorkloadList:
      description: A list of workload objects.
      required:
        - Workloads
        - hasNext
        - totalElements
      properties:
        Workloads:
          type: array
          items:
            $ref: '#/components/schemas/Workload'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more workload objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: WorkloadList
      type: object
    WorkloadMember:
      description: A member of a workload.
      required:
        - resourceId
        - workloadMemberId
        - workloadId
        - kind
        - instanceId
      properties:
        resourceId:
          type: string
          pattern: '^workloadmember-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create'
          readOnly: true
        workloadMemberId:
          readOnly: true
          description: The workload member's unique identifier. Alias of resourceId.
          title: workloadMemberId
          type: string
          pattern: '^workloadmember-[0-9a-f]{8}$'
        workloadId:
          description: The unique identifier of the workload.
          title: workloadId
          type: string
          pattern: '^workload-[0-9a-f]{8}$'
          writeOnly: true
        workload:
          description: The workload resource associated with the workload member.
          $ref: '#/components/schemas/Workload'
          readOnly: true
        kind:
          description: Type of workload member.
          type: string
          format: enum
          enum:
            - WORKLOAD_MEMBER_KIND_UNSPECIFIED
            - WORKLOAD_MEMBER_KIND_CLUSTER_NODE
        instanceId:
          description: The unique identifier of the instance.
          title: instanceId
          type: string
          pattern: '^inst-[0-9a-f]{8}$'
          writeOnly: true
        instance:
          description: The instance resource associated with the workload member.
          $ref: '#/components/schemas/Instance'
          readOnly: true
        member:
          readOnly: true
          $ref: '#/components/schemas/Instance'
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    WorkloadMemberList:
      description: A list of workload member objects.
      required:
        - WorkloadMembers
        - hasNext
        - totalElements
      properties:
        WorkloadMembers:
          type: array
          items:
            $ref: '#/components/schemas/WorkloadMember'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more workload members objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: WorkloadMemberList
      type: object
    TelemetrySeverityLevel:
      description: Log level used for the telemetry config. This field must only be defined if kind equals to TELEMETRY_CONFIG_KIND_LOGS.
      type: string
      format: enum
      enum:
        - TELEMETRY_SEVERITY_LEVEL_UNSPECIFIED
        - TELEMETRY_SEVERITY_LEVEL_CRITICAL
        - TELEMETRY_SEVERITY_LEVEL_ERROR
        - TELEMETRY_SEVERITY_LEVEL_WARN
        - TELEMETRY_SEVERITY_LEVEL_INFO
        - TELEMETRY_SEVERITY_LEVEL_DEBUG
    TelemetryCollectorKind:
      description: Kind of telemetry collector.
      type: string
      format: enum
      enum:
        - TELEMETRY_COLLECTOR_KIND_UNSPECIFIED
        - TELEMETRY_COLLECTOR_KIND_HOST
        - TELEMETRY_COLLECTOR_KIND_CLUSTER
    TelemetryLogsGroup:
      description: Telemetry group that defines a set of log types to collect.
      required:
        - name
        - collectorKind
        - groups
      properties:
        telemetryLogsGroupId:
          readOnly: true
          description: Unique ID of the telemetry group.
          title: telemetryLogsGroupId
          type: string
          pattern: '^telemetrygroup-[0-9a-f]{8}$'
        name:
          description: Human-readable name for the log group
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        collectorKind:
          $ref: '#/components/schemas/TelemetryCollectorKind'
        groups:
          type: array
          maxItems: 100
          description: A list of log groups to collect.
          items:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
            maxLength: 500
          minItems: 0
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryMetricsGroup:
      description: A definition of metric groups to monitor.
      required:
        - name
        - collectorKind
        - groups
      properties:
        telemetryMetricsGroupId:
          readOnly: true
          description: Unique ID of the telemetry group.
          title: telemetryMetricsGroupId
          type: string
          pattern: '^telemetrygroup-[0-9a-f]{8}$'
        name:
          description: Human-readable name for the metric group.
          type: string
          minLength: 1
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
        collectorKind:
          $ref: '#/components/schemas/TelemetryCollectorKind'
        groups:
          type: array
          maxItems: 100
          description: A list of metric groups to collect.
          items:
            type: string
            pattern: '^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()\"" ]+$'
            maxLength: 500
          minItems: 0
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryLogsGroupList:
      description: A list of log group objects.
      required:
        - TelemetryLogsGroups
        - hasNext
        - totalElements
      title: TelemetryLogsGroupList
      type: object
      properties:
        TelemetryLogsGroups:
          type: array
          items:
            $ref: '#/components/schemas/TelemetryLogsGroup'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more log group objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryMetricsGroupList:
      description: 'A list of telemetry groups, which defines a set of metrics to collect.'
      required:
        - TelemetryMetricsGroups
        - hasNext
        - totalElements
      title: TelemetryMetricsGroupList
      type: object
      properties:
        TelemetryMetricsGroups:
          type: array
          items:
            $ref: '#/components/schemas/TelemetryMetricsGroup'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more telemetry metric group objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryLogsProfile:
      description: A telemetry log profile for a hierarchy object.
      type: object
      required:
        - logsGroupId
        - logLevel
      properties:
        profileId:
          description: The ID of the telemetry profile.
          readOnly: true
          type: string
          pattern: '^telemetryprofile-[0-9a-f]{8}$'
        targetInstance:
          type: string
          description: 'The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.'
          pattern: '^$|^inst-[0-9a-f]{8}$'
        targetSite:
          type: string
          description: 'The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.'
          pattern: '^$|^site-[0-9a-f]{8}$'
        targetRegion:
          type: string
          description: 'The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.'
          pattern: '^$|^region-[0-9a-f]{8}$'
        logLevel:
          $ref: '#/components/schemas/TelemetrySeverityLevel'
        logsGroupId:
          description: The unique identifier of the telemetry log group.
          title: logsGroupId
          type: string
          pattern: '^telemetrygroup-[0-9a-f]{8}$'
        logsGroup:
          description: The log group associated with the telemetry profile.
          $ref: '#/components/schemas/TelemetryLogsGroup'
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryMetricsProfile:
      description: A telemetry metric profile for a hierarchy object.
      type: object
      required:
        - metricsGroupId
        - metricsInterval
      properties:
        profileId:
          description: The ID of the telemetry profile.
          readOnly: true
          type: string
          pattern: '^telemetryprofile-[0-9a-f]{8}$'
        targetInstance:
          type: string
          description: 'The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.'
          pattern: '^$|^inst-[0-9a-f]{8}$'
        targetSite:
          type: string
          description: 'The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.'
          pattern: '^$|^site-[0-9a-f]{8}$'
        targetRegion:
          type: string
          description: 'The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.'
          pattern: '^$|^region-[0-9a-f]{8}$'
        metricsInterval:
          description: Metric interval (in seconds) for the telemetry profile. This field must only be defined if the type equals to TELEMETRY_CONFIG_KIND_METRICS.
          type: integer
          minimum: 1
        metricsGroupId:
          description: The unique identifier of the telemetry metric group.
          title: metricsGroupId
          type: string
          pattern: '^telemetrygroup-[0-9a-f]{8}$'
        metricsGroup:
          description: The metric group associated with the telemetry profile.
          $ref: '#/components/schemas/TelemetryMetricsGroup'
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryLogsProfileList:
      description: A list of telemetry log profiles.
      required:
        - TelemetryLogsProfiles
        - hasNext
        - totalElements
      title: TelemetryLogsProfileList
      type: object
      properties:
        TelemetryLogsProfiles:
          type: array
          items:
            $ref: '#/components/schemas/TelemetryLogsProfile'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more telemetry log profile objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    TelemetryMetricsProfileList:
      description: A list of telemetry metric profiles.
      required:
        - TelemetryMetricsProfiles
        - hasNext
        - totalElements
      title: TelemetryLogsProfileList
      type: object
      properties:
        TelemetryMetricsProfiles:
          type: array
          items:
            $ref: '#/components/schemas/TelemetryMetricsProfile'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more telemetry metric profile objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    IPAddress:
      description: 'An IP address represented using the CIDR notation, and additional information identifying the configuration mode of the address.'
      type: object
      required:
        - address
        - configMethod
      properties:
        address:
          description: CIDR representation of the IP address.
          x-go-type: strfmt.CIDR
          x-go-type-import:
            path: github.com/go-openapi/strfmt
          readOnly: true
        configMethod:
          description: Specifies how the IP address is configured.
          type: string
          default: IP_ADDRESS_CONFIG_MODE_UNSPECIFIED
          enum:
            - IP_ADDRESS_CONFIG_MODE_UNSPECIFIED
            - IP_ADDRESS_CONFIG_MODE_STATIC
            - IP_ADDRESS_CONFIG_MODE_DYNAMIC
          readOnly: true
        status:
          description: The status of the IP address.
          type: string
          default: IP_ADDRESS_STATUS_UNSPECIFIED
          enum:
            - IP_ADDRESS_STATUS_UNSPECIFIED
            - IP_ADDRESS_STATUS_ASSIGNMENT_ERROR
            - IP_ADDRESS_STATUS_ASSIGNED
            - IP_ADDRESS_STATUS_CONFIGURATION_ERROR
            - IP_ADDRESS_STATUS_CONFIGURED
            - IP_ADDRESS_STATUS_RELEASED
            - IP_ADDRESS_STATUS_ERROR
          readOnly: true
        statusDetail:
          description: The details of the status of the IP address.
          type: string
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    LinkState:
      description: A generic structure to define the state of a link.
      type: object
      required:
        - timestamp
        - type
      properties:
        timestamp:
          description: The timestamp when the link state was last updated.
          type: string
          format: date-time
          readOnly: true
        type:
          description: the type of the state.
          type: string
          default: LINK_STATE_UNSPECIFIED
          enum:
            - LINK_STATE_UNSPECIFIED
            - LINK_STATE_UP
            - LINK_STATE_DOWN
          readOnly: true
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
    Provider:
      description: A provider resource.
      type: object
      required:
        - providerKind
        - name
        - apiEndpoint
      properties:
        resourceId:
          type: string
          pattern: '^provider-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create.'
          readOnly: true
        providerID:
          readOnly: true
          description: The provider resource's unique identifier. Alias of resourceId.
          title: providerID
          type: string
          pattern: '^provider-[0-9a-f]{8}$'
        providerKind:
          $ref: '#/components/schemas/ProviderKind'
        providerVendor:
          $ref: '#/components/schemas/ProviderVendor'
        name:
          description: The provider resource's name.
          type: string
          maxLength: 40
          pattern: '^[a-zA-Z-_0-9. ]+$'
        apiEndpoint:
          description: The provider resource's API endpoint.
          title: apiEndpoint
          type: string
          maxLength: 500
          pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        apiCredentials:
          description: The provider resource's list of credentials.
          title: apiCredentials
          type: array
          maxItems: 100
          items:
            type: string
            maxLength: 500
            pattern: '^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$'
        config:
          description: Opaque provider configuration.
          type: string
          maxLength: 2000
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: Provider
    ProviderKind:
      description: Kind of provider.
      type: string
      format: enum
      enum:
        - PROVIDER_KIND_UNSPECIFIED
        - PROVIDER_KIND_BAREMETAL
    ProviderVendor:
      description: Vendor of the provider.
      type: string
      format: enum
      enum:
        - PROVIDER_VENDOR_UNSPECIFIED
        - PROVIDER_VENDOR_LENOVO_LXCA
        - PROVIDER_VENDOR_LENOVO_LOCA
    ProviderList:
      description: A list of provider objects.
      required:
        - providers
        - hasNext
        - totalElements
      properties:
        providers:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
          minItems: 0
          readOnly: true
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: ProviderList
      type: object
    LocalAccount:
      description: A local account resource.
      type: object
      required:
        - username
        - sshKey
      properties:
        resourceId:
          type: string
          pattern: '^localaccount-[0-9a-f]{8}$'
          description: 'resource ID, generated by the inventory on Create.'
          readOnly: true
        localAccountID:
          readOnly: true
          description: The local account resource's unique identifier. Alias of resourceId.
          title: localAccountID
          type: string
          pattern: '^localaccount-[0-9a-f]{8}$'
        username:
          description: The local account's username.
          type: string
          maxLength: 32
          pattern: '^[a-z][a-z0-9-]{0,31}$'
        sshKey:
          description: The local account's sshkey.
          type: string
          maxLength: 800
          pattern: '^(ssh-ed25519|ecdsa-sha2-nistp521) ([A-Za-z0-9+/=]+) ?(.*)?$'
        timestamps:
          $ref: '#/components/schemas/Timestamps'
          readOnly: true
      title: LocalAccount
    LocalAccountList:
      description: A list of local account objects.
      required:
        - localAccounts
        - hasNext
        - totalElements
      type: object
      properties:
        localAccounts:
          description: Array of local account objects.
          type: array
          minItems: 0
          items:
            $ref: '#/components/schemas/LocalAccount'
          readOnly: true
        hasNext:
          description: Indicates if there are more objects available to be retrieved.
          type: boolean
          readOnly: true
        totalElements:
          description: 'Total number of items that the request would return, if not limited by pagination.'
          type: integer
          readOnly: true
      title: LocalAccountList
  responses:
    400-BadRequest:
      description: Object in payload is not properly formulated or not related to the method.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    401-Unauthorized:
      description: 'Request is not authenticated; it either does not contain a JSON Web Token (JWT) in its header, or the JWT is not valid.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    403-Forbidden:
      description: Request is not authorized; it does not contain valid roles to perform a request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    404-NotFound:
      description: No resource is found at the URI.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    406-NotAcceptable:
      description: Response content is not acceptable according to the request's accept headers.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    408-Timeout:
      description: Request timeout.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    409-Conflict:
      description: Request could not be processed in the current state of the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    412-PreconditionFailed:
      description: The server does not meet one of the preconditions that the requester put on the request header fields.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    429-TooManyRequests:
      description: Too many requests have been sent in a given amount of time.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    422-UnprocessableEntity:
      description: Unprocessable entity in parsing body request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    500-InternalServerError:
      description: The provider is currently unable to handle the request because of an internal error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    501-Unimplemented:
      description: The resource or method is not implemented.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    503-ServiceUnavailable:
      description: The provider is currently unable to handle the request because of a temporary overload.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
