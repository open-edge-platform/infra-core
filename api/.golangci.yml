# SPDX-FileCopyrightText: (C) 2025 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

---
linters:
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - copyloopvar
    - cyclop
    - depguard
    - dogsled
    - durationcheck
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - funlen
    - gci
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - godot
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomoddirectives
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - mnd
    - nakedret
    - nilerr
    - nilnil
    - noctx
    - nolintlint
    - prealloc
    - predeclared
    - revive
    - staticcheck
    - stylecheck
    - tagliatelle
    - testpackage
    - tenv
    - testableexamples
    - thelper
    - tparallel
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace
    # - dupl  #TBD

run:
  timeout: 10m

  issues-exit-code: 1

  tests: true

  # With the read-only mode linter will fail if go.mod file is outdated.
  modules-download-mode: readonly

  # Keep this empty to use the Go version from the go.mod file.
  go: ""

linters-settings:
  gomoddirectives:
    replace-local: true
    replace-allow-list:
      - github.com/open-edge-platform/infra-core/inventory
  depguard:
    rules:
      main:
        files:
          - $all
          - "!$test"
        allow:
          - $gostd
          - github.com/open-edge-platform
          - github.com/oapi-codegen/echo-middleware
          - github.com/getkin/kin-openapi
          - github.com/golang-jwt/jwt/v5
          - github.com/google/uuid
          - github.com/labstack/echo/v4
          - github.com/labstack/echo-contrib/echoprometheus
          - github.com/modern-go/reflect2
          - github.com/stretchr/testify
          - github.com/viant/xunsafe
          - github.com/grpc-ecosystem/go-grpc-middleware
          - go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp
          - golang.org/x/net
          - google.golang.org/grpc
          - google.golang.org/protobuf
          - github.com/adhocore/gronx
          - golang.org/x/exp/slices
          - github.com/go-openapi/strfmt
          - github.com/gorilla/websocket
          - golang.org/x/exp/maps
          - github.com/prometheus/client_golang/prometheus
      test:
        files:
          - "$test"
        allow:
          - $gostd
          - github.com/open-edge-platform
          - github.com/google/uuid
          - github.com/mennanov/fmutils
          - github.com/labstack/echo/v4
          - github.com/grpc-ecosystem/go-grpc-middleware
          - github.com/stretchr/testify/assert
          - github.com/stretchr/testify/require
          - github.com/go-openapi/strfmt
          - github.com/gorilla/websocket
          - github.com/golang-jwt/jwt/v5
  cyclop:
    # SDL requirements recommend a maximum cyclomatic complexity of 10
    max-complexity: 10
  misspell:
    locale: US
  lll:
    line-length: 130
    tab-width: 4
  funlen:
    lines: 100
    statements: 50
  exhaustive:
    default-signifies-exhaustive: true

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      # These 3 will detect many cases, but they do sense
      # if it's performance oriented code
      - hugeParam
      - rangeExprCopy
      - rangeValCopy

  errcheck:
    # Report `a := b.(MyStruct)` when `a, ok := ...` should be.
    check-type-assertions: true   # Default: false

    # Report skipped checks:`num, _ := strconv.Atoi(numStr)`.
    check-blank: true   # Default: false

    # Function to skip.
    exclude-functions:
      - io/ioutil.ReadFile
      - io.Copy(*bytes.Buffer)
      - io.Copy(os.Stdout)

  govet:
    enable:
      - shadow

  nakedret:
    # No naked returns, ever.
    max-func-lines: 1   # Default: 30

  tagliatelle:
    case:
      rules:
        json: snake
        yaml: snake
        xml: camel
        bson: camel
        avro: snake
        mapstructure: kebab

  gci:
    sections:
      # Standard section: captures all standard packages.
      - standard
      # Default section: contains all imports that could not be matched to another section type.
      - default
      # Custom section: groups all imports with the specified Prefix.
      - prefix(github.com/open-edge-platform)

issues:
  max-issues-per-linter: 0

  max-same-issues: 0

  # Autogenerated files can be skipped (I'm looking at you gRPC/OpenAPI).
  exclude-dirs:
    - "pkg/api/"

  # When set to `true` linter will analyze only new code which are
  # not committed or after some specific revision. This is a cool
  # feature when you're going to introduce linter into a big project.
  # But I prefer going gradually package by package.
  # So, it's set to `false` to scan all code.
  new: false

  fix: false

  exclude:
    - Error return value of `.*Close` is not checked
    - Error return value of `.*Flush` is not checked
    - Error return value of `.*Write` is not checked
    - Error return value of `.*Stop` is not checked
  exclude-rules:
    - path: internal/server/manager.go
      linters:
        - cyclop
    - path: internal/worker/handlers/host.go
      linters:
        - cyclop
    - path: internal/worker/handlers/user_test.go
      linters:
        - staticcheck
    - path: internal/worker/handler_test.go
      linters:
        - staticcheck
    - path: pkg/utils/utils_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/handlers/user_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/handlers/site_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/handlers/region_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/handlers/host_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/handlers/compute_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/handler_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/worker/worker_test.go
      linters:
        - revive
        - staticcheck
    - path: internal/auth/auth.go
      linters:
        - revive
        - staticcheck
        - cyclop
        - funlen

output:
  # Format:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|junit-xml|github-actions
  #
  # Multiple can be specified by separating them by comma, output can be provided
  # for each of them by separating format name and path by colon symbol.
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  # Example: "checkstyle:report.json,colored-line-number"
  #
  # Default: colored-line-number
  formats: colored-line-number:stdout,html:out/golangci-lint_report.html

  print-linter-name: true

  uniq-by-line: false

  sort-results: true
