// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package api

import (
	"time"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-openapi/strfmt"
)

// Defines values for HostBmcKind.
const (
	BAREMETALCONTROLLERKINDIPMI        HostBmcKind = "BAREMETAL_CONTROLLER_KIND_IPMI"
	BAREMETALCONTROLLERKINDNONE        HostBmcKind = "BAREMETAL_CONTROLLER_KIND_NONE"
	BAREMETALCONTROLLERKINDPDU         HostBmcKind = "BAREMETAL_CONTROLLER_KIND_PDU"
	BAREMETALCONTROLLERKINDUNSPECIFIED HostBmcKind = "BAREMETAL_CONTROLLER_KIND_UNSPECIFIED"
	BAREMETALCONTROLLERKINDVPRO        HostBmcKind = "BAREMETAL_CONTROLLER_KIND_VPRO"
)

// Defines values for HostPowerState.
const (
	POWERSTATEERROR       HostPowerState = "POWER_STATE_ERROR"
	POWERSTATEOFF         HostPowerState = "POWER_STATE_OFF"
	POWERSTATEON          HostPowerState = "POWER_STATE_ON"
	POWERSTATEUNSPECIFIED HostPowerState = "POWER_STATE_UNSPECIFIED"
)

// Defines values for HostState.
const (
	HOSTSTATEDELETED     HostState = "HOST_STATE_DELETED"
	HOSTSTATEONBOARDED   HostState = "HOST_STATE_ONBOARDED"
	HOSTSTATEREGISTERED  HostState = "HOST_STATE_REGISTERED"
	HOSTSTATEUNSPECIFIED HostState = "HOST_STATE_UNSPECIFIED"
	HOSTSTATEUNTRUSTED   HostState = "HOST_STATE_UNTRUSTED"
)

// Defines values for IPAddressConfigMethod.
const (
	IPADDRESSCONFIGMODEDYNAMIC     IPAddressConfigMethod = "IP_ADDRESS_CONFIG_MODE_DYNAMIC"
	IPADDRESSCONFIGMODESTATIC      IPAddressConfigMethod = "IP_ADDRESS_CONFIG_MODE_STATIC"
	IPADDRESSCONFIGMODEUNSPECIFIED IPAddressConfigMethod = "IP_ADDRESS_CONFIG_MODE_UNSPECIFIED"
)

// Defines values for IPAddressStatus.
const (
	IPADDRESSSTATUSASSIGNED           IPAddressStatus = "IP_ADDRESS_STATUS_ASSIGNED"
	IPADDRESSSTATUSASSIGNMENTERROR    IPAddressStatus = "IP_ADDRESS_STATUS_ASSIGNMENT_ERROR"
	IPADDRESSSTATUSCONFIGURATIONERROR IPAddressStatus = "IP_ADDRESS_STATUS_CONFIGURATION_ERROR"
	IPADDRESSSTATUSCONFIGURED         IPAddressStatus = "IP_ADDRESS_STATUS_CONFIGURED"
	IPADDRESSSTATUSERROR              IPAddressStatus = "IP_ADDRESS_STATUS_ERROR"
	IPADDRESSSTATUSRELEASED           IPAddressStatus = "IP_ADDRESS_STATUS_RELEASED"
	IPADDRESSSTATUSUNSPECIFIED        IPAddressStatus = "IP_ADDRESS_STATUS_UNSPECIFIED"
)

// Defines values for InstanceKind.
const (
	INSTANCEKINDMETAL       InstanceKind = "INSTANCE_KIND_METAL"
	INSTANCEKINDUNSPECIFIED InstanceKind = "INSTANCE_KIND_UNSPECIFIED"
)

// Defines values for InstanceState.
const (
	INSTANCESTATEDELETED     InstanceState = "INSTANCE_STATE_DELETED"
	INSTANCESTATERUNNING     InstanceState = "INSTANCE_STATE_RUNNING"
	INSTANCESTATEUNSPECIFIED InstanceState = "INSTANCE_STATE_UNSPECIFIED"
	INSTANCESTATEUNTRUSTED   InstanceState = "INSTANCE_STATE_UNTRUSTED"
)

// Defines values for LinkStateType.
const (
	LINKSTATEDOWN        LinkStateType = "LINK_STATE_DOWN"
	LINKSTATEUNSPECIFIED LinkStateType = "LINK_STATE_UNSPECIFIED"
	LINKSTATEUP          LinkStateType = "LINK_STATE_UP"
)

// Defines values for LocationType.
const (
	RESOURCEKINDREGION LocationType = "RESOURCE_KIND_REGION"
	RESOURCEKINDSITE   LocationType = "RESOURCE_KIND_SITE"
)

// Defines values for OperatingSystemProvider.
const (
	OPERATINGSYSTEMPROVIDERINFRA       OperatingSystemProvider = "OPERATING_SYSTEM_PROVIDER_INFRA"
	OPERATINGSYSTEMPROVIDERLENOVO      OperatingSystemProvider = "OPERATING_SYSTEM_PROVIDER_LENOVO"
	OPERATINGSYSTEMPROVIDERUNSPECIFIED OperatingSystemProvider = "OPERATING_SYSTEM_PROVIDER_UNSPECIFIED"
)

// Defines values for OperatingSystemType.
const (
	OPERATINGSYSTEMTYPEIMMUTABLE   OperatingSystemType = "OPERATING_SYSTEM_TYPE_IMMUTABLE"
	OPERATINGSYSTEMTYPEMUTABLE     OperatingSystemType = "OPERATING_SYSTEM_TYPE_MUTABLE"
	OPERATINGSYSTEMTYPEUNSPECIFIED OperatingSystemType = "OPERATING_SYSTEM_TYPE_UNSPECIFIED"
)

// Defines values for ProviderKind.
const (
	PROVIDERKINDBAREMETAL   ProviderKind = "PROVIDER_KIND_BAREMETAL"
	PROVIDERKINDUNSPECIFIED ProviderKind = "PROVIDER_KIND_UNSPECIFIED"
)

// Defines values for ProviderVendor.
const (
	PROVIDERVENDORLENOVOLOCA  ProviderVendor = "PROVIDER_VENDOR_LENOVO_LOCA"
	PROVIDERVENDORLENOVOLXCA  ProviderVendor = "PROVIDER_VENDOR_LENOVO_LXCA"
	PROVIDERVENDORUNSPECIFIED ProviderVendor = "PROVIDER_VENDOR_UNSPECIFIED"
)

// Defines values for ScheduleStatus.
const (
	SCHEDULESTATUSMAINTENANCE ScheduleStatus = "SCHEDULE_STATUS_MAINTENANCE"
	SCHEDULESTATUSOSUPDATE    ScheduleStatus = "SCHEDULE_STATUS_OS_UPDATE"
	SCHEDULESTATUSUNSPECIFIED ScheduleStatus = "SCHEDULE_STATUS_UNSPECIFIED"
)

// Defines values for SecurityFeature.
const (
	SECURITYFEATURENONE                            SecurityFeature = "SECURITY_FEATURE_NONE"
	SECURITYFEATURESECUREBOOTANDFULLDISKENCRYPTION SecurityFeature = "SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION"
	SECURITYFEATUREUNSPECIFIED                     SecurityFeature = "SECURITY_FEATURE_UNSPECIFIED"
)

// Defines values for StatusIndicator.
const (
	STATUSINDICATIONERROR       StatusIndicator = "STATUS_INDICATION_ERROR"
	STATUSINDICATIONIDLE        StatusIndicator = "STATUS_INDICATION_IDLE"
	STATUSINDICATIONINPROGRESS  StatusIndicator = "STATUS_INDICATION_IN_PROGRESS"
	STATUSINDICATIONUNSPECIFIED StatusIndicator = "STATUS_INDICATION_UNSPECIFIED"
)

// Defines values for TelemetryCollectorKind.
const (
	TELEMETRYCOLLECTORKINDCLUSTER     TelemetryCollectorKind = "TELEMETRY_COLLECTOR_KIND_CLUSTER"
	TELEMETRYCOLLECTORKINDHOST        TelemetryCollectorKind = "TELEMETRY_COLLECTOR_KIND_HOST"
	TELEMETRYCOLLECTORKINDUNSPECIFIED TelemetryCollectorKind = "TELEMETRY_COLLECTOR_KIND_UNSPECIFIED"
)

// Defines values for TelemetrySeverityLevel.
const (
	TELEMETRYSEVERITYLEVELCRITICAL    TelemetrySeverityLevel = "TELEMETRY_SEVERITY_LEVEL_CRITICAL"
	TELEMETRYSEVERITYLEVELDEBUG       TelemetrySeverityLevel = "TELEMETRY_SEVERITY_LEVEL_DEBUG"
	TELEMETRYSEVERITYLEVELERROR       TelemetrySeverityLevel = "TELEMETRY_SEVERITY_LEVEL_ERROR"
	TELEMETRYSEVERITYLEVELINFO        TelemetrySeverityLevel = "TELEMETRY_SEVERITY_LEVEL_INFO"
	TELEMETRYSEVERITYLEVELUNSPECIFIED TelemetrySeverityLevel = "TELEMETRY_SEVERITY_LEVEL_UNSPECIFIED"
	TELEMETRYSEVERITYLEVELWARN        TelemetrySeverityLevel = "TELEMETRY_SEVERITY_LEVEL_WARN"
)

// Defines values for WorkloadKind.
const (
	WORKLOADKINDCLUSTER     WorkloadKind = "WORKLOAD_KIND_CLUSTER"
	WORKLOADKINDUNSPECIFIED WorkloadKind = "WORKLOAD_KIND_UNSPECIFIED"
)

// Defines values for WorkloadMemberKind.
const (
	WORKLOADMEMBERKINDCLUSTERNODE WorkloadMemberKind = "WORKLOAD_MEMBER_KIND_CLUSTER_NODE"
	WORKLOADMEMBERKINDUNSPECIFIED WorkloadMemberKind = "WORKLOAD_MEMBER_KIND_UNSPECIFIED"
)

// Defines an amount of resources related to memory and disk by default, specified in bytes.
type Amount = string

// A host resource.
type Host struct {
	// The release date of the host BIOS.
	BiosReleaseDate *string `json:"biosReleaseDate,omitempty"`

	// The vendor of the host BIOS.
	BiosVendor *string `json:"biosVendor,omitempty"`

	// The version of the host BIOS.
	BiosVersion *string `json:"biosVersion,omitempty"`

	// BMC IP address, such as "192.0.0.1".
	BmcIp *string `json:"bmcIp,omitempty"`

	// The type of BMC.
	BmcKind *HostBmcKind `json:"bmcKind,omitempty"`

	// Architecture of the CPU model, e.g. x86_64.
	CpuArchitecture *string `json:"cpuArchitecture,omitempty"`

	// String list of all CPU capabilities (possibly JSON).
	CpuCapabilities *string `json:"cpuCapabilities,omitempty"`

	// Number of CPU cores.
	CpuCores *uint32 `json:"cpuCores,omitempty"`

	// CPU model of the host.
	CpuModel *string `json:"cpuModel,omitempty"`

	// Number of physical CPU sockets.
	CpuSockets *uint32 `json:"cpuSockets,omitempty"`

	// Total number of threads supported by the CPU.
	CpuThreads *uint32 `json:"cpuThreads,omitempty"`

	// A JSON field describing the CPU topology. The CPU topology may contain, among others, information about CPU core types, their layout, and mapping to CPU sockets.
	CpuTopology *string `json:"cpuTopology,omitempty"`

	// The representation of a host power state.
	CurrentPowerState *HostPowerState `json:"currentPowerState,omitempty"`

	// State of the host.
	CurrentState *HostState `json:"currentState,omitempty"`

	// The representation of a host power state.
	DesiredPowerState *HostPowerState `json:"desiredPowerState,omitempty"`

	// State of the host.
	DesiredState *HostState `json:"desiredState,omitempty"`

	// The list of GPU capabilities.
	HostGpus *[]HostResourcesGPU `json:"hostGpus,omitempty"`

	// The list of interface capabilities.
	HostNics *[]HostResourcesInterface `json:"hostNics,omitempty"`

	// The host's lifecycle status message.
	HostStatus *string `json:"hostStatus,omitempty"`

	// The status indicator.
	HostStatusIndicator *StatusIndicator `json:"hostStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's lifecycle status was last updated.
	HostStatusTimestamp *uint64 `json:"hostStatusTimestamp,omitempty"`

	// The list of storage capabilities.
	HostStorages *[]HostResourcesStorage `json:"hostStorages,omitempty"`

	// The list of USB capabilities.
	HostUsbs *[]HostResourcesUSB `json:"hostUsbs,omitempty"`

	// The host name.
	Hostname *string `json:"hostname,omitempty"`

	// The joint set of location's and host's logical metadata.
	InheritedMetadata *MetadataJoin `json:"inheritedMetadata,omitempty"`

	// An instance resource.
	Instance *Instance `json:"instance,omitempty"`

	// Quantity of the RAM in the system, in bytes.
	MemoryBytes *string `json:"memoryBytes,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The host name.
	Name string `json:"name"`

	// The note associated with the host.
	Note *string `json:"note,omitempty"`

	// The host's onboarding status message.
	OnboardingStatus *string `json:"onboardingStatus,omitempty"`

	// The status indicator.
	OnboardingStatusIndicator *StatusIndicator `json:"onboardingStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's onboarding status was last updated.
	OnboardingStatusTimestamp *uint64 `json:"onboardingStatusTimestamp,omitempty"`

	// The host's product name.
	ProductName *string `json:"productName,omitempty"`

	// A provider resource.
	Provider *Provider `json:"provider,omitempty"`

	// The host's registration status message.
	RegistrationStatus *string `json:"registrationStatus,omitempty"`

	// The status indicator.
	RegistrationStatusIndicator *StatusIndicator `json:"registrationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's registration status was last updated.
	RegistrationStatusTimestamp *uint64 `json:"registrationStatusTimestamp,omitempty"`

	// Resource ID, generated on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// SMBIOS device serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// A site resource.
	Site *Site `json:"site,omitempty"`

	// The site where the host is located.
	SiteId *string `json:"siteId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The host UUID identifier; UUID is unique and immutable.
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// The type of BMC.
type HostBmcKind string

// A freeform field associated with the host invalidate or delete operations to store the reason for change.
type HostOperationWithNote struct {
	Note string `json:"note"`
}

// The representation of a host power state.
type HostPowerState string

// Host registration information.
type HostRegisterInfo struct {
	// Set to enforce auto-onboarding of the host, which means that no confirmation will be required when the host connects for the first time, to Edge Orchestrator.
	AutoOnboard *bool `json:"autoOnboard,omitempty"`

	// The host name.
	Name *string `json:"name,omitempty"`

	// The host's SMBIOS serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The host's UUID identifier.
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// The set of available host GPU cards.
type HostResourcesGPU struct {
	// The specific GPU device capabilities [e.g., PCI Express*, MSI*, power management (PM)].
	Capabilities *[]string `json:"capabilities,omitempty"`

	// The human-readable GPU device description.
	Description *string `json:"description,omitempty"`

	// The GPU device name.
	DeviceName *string `json:"deviceName,omitempty"`

	// The GPU device's PCI identifier.
	PciId *string `json:"pciId,omitempty"`

	// The GPU device model.
	Product *string `json:"product,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The GPU device vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// The set of available host interfaces.
type HostResourcesInterface struct {
	// Defines if the card is the Baseboard Management Controller (BMC) interface.
	BmcInterface *bool `json:"bmcInterface,omitempty"`

	// The interface name.
	DeviceName *string `json:"deviceName,omitempty"`

	// The interface's IP address list.
	Ipaddresses *[]IPAddress `json:"ipaddresses,omitempty"`

	// A generic structure to define the state of a link.
	LinkState *LinkState `json:"linkState,omitempty"`

	// The interface's MAC address.
	MacAddr *string `json:"macAddr,omitempty"`

	// Defines an amount of resources related to memory and disk by default, specified in bytes.
	Mtu *Amount `json:"mtu,omitempty"`

	// The interface's PCI identifier.
	PciIdentifier *string `json:"pciIdentifier,omitempty"`

	// Flag that represents if the interface has SR-IOV support.
	SriovEnabled *bool `json:"sriovEnabled,omitempty"`

	// The number of virtual functions (VFs) currently provisioned on the interface, if SR-IOV is supported.
	SriovVfsNum *int `json:"sriovVfsNum,omitempty"`

	// The maximum number of VFs the interface supports, if SR-IOV is supported.
	SriovVfsTotal *int `json:"sriovVfsTotal,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// The set of available host storage capabilities.
type HostResourcesStorage struct {
	// Defines an amount of resources related to memory and disk by default, specified in bytes.
	CapacityBytes *Amount `json:"capacityBytes,omitempty"`

	// The storage device name.
	DeviceName *string `json:"deviceName,omitempty"`

	// The storage model.
	Model *string `json:"model,omitempty"`

	// The storage device's unique serial number.
	Serial *string `json:"serial,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The storage vendor.
	Vendor *string `json:"vendor,omitempty"`

	// The storage device's unique identifier.
	Wwid *string `json:"wwid,omitempty"`
}

// The set of host USB resources.
type HostResourcesUSB struct {
	// USB device number assigned by the OS.
	Addr *string `json:"addr,omitempty"`

	// Bus number that the device connects to.
	Bus *string `json:"bus,omitempty"`

	// Class defined by USB Implementers Forum, Inc (USB-IF).
	Class *string `json:"class,omitempty"`

	// The USB device name.
	DeviceName *string `json:"deviceName,omitempty"`

	// Hexadecimal number representing the ID of the USB device product.
	IdProduct *string `json:"idProduct,omitempty"`

	// Hexadecimal number representing the ID of the USB device vendor.
	IdVendor *string `json:"idVendor,omitempty"`

	// Serial number of the USB device.
	Serial *string `json:"serial,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// State of the host.
type HostState string

// A list of host objects.
type HostsList struct {
	// Indicates if there are more hosts available to be retrieved.
	HasNext *bool   `json:"hasNext,omitempty"`
	Hosts   *[]Host `json:"hosts,omitempty"`

	// Total number of items the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A summary of host object status.
type HostsSummary struct {
	Error       *int `json:"error,omitempty"`
	Running     *int `json:"running,omitempty"`
	Total       *int `json:"total,omitempty"`
	Unallocated *int `json:"unallocated,omitempty"`
}

// An IP address represented using the CIDR notation, and additional information identifying the configuration mode of the address.
type IPAddress struct {
	// CIDR representation of the IP address.
	Address *strfmt.CIDR `json:"address,omitempty"`

	// Specifies how the IP address is configured.
	ConfigMethod *IPAddressConfigMethod `json:"configMethod,omitempty"`

	// The status of the IP address.
	Status *IPAddressStatus `json:"status,omitempty"`

	// The details of the status of the IP address.
	StatusDetail *string `json:"statusDetail,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// Specifies how the IP address is configured.
type IPAddressConfigMethod string

// The status of the IP address.
type IPAddressStatus string

// An instance resource.
type Instance struct {
	// An OS resource.
	CurrentOs *OperatingSystemResource `json:"currentOs,omitempty"`

	// State of the instance.
	CurrentState *InstanceState `json:"currentState,omitempty"`

	// An OS resource.
	DesiredOs *OperatingSystemResource `json:"desiredOs,omitempty"`

	// State of the instance.
	DesiredState *InstanceState `json:"desiredState,omitempty"`

	// A host resource.
	Host *Host `json:"host,omitempty"`

	// The host's unique identifier associated with the instance.
	HostID *string `json:"hostID,omitempty"`

	// The instance's unique identifier. Alias of resourceID.
	InstanceID *string `json:"instanceID,omitempty"`

	// The instance's lifecycle status message.
	InstanceStatus *string `json:"instanceStatus,omitempty"`

	// The detailed status of the instance's software components.
	InstanceStatusDetail *string `json:"instanceStatusDetail,omitempty"`

	// The status indicator.
	InstanceStatusIndicator *StatusIndicator `json:"instanceStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's lifecycle status was last updated.
	InstanceStatusTimestamp *uint64 `json:"instanceStatusTimestamp,omitempty"`

	// Type of the instance.
	Kind *InstanceKind `json:"kind,omitempty"`

	// A local account resource.
	LocalAccount *LocalAccount `json:"localAccount,omitempty"`

	// The unique identifier of local account will be associated with the instance.
	LocalAccountID *string `json:"localAccountID,omitempty"`

	// The instance's human-readable name.
	Name *string `json:"name,omitempty"`

	// An OS resource.
	Os *OperatingSystemResource `json:"os,omitempty"`

	// The unique identifier of OS resource that must be installed on the instance.
	OsID *string `json:"osID,omitempty"`

	// The instance's provisioning status message.
	ProvisioningStatus *string `json:"provisioningStatus,omitempty"`

	// The status indicator.
	ProvisioningStatusIndicator *StatusIndicator `json:"provisioningStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's provisioning status was last updated.
	ProvisioningStatusTimestamp *uint64 `json:"provisioningStatusTimestamp,omitempty"`

	// Resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// Security capabilities of a resource.
	SecurityFeature *SecurityFeature `json:"securityFeature,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The instance's software trusted attestation status message.
	TrustedAttestationStatus *string `json:"trustedAttestationStatus,omitempty"`

	// The status indicator.
	TrustedAttestationStatusIndicator *StatusIndicator `json:"trustedAttestationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's software trusted attestation status was last updated.
	TrustedAttestationStatusTimestamp *uint64 `json:"trustedAttestationStatusTimestamp,omitempty"`

	// The instance's software update status message.
	UpdateStatus *string `json:"updateStatus,omitempty"`

	// Beta: The detailed description of the instance's last software update.
	UpdateStatusDetail *string `json:"updateStatusDetail,omitempty"`

	// The status indicator.
	UpdateStatusIndicator *StatusIndicator `json:"updateStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's software update status was last updated.
	UpdateStatusTimestamp *uint64 `json:"updateStatusTimestamp,omitempty"`

	// The workload members associated with the instance.
	WorkloadMembers *[]WorkloadMember `json:"workloadMembers,omitempty"`
}

// Type of the instance.
type InstanceKind string

// A list of instance objects.
type InstanceList struct {
	// Indicates if there are more instance objects available to be retrieved.
	HasNext   *bool       `json:"hasNext,omitempty"`
	Instances *[]Instance `json:"instances,omitempty"`

	// Total number of items the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// State of the instance.
type InstanceState string

// A generic structure to define the state of a link.
type LinkState struct {
	// The timestamp when the link state was last updated.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// the type of the state.
	Type *LinkStateType `json:"type,omitempty"`
}

// the type of the state.
type LinkStateType string

// A local account resource.
type LocalAccount struct {
	// The local account resource's unique identifier. Alias of resourceId.
	LocalAccountID *string `json:"localAccountID,omitempty"`

	// resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// The local account's sshkey.
	SshKey string `json:"sshKey"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The local account's username.
	Username string `json:"username"`
}

// A list of local account objects.
type LocalAccountList struct {
	// Indicates if there are more objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Array of local account objects.
	LocalAccounts *[]LocalAccount `json:"localAccounts,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A location node's resource, region, or site.
type LocationNode struct {
	// The node's human-readable name.
	Name *string `json:"name,omitempty"`

	// The associated resource ID of the parent resource of this location node. For a region, it could be empty or a regionId. For a site, it could be empty or a regionId.
	ParentId *string `json:"parentId,omitempty"`

	// The associated node's resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// The type of the location node.
	Type *LocationType `json:"type,omitempty"`
}

// A LocationNodeList object. Contains all the required information to build a tree of regions and sites, given their associations.
type LocationNodeList struct {
	// The ordered list of nodes (root to leaf) of the location's hierarchy tree of regions and sites. The relationship of the root to leaf is limited by the maximum depth of seven items.
	Nodes *[]LocationNode `json:"nodes,omitempty"`

	// The number of items returned in the nodes's array that match the query parameters of the request.
	OutputElements *int `json:"outputElements,omitempty"`

	// The total number of items that match the query parameters of the request.
	TotalElements *int `json:"totalElements,omitempty"`
}

// The type of the location node.
type LocationType string

// A metadata list, represented by a list of key:value pairs.
type Metadata = []struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// The joint set of location's and host's logical metadata.
type MetadataJoin struct {
	// A metadata list, represented by a list of key:value pairs.
	Location *Metadata `json:"location,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Ou *Metadata `json:"ou,omitempty"`
}

// An OU resource.
type OU struct {
	// A metadata list, represented by a list of key:value pairs.
	InheritedMetadata *Metadata `json:"inheritedMetadata,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The OU's name.
	Name string `json:"name"`

	// The OU resource's unique identifier. Alias of resourceId.
	OuID *string `json:"ouID,omitempty"`

	// The kind of OU resource, e.g. BU and client.
	OuKind *string `json:"ouKind,omitempty"`

	// The parent OU's unique identifier that the OU is associated to, when it exists.
	ParentOu *string `json:"parentOu,omitempty"`

	// resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of OU objects.
type OUsList struct {
	OUs *[]OU `json:"OUs,omitempty"`

	// Indicates if there are more OU objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// Describes the OS owner that drives the OS provisioning.
type OperatingSystemProvider string

// An OS resource.
type OperatingSystemResource struct {
	// The OS resource's architecture.
	Architecture *string `json:"architecture,omitempty"`

	// A unique identifier of the OS image that can be retrieved from the running OS.
	ImageId *string `json:"imageId,omitempty"`

	// The URL repository of the OS image. If set, overwrites repoUrl.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Freeform text, OS-dependent. A list of package names, one per line (newline separated). Must not contain version information.
	InstalledPackages *string `json:"installedPackages,omitempty"`

	// The OS resource's kernel command.
	KernelCommand *string `json:"kernelCommand,omitempty"`

	// The OS resource's name.
	Name *string `json:"name,omitempty"`

	// Describes the OS owner that drives the OS provisioning.
	OsProvider *OperatingSystemProvider `json:"osProvider,omitempty"`

	// The OS resource's unique identifier. Alias of resourceId.
	OsResourceID *string `json:"osResourceID,omitempty"`

	// OsType describes the immutability of the OS. This field is immutable after creation.
	OsType *OperatingSystemType `json:"osType,omitempty"`

	// Opaque JSON field storing references to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations. If empty, the default OS installation will be used.
	PlatformBundle *string `json:"platformBundle,omitempty"`

	// Name of the OS profile that the OS resource belongs to.
	ProfileName *string `json:"profileName,omitempty"`

	// Version of OS profile that the OS resource belongs to.
	ProfileVersion *string `json:"profileVersion,omitempty"`

	// The URL repository of the OS update sources. Deprecated. Use imageUrl to filter repoUrl.
	RepoUrl *string `json:"repoUrl,omitempty"`

	// Resource ID, generated by inventory on Create
	ResourceId *string `json:"resourceId,omitempty"`

	// Security capabilities of a resource.
	SecurityFeature *SecurityFeature `json:"securityFeature,omitempty"`

	// SHA256 checksum of the OS resource in hexadecimal representation.
	Sha256 string `json:"sha256"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The list of OS resource update sources.
	UpdateSources []string `json:"updateSources"`
}

// A list of OS resource objects.
type OperatingSystemResourceList struct {
	OperatingSystemResources *[]OperatingSystemResource `json:"OperatingSystemResources,omitempty"`

	// Indicates if there are more OS objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// OsType describes the immutability of the OS. This field is immutable after creation.
type OperatingSystemType string

// Carries a message in an HTTP error response.
type ProblemDetails struct {
	// Contains detailed information about the problem, such as its source data that can be used for debugging purposes.
	Message *string `json:"message,omitempty"`
}

// A provider resource.
type Provider struct {
	// The provider resource's list of credentials.
	ApiCredentials *[]string `json:"apiCredentials,omitempty"`

	// The provider resource's API endpoint.
	ApiEndpoint string `json:"apiEndpoint"`

	// Opaque provider configuration.
	Config *string `json:"config,omitempty"`

	// The provider resource's name.
	Name string `json:"name"`

	// The provider resource's unique identifier. Alias of resourceId.
	ProviderID *string `json:"providerID,omitempty"`

	// Kind of provider.
	ProviderKind ProviderKind `json:"providerKind"`

	// Vendor of the provider.
	ProviderVendor *ProviderVendor `json:"providerVendor,omitempty"`

	// resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// Kind of provider.
type ProviderKind string

// A list of provider objects.
type ProviderList struct {
	// Indicates if there are more objects available to be retrieved.
	HasNext   *bool       `json:"hasNext,omitempty"`
	Providers *[]Provider `json:"providers,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// Vendor of the provider.
type ProviderVendor string

// The proxy information.
type Proxy struct {
	// The FTP proxy.
	FtpProxy *string `json:"ftpProxy,omitempty"`

	// The HTTP proxy.
	HttpProxy *string `json:"httpProxy,omitempty"`

	// The HTTPS proxy.
	HttpsProxy *string `json:"httpsProxy,omitempty"`

	// The no-proxy info.
	NoProxy *string `json:"noProxy,omitempty"`
}

// A region resource
type Region struct {
	// A metadata list, represented by a list of key:value pairs.
	InheritedMetadata *Metadata `json:"inheritedMetadata,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The region's name.
	Name *string `json:"name,omitempty"`

	// The parent region's unique identifier that the region is associated to, if it exists. This field cannot be used in filter.
	ParentId *string `json:"parentId,omitempty"`

	// A region resource
	ParentRegion *Region `json:"parentRegion,omitempty"`

	// The region's unique identifier. Alias of resourceId.
	RegionID *string `json:"regionID,omitempty"`

	// resource ID, generated by the inventory on Create
	ResourceId *string `json:"resourceId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// Total number of sites associated to this region, directly or by child regions.
	TotalSites *int `json:"totalSites,omitempty"`
}

// A list of region objects.
type RegionsList struct {
	// Indicates if there are more location objects available to be retrieved.
	HasNext *bool     `json:"hasNext,omitempty"`
	Regions *[]Region `json:"regions,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A repeated-schedule resource.
type RepeatedSchedule struct {
	CronDayMonth string `json:"cronDayMonth"`
	CronDayWeek  string `json:"cronDayWeek"`
	CronHours    string `json:"cronHours"`
	CronMinutes  string `json:"cronMinutes"`
	CronMonth    string `json:"cronMonth"`

	// The duration in seconds of the repeated schedule, per schedule.
	DurationSeconds int `json:"durationSeconds"`

	// The schedule's name.
	Name *string `json:"name,omitempty"`

	// The repeated schedule's unique identifier. Alias of resourceId.
	RepeatedScheduleID *string `json:"repeatedScheduleID,omitempty"`

	// resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// The representation of a schedule's status.
	ScheduleStatus ScheduleStatus `json:"scheduleStatus"`

	// A host resource.
	TargetHost *Host `json:"targetHost,omitempty"`

	// The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
	TargetHostId *string `json:"targetHostId,omitempty"`

	// A region resource
	TargetRegion *Region `json:"targetRegion,omitempty"`

	// The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
	TargetRegionId *string `json:"targetRegionId,omitempty"`

	// A site resource.
	TargetSite *Site `json:"targetSite,omitempty"`

	// The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
	TargetSiteId *string `json:"targetSiteId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of repeated schedule objects.
type RepeatedSchedulesList struct {
	RepeatedSchedules *[]RepeatedSchedule `json:"RepeatedSchedules,omitempty"`

	// Indicates if there are more repeated schedule objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// The representation of a schedule's status.
type ScheduleStatus string

// List of all schedule objects, repeated and single.
type SchedulesListJoin struct {
	// Contains a flat list of repeated schedules, possibly including all inherited ones.
	RepeatedSchedules *[]RepeatedSchedule `json:"RepeatedSchedules,omitempty"`

	// Contains a flat list of single schedules, possibly including all inherited ones.
	SingleSchedules *[]SingleSchedule `json:"SingleSchedules,omitempty"`

	// Indicates if there are more schedule objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// Security capabilities of a resource.
type SecurityFeature string

// A single schedule resource.
type SingleSchedule struct {
	// The end time in seconds, of the single schedule. The value of endSeconds must be equal to or bigger than the value of startSeconds.
	EndSeconds *int `json:"endSeconds,omitempty"`

	// The schedule's name.
	Name *string `json:"name,omitempty"`

	// resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// The representation of a schedule's status.
	ScheduleStatus ScheduleStatus `json:"scheduleStatus"`

	// The single schedule resource's unique identifier. Alias of resourceId.
	SingleScheduleID *string `json:"singleScheduleID,omitempty"`

	// The start time in seconds, of the single schedule.
	StartSeconds int `json:"startSeconds"`

	// A host resource.
	TargetHost *Host `json:"targetHost,omitempty"`

	// The target host ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
	TargetHostId *string `json:"targetHostId,omitempty"`

	// A region resource
	TargetRegion *Region `json:"targetRegion,omitempty"`

	// The target region ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
	TargetRegionId *string `json:"targetRegionId,omitempty"`

	// A site resource.
	TargetSite *Site `json:"targetSite,omitempty"`

	// The target site ID of the schedule. Only one target can be provided per schedule. This field cannot be used as filter.
	TargetSiteId *string `json:"targetSiteId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of single schedule objects.
type SingleSchedulesList struct {
	SingleSchedules *[]SingleSchedule `json:"SingleSchedules,omitempty"`

	// Indicates if there are more objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A site resource.
type Site struct {
	// The list of DNS servers that the site has available.
	DnsServers *[]string `json:"dnsServers,omitempty"`

	// The set of Docker* registries that the site has available.
	DockerRegistries *[]string `json:"dockerRegistries,omitempty"`

	// The joint set of location's and host's logical metadata.
	InheritedMetadata *MetadataJoin `json:"inheritedMetadata,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The set of site-available metrics, specified in a single JSON object.
	MetricsEndpoint *string `json:"metricsEndpoint,omitempty"`

	// The site's human-readable name.
	Name *string `json:"name,omitempty"`

	// An OU resource.
	Ou *OU `json:"ou,omitempty"`

	// The OU unique identifier that the site is associated to, if it exists. This field cannot be used in filter.
	OuId *string `json:"ouId,omitempty"`

	// A provider resource.
	Provider *Provider `json:"provider,omitempty"`

	// The proxy information.
	Proxy *Proxy `json:"proxy,omitempty"`

	// A region resource
	Region *Region `json:"region,omitempty"`

	// The region's unique identifier that the site is associated to. This field cannot be used in filter.
	RegionId *string `json:"regionId,omitempty"`

	// resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// The site's unique identifier. Alias of resourceId.
	SiteID *string `json:"siteID,omitempty"`

	// The geolocation latitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLat must be in the range of +/- 90 degrees.
	SiteLat *int `json:"siteLat,omitempty"`

	// The geolocation longitude of the site. Points are represented as latitude-longitude pairs in the E7 representation (degrees are multiplied by 10**7 and rounded to the nearest integer). siteLng must be in the range of +/- 180 degrees (inclusive).
	SiteLng *int `json:"siteLng,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of site objects.
type SitesList struct {
	// Indicates if there are more objects available to be retrieved.
	HasNext *bool   `json:"hasNext,omitempty"`
	Sites   *[]Site `json:"sites,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// The status indicator.
type StatusIndicator string

// Kind of telemetry collector.
type TelemetryCollectorKind string

// Telemetry group that defines a set of log types to collect.
type TelemetryLogsGroup struct {
	// Kind of telemetry collector.
	CollectorKind TelemetryCollectorKind `json:"collectorKind"`

	// A list of log groups to collect.
	Groups []string `json:"groups"`

	// Human-readable name for the log group
	Name string `json:"name"`

	// Unique ID of the telemetry group.
	TelemetryLogsGroupId *string `json:"telemetryLogsGroupId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of log group objects.
type TelemetryLogsGroupList struct {
	TelemetryLogsGroups *[]TelemetryLogsGroup `json:"TelemetryLogsGroups,omitempty"`

	// Indicates if there are more log group objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A telemetry log profile for a hierarchy object.
type TelemetryLogsProfile struct {
	// Log level used for the telemetry config. This field must only be defined if kind equals to TELEMETRY_CONFIG_KIND_LOGS.
	LogLevel TelemetrySeverityLevel `json:"logLevel"`

	// Telemetry group that defines a set of log types to collect.
	LogsGroup *TelemetryLogsGroup `json:"logsGroup,omitempty"`

	// The unique identifier of the telemetry log group.
	LogsGroupId string `json:"logsGroupId"`

	// The ID of the telemetry profile.
	ProfileId *string `json:"profileId,omitempty"`

	// The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
	TargetInstance *string `json:"targetInstance,omitempty"`

	// The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
	TargetRegion *string `json:"targetRegion,omitempty"`

	// The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
	TargetSite *string `json:"targetSite,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of telemetry log profiles.
type TelemetryLogsProfileList struct {
	TelemetryLogsProfiles *[]TelemetryLogsProfile `json:"TelemetryLogsProfiles,omitempty"`

	// Indicates if there are more telemetry log profile objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A definition of metric groups to monitor.
type TelemetryMetricsGroup struct {
	// Kind of telemetry collector.
	CollectorKind TelemetryCollectorKind `json:"collectorKind"`

	// A list of metric groups to collect.
	Groups []string `json:"groups"`

	// Human-readable name for the metric group.
	Name string `json:"name"`

	// Unique ID of the telemetry group.
	TelemetryMetricsGroupId *string `json:"telemetryMetricsGroupId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of telemetry groups, which defines a set of metrics to collect.
type TelemetryMetricsGroupList struct {
	TelemetryMetricsGroups *[]TelemetryMetricsGroup `json:"TelemetryMetricsGroups,omitempty"`

	// Indicates if there are more telemetry metric group objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A telemetry metric profile for a hierarchy object.
type TelemetryMetricsProfile struct {
	// A definition of metric groups to monitor.
	MetricsGroup *TelemetryMetricsGroup `json:"metricsGroup,omitempty"`

	// The unique identifier of the telemetry metric group.
	MetricsGroupId string `json:"metricsGroupId"`

	// Metric interval (in seconds) for the telemetry profile. This field must only be defined if the type equals to TELEMETRY_CONFIG_KIND_METRICS.
	MetricsInterval int `json:"metricsInterval"`

	// The ID of the telemetry profile.
	ProfileId *string `json:"profileId,omitempty"`

	// The ID of the instance that the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
	TargetInstance *string `json:"targetInstance,omitempty"`

	// The ID of the region where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
	TargetRegion *string `json:"targetRegion,omitempty"`

	// The ID of the site where the telemetry profile is assigned to. Can only be one of targetInstance, targetSite, or targetRegion.
	TargetSite *string `json:"targetSite,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`
}

// A list of telemetry metric profiles.
type TelemetryMetricsProfileList struct {
	TelemetryMetricsProfiles *[]TelemetryMetricsProfile `json:"TelemetryMetricsProfiles,omitempty"`

	// Indicates if there are more telemetry metric profile objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// Total number of items that the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// Log level used for the telemetry config. This field must only be defined if kind equals to TELEMETRY_CONFIG_KIND_LOGS.
type TelemetrySeverityLevel string

// A structure to hold Update and Create timestamps.
type Timestamps struct {
	// Timestamp for the creation of the resource.
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Timestamp for the last update of the resource.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// A generic way to group compute resources to obtain a workload.
type Workload struct {
	// The ID of the external resource, used to link to resources outside the realm of Edge Infrastructure Manager.
	ExternalId *string `json:"externalId,omitempty"`

	// Type of workload.
	Kind    WorkloadKind      `json:"kind"`
	Members *[]WorkloadMember `json:"members,omitempty"`

	// Human-readable name for the workload.
	Name *string `json:"name,omitempty"`

	// resource ID, generated by the inventory on Create
	ResourceId *string `json:"resourceId,omitempty"`

	// Human-readable status of the workload.
	Status *string `json:"status,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The workload's unique identifier. Alias of resourceId.
	WorkloadId *string `json:"workloadId,omitempty"`
}

// Type of workload.
type WorkloadKind string

// A list of workload objects.
type WorkloadList struct {
	Workloads *[]Workload `json:"Workloads,omitempty"`

	// Indicates if there are more workload objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// A member of a workload.
type WorkloadMember struct {
	// An instance resource.
	Instance *Instance `json:"instance,omitempty"`

	// The unique identifier of the instance.
	InstanceId *string `json:"instanceId,omitempty"`

	// Type of workload member.
	Kind WorkloadMemberKind `json:"kind"`

	// An instance resource.
	Member *Instance `json:"member,omitempty"`

	// resource ID, generated by the inventory on Create
	ResourceId *string `json:"resourceId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// A generic way to group compute resources to obtain a workload.
	Workload *Workload `json:"workload,omitempty"`

	// The unique identifier of the workload.
	WorkloadId *string `json:"workloadId,omitempty"`

	// The workload member's unique identifier. Alias of resourceId.
	WorkloadMemberId *string `json:"workloadMemberId,omitempty"`
}

// Type of workload member.
type WorkloadMemberKind string

// A list of workload member objects.
type WorkloadMemberList struct {
	WorkloadMembers *[]WorkloadMember `json:"WorkloadMembers,omitempty"`

	// Indicates if there are more workload members objects available to be retrieved.
	HasNext *bool `json:"hasNext,omitempty"`

	// Total number of items the request would return, if not limited by pagination.
	TotalElements *int `json:"totalElements,omitempty"`
}

// Carries a message in an HTTP error response.
type N400BadRequest = ProblemDetails

// Carries a message in an HTTP error response.
type N401Unauthorized = ProblemDetails

// Carries a message in an HTTP error response.
type N403Forbidden = ProblemDetails

// Carries a message in an HTTP error response.
type N404NotFound = ProblemDetails

// Carries a message in an HTTP error response.
type N406NotAcceptable = ProblemDetails

// Carries a message in an HTTP error response.
type N408Timeout = ProblemDetails

// Carries a message in an HTTP error response.
type N409Conflict = ProblemDetails

// Carries a message in an HTTP error response.
type N412PreconditionFailed = ProblemDetails

// Carries a message in an HTTP error response.
type N422UnprocessableEntity = ProblemDetails

// Carries a message in an HTTP error response.
type N429TooManyRequests = ProblemDetails

// Carries a message in an HTTP error response.
type N500InternalServerError = ProblemDetails

// Carries a message in an HTTP error response.
type N501Unimplemented = ProblemDetails

// Carries a message in an HTTP error response.
type N503ServiceUnavailable = ProblemDetails

// GetOSResourcesParams defines parameters for GetOSResources.
type GetOSResourcesParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostOSResourcesJSONBody defines parameters for PostOSResources.
type PostOSResourcesJSONBody = OperatingSystemResource

// PatchOSResourcesOSResourceIDJSONBody defines parameters for PatchOSResourcesOSResourceID.
type PatchOSResourcesOSResourceIDJSONBody struct {
	// The OS resource's architecture.
	Architecture *string `json:"architecture,omitempty"`

	// A unique identifier of the OS image that can be retrieved from the running OS.
	ImageId *string `json:"imageId,omitempty"`

	// The URL repository of the OS image. If set, overwrites repoUrl.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Freeform text, OS-dependent. A list of package names, one per line (newline separated). Must not contain version information.
	InstalledPackages *string `json:"installedPackages,omitempty"`

	// The OS resource's kernel command.
	KernelCommand *string `json:"kernelCommand,omitempty"`

	// The OS resource's name.
	Name *string `json:"name,omitempty"`

	// Describes the OS owner that drives the OS provisioning.
	OsProvider *OperatingSystemProvider `json:"osProvider,omitempty"`

	// The OS resource's unique identifier. Alias of resourceId.
	OsResourceID *string `json:"osResourceID,omitempty"`

	// OsType describes the immutability of the OS. This field is immutable after creation.
	OsType *OperatingSystemType `json:"osType,omitempty"`

	// Opaque JSON field storing references to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations. If empty, the default OS installation will be used.
	PlatformBundle *string `json:"platformBundle,omitempty"`

	// Name of the OS profile that the OS resource belongs to.
	ProfileName *string `json:"profileName,omitempty"`

	// Version of OS profile that the OS resource belongs to.
	ProfileVersion *string `json:"profileVersion,omitempty"`

	// The URL repository of the OS update sources. Deprecated. Use imageUrl to filter repoUrl.
	RepoUrl *string `json:"repoUrl,omitempty"`

	// Resource ID, generated by inventory on Create
	ResourceId *string `json:"resourceId,omitempty"`

	// Security capabilities of a resource.
	SecurityFeature *SecurityFeature `json:"securityFeature,omitempty"`

	// SHA256 checksum of the OS resource in hexadecimal representation.
	Sha256 string `json:"sha256"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The list of OS resource update sources.
	UpdateSources []string `json:"updateSources"`
}

// PutOSResourcesOSResourceIDJSONBody defines parameters for PutOSResourcesOSResourceID.
type PutOSResourcesOSResourceIDJSONBody struct {
	// The OS resource's architecture.
	Architecture *string `json:"architecture,omitempty"`

	// A unique identifier of the OS image that can be retrieved from the running OS.
	ImageId *string `json:"imageId,omitempty"`

	// The URL repository of the OS image. If set, overwrites repoUrl.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Freeform text, OS-dependent. A list of package names, one per line (newline separated). Must not contain version information.
	InstalledPackages *string `json:"installedPackages,omitempty"`

	// The OS resource's kernel command.
	KernelCommand *string `json:"kernelCommand,omitempty"`

	// The OS resource's name.
	Name *string `json:"name,omitempty"`

	// Describes the OS owner that drives the OS provisioning.
	OsProvider *OperatingSystemProvider `json:"osProvider,omitempty"`

	// The OS resource's unique identifier. Alias of resourceId.
	OsResourceID *string `json:"osResourceID,omitempty"`

	// OsType describes the immutability of the OS. This field is immutable after creation.
	OsType *OperatingSystemType `json:"osType,omitempty"`

	// Opaque JSON field storing references to custom installation script(s) that supplements the base OS with additional OS-level dependencies/configurations. If empty, the default OS installation will be used.
	PlatformBundle *string `json:"platformBundle,omitempty"`

	// Name of the OS profile that the OS resource belongs to.
	ProfileName *string `json:"profileName,omitempty"`

	// Version of OS profile that the OS resource belongs to.
	ProfileVersion *string `json:"profileVersion,omitempty"`

	// The URL repository of the OS update sources. Deprecated. Use imageUrl to filter repoUrl.
	RepoUrl *string `json:"repoUrl,omitempty"`

	// Resource ID, generated by inventory on Create
	ResourceId *string `json:"resourceId,omitempty"`

	// Security capabilities of a resource.
	SecurityFeature *SecurityFeature `json:"securityFeature,omitempty"`

	// SHA256 checksum of the OS resource in hexadecimal representation.
	Sha256 string `json:"sha256"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The list of OS resource update sources.
	UpdateSources []string `json:"updateSources"`
}

// GetComputeParams defines parameters for GetCompute.
type GetComputeParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Returns only the compute elements that are assigned with the given site ID. If equals to 'null', then it returns all the hosts not associated with any site.
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`

	// Returns only the compute elements that are assigned to the given instanceID. If equals to 'null', then it returns all the hosts not associated with any instance.
	InstanceID *string `form:"instanceID,omitempty" json:"instanceID,omitempty"`

	// Returns the compute elements associated with the given UUID. UUID field cannot be null, if specified needs to be filled.
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`

	// Filters the metadata associated with the compute element. Values are expected to be in the form of 'key=value'.
	Metadata *[]string `form:"metadata,omitempty" json:"metadata,omitempty"`

	// Indicates if compute elements identified by the filter need to be returned with all their respective child resources, e.g., USBs, Interfaces, Storages.
	Detail *bool `form:"detail,omitempty" json:"detail,omitempty"`
}

// GetComputeHostsParams defines parameters for GetComputeHosts.
type GetComputeHostsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Returns only the hosts that are assigned with the given site ID. If equals to 'null', then it returns all the hosts not associated with any site.
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`

	// Returns only the hosts that are assigned to the given instanceID. If equals to 'null', then it returns all the hosts not associated with any instance.
	InstanceID *string `form:"instanceID,omitempty" json:"instanceID,omitempty"`

	// Returns the host associated with the given UUID. UUID field cannot be null, if specified needs to be filled.
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`

	// Filters the metadata associated with the Host. Values are expected to be in the form 'key=value'.
	Metadata *[]string `form:"metadata,omitempty" json:"metadata,omitempty"`

	// Indicates if the host identified by the filter needs to be returned with all their respective child resources, e.g., USBs, interfaces, and storages.
	Detail *bool `form:"detail,omitempty" json:"detail,omitempty"`
}

// PostComputeHostsJSONBody defines parameters for PostComputeHosts.
type PostComputeHostsJSONBody struct {
	// The release date of the host BIOS.
	BiosReleaseDate *string `json:"biosReleaseDate,omitempty"`

	// The vendor of the host BIOS.
	BiosVendor *string `json:"biosVendor,omitempty"`

	// The version of the host BIOS.
	BiosVersion *string `json:"biosVersion,omitempty"`

	// BMC IP address, such as "192.0.0.1".
	BmcIp *string `json:"bmcIp,omitempty"`

	// The type of BMC.
	BmcKind *PostComputeHostsJSONBodyBmcKind `json:"bmcKind,omitempty"`

	// Architecture of the CPU model, e.g. x86_64.
	CpuArchitecture *string `json:"cpuArchitecture,omitempty"`

	// String list of all CPU capabilities (possibly JSON).
	CpuCapabilities *string `json:"cpuCapabilities,omitempty"`

	// Number of CPU cores.
	CpuCores *uint32 `json:"cpuCores,omitempty"`

	// CPU model of the host.
	CpuModel *string `json:"cpuModel,omitempty"`

	// Number of physical CPU sockets.
	CpuSockets *uint32 `json:"cpuSockets,omitempty"`

	// Total number of threads supported by the CPU.
	CpuThreads *uint32 `json:"cpuThreads,omitempty"`

	// A JSON field describing the CPU topology. The CPU topology may contain, among others, information about CPU core types, their layout, and mapping to CPU sockets.
	CpuTopology *string `json:"cpuTopology,omitempty"`

	// The representation of a host power state.
	CurrentPowerState *HostPowerState `json:"currentPowerState,omitempty"`

	// State of the host.
	CurrentState *HostState `json:"currentState,omitempty"`

	// The representation of a host power state.
	DesiredPowerState *HostPowerState `json:"desiredPowerState,omitempty"`

	// State of the host.
	DesiredState *HostState `json:"desiredState,omitempty"`

	// The list of GPU capabilities.
	HostGpus *[]HostResourcesGPU `json:"hostGpus,omitempty"`

	// The list of interface capabilities.
	HostNics *[]HostResourcesInterface `json:"hostNics,omitempty"`

	// The host's lifecycle status message.
	HostStatus *string `json:"hostStatus,omitempty"`

	// The status indicator.
	HostStatusIndicator *StatusIndicator `json:"hostStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's lifecycle status was last updated.
	HostStatusTimestamp *uint64 `json:"hostStatusTimestamp,omitempty"`

	// The list of storage capabilities.
	HostStorages *[]HostResourcesStorage `json:"hostStorages,omitempty"`

	// The list of USB capabilities.
	HostUsbs *[]HostResourcesUSB `json:"hostUsbs,omitempty"`

	// The host name.
	Hostname *string `json:"hostname,omitempty"`

	// The joint set of location's and host's logical metadata.
	InheritedMetadata *MetadataJoin `json:"inheritedMetadata,omitempty"`

	// An instance resource.
	Instance *Instance `json:"instance,omitempty"`

	// Quantity of the RAM in the system, in bytes.
	MemoryBytes *string `json:"memoryBytes,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The host name.
	Name string `json:"name"`

	// The note associated with the host.
	Note *string `json:"note,omitempty"`

	// The host's onboarding status message.
	OnboardingStatus *string `json:"onboardingStatus,omitempty"`

	// The status indicator.
	OnboardingStatusIndicator *StatusIndicator `json:"onboardingStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's onboarding status was last updated.
	OnboardingStatusTimestamp *uint64 `json:"onboardingStatusTimestamp,omitempty"`

	// The host's product name.
	ProductName *string `json:"productName,omitempty"`

	// A provider resource.
	Provider *Provider `json:"provider,omitempty"`

	// The host's registration status message.
	RegistrationStatus *string `json:"registrationStatus,omitempty"`

	// The status indicator.
	RegistrationStatusIndicator *StatusIndicator `json:"registrationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's registration status was last updated.
	RegistrationStatusTimestamp *uint64 `json:"registrationStatusTimestamp,omitempty"`

	// Resource ID, generated on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// SMBIOS device serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// A site resource.
	Site *Site `json:"site,omitempty"`

	// The site where the host is located.
	SiteId *string `json:"siteId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The host UUID identifier; UUID is unique and immutable.
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// PostComputeHostsJSONBodyBmcKind defines parameters for PostComputeHosts.
type PostComputeHostsJSONBodyBmcKind string

// PostComputeHostsRegisterJSONBody defines parameters for PostComputeHostsRegister.
type PostComputeHostsRegisterJSONBody = HostRegisterInfo

// GetComputeHostsSummaryParams defines parameters for GetComputeHostsSummary.
type GetComputeHostsSummaryParams struct {
	// The site ID the hosts belong to. If not specified, returns the summary of all hosts. If specified, returns the summary of hosts that have the given site ID applied to them.
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
}

// DeleteComputeHostsHostIDJSONBody defines parameters for DeleteComputeHostsHostID.
type DeleteComputeHostsHostIDJSONBody = HostOperationWithNote

// PatchComputeHostsHostIDJSONBody defines parameters for PatchComputeHostsHostID.
type PatchComputeHostsHostIDJSONBody struct {
	// The release date of the host BIOS.
	BiosReleaseDate *string `json:"biosReleaseDate,omitempty"`

	// The vendor of the host BIOS.
	BiosVendor *string `json:"biosVendor,omitempty"`

	// The version of the host BIOS.
	BiosVersion *string `json:"biosVersion,omitempty"`

	// BMC IP address, such as "192.0.0.1".
	BmcIp *string `json:"bmcIp,omitempty"`

	// The type of BMC.
	BmcKind *PatchComputeHostsHostIDJSONBodyBmcKind `json:"bmcKind,omitempty"`

	// Architecture of the CPU model, e.g. x86_64.
	CpuArchitecture *string `json:"cpuArchitecture,omitempty"`

	// String list of all CPU capabilities (possibly JSON).
	CpuCapabilities *string `json:"cpuCapabilities,omitempty"`

	// Number of CPU cores.
	CpuCores *uint32 `json:"cpuCores,omitempty"`

	// CPU model of the host.
	CpuModel *string `json:"cpuModel,omitempty"`

	// Number of physical CPU sockets.
	CpuSockets *uint32 `json:"cpuSockets,omitempty"`

	// Total number of threads supported by the CPU.
	CpuThreads *uint32 `json:"cpuThreads,omitempty"`

	// A JSON field describing the CPU topology. The CPU topology may contain, among others, information about CPU core types, their layout, and mapping to CPU sockets.
	CpuTopology *string `json:"cpuTopology,omitempty"`

	// The representation of a host power state.
	CurrentPowerState *HostPowerState `json:"currentPowerState,omitempty"`

	// State of the host.
	CurrentState *HostState `json:"currentState,omitempty"`

	// The representation of a host power state.
	DesiredPowerState *HostPowerState `json:"desiredPowerState,omitempty"`

	// State of the host.
	DesiredState *HostState `json:"desiredState,omitempty"`

	// The list of GPU capabilities.
	HostGpus *[]HostResourcesGPU `json:"hostGpus,omitempty"`

	// The list of interface capabilities.
	HostNics *[]HostResourcesInterface `json:"hostNics,omitempty"`

	// The host's lifecycle status message.
	HostStatus *string `json:"hostStatus,omitempty"`

	// The status indicator.
	HostStatusIndicator *StatusIndicator `json:"hostStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's lifecycle status was last updated.
	HostStatusTimestamp *uint64 `json:"hostStatusTimestamp,omitempty"`

	// The list of storage capabilities.
	HostStorages *[]HostResourcesStorage `json:"hostStorages,omitempty"`

	// The list of USB capabilities.
	HostUsbs *[]HostResourcesUSB `json:"hostUsbs,omitempty"`

	// The host name.
	Hostname *string `json:"hostname,omitempty"`

	// The joint set of location's and host's logical metadata.
	InheritedMetadata *MetadataJoin `json:"inheritedMetadata,omitempty"`

	// An instance resource.
	Instance *Instance `json:"instance,omitempty"`

	// Quantity of the RAM in the system, in bytes.
	MemoryBytes *string `json:"memoryBytes,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The host name.
	Name string `json:"name"`

	// The note associated with the host.
	Note *string `json:"note,omitempty"`

	// The host's onboarding status message.
	OnboardingStatus *string `json:"onboardingStatus,omitempty"`

	// The status indicator.
	OnboardingStatusIndicator *StatusIndicator `json:"onboardingStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's onboarding status was last updated.
	OnboardingStatusTimestamp *uint64 `json:"onboardingStatusTimestamp,omitempty"`

	// The host's product name.
	ProductName *string `json:"productName,omitempty"`

	// A provider resource.
	Provider *Provider `json:"provider,omitempty"`

	// The host's registration status message.
	RegistrationStatus *string `json:"registrationStatus,omitempty"`

	// The status indicator.
	RegistrationStatusIndicator *StatusIndicator `json:"registrationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's registration status was last updated.
	RegistrationStatusTimestamp *uint64 `json:"registrationStatusTimestamp,omitempty"`

	// Resource ID, generated on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// SMBIOS device serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// A site resource.
	Site *Site `json:"site,omitempty"`

	// The site where the host is located.
	SiteId *string `json:"siteId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The host UUID identifier; UUID is unique and immutable.
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// PatchComputeHostsHostIDJSONBodyBmcKind defines parameters for PatchComputeHostsHostID.
type PatchComputeHostsHostIDJSONBodyBmcKind string

// PutComputeHostsHostIDJSONBody defines parameters for PutComputeHostsHostID.
type PutComputeHostsHostIDJSONBody struct {
	// The release date of the host BIOS.
	BiosReleaseDate *string `json:"biosReleaseDate,omitempty"`

	// The vendor of the host BIOS.
	BiosVendor *string `json:"biosVendor,omitempty"`

	// The version of the host BIOS.
	BiosVersion *string `json:"biosVersion,omitempty"`

	// BMC IP address, such as "192.0.0.1".
	BmcIp *string `json:"bmcIp,omitempty"`

	// The type of BMC.
	BmcKind *PutComputeHostsHostIDJSONBodyBmcKind `json:"bmcKind,omitempty"`

	// Architecture of the CPU model, e.g. x86_64.
	CpuArchitecture *string `json:"cpuArchitecture,omitempty"`

	// String list of all CPU capabilities (possibly JSON).
	CpuCapabilities *string `json:"cpuCapabilities,omitempty"`

	// Number of CPU cores.
	CpuCores *uint32 `json:"cpuCores,omitempty"`

	// CPU model of the host.
	CpuModel *string `json:"cpuModel,omitempty"`

	// Number of physical CPU sockets.
	CpuSockets *uint32 `json:"cpuSockets,omitempty"`

	// Total number of threads supported by the CPU.
	CpuThreads *uint32 `json:"cpuThreads,omitempty"`

	// A JSON field describing the CPU topology. The CPU topology may contain, among others, information about CPU core types, their layout, and mapping to CPU sockets.
	CpuTopology *string `json:"cpuTopology,omitempty"`

	// The representation of a host power state.
	CurrentPowerState *HostPowerState `json:"currentPowerState,omitempty"`

	// State of the host.
	CurrentState *HostState `json:"currentState,omitempty"`

	// The representation of a host power state.
	DesiredPowerState *HostPowerState `json:"desiredPowerState,omitempty"`

	// State of the host.
	DesiredState *HostState `json:"desiredState,omitempty"`

	// The list of GPU capabilities.
	HostGpus *[]HostResourcesGPU `json:"hostGpus,omitempty"`

	// The list of interface capabilities.
	HostNics *[]HostResourcesInterface `json:"hostNics,omitempty"`

	// The host's lifecycle status message.
	HostStatus *string `json:"hostStatus,omitempty"`

	// The status indicator.
	HostStatusIndicator *StatusIndicator `json:"hostStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's lifecycle status was last updated.
	HostStatusTimestamp *uint64 `json:"hostStatusTimestamp,omitempty"`

	// The list of storage capabilities.
	HostStorages *[]HostResourcesStorage `json:"hostStorages,omitempty"`

	// The list of USB capabilities.
	HostUsbs *[]HostResourcesUSB `json:"hostUsbs,omitempty"`

	// The host name.
	Hostname *string `json:"hostname,omitempty"`

	// The joint set of location's and host's logical metadata.
	InheritedMetadata *MetadataJoin `json:"inheritedMetadata,omitempty"`

	// An instance resource.
	Instance *Instance `json:"instance,omitempty"`

	// Quantity of the RAM in the system, in bytes.
	MemoryBytes *string `json:"memoryBytes,omitempty"`

	// A metadata list, represented by a list of key:value pairs.
	Metadata *Metadata `json:"metadata,omitempty"`

	// The host name.
	Name string `json:"name"`

	// The note associated with the host.
	Note *string `json:"note,omitempty"`

	// The host's onboarding status message.
	OnboardingStatus *string `json:"onboardingStatus,omitempty"`

	// The status indicator.
	OnboardingStatusIndicator *StatusIndicator `json:"onboardingStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's onboarding status was last updated.
	OnboardingStatusTimestamp *uint64 `json:"onboardingStatusTimestamp,omitempty"`

	// The host's product name.
	ProductName *string `json:"productName,omitempty"`

	// A provider resource.
	Provider *Provider `json:"provider,omitempty"`

	// The host's registration status message.
	RegistrationStatus *string `json:"registrationStatus,omitempty"`

	// The status indicator.
	RegistrationStatusIndicator *StatusIndicator `json:"registrationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the host's registration status was last updated.
	RegistrationStatusTimestamp *uint64 `json:"registrationStatusTimestamp,omitempty"`

	// Resource ID, generated on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// SMBIOS device serial number.
	SerialNumber *string `json:"serialNumber,omitempty"`

	// A site resource.
	Site *Site `json:"site,omitempty"`

	// The site where the host is located.
	SiteId *string `json:"siteId,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The host UUID identifier; UUID is unique and immutable.
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// PutComputeHostsHostIDJSONBodyBmcKind defines parameters for PutComputeHostsHostID.
type PutComputeHostsHostIDJSONBodyBmcKind string

// PutComputeHostsHostIDInvalidateJSONBody defines parameters for PutComputeHostsHostIDInvalidate.
type PutComputeHostsHostIDInvalidateJSONBody = HostOperationWithNote

// PatchComputeHostsHostIDRegisterJSONBody defines parameters for PatchComputeHostsHostIDRegister.
type PatchComputeHostsHostIDRegisterJSONBody struct {
	// Set to enforce auto-onboarding of the host, which means that no confirmation will be required when the host connects for the first time, to Edge Orchestrator.
	AutoOnboard *bool `json:"autoOnboard,omitempty"`

	// The host name.
	Name         *string      `json:"name,omitempty"`
	SerialNumber *interface{} `json:"serialNumber,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps  `json:"timestamps,omitempty"`
	Uuid       *interface{} `json:"uuid,omitempty"`
}

// GetInstancesParams defines parameters for GetInstances.
type GetInstancesParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Returns only the instances that are assigned to the given workload member. If equals to 'null', returns all instances not associated with any workload member. If equal to '' (empty string), returns all instances that have a workload member associated.
	WorkloadMemberID *string `form:"workloadMemberID,omitempty" json:"workloadMemberID,omitempty"`

	// Returns the instances associated with the host with the given host ID.
	HostID *string `form:"hostID,omitempty" json:"hostID,omitempty"`

	// Returns the instances associated with the hosts in the site identified. by the given siteID
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`
}

// PostInstancesJSONBody defines parameters for PostInstances.
type PostInstancesJSONBody struct {
	// An OS resource.
	CurrentOs *OperatingSystemResource `json:"currentOs,omitempty"`

	// State of the instance.
	CurrentState *InstanceState `json:"currentState,omitempty"`

	// An OS resource.
	DesiredOs *OperatingSystemResource `json:"desiredOs,omitempty"`

	// State of the instance.
	DesiredState *InstanceState `json:"desiredState,omitempty"`

	// A host resource.
	Host *Host `json:"host,omitempty"`

	// The host's unique identifier associated with the instance.
	HostID *string `json:"hostID,omitempty"`

	// The instance's unique identifier. Alias of resourceID.
	InstanceID *string `json:"instanceID,omitempty"`

	// The instance's lifecycle status message.
	InstanceStatus *string `json:"instanceStatus,omitempty"`

	// The detailed status of the instance's software components.
	InstanceStatusDetail *string `json:"instanceStatusDetail,omitempty"`

	// The status indicator.
	InstanceStatusIndicator *StatusIndicator `json:"instanceStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's lifecycle status was last updated.
	InstanceStatusTimestamp *uint64 `json:"instanceStatusTimestamp,omitempty"`

	// Type of the instance.
	Kind *InstanceKind `json:"kind,omitempty"`

	// A local account resource.
	LocalAccount *LocalAccount `json:"localAccount,omitempty"`

	// The unique identifier of local account will be associated with the instance.
	LocalAccountID *string `json:"localAccountID,omitempty"`

	// The instance's human-readable name.
	Name *string `json:"name,omitempty"`

	// An OS resource.
	Os *OperatingSystemResource `json:"os,omitempty"`

	// The unique identifier of OS resource that must be installed on the instance.
	OsID *string `json:"osID,omitempty"`

	// The instance's provisioning status message.
	ProvisioningStatus *string `json:"provisioningStatus,omitempty"`

	// The status indicator.
	ProvisioningStatusIndicator *StatusIndicator `json:"provisioningStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's provisioning status was last updated.
	ProvisioningStatusTimestamp *uint64 `json:"provisioningStatusTimestamp,omitempty"`

	// Resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// Security capabilities of a resource.
	SecurityFeature *SecurityFeature `json:"securityFeature,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The instance's software trusted attestation status message.
	TrustedAttestationStatus *string `json:"trustedAttestationStatus,omitempty"`

	// The status indicator.
	TrustedAttestationStatusIndicator *StatusIndicator `json:"trustedAttestationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's software trusted attestation status was last updated.
	TrustedAttestationStatusTimestamp *uint64 `json:"trustedAttestationStatusTimestamp,omitempty"`

	// The instance's software update status message.
	UpdateStatus *string `json:"updateStatus,omitempty"`

	// Beta: The detailed description of the instance's last software update.
	UpdateStatusDetail *string `json:"updateStatusDetail,omitempty"`

	// The status indicator.
	UpdateStatusIndicator *StatusIndicator `json:"updateStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's software update status was last updated.
	UpdateStatusTimestamp *uint64 `json:"updateStatusTimestamp,omitempty"`

	// The workload members associated with the instance.
	WorkloadMembers *[]WorkloadMember `json:"workloadMembers,omitempty"`
}

// PatchInstancesInstanceIDJSONBody defines parameters for PatchInstancesInstanceID.
type PatchInstancesInstanceIDJSONBody struct {
	// An OS resource.
	CurrentOs *OperatingSystemResource `json:"currentOs,omitempty"`

	// State of the instance.
	CurrentState *InstanceState `json:"currentState,omitempty"`

	// An OS resource.
	DesiredOs *OperatingSystemResource `json:"desiredOs,omitempty"`

	// State of the instance.
	DesiredState *InstanceState `json:"desiredState,omitempty"`

	// A host resource.
	Host *Host `json:"host,omitempty"`

	// The host's unique identifier associated with the instance.
	HostID *string `json:"hostID,omitempty"`

	// The instance's unique identifier. Alias of resourceID.
	InstanceID *string `json:"instanceID,omitempty"`

	// The instance's lifecycle status message.
	InstanceStatus *string `json:"instanceStatus,omitempty"`

	// The detailed status of the instance's software components.
	InstanceStatusDetail *string `json:"instanceStatusDetail,omitempty"`

	// The status indicator.
	InstanceStatusIndicator *StatusIndicator `json:"instanceStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's lifecycle status was last updated.
	InstanceStatusTimestamp *uint64 `json:"instanceStatusTimestamp,omitempty"`

	// Type of the instance.
	Kind *InstanceKind `json:"kind,omitempty"`

	// A local account resource.
	LocalAccount *LocalAccount `json:"localAccount,omitempty"`

	// The unique identifier of local account will be associated with the instance.
	LocalAccountID *string `json:"localAccountID,omitempty"`

	// The instance's human-readable name.
	Name *string `json:"name,omitempty"`

	// An OS resource.
	Os *OperatingSystemResource `json:"os,omitempty"`

	// The unique identifier of OS resource that must be installed on the instance.
	OsID *string `json:"osID,omitempty"`

	// The instance's provisioning status message.
	ProvisioningStatus *string `json:"provisioningStatus,omitempty"`

	// The status indicator.
	ProvisioningStatusIndicator *StatusIndicator `json:"provisioningStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's provisioning status was last updated.
	ProvisioningStatusTimestamp *uint64 `json:"provisioningStatusTimestamp,omitempty"`

	// Resource ID, generated by the inventory on Create.
	ResourceId *string `json:"resourceId,omitempty"`

	// Security capabilities of a resource.
	SecurityFeature *SecurityFeature `json:"securityFeature,omitempty"`

	// A structure to hold Update and Create timestamps.
	Timestamps *Timestamps `json:"timestamps,omitempty"`

	// The instance's software trusted attestation status message.
	TrustedAttestationStatus *string `json:"trustedAttestationStatus,omitempty"`

	// The status indicator.
	TrustedAttestationStatusIndicator *StatusIndicator `json:"trustedAttestationStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's software trusted attestation status was last updated.
	TrustedAttestationStatusTimestamp *uint64 `json:"trustedAttestationStatusTimestamp,omitempty"`

	// The instance's software update status message.
	UpdateStatus *string `json:"updateStatus,omitempty"`

	// Beta: The detailed description of the instance's last software update.
	UpdateStatusDetail *string `json:"updateStatusDetail,omitempty"`

	// The status indicator.
	UpdateStatusIndicator *StatusIndicator `json:"updateStatusIndicator,omitempty"`

	// A Unix, UTC timestamp when the instance's software update status was last updated.
	UpdateStatusTimestamp *uint64 `json:"updateStatusTimestamp,omitempty"`

	// The workload members associated with the instance.
	WorkloadMembers *[]WorkloadMember `json:"workloadMembers,omitempty"`
}

// GetLocalAccountsParams defines parameters for GetLocalAccounts.
type GetLocalAccountsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostLocalAccountsJSONBody defines parameters for PostLocalAccounts.
type PostLocalAccountsJSONBody = LocalAccount

// GetLocationsParams defines parameters for GetLocations.
type GetLocationsParams struct {
	// The name of the resource to be queried; it can be a region and/or site name, if the query parameters below are stated.
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Indicates if the filter will be applied on the site resources.
	ShowSites *bool `form:"showSites,omitempty" json:"showSites,omitempty"`

	// Indicates if the filter will be applied on the region resources.
	ShowRegions *bool `form:"showRegions,omitempty" json:"showRegions,omitempty"`
}

// GetOusParams defines parameters for GetOus.
type GetOusParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// The parent OUID that the OUs belong to. If not specified, returns all OUs. If specified, returns the OUs that have the specified parent applied to them. If null, returns all OUs without a parent.
	Parent *string `form:"parent,omitempty" json:"parent,omitempty"`
}

// PostOusJSONBody defines parameters for PostOus.
type PostOusJSONBody = OU

// PatchOusOuIDJSONBody defines parameters for PatchOusOuID.
type PatchOusOuIDJSONBody = OU

// PutOusOuIDJSONBody defines parameters for PutOusOuID.
type PutOusOuIDJSONBody = OU

// GetProvidersParams defines parameters for GetProviders.
type GetProvidersParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostProvidersJSONBody defines parameters for PostProviders.
type PostProvidersJSONBody = Provider

// GetRegionsParams defines parameters for GetRegions.
type GetRegionsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// The parent region ID that the region belongs to. If not specified, returns all regions. If specified, returns the regions that have the specified parent applied to them. If null, returns all the regions without a parent.
	Parent *string `form:"parent,omitempty" json:"parent,omitempty"`

	// Indicates if the region identified by the filter needs to be returned with the field totalSites filled.
	ShowTotalSites *bool `form:"showTotalSites,omitempty" json:"showTotalSites,omitempty"`
}

// PostRegionsJSONBody defines parameters for PostRegions.
type PostRegionsJSONBody = Region

// PatchRegionsRegionIDJSONBody defines parameters for PatchRegionsRegionID.
type PatchRegionsRegionIDJSONBody = Region

// PutRegionsRegionIDJSONBody defines parameters for PutRegionsRegionID.
type PutRegionsRegionIDJSONBody = Region

// GetSchedulesParams defines parameters for GetSchedules.
type GetSchedulesParams struct {
	// Identifies the paging unique identifier for a single page, starts index at 1.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The region ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target including the inherited ones (parent region if not null). If null, returns all schedules without a region ID as target.
	RegionID *string `form:"regionID,omitempty" json:"regionID,omitempty"`

	// The site ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target including the inherited ones. If null, returns all schedules without a site ID as target.
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`

	// The host ID target of the schedules. If not specified, returns all schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target including the inherited ones (parent site if not null). If null, returns all schedules without a host ID as target.
	HostID *string `form:"hostID,omitempty" json:"hostID,omitempty"`

	// Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds
	UnixEpoch *string `form:"unix_epoch,omitempty" json:"unix_epoch,omitempty"`
}

// GetSchedulesRepeatedParams defines parameters for GetSchedulesRepeated.
type GetSchedulesRepeatedParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The region ID target of the schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target. If null, returns all repeated schedules without a region ID as target.
	RegionID *string `form:"regionID,omitempty" json:"regionID,omitempty"`

	// The site ID target of the schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target. If null, returns all repeated schedules without a site ID as target.
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`

	// The host ID target of the repeated schedules. If not specified, returns all repeated schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target. If null, returns all repeated schedules without a host ID as target.
	HostID *string `form:"hostID,omitempty" json:"hostID,omitempty"`

	// Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds.
	UnixEpoch *string `form:"unix_epoch,omitempty" json:"unix_epoch,omitempty"`
}

// PostSchedulesRepeatedJSONBody defines parameters for PostSchedulesRepeated.
type PostSchedulesRepeatedJSONBody = RepeatedSchedule

// PatchSchedulesRepeatedRepeatedScheduleIDJSONBody defines parameters for PatchSchedulesRepeatedRepeatedScheduleID.
type PatchSchedulesRepeatedRepeatedScheduleIDJSONBody = RepeatedSchedule

// PutSchedulesRepeatedRepeatedScheduleIDJSONBody defines parameters for PutSchedulesRepeatedRepeatedScheduleID.
type PutSchedulesRepeatedRepeatedScheduleIDJSONBody = RepeatedSchedule

// GetSchedulesSingleParams defines parameters for GetSchedulesSingle.
type GetSchedulesSingleParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// The region ID target of the schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified region ID applied to them, i.e., target. If null, returns all single schedules without a region ID as target.
	RegionID *string `form:"regionID,omitempty" json:"regionID,omitempty"`

	// The site ID target of the schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified site ID applied to them, i.e., target. If null, returns all single schedules without a site ID as target.
	SiteID *string `form:"siteID,omitempty" json:"siteID,omitempty"`

	// The host ID target of the single schedules. If not specified, returns all single schedules (given the other query parameters). If specified, returns the schedules that have the specified host ID applied to them, i.e., target. If null, returns all single schedules without a host ID as target.
	HostID *string `form:"hostID,omitempty" json:"hostID,omitempty"`

	// Filters based on the timestamp, expected to be UNIX epoch UTC timestamp in seconds
	UnixEpoch *string `form:"unix_epoch,omitempty" json:"unix_epoch,omitempty"`
}

// PostSchedulesSingleJSONBody defines parameters for PostSchedulesSingle.
type PostSchedulesSingleJSONBody = SingleSchedule

// PatchSchedulesSingleSingleScheduleIDJSONBody defines parameters for PatchSchedulesSingleSingleScheduleID.
type PatchSchedulesSingleSingleScheduleIDJSONBody = SingleSchedule

// PutSchedulesSingleSingleScheduleIDJSONBody defines parameters for PutSchedulesSingleSingleScheduleID.
type PutSchedulesSingleSingleScheduleIDJSONBody = SingleSchedule

// GetSitesParams defines parameters for GetSites.
type GetSitesParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// The region ID that the sites belong to. If not specified, returns all sites (given the other query params). If specified, returns the sites that have the specified region ID applied to them. If null, returns all sites without a region ID.
	RegionID *string `form:"regionID,omitempty" json:"regionID,omitempty"`

	// The OUID that the sites belong to. If not specified, returns all sites (given the other query parameters). If specified, returns the sites that have the specified OUID applied to them. If null, returns all sites without an OUID.
	OuID *string `form:"ouID,omitempty" json:"ouID,omitempty"`
}

// PostSitesJSONBody defines parameters for PostSites.
type PostSitesJSONBody = Site

// PatchSitesSiteIDJSONBody defines parameters for PatchSitesSiteID.
type PatchSitesSiteIDJSONBody = Site

// PutSitesSiteIDJSONBody defines parameters for PutSitesSiteID.
type PutSitesSiteIDJSONBody = Site

// GetTelemetryGroupsLogsParams defines parameters for GetTelemetryGroupsLogs.
type GetTelemetryGroupsLogsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostTelemetryGroupsLogsJSONBody defines parameters for PostTelemetryGroupsLogs.
type PostTelemetryGroupsLogsJSONBody = TelemetryLogsGroup

// GetTelemetryGroupsMetricsParams defines parameters for GetTelemetryGroupsMetrics.
type GetTelemetryGroupsMetricsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostTelemetryGroupsMetricsJSONBody defines parameters for PostTelemetryGroupsMetrics.
type PostTelemetryGroupsMetricsJSONBody = TelemetryMetricsGroup

// GetTelemetryProfilesLogsParams defines parameters for GetTelemetryProfilesLogs.
type GetTelemetryProfilesLogsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Returns only the telemetry profiles that are assigned with the given site ID.
	SiteId *string `form:"siteId,omitempty" json:"siteId,omitempty"`

	// Returns only the telemetry profiles that are assigned with the given region ID.
	RegionId *string `form:"regionId,omitempty" json:"regionId,omitempty"`

	// Returns only the telemetry profiles that are assigned with the given instance identifier.
	InstanceId *string `form:"instanceId,omitempty" json:"instanceId,omitempty"`

	// Indicates if the listed telemetry profiles will be extended with telemetry profiles rendered from the hierarchy. This flag is used along with one of site ID, region ID or instance ID. If site ID, region ID, or instance ID are not set, this flag is ignored.
	ShowInherited *bool `form:"showInherited,omitempty" json:"showInherited,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostTelemetryProfilesLogsJSONBody defines parameters for PostTelemetryProfilesLogs.
type PostTelemetryProfilesLogsJSONBody = TelemetryLogsProfile

// PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONBody defines parameters for PatchTelemetryProfilesLogsTelemetryLogsProfileId.
type PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONBody = TelemetryLogsProfile

// PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONBody defines parameters for PutTelemetryProfilesLogsTelemetryLogsProfileId.
type PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONBody = TelemetryLogsProfile

// GetTelemetryProfilesMetricsParams defines parameters for GetTelemetryProfilesMetrics.
type GetTelemetryProfilesMetricsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Returns only the telemetry profiles that are assigned with the given site ID.
	SiteId *string `form:"siteId,omitempty" json:"siteId,omitempty"`

	// Returns only the telemetry profiles that are assigned with the given region ID.
	RegionId *string `form:"regionId,omitempty" json:"regionId,omitempty"`

	// Returns only the telemetry profiles that are assigned with the given instance identifier.
	InstanceId *string `form:"instanceId,omitempty" json:"instanceId,omitempty"`

	// Indicates if the listed telemetry profiles will be extended with telemetry profiles rendered from the hierarchy. This flag is only used along with one of site ID, region ID or instance ID. If site ID, region ID, or instance ID are not set, this flag is ignored.
	ShowInherited *bool `form:"showInherited,omitempty" json:"showInherited,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`
}

// PostTelemetryProfilesMetricsJSONBody defines parameters for PostTelemetryProfilesMetrics.
type PostTelemetryProfilesMetricsJSONBody = TelemetryMetricsProfile

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONBody defines parameters for PatchTelemetryProfilesMetricsTelemetryMetricsProfileId.
type PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONBody = TelemetryMetricsProfile

// PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONBody defines parameters for PutTelemetryProfilesMetricsTelemetryMetricsProfileId.
type PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONBody = TelemetryMetricsProfile

// GetWorkloadMembersParams defines parameters for GetWorkloadMembers.
type GetWorkloadMembersParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// The unique workload identifier.
	WorkloadId *string `form:"workload_id,omitempty" json:"workload_id,omitempty"`
}

// PostWorkloadMembersJSONBody defines parameters for PostWorkloadMembers.
type PostWorkloadMembersJSONBody = WorkloadMember

// GetWorkloadsParams defines parameters for GetWorkloads.
type GetWorkloadsParams struct {
	// Index of the first item to return. This allows skipping of items.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Defines the amount of items to be contained in a single page, min of 1 and max of 100, default of 20.
	PageSize *int `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// Optional filter to return only items of interest. See https://google.aip.dev/160 for details. Takes precedence over other filter parameters, if set.
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// Optional comma-separated list of fields to specify a sorting order. See https://google.aip.dev/132 for details.
	OrderBy *string       `form:"orderBy,omitempty" json:"orderBy,omitempty"`
	Kind    *WorkloadKind `form:"kind,omitempty" json:"kind,omitempty"`
}

// PostWorkloadsJSONBody defines parameters for PostWorkloads.
type PostWorkloadsJSONBody = Workload

// PatchWorkloadsWorkloadIDJSONBody defines parameters for PatchWorkloadsWorkloadID.
type PatchWorkloadsWorkloadIDJSONBody = Workload

// PutWorkloadsWorkloadIDJSONBody defines parameters for PutWorkloadsWorkloadID.
type PutWorkloadsWorkloadIDJSONBody = Workload

// PostOSResourcesJSONRequestBody defines body for PostOSResources for application/json ContentType.
type PostOSResourcesJSONRequestBody = PostOSResourcesJSONBody

// PatchOSResourcesOSResourceIDJSONRequestBody defines body for PatchOSResourcesOSResourceID for application/json ContentType.
type PatchOSResourcesOSResourceIDJSONRequestBody PatchOSResourcesOSResourceIDJSONBody

// PutOSResourcesOSResourceIDJSONRequestBody defines body for PutOSResourcesOSResourceID for application/json ContentType.
type PutOSResourcesOSResourceIDJSONRequestBody PutOSResourcesOSResourceIDJSONBody

// PostComputeHostsJSONRequestBody defines body for PostComputeHosts for application/json ContentType.
type PostComputeHostsJSONRequestBody PostComputeHostsJSONBody

// PostComputeHostsRegisterJSONRequestBody defines body for PostComputeHostsRegister for application/json ContentType.
type PostComputeHostsRegisterJSONRequestBody = PostComputeHostsRegisterJSONBody

// DeleteComputeHostsHostIDJSONRequestBody defines body for DeleteComputeHostsHostID for application/json ContentType.
type DeleteComputeHostsHostIDJSONRequestBody = DeleteComputeHostsHostIDJSONBody

// PatchComputeHostsHostIDJSONRequestBody defines body for PatchComputeHostsHostID for application/json ContentType.
type PatchComputeHostsHostIDJSONRequestBody PatchComputeHostsHostIDJSONBody

// PutComputeHostsHostIDJSONRequestBody defines body for PutComputeHostsHostID for application/json ContentType.
type PutComputeHostsHostIDJSONRequestBody PutComputeHostsHostIDJSONBody

// PutComputeHostsHostIDInvalidateJSONRequestBody defines body for PutComputeHostsHostIDInvalidate for application/json ContentType.
type PutComputeHostsHostIDInvalidateJSONRequestBody = PutComputeHostsHostIDInvalidateJSONBody

// PatchComputeHostsHostIDRegisterJSONRequestBody defines body for PatchComputeHostsHostIDRegister for application/json ContentType.
type PatchComputeHostsHostIDRegisterJSONRequestBody PatchComputeHostsHostIDRegisterJSONBody

// PostInstancesJSONRequestBody defines body for PostInstances for application/json ContentType.
type PostInstancesJSONRequestBody PostInstancesJSONBody

// PatchInstancesInstanceIDJSONRequestBody defines body for PatchInstancesInstanceID for application/json ContentType.
type PatchInstancesInstanceIDJSONRequestBody PatchInstancesInstanceIDJSONBody

// PostLocalAccountsJSONRequestBody defines body for PostLocalAccounts for application/json ContentType.
type PostLocalAccountsJSONRequestBody = PostLocalAccountsJSONBody

// PostOusJSONRequestBody defines body for PostOus for application/json ContentType.
type PostOusJSONRequestBody = PostOusJSONBody

// PatchOusOuIDJSONRequestBody defines body for PatchOusOuID for application/json ContentType.
type PatchOusOuIDJSONRequestBody = PatchOusOuIDJSONBody

// PutOusOuIDJSONRequestBody defines body for PutOusOuID for application/json ContentType.
type PutOusOuIDJSONRequestBody = PutOusOuIDJSONBody

// PostProvidersJSONRequestBody defines body for PostProviders for application/json ContentType.
type PostProvidersJSONRequestBody = PostProvidersJSONBody

// PostRegionsJSONRequestBody defines body for PostRegions for application/json ContentType.
type PostRegionsJSONRequestBody = PostRegionsJSONBody

// PatchRegionsRegionIDJSONRequestBody defines body for PatchRegionsRegionID for application/json ContentType.
type PatchRegionsRegionIDJSONRequestBody = PatchRegionsRegionIDJSONBody

// PutRegionsRegionIDJSONRequestBody defines body for PutRegionsRegionID for application/json ContentType.
type PutRegionsRegionIDJSONRequestBody = PutRegionsRegionIDJSONBody

// PostSchedulesRepeatedJSONRequestBody defines body for PostSchedulesRepeated for application/json ContentType.
type PostSchedulesRepeatedJSONRequestBody = PostSchedulesRepeatedJSONBody

// PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody defines body for PatchSchedulesRepeatedRepeatedScheduleID for application/json ContentType.
type PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody = PatchSchedulesRepeatedRepeatedScheduleIDJSONBody

// PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody defines body for PutSchedulesRepeatedRepeatedScheduleID for application/json ContentType.
type PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody = PutSchedulesRepeatedRepeatedScheduleIDJSONBody

// PostSchedulesSingleJSONRequestBody defines body for PostSchedulesSingle for application/json ContentType.
type PostSchedulesSingleJSONRequestBody = PostSchedulesSingleJSONBody

// PatchSchedulesSingleSingleScheduleIDJSONRequestBody defines body for PatchSchedulesSingleSingleScheduleID for application/json ContentType.
type PatchSchedulesSingleSingleScheduleIDJSONRequestBody = PatchSchedulesSingleSingleScheduleIDJSONBody

// PutSchedulesSingleSingleScheduleIDJSONRequestBody defines body for PutSchedulesSingleSingleScheduleID for application/json ContentType.
type PutSchedulesSingleSingleScheduleIDJSONRequestBody = PutSchedulesSingleSingleScheduleIDJSONBody

// PostSitesJSONRequestBody defines body for PostSites for application/json ContentType.
type PostSitesJSONRequestBody = PostSitesJSONBody

// PatchSitesSiteIDJSONRequestBody defines body for PatchSitesSiteID for application/json ContentType.
type PatchSitesSiteIDJSONRequestBody = PatchSitesSiteIDJSONBody

// PutSitesSiteIDJSONRequestBody defines body for PutSitesSiteID for application/json ContentType.
type PutSitesSiteIDJSONRequestBody = PutSitesSiteIDJSONBody

// PostTelemetryGroupsLogsJSONRequestBody defines body for PostTelemetryGroupsLogs for application/json ContentType.
type PostTelemetryGroupsLogsJSONRequestBody = PostTelemetryGroupsLogsJSONBody

// PostTelemetryGroupsMetricsJSONRequestBody defines body for PostTelemetryGroupsMetrics for application/json ContentType.
type PostTelemetryGroupsMetricsJSONRequestBody = PostTelemetryGroupsMetricsJSONBody

// PostTelemetryProfilesLogsJSONRequestBody defines body for PostTelemetryProfilesLogs for application/json ContentType.
type PostTelemetryProfilesLogsJSONRequestBody = PostTelemetryProfilesLogsJSONBody

// PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody defines body for PatchTelemetryProfilesLogsTelemetryLogsProfileId for application/json ContentType.
type PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody = PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONBody

// PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody defines body for PutTelemetryProfilesLogsTelemetryLogsProfileId for application/json ContentType.
type PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody = PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONBody

// PostTelemetryProfilesMetricsJSONRequestBody defines body for PostTelemetryProfilesMetrics for application/json ContentType.
type PostTelemetryProfilesMetricsJSONRequestBody = PostTelemetryProfilesMetricsJSONBody

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody defines body for PatchTelemetryProfilesMetricsTelemetryMetricsProfileId for application/json ContentType.
type PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody = PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONBody

// PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody defines body for PutTelemetryProfilesMetricsTelemetryMetricsProfileId for application/json ContentType.
type PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody = PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONBody

// PostWorkloadMembersJSONRequestBody defines body for PostWorkloadMembers for application/json ContentType.
type PostWorkloadMembersJSONRequestBody = PostWorkloadMembersJSONBody

// PostWorkloadsJSONRequestBody defines body for PostWorkloads for application/json ContentType.
type PostWorkloadsJSONRequestBody = PostWorkloadsJSONBody

// PatchWorkloadsWorkloadIDJSONRequestBody defines body for PatchWorkloadsWorkloadID for application/json ContentType.
type PatchWorkloadsWorkloadIDJSONRequestBody = PatchWorkloadsWorkloadIDJSONBody

// PutWorkloadsWorkloadIDJSONRequestBody defines body for PutWorkloadsWorkloadID for application/json ContentType.
type PutWorkloadsWorkloadIDJSONRequestBody = PutWorkloadsWorkloadIDJSONBody
