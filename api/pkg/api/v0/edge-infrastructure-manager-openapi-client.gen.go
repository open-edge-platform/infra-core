// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetOSResources request
	GetOSResources(ctx context.Context, params *GetOSResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOSResourcesWithBody request with any body
	PostOSResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOSResources(ctx context.Context, body PostOSResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOSResourcesOSResourceID request
	DeleteOSResourcesOSResourceID(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOSResourcesOSResourceID request
	GetOSResourcesOSResourceID(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOSResourcesOSResourceIDWithBody request with any body
	PatchOSResourcesOSResourceIDWithBody(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOSResourcesOSResourceID(ctx context.Context, osResourceID string, body PatchOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOSResourcesOSResourceIDWithBody request with any body
	PutOSResourcesOSResourceIDWithBody(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOSResourcesOSResourceID(ctx context.Context, osResourceID string, body PutOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompute request
	GetCompute(ctx context.Context, params *GetComputeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeHosts request
	GetComputeHosts(ctx context.Context, params *GetComputeHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeHostsWithBody request with any body
	PostComputeHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeHosts(ctx context.Context, body PostComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostComputeHostsRegisterWithBody request with any body
	PostComputeHostsRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostComputeHostsRegister(ctx context.Context, body PostComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeHostsSummary request
	GetComputeHostsSummary(ctx context.Context, params *GetComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteComputeHostsHostIDWithBody request with any body
	DeleteComputeHostsHostIDWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteComputeHostsHostID(ctx context.Context, hostID string, body DeleteComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetComputeHostsHostID request
	GetComputeHostsHostID(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchComputeHostsHostIDWithBody request with any body
	PatchComputeHostsHostIDWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchComputeHostsHostID(ctx context.Context, hostID string, body PatchComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeHostsHostIDWithBody request with any body
	PutComputeHostsHostIDWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeHostsHostID(ctx context.Context, hostID string, body PutComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutComputeHostsHostIDInvalidateWithBody request with any body
	PutComputeHostsHostIDInvalidateWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutComputeHostsHostIDInvalidate(ctx context.Context, hostID string, body PutComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchComputeHostsHostIDOnboard request
	PatchComputeHostsHostIDOnboard(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchComputeHostsHostIDRegisterWithBody request with any body
	PatchComputeHostsHostIDRegisterWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchComputeHostsHostIDRegister(ctx context.Context, hostID string, body PatchComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstances request
	GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstancesWithBody request with any body
	PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInstancesInstanceID request
	DeleteInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInstancesInstanceID request
	GetInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchInstancesInstanceIDWithBody request with any body
	PatchInstancesInstanceIDWithBody(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchInstancesInstanceID(ctx context.Context, instanceID string, body PatchInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutInstancesInstanceIDInvalidate request
	PutInstancesInstanceIDInvalidate(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalAccounts request
	GetLocalAccounts(ctx context.Context, params *GetLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLocalAccountsWithBody request with any body
	PostLocalAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLocalAccounts(ctx context.Context, body PostLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLocalAccountsLocalAccountID request
	DeleteLocalAccountsLocalAccountID(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocalAccountsLocalAccountID request
	GetLocalAccountsLocalAccountID(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocations request
	GetLocations(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOus request
	GetOus(ctx context.Context, params *GetOusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOusWithBody request with any body
	PostOusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOus(ctx context.Context, body PostOusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOusOuID request
	DeleteOusOuID(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOusOuID request
	GetOusOuID(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOusOuIDWithBody request with any body
	PatchOusOuIDWithBody(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOusOuID(ctx context.Context, ouid string, body PatchOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOusOuIDWithBody request with any body
	PutOusOuIDWithBody(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOusOuID(ctx context.Context, ouid string, body PutOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviders request
	GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostProvidersWithBody request with any body
	PostProvidersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostProviders(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProvidersProviderID request
	DeleteProvidersProviderID(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProvidersProviderID request
	GetProvidersProviderID(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegions request
	GetRegions(ctx context.Context, params *GetRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRegionsWithBody request with any body
	PostRegionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRegions(ctx context.Context, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRegionsRegionID request
	DeleteRegionsRegionID(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegionsRegionID request
	GetRegionsRegionID(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRegionsRegionIDWithBody request with any body
	PatchRegionsRegionIDWithBody(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRegionsRegionID(ctx context.Context, regionID string, body PatchRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutRegionsRegionIDWithBody request with any body
	PutRegionsRegionIDWithBody(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutRegionsRegionID(ctx context.Context, regionID string, body PutRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedules request
	GetSchedules(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedulesRepeated request
	GetSchedulesRepeated(ctx context.Context, params *GetSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSchedulesRepeatedWithBody request with any body
	PostSchedulesRepeatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSchedulesRepeated(ctx context.Context, body PostSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSchedulesRepeatedRepeatedScheduleID request
	DeleteSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedulesRepeatedRepeatedScheduleID request
	GetSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSchedulesRepeatedRepeatedScheduleIDWithBody request with any body
	PatchSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, body PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSchedulesRepeatedRepeatedScheduleIDWithBody request with any body
	PutSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, body PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedulesSingle request
	GetSchedulesSingle(ctx context.Context, params *GetSchedulesSingleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSchedulesSingleWithBody request with any body
	PostSchedulesSingleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSchedulesSingle(ctx context.Context, body PostSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSchedulesSingleSingleScheduleID request
	DeleteSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSchedulesSingleSingleScheduleID request
	GetSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSchedulesSingleSingleScheduleIDWithBody request with any body
	PatchSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, body PatchSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSchedulesSingleSingleScheduleIDWithBody request with any body
	PutSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, body PutSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSites request
	GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSitesWithBody request with any body
	PostSitesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSites(ctx context.Context, body PostSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSitesSiteID request
	DeleteSitesSiteID(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSitesSiteID request
	GetSitesSiteID(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchSitesSiteIDWithBody request with any body
	PatchSitesSiteIDWithBody(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchSitesSiteID(ctx context.Context, siteID string, body PatchSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSitesSiteIDWithBody request with any body
	PutSitesSiteIDWithBody(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSitesSiteID(ctx context.Context, siteID string, body PutSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryGroupsLogs request
	GetTelemetryGroupsLogs(ctx context.Context, params *GetTelemetryGroupsLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTelemetryGroupsLogsWithBody request with any body
	PostTelemetryGroupsLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTelemetryGroupsLogs(ctx context.Context, body PostTelemetryGroupsLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTelemetryGroupsLogsTelemetryLogsGroupId request
	DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryGroupsLogsTelemetryLogsGroupId request
	GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryGroupsMetrics request
	GetTelemetryGroupsMetrics(ctx context.Context, params *GetTelemetryGroupsMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTelemetryGroupsMetricsWithBody request with any body
	PostTelemetryGroupsMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTelemetryGroupsMetrics(ctx context.Context, body PostTelemetryGroupsMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId request
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryGroupsMetricsTelemetryMetricsGroupId request
	GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryProfilesLogs request
	GetTelemetryProfilesLogs(ctx context.Context, params *GetTelemetryProfilesLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTelemetryProfilesLogsWithBody request with any body
	PostTelemetryProfilesLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTelemetryProfilesLogs(ctx context.Context, body PostTelemetryProfilesLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTelemetryProfilesLogsTelemetryLogsProfileId request
	DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryProfilesLogsTelemetryLogsProfileId request
	GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBody request with any body
	PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBody(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, body PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBody request with any body
	PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBody(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, body PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryProfilesMetrics request
	GetTelemetryProfilesMetrics(ctx context.Context, params *GetTelemetryProfilesMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTelemetryProfilesMetricsWithBody request with any body
	PostTelemetryProfilesMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTelemetryProfilesMetrics(ctx context.Context, body PostTelemetryProfilesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId request
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTelemetryProfilesMetricsTelemetryMetricsProfileId request
	GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody request with any body
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, body PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody request with any body
	PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, body PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadMembers request
	GetWorkloadMembers(ctx context.Context, params *GetWorkloadMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkloadMembersWithBody request with any body
	PostWorkloadMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkloadMembers(ctx context.Context, body PostWorkloadMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkloadMembersWorkloadMemberID request
	DeleteWorkloadMembersWorkloadMemberID(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadMembersWorkloadMemberID request
	GetWorkloadMembersWorkloadMemberID(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloads request
	GetWorkloads(ctx context.Context, params *GetWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWorkloadsWithBody request with any body
	PostWorkloadsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWorkloads(ctx context.Context, body PostWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkloadsWorkloadID request
	DeleteWorkloadsWorkloadID(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkloadsWorkloadID request
	GetWorkloadsWorkloadID(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchWorkloadsWorkloadIDWithBody request with any body
	PatchWorkloadsWorkloadIDWithBody(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchWorkloadsWorkloadID(ctx context.Context, workloadID string, body PatchWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWorkloadsWorkloadIDWithBody request with any body
	PutWorkloadsWorkloadIDWithBody(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWorkloadsWorkloadID(ctx context.Context, workloadID string, body PutWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetOSResources(ctx context.Context, params *GetOSResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOSResourcesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOSResourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOSResourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOSResources(ctx context.Context, body PostOSResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOSResourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOSResourcesOSResourceID(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOSResourcesOSResourceIDRequest(c.Server, osResourceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOSResourcesOSResourceID(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOSResourcesOSResourceIDRequest(c.Server, osResourceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOSResourcesOSResourceIDWithBody(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOSResourcesOSResourceIDRequestWithBody(c.Server, osResourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOSResourcesOSResourceID(ctx context.Context, osResourceID string, body PatchOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOSResourcesOSResourceIDRequest(c.Server, osResourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOSResourcesOSResourceIDWithBody(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOSResourcesOSResourceIDRequestWithBody(c.Server, osResourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOSResourcesOSResourceID(ctx context.Context, osResourceID string, body PutOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOSResourcesOSResourceIDRequest(c.Server, osResourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompute(ctx context.Context, params *GetComputeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeHosts(ctx context.Context, params *GetComputeHostsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeHostsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeHostsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeHostsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeHosts(ctx context.Context, body PostComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeHostsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeHostsRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeHostsRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostComputeHostsRegister(ctx context.Context, body PostComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostComputeHostsRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeHostsSummary(ctx context.Context, params *GetComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeHostsSummaryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeHostsHostIDWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeHostsHostIDRequestWithBody(c.Server, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteComputeHostsHostID(ctx context.Context, hostID string, body DeleteComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteComputeHostsHostIDRequest(c.Server, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetComputeHostsHostID(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetComputeHostsHostIDRequest(c.Server, hostID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComputeHostsHostIDWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComputeHostsHostIDRequestWithBody(c.Server, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComputeHostsHostID(ctx context.Context, hostID string, body PatchComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComputeHostsHostIDRequest(c.Server, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeHostsHostIDWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeHostsHostIDRequestWithBody(c.Server, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeHostsHostID(ctx context.Context, hostID string, body PutComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeHostsHostIDRequest(c.Server, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeHostsHostIDInvalidateWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeHostsHostIDInvalidateRequestWithBody(c.Server, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutComputeHostsHostIDInvalidate(ctx context.Context, hostID string, body PutComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutComputeHostsHostIDInvalidateRequest(c.Server, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComputeHostsHostIDOnboard(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComputeHostsHostIDOnboardRequest(c.Server, hostID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComputeHostsHostIDRegisterWithBody(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComputeHostsHostIDRegisterRequestWithBody(c.Server, hostID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchComputeHostsHostIDRegister(ctx context.Context, hostID string, body PatchComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchComputeHostsHostIDRegisterRequest(c.Server, hostID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstances(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstancesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstances(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstancesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInstancesInstanceIDRequest(c.Server, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInstancesInstanceID(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInstancesInstanceIDRequest(c.Server, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInstancesInstanceIDWithBody(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInstancesInstanceIDRequestWithBody(c.Server, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchInstancesInstanceID(ctx context.Context, instanceID string, body PatchInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchInstancesInstanceIDRequest(c.Server, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutInstancesInstanceIDInvalidate(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutInstancesInstanceIDInvalidateRequest(c.Server, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalAccounts(ctx context.Context, params *GetLocalAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocalAccountsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocalAccountsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLocalAccounts(ctx context.Context, body PostLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLocalAccountsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLocalAccountsLocalAccountID(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLocalAccountsLocalAccountIDRequest(c.Server, localAccountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocalAccountsLocalAccountID(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocalAccountsLocalAccountIDRequest(c.Server, localAccountID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocations(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOus(ctx context.Context, params *GetOusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOusWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOusRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOus(ctx context.Context, body PostOusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOusRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOusOuID(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOusOuIDRequest(c.Server, ouid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOusOuID(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOusOuIDRequest(c.Server, ouid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOusOuIDWithBody(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOusOuIDRequestWithBody(c.Server, ouid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOusOuID(ctx context.Context, ouid string, body PatchOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOusOuIDRequest(c.Server, ouid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOusOuIDWithBody(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOusOuIDRequestWithBody(c.Server, ouid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOusOuID(ctx context.Context, ouid string, body PutOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOusOuIDRequest(c.Server, ouid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviders(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProvidersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProvidersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostProviders(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostProvidersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProvidersProviderID(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProvidersProviderIDRequest(c.Server, providerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProvidersProviderID(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProvidersProviderIDRequest(c.Server, providerID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegions(ctx context.Context, params *GetRegionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegionsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRegions(ctx context.Context, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRegionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRegionsRegionID(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRegionsRegionIDRequest(c.Server, regionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegionsRegionID(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegionsRegionIDRequest(c.Server, regionID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRegionsRegionIDWithBody(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRegionsRegionIDRequestWithBody(c.Server, regionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRegionsRegionID(ctx context.Context, regionID string, body PatchRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRegionsRegionIDRequest(c.Server, regionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRegionsRegionIDWithBody(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRegionsRegionIDRequestWithBody(c.Server, regionID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutRegionsRegionID(ctx context.Context, regionID string, body PutRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutRegionsRegionIDRequest(c.Server, regionID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedules(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedulesRepeated(ctx context.Context, params *GetSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRepeatedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSchedulesRepeatedWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSchedulesRepeatedRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSchedulesRepeated(ctx context.Context, body PostSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSchedulesRepeatedRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, repeatedScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, repeatedScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSchedulesRepeatedRepeatedScheduleIDRequestWithBody(c.Server, repeatedScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, body PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, repeatedScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSchedulesRepeatedRepeatedScheduleIDWithBody(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSchedulesRepeatedRepeatedScheduleIDRequestWithBody(c.Server, repeatedScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSchedulesRepeatedRepeatedScheduleID(ctx context.Context, repeatedScheduleID string, body PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSchedulesRepeatedRepeatedScheduleIDRequest(c.Server, repeatedScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedulesSingle(ctx context.Context, params *GetSchedulesSingleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesSingleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSchedulesSingleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSchedulesSingleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSchedulesSingle(ctx context.Context, body PostSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSchedulesSingleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSchedulesSingleSingleScheduleIDRequest(c.Server, singleScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSchedulesSingleSingleScheduleIDRequest(c.Server, singleScheduleID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSchedulesSingleSingleScheduleIDRequestWithBody(c.Server, singleScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, body PatchSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSchedulesSingleSingleScheduleIDRequest(c.Server, singleScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSchedulesSingleSingleScheduleIDWithBody(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSchedulesSingleSingleScheduleIDRequestWithBody(c.Server, singleScheduleID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSchedulesSingleSingleScheduleID(ctx context.Context, singleScheduleID string, body PutSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSchedulesSingleSingleScheduleIDRequest(c.Server, singleScheduleID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSites(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSitesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSitesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSitesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSites(ctx context.Context, body PostSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSitesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSitesSiteID(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSitesSiteIDRequest(c.Server, siteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSitesSiteID(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSitesSiteIDRequest(c.Server, siteID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSitesSiteIDWithBody(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSitesSiteIDRequestWithBody(c.Server, siteID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchSitesSiteID(ctx context.Context, siteID string, body PatchSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchSitesSiteIDRequest(c.Server, siteID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSitesSiteIDWithBody(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSitesSiteIDRequestWithBody(c.Server, siteID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSitesSiteID(ctx context.Context, siteID string, body PutSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSitesSiteIDRequest(c.Server, siteID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryGroupsLogs(ctx context.Context, params *GetTelemetryGroupsLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryGroupsLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryGroupsLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryGroupsLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryGroupsLogs(ctx context.Context, body PostTelemetryGroupsLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryGroupsLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTelemetryGroupsLogsTelemetryLogsGroupIdRequest(c.Server, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryGroupsLogsTelemetryLogsGroupIdRequest(c.Server, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryGroupsMetrics(ctx context.Context, params *GetTelemetryGroupsMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryGroupsMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryGroupsMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryGroupsMetricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryGroupsMetrics(ctx context.Context, body PostTelemetryGroupsMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryGroupsMetricsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdRequest(c.Server, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryGroupsMetricsTelemetryMetricsGroupIdRequest(c.Server, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryProfilesLogs(ctx context.Context, params *GetTelemetryProfilesLogsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryProfilesLogsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryProfilesLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryProfilesLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryProfilesLogs(ctx context.Context, body PostTelemetryProfilesLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryProfilesLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTelemetryProfilesLogsTelemetryLogsProfileIdRequest(c.Server, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryProfilesLogsTelemetryLogsProfileIdRequest(c.Server, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBody(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody(c.Server, telemetryLogsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, body PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequest(c.Server, telemetryLogsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBody(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody(c.Server, telemetryLogsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx context.Context, telemetryLogsProfileId string, body PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequest(c.Server, telemetryLogsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryProfilesMetrics(ctx context.Context, params *GetTelemetryProfilesMetricsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryProfilesMetricsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryProfilesMetricsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryProfilesMetricsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTelemetryProfilesMetrics(ctx context.Context, body PostTelemetryProfilesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTelemetryProfilesMetricsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(c.Server, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(c.Server, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody(c.Server, telemetryMetricsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, body PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(c.Server, telemetryMetricsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody(c.Server, telemetryMetricsProfileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx context.Context, telemetryMetricsProfileId string, body PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(c.Server, telemetryMetricsProfileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadMembers(ctx context.Context, params *GetWorkloadMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadMembersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkloadMembersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkloadMembersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkloadMembers(ctx context.Context, body PostWorkloadMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkloadMembersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkloadMembersWorkloadMemberID(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkloadMembersWorkloadMemberIDRequest(c.Server, workloadMemberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadMembersWorkloadMemberID(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadMembersWorkloadMemberIDRequest(c.Server, workloadMemberID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloads(ctx context.Context, params *GetWorkloadsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkloadsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkloadsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWorkloads(ctx context.Context, body PostWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWorkloadsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkloadsWorkloadID(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkloadsWorkloadIDRequest(c.Server, workloadID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkloadsWorkloadID(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkloadsWorkloadIDRequest(c.Server, workloadID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchWorkloadsWorkloadIDWithBody(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchWorkloadsWorkloadIDRequestWithBody(c.Server, workloadID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchWorkloadsWorkloadID(ctx context.Context, workloadID string, body PatchWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchWorkloadsWorkloadIDRequest(c.Server, workloadID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkloadsWorkloadIDWithBody(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkloadsWorkloadIDRequestWithBody(c.Server, workloadID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWorkloadsWorkloadID(ctx context.Context, workloadID string, body PutWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWorkloadsWorkloadIDRequest(c.Server, workloadID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetOSResourcesRequest generates requests for GetOSResources
func NewGetOSResourcesRequest(server string, params *GetOSResourcesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OSResources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOSResourcesRequest calls the generic PostOSResources builder with application/json body
func NewPostOSResourcesRequest(server string, body PostOSResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOSResourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOSResourcesRequestWithBody generates requests for PostOSResources with any type of body
func NewPostOSResourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OSResources")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOSResourcesOSResourceIDRequest generates requests for DeleteOSResourcesOSResourceID
func NewDeleteOSResourcesOSResourceIDRequest(server string, osResourceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OSResources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOSResourcesOSResourceIDRequest generates requests for GetOSResourcesOSResourceID
func NewGetOSResourcesOSResourceIDRequest(server string, osResourceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OSResources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOSResourcesOSResourceIDRequest calls the generic PatchOSResourcesOSResourceID builder with application/json body
func NewPatchOSResourcesOSResourceIDRequest(server string, osResourceID string, body PatchOSResourcesOSResourceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOSResourcesOSResourceIDRequestWithBody(server, osResourceID, "application/json", bodyReader)
}

// NewPatchOSResourcesOSResourceIDRequestWithBody generates requests for PatchOSResourcesOSResourceID with any type of body
func NewPatchOSResourcesOSResourceIDRequestWithBody(server string, osResourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OSResources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOSResourcesOSResourceIDRequest calls the generic PutOSResourcesOSResourceID builder with application/json body
func NewPutOSResourcesOSResourceIDRequest(server string, osResourceID string, body PutOSResourcesOSResourceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOSResourcesOSResourceIDRequestWithBody(server, osResourceID, "application/json", bodyReader)
}

// NewPutOSResourcesOSResourceIDRequestWithBody generates requests for PutOSResourcesOSResourceID with any type of body
func NewPutOSResourcesOSResourceIDRequestWithBody(server string, osResourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "OSResourceID", runtime.ParamLocationPath, osResourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/OSResources/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeRequest generates requests for GetCompute
func NewGetComputeRequest(server string, params *GetComputeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceID", runtime.ParamLocationQuery, *params.InstanceID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Detail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detail", runtime.ParamLocationQuery, *params.Detail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetComputeHostsRequest generates requests for GetComputeHosts
func NewGetComputeHostsRequest(server string, params *GetComputeHostsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceID", runtime.ParamLocationQuery, *params.InstanceID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Metadata != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "metadata", runtime.ParamLocationQuery, *params.Metadata); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Detail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detail", runtime.ParamLocationQuery, *params.Detail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostComputeHostsRequest calls the generic PostComputeHosts builder with application/json body
func NewPostComputeHostsRequest(server string, body PostComputeHostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeHostsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostComputeHostsRequestWithBody generates requests for PostComputeHosts with any type of body
func NewPostComputeHostsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostComputeHostsRegisterRequest calls the generic PostComputeHostsRegister builder with application/json body
func NewPostComputeHostsRegisterRequest(server string, body PostComputeHostsRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostComputeHostsRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewPostComputeHostsRegisterRequestWithBody generates requests for PostComputeHostsRegister with any type of body
func NewPostComputeHostsRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeHostsSummaryRequest generates requests for GetComputeHostsSummary
func NewGetComputeHostsSummaryRequest(server string, params *GetComputeHostsSummaryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/summary")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteComputeHostsHostIDRequest calls the generic DeleteComputeHostsHostID builder with application/json body
func NewDeleteComputeHostsHostIDRequest(server string, hostID string, body DeleteComputeHostsHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteComputeHostsHostIDRequestWithBody(server, hostID, "application/json", bodyReader)
}

// NewDeleteComputeHostsHostIDRequestWithBody generates requests for DeleteComputeHostsHostID with any type of body
func NewDeleteComputeHostsHostIDRequestWithBody(server string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetComputeHostsHostIDRequest generates requests for GetComputeHostsHostID
func NewGetComputeHostsHostIDRequest(server string, hostID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchComputeHostsHostIDRequest calls the generic PatchComputeHostsHostID builder with application/json body
func NewPatchComputeHostsHostIDRequest(server string, hostID string, body PatchComputeHostsHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchComputeHostsHostIDRequestWithBody(server, hostID, "application/json", bodyReader)
}

// NewPatchComputeHostsHostIDRequestWithBody generates requests for PatchComputeHostsHostID with any type of body
func NewPatchComputeHostsHostIDRequestWithBody(server string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutComputeHostsHostIDRequest calls the generic PutComputeHostsHostID builder with application/json body
func NewPutComputeHostsHostIDRequest(server string, hostID string, body PutComputeHostsHostIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeHostsHostIDRequestWithBody(server, hostID, "application/json", bodyReader)
}

// NewPutComputeHostsHostIDRequestWithBody generates requests for PutComputeHostsHostID with any type of body
func NewPutComputeHostsHostIDRequestWithBody(server string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutComputeHostsHostIDInvalidateRequest calls the generic PutComputeHostsHostIDInvalidate builder with application/json body
func NewPutComputeHostsHostIDInvalidateRequest(server string, hostID string, body PutComputeHostsHostIDInvalidateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutComputeHostsHostIDInvalidateRequestWithBody(server, hostID, "application/json", bodyReader)
}

// NewPutComputeHostsHostIDInvalidateRequestWithBody generates requests for PutComputeHostsHostIDInvalidate with any type of body
func NewPutComputeHostsHostIDInvalidateRequestWithBody(server string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s/invalidate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPatchComputeHostsHostIDOnboardRequest generates requests for PatchComputeHostsHostIDOnboard
func NewPatchComputeHostsHostIDOnboardRequest(server string, hostID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s/onboard", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchComputeHostsHostIDRegisterRequest calls the generic PatchComputeHostsHostIDRegister builder with application/json body
func NewPatchComputeHostsHostIDRegisterRequest(server string, hostID string, body PatchComputeHostsHostIDRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchComputeHostsHostIDRegisterRequestWithBody(server, hostID, "application/json", bodyReader)
}

// NewPatchComputeHostsHostIDRegisterRequestWithBody generates requests for PatchComputeHostsHostIDRegister with any type of body
func NewPatchComputeHostsHostIDRegisterRequestWithBody(server string, hostID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "hostID", runtime.ParamLocationPath, hostID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/compute/hosts/%s/register", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInstancesRequest generates requests for GetInstances
func NewGetInstancesRequest(server string, params *GetInstancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadMemberID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workloadMemberID", runtime.ParamLocationQuery, *params.WorkloadMemberID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstancesRequest calls the generic PostInstances builder with application/json body
func NewPostInstancesRequest(server string, body PostInstancesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstancesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostInstancesRequestWithBody generates requests for PostInstances with any type of body
func NewPostInstancesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInstancesInstanceIDRequest generates requests for DeleteInstancesInstanceID
func NewDeleteInstancesInstanceIDRequest(server string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInstancesInstanceIDRequest generates requests for GetInstancesInstanceID
func NewGetInstancesInstanceIDRequest(server string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchInstancesInstanceIDRequest calls the generic PatchInstancesInstanceID builder with application/json body
func NewPatchInstancesInstanceIDRequest(server string, instanceID string, body PatchInstancesInstanceIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchInstancesInstanceIDRequestWithBody(server, instanceID, "application/json", bodyReader)
}

// NewPatchInstancesInstanceIDRequestWithBody generates requests for PatchInstancesInstanceID with any type of body
func NewPatchInstancesInstanceIDRequestWithBody(server string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutInstancesInstanceIDInvalidateRequest generates requests for PutInstancesInstanceIDInvalidate
func NewPutInstancesInstanceIDInvalidateRequest(server string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/instances/%s/invalidate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalAccountsRequest generates requests for GetLocalAccounts
func NewGetLocalAccountsRequest(server string, params *GetLocalAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/localAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLocalAccountsRequest calls the generic PostLocalAccounts builder with application/json body
func NewPostLocalAccountsRequest(server string, body PostLocalAccountsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLocalAccountsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLocalAccountsRequestWithBody generates requests for PostLocalAccounts with any type of body
func NewPostLocalAccountsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/localAccounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLocalAccountsLocalAccountIDRequest generates requests for DeleteLocalAccountsLocalAccountID
func NewDeleteLocalAccountsLocalAccountIDRequest(server string, localAccountID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "localAccountID", runtime.ParamLocationPath, localAccountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/localAccounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocalAccountsLocalAccountIDRequest generates requests for GetLocalAccountsLocalAccountID
func NewGetLocalAccountsLocalAccountIDRequest(server string, localAccountID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "localAccountID", runtime.ParamLocationPath, localAccountID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/localAccounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationsRequest generates requests for GetLocations
func NewGetLocationsRequest(server string, params *GetLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowSites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showSites", runtime.ParamLocationQuery, *params.ShowSites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowRegions != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showRegions", runtime.ParamLocationQuery, *params.ShowRegions); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOusRequest generates requests for GetOus
func NewGetOusRequest(server string, params *GetOusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ous")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOusRequest calls the generic PostOus builder with application/json body
func NewPostOusRequest(server string, body PostOusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOusRequestWithBody(server, "application/json", bodyReader)
}

// NewPostOusRequestWithBody generates requests for PostOus with any type of body
func NewPostOusRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ous")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOusOuIDRequest generates requests for DeleteOusOuID
func NewDeleteOusOuIDRequest(server string, ouid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ouID", runtime.ParamLocationPath, ouid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ous/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOusOuIDRequest generates requests for GetOusOuID
func NewGetOusOuIDRequest(server string, ouid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ouID", runtime.ParamLocationPath, ouid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ous/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOusOuIDRequest calls the generic PatchOusOuID builder with application/json body
func NewPatchOusOuIDRequest(server string, ouid string, body PatchOusOuIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOusOuIDRequestWithBody(server, ouid, "application/json", bodyReader)
}

// NewPatchOusOuIDRequestWithBody generates requests for PatchOusOuID with any type of body
func NewPatchOusOuIDRequestWithBody(server string, ouid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ouID", runtime.ParamLocationPath, ouid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ous/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOusOuIDRequest calls the generic PutOusOuID builder with application/json body
func NewPutOusOuIDRequest(server string, ouid string, body PutOusOuIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOusOuIDRequestWithBody(server, ouid, "application/json", bodyReader)
}

// NewPutOusOuIDRequestWithBody generates requests for PutOusOuID with any type of body
func NewPutOusOuIDRequestWithBody(server string, ouid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ouID", runtime.ParamLocationPath, ouid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ous/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProvidersRequest generates requests for GetProviders
func NewGetProvidersRequest(server string, params *GetProvidersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostProvidersRequest calls the generic PostProviders builder with application/json body
func NewPostProvidersRequest(server string, body PostProvidersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostProvidersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostProvidersRequestWithBody generates requests for PostProviders with any type of body
func NewPostProvidersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProvidersProviderIDRequest generates requests for DeleteProvidersProviderID
func NewDeleteProvidersProviderIDRequest(server string, providerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerID", runtime.ParamLocationPath, providerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProvidersProviderIDRequest generates requests for GetProvidersProviderID
func NewGetProvidersProviderIDRequest(server string, providerID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providerID", runtime.ParamLocationPath, providerID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/providers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegionsRequest generates requests for GetRegions
func NewGetRegionsRequest(server string, params *GetRegionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Parent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent", runtime.ParamLocationQuery, *params.Parent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowTotalSites != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showTotalSites", runtime.ParamLocationQuery, *params.ShowTotalSites); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRegionsRequest calls the generic PostRegions builder with application/json body
func NewPostRegionsRequest(server string, body PostRegionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRegionsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRegionsRequestWithBody generates requests for PostRegions with any type of body
func NewPostRegionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/regions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRegionsRegionIDRequest generates requests for DeleteRegionsRegionID
func NewDeleteRegionsRegionIDRequest(server string, regionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegionsRegionIDRequest generates requests for GetRegionsRegionID
func NewGetRegionsRegionIDRequest(server string, regionID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRegionsRegionIDRequest calls the generic PatchRegionsRegionID builder with application/json body
func NewPatchRegionsRegionIDRequest(server string, regionID string, body PatchRegionsRegionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRegionsRegionIDRequestWithBody(server, regionID, "application/json", bodyReader)
}

// NewPatchRegionsRegionIDRequestWithBody generates requests for PatchRegionsRegionID with any type of body
func NewPatchRegionsRegionIDRequestWithBody(server string, regionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutRegionsRegionIDRequest calls the generic PutRegionsRegionID builder with application/json body
func NewPutRegionsRegionIDRequest(server string, regionID string, body PutRegionsRegionIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutRegionsRegionIDRequestWithBody(server, regionID, "application/json", bodyReader)
}

// NewPutRegionsRegionIDRequestWithBody generates requests for PutRegionsRegionID with any type of body
func NewPutRegionsRegionIDRequestWithBody(server string, regionID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "regionID", runtime.ParamLocationPath, regionID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/regions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSchedulesRequest generates requests for GetSchedules
func NewGetSchedulesRequest(server string, params *GetSchedulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unix_epoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesRepeatedRequest generates requests for GetSchedulesRepeated
func NewGetSchedulesRepeatedRequest(server string, params *GetSchedulesRepeatedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/repeated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unix_epoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSchedulesRepeatedRequest calls the generic PostSchedulesRepeated builder with application/json body
func NewPostSchedulesRepeatedRequest(server string, body PostSchedulesRepeatedJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSchedulesRepeatedRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSchedulesRepeatedRequestWithBody generates requests for PostSchedulesRepeated with any type of body
func NewPostSchedulesRepeatedRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/repeated")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSchedulesRepeatedRepeatedScheduleIDRequest generates requests for DeleteSchedulesRepeatedRepeatedScheduleID
func NewDeleteSchedulesRepeatedRepeatedScheduleIDRequest(server string, repeatedScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/repeated/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesRepeatedRepeatedScheduleIDRequest generates requests for GetSchedulesRepeatedRepeatedScheduleID
func NewGetSchedulesRepeatedRepeatedScheduleIDRequest(server string, repeatedScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/repeated/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSchedulesRepeatedRepeatedScheduleIDRequest calls the generic PatchSchedulesRepeatedRepeatedScheduleID builder with application/json body
func NewPatchSchedulesRepeatedRepeatedScheduleIDRequest(server string, repeatedScheduleID string, body PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server, repeatedScheduleID, "application/json", bodyReader)
}

// NewPatchSchedulesRepeatedRepeatedScheduleIDRequestWithBody generates requests for PatchSchedulesRepeatedRepeatedScheduleID with any type of body
func NewPatchSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server string, repeatedScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/repeated/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSchedulesRepeatedRepeatedScheduleIDRequest calls the generic PutSchedulesRepeatedRepeatedScheduleID builder with application/json body
func NewPutSchedulesRepeatedRepeatedScheduleIDRequest(server string, repeatedScheduleID string, body PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server, repeatedScheduleID, "application/json", bodyReader)
}

// NewPutSchedulesRepeatedRepeatedScheduleIDRequestWithBody generates requests for PutSchedulesRepeatedRepeatedScheduleID with any type of body
func NewPutSchedulesRepeatedRepeatedScheduleIDRequestWithBody(server string, repeatedScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "repeatedScheduleID", runtime.ParamLocationPath, repeatedScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/repeated/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSchedulesSingleRequest generates requests for GetSchedulesSingle
func NewGetSchedulesSingleRequest(server string, params *GetSchedulesSingleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/single")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteID", runtime.ParamLocationQuery, *params.SiteID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HostID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hostID", runtime.ParamLocationQuery, *params.HostID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UnixEpoch != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unix_epoch", runtime.ParamLocationQuery, *params.UnixEpoch); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSchedulesSingleRequest calls the generic PostSchedulesSingle builder with application/json body
func NewPostSchedulesSingleRequest(server string, body PostSchedulesSingleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSchedulesSingleRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSchedulesSingleRequestWithBody generates requests for PostSchedulesSingle with any type of body
func NewPostSchedulesSingleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/single")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSchedulesSingleSingleScheduleIDRequest generates requests for DeleteSchedulesSingleSingleScheduleID
func NewDeleteSchedulesSingleSingleScheduleIDRequest(server string, singleScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/single/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSchedulesSingleSingleScheduleIDRequest generates requests for GetSchedulesSingleSingleScheduleID
func NewGetSchedulesSingleSingleScheduleIDRequest(server string, singleScheduleID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/single/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSchedulesSingleSingleScheduleIDRequest calls the generic PatchSchedulesSingleSingleScheduleID builder with application/json body
func NewPatchSchedulesSingleSingleScheduleIDRequest(server string, singleScheduleID string, body PatchSchedulesSingleSingleScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSchedulesSingleSingleScheduleIDRequestWithBody(server, singleScheduleID, "application/json", bodyReader)
}

// NewPatchSchedulesSingleSingleScheduleIDRequestWithBody generates requests for PatchSchedulesSingleSingleScheduleID with any type of body
func NewPatchSchedulesSingleSingleScheduleIDRequestWithBody(server string, singleScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/single/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSchedulesSingleSingleScheduleIDRequest calls the generic PutSchedulesSingleSingleScheduleID builder with application/json body
func NewPutSchedulesSingleSingleScheduleIDRequest(server string, singleScheduleID string, body PutSchedulesSingleSingleScheduleIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSchedulesSingleSingleScheduleIDRequestWithBody(server, singleScheduleID, "application/json", bodyReader)
}

// NewPutSchedulesSingleSingleScheduleIDRequestWithBody generates requests for PutSchedulesSingleSingleScheduleID with any type of body
func NewPutSchedulesSingleSingleScheduleIDRequestWithBody(server string, singleScheduleID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "singleScheduleID", runtime.ParamLocationPath, singleScheduleID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/schedules/single/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSitesRequest generates requests for GetSites
func NewGetSitesRequest(server string, params *GetSitesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionID", runtime.ParamLocationQuery, *params.RegionID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OuID != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ouID", runtime.ParamLocationQuery, *params.OuID); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSitesRequest calls the generic PostSites builder with application/json body
func NewPostSitesRequest(server string, body PostSitesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSitesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostSitesRequestWithBody generates requests for PostSites with any type of body
func NewPostSitesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSitesSiteIDRequest generates requests for DeleteSitesSiteID
func NewDeleteSitesSiteIDRequest(server string, siteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSitesSiteIDRequest generates requests for GetSitesSiteID
func NewGetSitesSiteIDRequest(server string, siteID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchSitesSiteIDRequest calls the generic PatchSitesSiteID builder with application/json body
func NewPatchSitesSiteIDRequest(server string, siteID string, body PatchSitesSiteIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchSitesSiteIDRequestWithBody(server, siteID, "application/json", bodyReader)
}

// NewPatchSitesSiteIDRequestWithBody generates requests for PatchSitesSiteID with any type of body
func NewPatchSitesSiteIDRequestWithBody(server string, siteID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutSitesSiteIDRequest calls the generic PutSitesSiteID builder with application/json body
func NewPutSitesSiteIDRequest(server string, siteID string, body PutSitesSiteIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSitesSiteIDRequestWithBody(server, siteID, "application/json", bodyReader)
}

// NewPutSitesSiteIDRequestWithBody generates requests for PutSitesSiteID with any type of body
func NewPutSitesSiteIDRequestWithBody(server string, siteID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "siteID", runtime.ParamLocationPath, siteID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/sites/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTelemetryGroupsLogsRequest generates requests for GetTelemetryGroupsLogs
func NewGetTelemetryGroupsLogsRequest(server string, params *GetTelemetryGroupsLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTelemetryGroupsLogsRequest calls the generic PostTelemetryGroupsLogs builder with application/json body
func NewPostTelemetryGroupsLogsRequest(server string, body PostTelemetryGroupsLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTelemetryGroupsLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTelemetryGroupsLogsRequestWithBody generates requests for PostTelemetryGroupsLogs with any type of body
func NewPostTelemetryGroupsLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTelemetryGroupsLogsTelemetryLogsGroupIdRequest generates requests for DeleteTelemetryGroupsLogsTelemetryLogsGroupId
func NewDeleteTelemetryGroupsLogsTelemetryLogsGroupIdRequest(server string, telemetryLogsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetryGroupsLogsTelemetryLogsGroupIdRequest generates requests for GetTelemetryGroupsLogsTelemetryLogsGroupId
func NewGetTelemetryGroupsLogsTelemetryLogsGroupIdRequest(server string, telemetryLogsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsGroupId", runtime.ParamLocationPath, telemetryLogsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetryGroupsMetricsRequest generates requests for GetTelemetryGroupsMetrics
func NewGetTelemetryGroupsMetricsRequest(server string, params *GetTelemetryGroupsMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTelemetryGroupsMetricsRequest calls the generic PostTelemetryGroupsMetrics builder with application/json body
func NewPostTelemetryGroupsMetricsRequest(server string, body PostTelemetryGroupsMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTelemetryGroupsMetricsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTelemetryGroupsMetricsRequestWithBody generates requests for PostTelemetryGroupsMetrics with any type of body
func NewPostTelemetryGroupsMetricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdRequest generates requests for DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId
func NewDeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdRequest(server string, telemetryMetricsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetryGroupsMetricsTelemetryMetricsGroupIdRequest generates requests for GetTelemetryGroupsMetricsTelemetryMetricsGroupId
func NewGetTelemetryGroupsMetricsTelemetryMetricsGroupIdRequest(server string, telemetryMetricsGroupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsGroupId", runtime.ParamLocationPath, telemetryMetricsGroupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/groups/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetryProfilesLogsRequest generates requests for GetTelemetryProfilesLogs
func NewGetTelemetryProfilesLogsRequest(server string, params *GetTelemetryProfilesLogsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowInherited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showInherited", runtime.ParamLocationQuery, *params.ShowInherited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTelemetryProfilesLogsRequest calls the generic PostTelemetryProfilesLogs builder with application/json body
func NewPostTelemetryProfilesLogsRequest(server string, body PostTelemetryProfilesLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTelemetryProfilesLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTelemetryProfilesLogsRequestWithBody generates requests for PostTelemetryProfilesLogs with any type of body
func NewPostTelemetryProfilesLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTelemetryProfilesLogsTelemetryLogsProfileIdRequest generates requests for DeleteTelemetryProfilesLogsTelemetryLogsProfileId
func NewDeleteTelemetryProfilesLogsTelemetryLogsProfileIdRequest(server string, telemetryLogsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetryProfilesLogsTelemetryLogsProfileIdRequest generates requests for GetTelemetryProfilesLogsTelemetryLogsProfileId
func NewGetTelemetryProfilesLogsTelemetryLogsProfileIdRequest(server string, telemetryLogsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequest calls the generic PatchTelemetryProfilesLogsTelemetryLogsProfileId builder with application/json body
func NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequest(server string, telemetryLogsProfileId string, body PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody(server, telemetryLogsProfileId, "application/json", bodyReader)
}

// NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody generates requests for PatchTelemetryProfilesLogsTelemetryLogsProfileId with any type of body
func NewPatchTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody(server string, telemetryLogsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequest calls the generic PutTelemetryProfilesLogsTelemetryLogsProfileId builder with application/json body
func NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequest(server string, telemetryLogsProfileId string, body PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody(server, telemetryLogsProfileId, "application/json", bodyReader)
}

// NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody generates requests for PutTelemetryProfilesLogsTelemetryLogsProfileId with any type of body
func NewPutTelemetryProfilesLogsTelemetryLogsProfileIdRequestWithBody(server string, telemetryLogsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryLogsProfileId", runtime.ParamLocationPath, telemetryLogsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/logs/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTelemetryProfilesMetricsRequest generates requests for GetTelemetryProfilesMetrics
func NewGetTelemetryProfilesMetricsRequest(server string, params *GetTelemetryProfilesMetricsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteId", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RegionId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "regionId", runtime.ParamLocationQuery, *params.RegionId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.InstanceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instanceId", runtime.ParamLocationQuery, *params.InstanceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ShowInherited != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showInherited", runtime.ParamLocationQuery, *params.ShowInherited); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTelemetryProfilesMetricsRequest calls the generic PostTelemetryProfilesMetrics builder with application/json body
func NewPostTelemetryProfilesMetricsRequest(server string, body PostTelemetryProfilesMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTelemetryProfilesMetricsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTelemetryProfilesMetricsRequestWithBody generates requests for PostTelemetryProfilesMetrics with any type of body
func NewPostTelemetryProfilesMetricsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/metrics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest generates requests for DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId
func NewDeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(server string, telemetryMetricsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest generates requests for GetTelemetryProfilesMetricsTelemetryMetricsProfileId
func NewGetTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(server string, telemetryMetricsProfileId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest calls the generic PatchTelemetryProfilesMetricsTelemetryMetricsProfileId builder with application/json body
func NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(server string, telemetryMetricsProfileId string, body PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody(server, telemetryMetricsProfileId, "application/json", bodyReader)
}

// NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody generates requests for PatchTelemetryProfilesMetricsTelemetryMetricsProfileId with any type of body
func NewPatchTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody(server string, telemetryMetricsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest calls the generic PutTelemetryProfilesMetricsTelemetryMetricsProfileId builder with application/json body
func NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequest(server string, telemetryMetricsProfileId string, body PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody(server, telemetryMetricsProfileId, "application/json", bodyReader)
}

// NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody generates requests for PutTelemetryProfilesMetricsTelemetryMetricsProfileId with any type of body
func NewPutTelemetryProfilesMetricsTelemetryMetricsProfileIdRequestWithBody(server string, telemetryMetricsProfileId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "telemetryMetricsProfileId", runtime.ParamLocationPath, telemetryMetricsProfileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/telemetry/profiles/metrics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkloadMembersRequest generates requests for GetWorkloadMembers
func NewGetWorkloadMembersRequest(server string, params *GetWorkloadMembersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloadMembers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WorkloadId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "workload_id", runtime.ParamLocationQuery, *params.WorkloadId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkloadMembersRequest calls the generic PostWorkloadMembers builder with application/json body
func NewPostWorkloadMembersRequest(server string, body PostWorkloadMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkloadMembersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWorkloadMembersRequestWithBody generates requests for PostWorkloadMembers with any type of body
func NewPostWorkloadMembersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloadMembers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkloadMembersWorkloadMemberIDRequest generates requests for DeleteWorkloadMembersWorkloadMemberID
func NewDeleteWorkloadMembersWorkloadMemberIDRequest(server string, workloadMemberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workloadMemberID", runtime.ParamLocationPath, workloadMemberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloadMembers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadMembersWorkloadMemberIDRequest generates requests for GetWorkloadMembersWorkloadMemberID
func NewGetWorkloadMembersWorkloadMemberIDRequest(server string, workloadMemberID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workloadMemberID", runtime.ParamLocationPath, workloadMemberID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloadMembers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadsRequest generates requests for GetWorkloads
func NewGetWorkloadsRequest(server string, params *GetWorkloadsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Kind != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWorkloadsRequest calls the generic PostWorkloads builder with application/json body
func NewPostWorkloadsRequest(server string, body PostWorkloadsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWorkloadsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWorkloadsRequestWithBody generates requests for PostWorkloads with any type of body
func NewPostWorkloadsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkloadsWorkloadIDRequest generates requests for DeleteWorkloadsWorkloadID
func NewDeleteWorkloadsWorkloadIDRequest(server string, workloadID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWorkloadsWorkloadIDRequest generates requests for GetWorkloadsWorkloadID
func NewGetWorkloadsWorkloadIDRequest(server string, workloadID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchWorkloadsWorkloadIDRequest calls the generic PatchWorkloadsWorkloadID builder with application/json body
func NewPatchWorkloadsWorkloadIDRequest(server string, workloadID string, body PatchWorkloadsWorkloadIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchWorkloadsWorkloadIDRequestWithBody(server, workloadID, "application/json", bodyReader)
}

// NewPatchWorkloadsWorkloadIDRequestWithBody generates requests for PatchWorkloadsWorkloadID with any type of body
func NewPatchWorkloadsWorkloadIDRequestWithBody(server string, workloadID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutWorkloadsWorkloadIDRequest calls the generic PutWorkloadsWorkloadID builder with application/json body
func NewPutWorkloadsWorkloadIDRequest(server string, workloadID string, body PutWorkloadsWorkloadIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWorkloadsWorkloadIDRequestWithBody(server, workloadID, "application/json", bodyReader)
}

// NewPutWorkloadsWorkloadIDRequestWithBody generates requests for PutWorkloadsWorkloadID with any type of body
func NewPutWorkloadsWorkloadIDRequestWithBody(server string, workloadID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "workloadID", runtime.ParamLocationPath, workloadID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/workloads/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetOSResourcesWithResponse request
	GetOSResourcesWithResponse(ctx context.Context, params *GetOSResourcesParams, reqEditors ...RequestEditorFn) (*GetOSResourcesResponse, error)

	// PostOSResourcesWithBodyWithResponse request with any body
	PostOSResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOSResourcesResponse, error)

	PostOSResourcesWithResponse(ctx context.Context, body PostOSResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOSResourcesResponse, error)

	// DeleteOSResourcesOSResourceIDWithResponse request
	DeleteOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*DeleteOSResourcesOSResourceIDResponse, error)

	// GetOSResourcesOSResourceIDWithResponse request
	GetOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*GetOSResourcesOSResourceIDResponse, error)

	// PatchOSResourcesOSResourceIDWithBodyWithResponse request with any body
	PatchOSResourcesOSResourceIDWithBodyWithResponse(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOSResourcesOSResourceIDResponse, error)

	PatchOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, body PatchOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOSResourcesOSResourceIDResponse, error)

	// PutOSResourcesOSResourceIDWithBodyWithResponse request with any body
	PutOSResourcesOSResourceIDWithBodyWithResponse(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOSResourcesOSResourceIDResponse, error)

	PutOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, body PutOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOSResourcesOSResourceIDResponse, error)

	// GetComputeWithResponse request
	GetComputeWithResponse(ctx context.Context, params *GetComputeParams, reqEditors ...RequestEditorFn) (*GetComputeResponse, error)

	// GetComputeHostsWithResponse request
	GetComputeHostsWithResponse(ctx context.Context, params *GetComputeHostsParams, reqEditors ...RequestEditorFn) (*GetComputeHostsResponse, error)

	// PostComputeHostsWithBodyWithResponse request with any body
	PostComputeHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeHostsResponse, error)

	PostComputeHostsWithResponse(ctx context.Context, body PostComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeHostsResponse, error)

	// PostComputeHostsRegisterWithBodyWithResponse request with any body
	PostComputeHostsRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeHostsRegisterResponse, error)

	PostComputeHostsRegisterWithResponse(ctx context.Context, body PostComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeHostsRegisterResponse, error)

	// GetComputeHostsSummaryWithResponse request
	GetComputeHostsSummaryWithResponse(ctx context.Context, params *GetComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*GetComputeHostsSummaryResponse, error)

	// DeleteComputeHostsHostIDWithBodyWithResponse request with any body
	DeleteComputeHostsHostIDWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteComputeHostsHostIDResponse, error)

	DeleteComputeHostsHostIDWithResponse(ctx context.Context, hostID string, body DeleteComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteComputeHostsHostIDResponse, error)

	// GetComputeHostsHostIDWithResponse request
	GetComputeHostsHostIDWithResponse(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*GetComputeHostsHostIDResponse, error)

	// PatchComputeHostsHostIDWithBodyWithResponse request with any body
	PatchComputeHostsHostIDWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDResponse, error)

	PatchComputeHostsHostIDWithResponse(ctx context.Context, hostID string, body PatchComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDResponse, error)

	// PutComputeHostsHostIDWithBodyWithResponse request with any body
	PutComputeHostsHostIDWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDResponse, error)

	PutComputeHostsHostIDWithResponse(ctx context.Context, hostID string, body PutComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDResponse, error)

	// PutComputeHostsHostIDInvalidateWithBodyWithResponse request with any body
	PutComputeHostsHostIDInvalidateWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDInvalidateResponse, error)

	PutComputeHostsHostIDInvalidateWithResponse(ctx context.Context, hostID string, body PutComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDInvalidateResponse, error)

	// PatchComputeHostsHostIDOnboardWithResponse request
	PatchComputeHostsHostIDOnboardWithResponse(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDOnboardResponse, error)

	// PatchComputeHostsHostIDRegisterWithBodyWithResponse request with any body
	PatchComputeHostsHostIDRegisterWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDRegisterResponse, error)

	PatchComputeHostsHostIDRegisterWithResponse(ctx context.Context, hostID string, body PatchComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDRegisterResponse, error)

	// GetInstancesWithResponse request
	GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error)

	// PostInstancesWithBodyWithResponse request with any body
	PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error)

	// DeleteInstancesInstanceIDWithResponse request
	DeleteInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*DeleteInstancesInstanceIDResponse, error)

	// GetInstancesInstanceIDWithResponse request
	GetInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDResponse, error)

	// PatchInstancesInstanceIDWithBodyWithResponse request with any body
	PatchInstancesInstanceIDWithBodyWithResponse(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInstancesInstanceIDResponse, error)

	PatchInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, body PatchInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInstancesInstanceIDResponse, error)

	// PutInstancesInstanceIDInvalidateWithResponse request
	PutInstancesInstanceIDInvalidateWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDInvalidateResponse, error)

	// GetLocalAccountsWithResponse request
	GetLocalAccountsWithResponse(ctx context.Context, params *GetLocalAccountsParams, reqEditors ...RequestEditorFn) (*GetLocalAccountsResponse, error)

	// PostLocalAccountsWithBodyWithResponse request with any body
	PostLocalAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocalAccountsResponse, error)

	PostLocalAccountsWithResponse(ctx context.Context, body PostLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocalAccountsResponse, error)

	// DeleteLocalAccountsLocalAccountIDWithResponse request
	DeleteLocalAccountsLocalAccountIDWithResponse(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*DeleteLocalAccountsLocalAccountIDResponse, error)

	// GetLocalAccountsLocalAccountIDWithResponse request
	GetLocalAccountsLocalAccountIDWithResponse(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*GetLocalAccountsLocalAccountIDResponse, error)

	// GetLocationsWithResponse request
	GetLocationsWithResponse(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*GetLocationsResponse, error)

	// GetOusWithResponse request
	GetOusWithResponse(ctx context.Context, params *GetOusParams, reqEditors ...RequestEditorFn) (*GetOusResponse, error)

	// PostOusWithBodyWithResponse request with any body
	PostOusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOusResponse, error)

	PostOusWithResponse(ctx context.Context, body PostOusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOusResponse, error)

	// DeleteOusOuIDWithResponse request
	DeleteOusOuIDWithResponse(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*DeleteOusOuIDResponse, error)

	// GetOusOuIDWithResponse request
	GetOusOuIDWithResponse(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*GetOusOuIDResponse, error)

	// PatchOusOuIDWithBodyWithResponse request with any body
	PatchOusOuIDWithBodyWithResponse(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOusOuIDResponse, error)

	PatchOusOuIDWithResponse(ctx context.Context, ouid string, body PatchOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOusOuIDResponse, error)

	// PutOusOuIDWithBodyWithResponse request with any body
	PutOusOuIDWithBodyWithResponse(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOusOuIDResponse, error)

	PutOusOuIDWithResponse(ctx context.Context, ouid string, body PutOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOusOuIDResponse, error)

	// GetProvidersWithResponse request
	GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error)

	// PostProvidersWithBodyWithResponse request with any body
	PostProvidersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error)

	PostProvidersWithResponse(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error)

	// DeleteProvidersProviderIDWithResponse request
	DeleteProvidersProviderIDWithResponse(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*DeleteProvidersProviderIDResponse, error)

	// GetProvidersProviderIDWithResponse request
	GetProvidersProviderIDWithResponse(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*GetProvidersProviderIDResponse, error)

	// GetRegionsWithResponse request
	GetRegionsWithResponse(ctx context.Context, params *GetRegionsParams, reqEditors ...RequestEditorFn) (*GetRegionsResponse, error)

	// PostRegionsWithBodyWithResponse request with any body
	PostRegionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error)

	PostRegionsWithResponse(ctx context.Context, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error)

	// DeleteRegionsRegionIDWithResponse request
	DeleteRegionsRegionIDWithResponse(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*DeleteRegionsRegionIDResponse, error)

	// GetRegionsRegionIDWithResponse request
	GetRegionsRegionIDWithResponse(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*GetRegionsRegionIDResponse, error)

	// PatchRegionsRegionIDWithBodyWithResponse request with any body
	PatchRegionsRegionIDWithBodyWithResponse(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRegionsRegionIDResponse, error)

	PatchRegionsRegionIDWithResponse(ctx context.Context, regionID string, body PatchRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRegionsRegionIDResponse, error)

	// PutRegionsRegionIDWithBodyWithResponse request with any body
	PutRegionsRegionIDWithBodyWithResponse(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRegionsRegionIDResponse, error)

	PutRegionsRegionIDWithResponse(ctx context.Context, regionID string, body PutRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRegionsRegionIDResponse, error)

	// GetSchedulesWithResponse request
	GetSchedulesWithResponse(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error)

	// GetSchedulesRepeatedWithResponse request
	GetSchedulesRepeatedWithResponse(ctx context.Context, params *GetSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*GetSchedulesRepeatedResponse, error)

	// PostSchedulesRepeatedWithBodyWithResponse request with any body
	PostSchedulesRepeatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSchedulesRepeatedResponse, error)

	PostSchedulesRepeatedWithResponse(ctx context.Context, body PostSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSchedulesRepeatedResponse, error)

	// DeleteSchedulesRepeatedRepeatedScheduleIDWithResponse request
	DeleteSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*DeleteSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// GetSchedulesRepeatedRepeatedScheduleIDWithResponse request
	GetSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*GetSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// PatchSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with any body
	PatchSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSchedulesRepeatedRepeatedScheduleIDResponse, error)

	PatchSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, body PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// PutSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with any body
	PutSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSchedulesRepeatedRepeatedScheduleIDResponse, error)

	PutSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, body PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSchedulesRepeatedRepeatedScheduleIDResponse, error)

	// GetSchedulesSingleWithResponse request
	GetSchedulesSingleWithResponse(ctx context.Context, params *GetSchedulesSingleParams, reqEditors ...RequestEditorFn) (*GetSchedulesSingleResponse, error)

	// PostSchedulesSingleWithBodyWithResponse request with any body
	PostSchedulesSingleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSchedulesSingleResponse, error)

	PostSchedulesSingleWithResponse(ctx context.Context, body PostSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSchedulesSingleResponse, error)

	// DeleteSchedulesSingleSingleScheduleIDWithResponse request
	DeleteSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*DeleteSchedulesSingleSingleScheduleIDResponse, error)

	// GetSchedulesSingleSingleScheduleIDWithResponse request
	GetSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*GetSchedulesSingleSingleScheduleIDResponse, error)

	// PatchSchedulesSingleSingleScheduleIDWithBodyWithResponse request with any body
	PatchSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSchedulesSingleSingleScheduleIDResponse, error)

	PatchSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, body PatchSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSchedulesSingleSingleScheduleIDResponse, error)

	// PutSchedulesSingleSingleScheduleIDWithBodyWithResponse request with any body
	PutSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSchedulesSingleSingleScheduleIDResponse, error)

	PutSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, body PutSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSchedulesSingleSingleScheduleIDResponse, error)

	// GetSitesWithResponse request
	GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error)

	// PostSitesWithBodyWithResponse request with any body
	PostSitesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSitesResponse, error)

	PostSitesWithResponse(ctx context.Context, body PostSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSitesResponse, error)

	// DeleteSitesSiteIDWithResponse request
	DeleteSitesSiteIDWithResponse(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*DeleteSitesSiteIDResponse, error)

	// GetSitesSiteIDWithResponse request
	GetSitesSiteIDWithResponse(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*GetSitesSiteIDResponse, error)

	// PatchSitesSiteIDWithBodyWithResponse request with any body
	PatchSitesSiteIDWithBodyWithResponse(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSitesSiteIDResponse, error)

	PatchSitesSiteIDWithResponse(ctx context.Context, siteID string, body PatchSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSitesSiteIDResponse, error)

	// PutSitesSiteIDWithBodyWithResponse request with any body
	PutSitesSiteIDWithBodyWithResponse(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSitesSiteIDResponse, error)

	PutSitesSiteIDWithResponse(ctx context.Context, siteID string, body PutSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSitesSiteIDResponse, error)

	// GetTelemetryGroupsLogsWithResponse request
	GetTelemetryGroupsLogsWithResponse(ctx context.Context, params *GetTelemetryGroupsLogsParams, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsLogsResponse, error)

	// PostTelemetryGroupsLogsWithBodyWithResponse request with any body
	PostTelemetryGroupsLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsLogsResponse, error)

	PostTelemetryGroupsLogsWithResponse(ctx context.Context, body PostTelemetryGroupsLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsLogsResponse, error)

	// DeleteTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse request
	DeleteTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse, error)

	// GetTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse request
	GetTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse, error)

	// GetTelemetryGroupsMetricsWithResponse request
	GetTelemetryGroupsMetricsWithResponse(ctx context.Context, params *GetTelemetryGroupsMetricsParams, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsMetricsResponse, error)

	// PostTelemetryGroupsMetricsWithBodyWithResponse request with any body
	PostTelemetryGroupsMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsMetricsResponse, error)

	PostTelemetryGroupsMetricsWithResponse(ctx context.Context, body PostTelemetryGroupsMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsMetricsResponse, error)

	// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse request
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse, error)

	// GetTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse request
	GetTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse, error)

	// GetTelemetryProfilesLogsWithResponse request
	GetTelemetryProfilesLogsWithResponse(ctx context.Context, params *GetTelemetryProfilesLogsParams, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesLogsResponse, error)

	// PostTelemetryProfilesLogsWithBodyWithResponse request with any body
	PostTelemetryProfilesLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesLogsResponse, error)

	PostTelemetryProfilesLogsWithResponse(ctx context.Context, body PostTelemetryProfilesLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesLogsResponse, error)

	// DeleteTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse request
	DeleteTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error)

	// GetTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse request
	GetTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error)

	// PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse request with any body
	PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error)

	PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, body PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error)

	// PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse request with any body
	PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error)

	PutTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, body PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error)

	// GetTelemetryProfilesMetricsWithResponse request
	GetTelemetryProfilesMetricsWithResponse(ctx context.Context, params *GetTelemetryProfilesMetricsParams, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesMetricsResponse, error)

	// PostTelemetryProfilesMetricsWithBodyWithResponse request with any body
	PostTelemetryProfilesMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesMetricsResponse, error)

	PostTelemetryProfilesMetricsWithResponse(ctx context.Context, body PostTelemetryProfilesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesMetricsResponse, error)

	// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse request
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error)

	// GetTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse request
	GetTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error)

	// PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse request with any body
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error)

	PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, body PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error)

	// PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse request with any body
	PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error)

	PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, body PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error)

	// GetWorkloadMembersWithResponse request
	GetWorkloadMembersWithResponse(ctx context.Context, params *GetWorkloadMembersParams, reqEditors ...RequestEditorFn) (*GetWorkloadMembersResponse, error)

	// PostWorkloadMembersWithBodyWithResponse request with any body
	PostWorkloadMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkloadMembersResponse, error)

	PostWorkloadMembersWithResponse(ctx context.Context, body PostWorkloadMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkloadMembersResponse, error)

	// DeleteWorkloadMembersWorkloadMemberIDWithResponse request
	DeleteWorkloadMembersWorkloadMemberIDWithResponse(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*DeleteWorkloadMembersWorkloadMemberIDResponse, error)

	// GetWorkloadMembersWorkloadMemberIDWithResponse request
	GetWorkloadMembersWorkloadMemberIDWithResponse(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*GetWorkloadMembersWorkloadMemberIDResponse, error)

	// GetWorkloadsWithResponse request
	GetWorkloadsWithResponse(ctx context.Context, params *GetWorkloadsParams, reqEditors ...RequestEditorFn) (*GetWorkloadsResponse, error)

	// PostWorkloadsWithBodyWithResponse request with any body
	PostWorkloadsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkloadsResponse, error)

	PostWorkloadsWithResponse(ctx context.Context, body PostWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkloadsResponse, error)

	// DeleteWorkloadsWorkloadIDWithResponse request
	DeleteWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*DeleteWorkloadsWorkloadIDResponse, error)

	// GetWorkloadsWorkloadIDWithResponse request
	GetWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*GetWorkloadsWorkloadIDResponse, error)

	// PatchWorkloadsWorkloadIDWithBodyWithResponse request with any body
	PatchWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchWorkloadsWorkloadIDResponse, error)

	PatchWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, body PatchWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchWorkloadsWorkloadIDResponse, error)

	// PutWorkloadsWorkloadIDWithBodyWithResponse request with any body
	PutWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkloadsWorkloadIDResponse, error)

	PutWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, body PutWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkloadsWorkloadIDResponse, error)
}

type GetOSResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResourceList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetOSResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOSResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOSResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostOSResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOSResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOSResourcesOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteOSResourcesOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOSResourcesOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOSResourcesOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetOSResourcesOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOSResourcesOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOSResourcesOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchOSResourcesOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOSResourcesOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOSResourcesOSResourceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperatingSystemResource
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutOSResourcesOSResourceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOSResourcesOSResourceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetComputeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetComputeHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeHostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostComputeHostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeHostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostComputeHostsRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostComputeHostsRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostComputeHostsRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeHostsSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostsSummary
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetComputeHostsSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeHostsSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeHostsHostIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Host
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutComputeHostsHostIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeHostsHostIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutComputeHostsHostIDInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutComputeHostsHostIDInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutComputeHostsHostIDInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchComputeHostsHostIDOnboardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchComputeHostsHostIDOnboardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchComputeHostsHostIDOnboardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchComputeHostsHostIDRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchComputeHostsHostIDRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchComputeHostsHostIDRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Instance
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostInstancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchInstancesInstanceIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchInstancesInstanceIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchInstancesInstanceIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutInstancesInstanceIDInvalidateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutInstancesInstanceIDInvalidateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutInstancesInstanceIDInvalidateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalAccountList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetLocalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLocalAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *LocalAccount
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostLocalAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLocalAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLocalAccountsLocalAccountIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteLocalAccountsLocalAccountIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLocalAccountsLocalAccountIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocalAccountsLocalAccountIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocalAccount
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetLocalAccountsLocalAccountIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocalAccountsLocalAccountIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationNodeList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OUsList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetOusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OU
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostOusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOusOuIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteOusOuIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOusOuIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOusOuIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OU
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetOusOuIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOusOuIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOusOuIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OU
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchOusOuIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOusOuIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOusOuIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OU
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutOusOuIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOusOuIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Provider
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProvidersProviderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteProvidersProviderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProvidersProviderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProvidersProviderIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Provider
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetProvidersProviderIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProvidersProviderIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RegionsList
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRegionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Region
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PostRegionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRegionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r GetRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PatchRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutRegionsRegionIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Region
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PutRegionsRegionIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutRegionsRegionIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SchedulesListJoin
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSchedulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesRepeatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedulesList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSchedulesRepeatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesRepeatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSchedulesRepeatedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostSchedulesRepeatedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSchedulesRepeatedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSchedulesRepeatedRepeatedScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RepeatedSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutSchedulesRepeatedRepeatedScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSchedulesRepeatedRepeatedScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesSingleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedulesList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSchedulesSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSchedulesSingleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostSchedulesSingleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSchedulesSingleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSchedulesSingleSingleScheduleIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SingleSchedule
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutSchedulesSingleSingleScheduleIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSchedulesSingleSingleScheduleIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SitesList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSitesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostSitesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSitesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSitesSiteIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Site
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutSitesSiteIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSitesSiteIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryGroupsLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsGroupList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryGroupsLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryGroupsLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTelemetryGroupsLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryLogsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PostTelemetryGroupsLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTelemetryGroupsLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryGroupsMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsGroupList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryGroupsMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryGroupsMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTelemetryGroupsMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryMetricsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PostTelemetryGroupsMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTelemetryGroupsMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsGroup
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryProfilesLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfileList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryProfilesLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryProfilesLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTelemetryProfilesLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostTelemetryProfilesLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTelemetryProfilesLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryLogsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryProfilesMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfileList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryProfilesMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryProfilesMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTelemetryProfilesMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostTelemetryProfilesMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTelemetryProfilesMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON409      *N409Conflict
	JSON422      *N422UnprocessableEntity
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
}

// Status returns HTTPResponse.Status
func (r PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TelemetryMetricsProfile
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadMemberList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetWorkloadMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkloadMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WorkloadMember
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostWorkloadMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkloadMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkloadMembersWorkloadMemberIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteWorkloadMembersWorkloadMemberIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkloadMembersWorkloadMemberIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadMembersWorkloadMemberIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadMember
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetWorkloadMembersWorkloadMemberIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadMembersWorkloadMemberIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkloadList
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWorkloadsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PostWorkloadsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWorkloadsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r DeleteWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r GetWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PatchWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWorkloadsWorkloadIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Workload
	JSON400      *N400BadRequest
	JSON401      *N401Unauthorized
	JSON403      *N403Forbidden
	JSON404      *N404NotFound
	JSON406      *N406NotAcceptable
	JSON408      *N408Timeout
	JSON409      *N409Conflict
	JSON412      *N412PreconditionFailed
	JSON422      *N422UnprocessableEntity
	JSON429      *N429TooManyRequests
	JSON500      *N500InternalServerError
	JSON501      *N501Unimplemented
	JSON503      *N503ServiceUnavailable
}

// Status returns HTTPResponse.Status
func (r PutWorkloadsWorkloadIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWorkloadsWorkloadIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetOSResourcesWithResponse request returning *GetOSResourcesResponse
func (c *ClientWithResponses) GetOSResourcesWithResponse(ctx context.Context, params *GetOSResourcesParams, reqEditors ...RequestEditorFn) (*GetOSResourcesResponse, error) {
	rsp, err := c.GetOSResources(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOSResourcesResponse(rsp)
}

// PostOSResourcesWithBodyWithResponse request with arbitrary body returning *PostOSResourcesResponse
func (c *ClientWithResponses) PostOSResourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOSResourcesResponse, error) {
	rsp, err := c.PostOSResourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOSResourcesResponse(rsp)
}

func (c *ClientWithResponses) PostOSResourcesWithResponse(ctx context.Context, body PostOSResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOSResourcesResponse, error) {
	rsp, err := c.PostOSResources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOSResourcesResponse(rsp)
}

// DeleteOSResourcesOSResourceIDWithResponse request returning *DeleteOSResourcesOSResourceIDResponse
func (c *ClientWithResponses) DeleteOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*DeleteOSResourcesOSResourceIDResponse, error) {
	rsp, err := c.DeleteOSResourcesOSResourceID(ctx, osResourceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOSResourcesOSResourceIDResponse(rsp)
}

// GetOSResourcesOSResourceIDWithResponse request returning *GetOSResourcesOSResourceIDResponse
func (c *ClientWithResponses) GetOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, reqEditors ...RequestEditorFn) (*GetOSResourcesOSResourceIDResponse, error) {
	rsp, err := c.GetOSResourcesOSResourceID(ctx, osResourceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOSResourcesOSResourceIDResponse(rsp)
}

// PatchOSResourcesOSResourceIDWithBodyWithResponse request with arbitrary body returning *PatchOSResourcesOSResourceIDResponse
func (c *ClientWithResponses) PatchOSResourcesOSResourceIDWithBodyWithResponse(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOSResourcesOSResourceIDResponse, error) {
	rsp, err := c.PatchOSResourcesOSResourceIDWithBody(ctx, osResourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOSResourcesOSResourceIDResponse(rsp)
}

func (c *ClientWithResponses) PatchOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, body PatchOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOSResourcesOSResourceIDResponse, error) {
	rsp, err := c.PatchOSResourcesOSResourceID(ctx, osResourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOSResourcesOSResourceIDResponse(rsp)
}

// PutOSResourcesOSResourceIDWithBodyWithResponse request with arbitrary body returning *PutOSResourcesOSResourceIDResponse
func (c *ClientWithResponses) PutOSResourcesOSResourceIDWithBodyWithResponse(ctx context.Context, osResourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOSResourcesOSResourceIDResponse, error) {
	rsp, err := c.PutOSResourcesOSResourceIDWithBody(ctx, osResourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOSResourcesOSResourceIDResponse(rsp)
}

func (c *ClientWithResponses) PutOSResourcesOSResourceIDWithResponse(ctx context.Context, osResourceID string, body PutOSResourcesOSResourceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOSResourcesOSResourceIDResponse, error) {
	rsp, err := c.PutOSResourcesOSResourceID(ctx, osResourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOSResourcesOSResourceIDResponse(rsp)
}

// GetComputeWithResponse request returning *GetComputeResponse
func (c *ClientWithResponses) GetComputeWithResponse(ctx context.Context, params *GetComputeParams, reqEditors ...RequestEditorFn) (*GetComputeResponse, error) {
	rsp, err := c.GetCompute(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeResponse(rsp)
}

// GetComputeHostsWithResponse request returning *GetComputeHostsResponse
func (c *ClientWithResponses) GetComputeHostsWithResponse(ctx context.Context, params *GetComputeHostsParams, reqEditors ...RequestEditorFn) (*GetComputeHostsResponse, error) {
	rsp, err := c.GetComputeHosts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeHostsResponse(rsp)
}

// PostComputeHostsWithBodyWithResponse request with arbitrary body returning *PostComputeHostsResponse
func (c *ClientWithResponses) PostComputeHostsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeHostsResponse, error) {
	rsp, err := c.PostComputeHostsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeHostsResponse(rsp)
}

func (c *ClientWithResponses) PostComputeHostsWithResponse(ctx context.Context, body PostComputeHostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeHostsResponse, error) {
	rsp, err := c.PostComputeHosts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeHostsResponse(rsp)
}

// PostComputeHostsRegisterWithBodyWithResponse request with arbitrary body returning *PostComputeHostsRegisterResponse
func (c *ClientWithResponses) PostComputeHostsRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostComputeHostsRegisterResponse, error) {
	rsp, err := c.PostComputeHostsRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeHostsRegisterResponse(rsp)
}

func (c *ClientWithResponses) PostComputeHostsRegisterWithResponse(ctx context.Context, body PostComputeHostsRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PostComputeHostsRegisterResponse, error) {
	rsp, err := c.PostComputeHostsRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostComputeHostsRegisterResponse(rsp)
}

// GetComputeHostsSummaryWithResponse request returning *GetComputeHostsSummaryResponse
func (c *ClientWithResponses) GetComputeHostsSummaryWithResponse(ctx context.Context, params *GetComputeHostsSummaryParams, reqEditors ...RequestEditorFn) (*GetComputeHostsSummaryResponse, error) {
	rsp, err := c.GetComputeHostsSummary(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeHostsSummaryResponse(rsp)
}

// DeleteComputeHostsHostIDWithBodyWithResponse request with arbitrary body returning *DeleteComputeHostsHostIDResponse
func (c *ClientWithResponses) DeleteComputeHostsHostIDWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteComputeHostsHostIDResponse, error) {
	rsp, err := c.DeleteComputeHostsHostIDWithBody(ctx, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeHostsHostIDResponse(rsp)
}

func (c *ClientWithResponses) DeleteComputeHostsHostIDWithResponse(ctx context.Context, hostID string, body DeleteComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteComputeHostsHostIDResponse, error) {
	rsp, err := c.DeleteComputeHostsHostID(ctx, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteComputeHostsHostIDResponse(rsp)
}

// GetComputeHostsHostIDWithResponse request returning *GetComputeHostsHostIDResponse
func (c *ClientWithResponses) GetComputeHostsHostIDWithResponse(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*GetComputeHostsHostIDResponse, error) {
	rsp, err := c.GetComputeHostsHostID(ctx, hostID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetComputeHostsHostIDResponse(rsp)
}

// PatchComputeHostsHostIDWithBodyWithResponse request with arbitrary body returning *PatchComputeHostsHostIDResponse
func (c *ClientWithResponses) PatchComputeHostsHostIDWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDResponse, error) {
	rsp, err := c.PatchComputeHostsHostIDWithBody(ctx, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComputeHostsHostIDResponse(rsp)
}

func (c *ClientWithResponses) PatchComputeHostsHostIDWithResponse(ctx context.Context, hostID string, body PatchComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDResponse, error) {
	rsp, err := c.PatchComputeHostsHostID(ctx, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComputeHostsHostIDResponse(rsp)
}

// PutComputeHostsHostIDWithBodyWithResponse request with arbitrary body returning *PutComputeHostsHostIDResponse
func (c *ClientWithResponses) PutComputeHostsHostIDWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDResponse, error) {
	rsp, err := c.PutComputeHostsHostIDWithBody(ctx, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeHostsHostIDResponse(rsp)
}

func (c *ClientWithResponses) PutComputeHostsHostIDWithResponse(ctx context.Context, hostID string, body PutComputeHostsHostIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDResponse, error) {
	rsp, err := c.PutComputeHostsHostID(ctx, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeHostsHostIDResponse(rsp)
}

// PutComputeHostsHostIDInvalidateWithBodyWithResponse request with arbitrary body returning *PutComputeHostsHostIDInvalidateResponse
func (c *ClientWithResponses) PutComputeHostsHostIDInvalidateWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDInvalidateResponse, error) {
	rsp, err := c.PutComputeHostsHostIDInvalidateWithBody(ctx, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeHostsHostIDInvalidateResponse(rsp)
}

func (c *ClientWithResponses) PutComputeHostsHostIDInvalidateWithResponse(ctx context.Context, hostID string, body PutComputeHostsHostIDInvalidateJSONRequestBody, reqEditors ...RequestEditorFn) (*PutComputeHostsHostIDInvalidateResponse, error) {
	rsp, err := c.PutComputeHostsHostIDInvalidate(ctx, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutComputeHostsHostIDInvalidateResponse(rsp)
}

// PatchComputeHostsHostIDOnboardWithResponse request returning *PatchComputeHostsHostIDOnboardResponse
func (c *ClientWithResponses) PatchComputeHostsHostIDOnboardWithResponse(ctx context.Context, hostID string, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDOnboardResponse, error) {
	rsp, err := c.PatchComputeHostsHostIDOnboard(ctx, hostID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComputeHostsHostIDOnboardResponse(rsp)
}

// PatchComputeHostsHostIDRegisterWithBodyWithResponse request with arbitrary body returning *PatchComputeHostsHostIDRegisterResponse
func (c *ClientWithResponses) PatchComputeHostsHostIDRegisterWithBodyWithResponse(ctx context.Context, hostID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDRegisterResponse, error) {
	rsp, err := c.PatchComputeHostsHostIDRegisterWithBody(ctx, hostID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComputeHostsHostIDRegisterResponse(rsp)
}

func (c *ClientWithResponses) PatchComputeHostsHostIDRegisterWithResponse(ctx context.Context, hostID string, body PatchComputeHostsHostIDRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchComputeHostsHostIDRegisterResponse, error) {
	rsp, err := c.PatchComputeHostsHostIDRegister(ctx, hostID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchComputeHostsHostIDRegisterResponse(rsp)
}

// GetInstancesWithResponse request returning *GetInstancesResponse
func (c *ClientWithResponses) GetInstancesWithResponse(ctx context.Context, params *GetInstancesParams, reqEditors ...RequestEditorFn) (*GetInstancesResponse, error) {
	rsp, err := c.GetInstances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesResponse(rsp)
}

// PostInstancesWithBodyWithResponse request with arbitrary body returning *PostInstancesResponse
func (c *ClientWithResponses) PostInstancesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstancesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

func (c *ClientWithResponses) PostInstancesWithResponse(ctx context.Context, body PostInstancesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstancesResponse, error) {
	rsp, err := c.PostInstances(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInstancesResponse(rsp)
}

// DeleteInstancesInstanceIDWithResponse request returning *DeleteInstancesInstanceIDResponse
func (c *ClientWithResponses) DeleteInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*DeleteInstancesInstanceIDResponse, error) {
	rsp, err := c.DeleteInstancesInstanceID(ctx, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInstancesInstanceIDResponse(rsp)
}

// GetInstancesInstanceIDWithResponse request returning *GetInstancesInstanceIDResponse
func (c *ClientWithResponses) GetInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*GetInstancesInstanceIDResponse, error) {
	rsp, err := c.GetInstancesInstanceID(ctx, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInstancesInstanceIDResponse(rsp)
}

// PatchInstancesInstanceIDWithBodyWithResponse request with arbitrary body returning *PatchInstancesInstanceIDResponse
func (c *ClientWithResponses) PatchInstancesInstanceIDWithBodyWithResponse(ctx context.Context, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchInstancesInstanceIDResponse, error) {
	rsp, err := c.PatchInstancesInstanceIDWithBody(ctx, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInstancesInstanceIDResponse(rsp)
}

func (c *ClientWithResponses) PatchInstancesInstanceIDWithResponse(ctx context.Context, instanceID string, body PatchInstancesInstanceIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchInstancesInstanceIDResponse, error) {
	rsp, err := c.PatchInstancesInstanceID(ctx, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchInstancesInstanceIDResponse(rsp)
}

// PutInstancesInstanceIDInvalidateWithResponse request returning *PutInstancesInstanceIDInvalidateResponse
func (c *ClientWithResponses) PutInstancesInstanceIDInvalidateWithResponse(ctx context.Context, instanceID string, reqEditors ...RequestEditorFn) (*PutInstancesInstanceIDInvalidateResponse, error) {
	rsp, err := c.PutInstancesInstanceIDInvalidate(ctx, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutInstancesInstanceIDInvalidateResponse(rsp)
}

// GetLocalAccountsWithResponse request returning *GetLocalAccountsResponse
func (c *ClientWithResponses) GetLocalAccountsWithResponse(ctx context.Context, params *GetLocalAccountsParams, reqEditors ...RequestEditorFn) (*GetLocalAccountsResponse, error) {
	rsp, err := c.GetLocalAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalAccountsResponse(rsp)
}

// PostLocalAccountsWithBodyWithResponse request with arbitrary body returning *PostLocalAccountsResponse
func (c *ClientWithResponses) PostLocalAccountsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLocalAccountsResponse, error) {
	rsp, err := c.PostLocalAccountsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocalAccountsResponse(rsp)
}

func (c *ClientWithResponses) PostLocalAccountsWithResponse(ctx context.Context, body PostLocalAccountsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLocalAccountsResponse, error) {
	rsp, err := c.PostLocalAccounts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLocalAccountsResponse(rsp)
}

// DeleteLocalAccountsLocalAccountIDWithResponse request returning *DeleteLocalAccountsLocalAccountIDResponse
func (c *ClientWithResponses) DeleteLocalAccountsLocalAccountIDWithResponse(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*DeleteLocalAccountsLocalAccountIDResponse, error) {
	rsp, err := c.DeleteLocalAccountsLocalAccountID(ctx, localAccountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLocalAccountsLocalAccountIDResponse(rsp)
}

// GetLocalAccountsLocalAccountIDWithResponse request returning *GetLocalAccountsLocalAccountIDResponse
func (c *ClientWithResponses) GetLocalAccountsLocalAccountIDWithResponse(ctx context.Context, localAccountID string, reqEditors ...RequestEditorFn) (*GetLocalAccountsLocalAccountIDResponse, error) {
	rsp, err := c.GetLocalAccountsLocalAccountID(ctx, localAccountID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocalAccountsLocalAccountIDResponse(rsp)
}

// GetLocationsWithResponse request returning *GetLocationsResponse
func (c *ClientWithResponses) GetLocationsWithResponse(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*GetLocationsResponse, error) {
	rsp, err := c.GetLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationsResponse(rsp)
}

// GetOusWithResponse request returning *GetOusResponse
func (c *ClientWithResponses) GetOusWithResponse(ctx context.Context, params *GetOusParams, reqEditors ...RequestEditorFn) (*GetOusResponse, error) {
	rsp, err := c.GetOus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOusResponse(rsp)
}

// PostOusWithBodyWithResponse request with arbitrary body returning *PostOusResponse
func (c *ClientWithResponses) PostOusWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOusResponse, error) {
	rsp, err := c.PostOusWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOusResponse(rsp)
}

func (c *ClientWithResponses) PostOusWithResponse(ctx context.Context, body PostOusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOusResponse, error) {
	rsp, err := c.PostOus(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOusResponse(rsp)
}

// DeleteOusOuIDWithResponse request returning *DeleteOusOuIDResponse
func (c *ClientWithResponses) DeleteOusOuIDWithResponse(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*DeleteOusOuIDResponse, error) {
	rsp, err := c.DeleteOusOuID(ctx, ouid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOusOuIDResponse(rsp)
}

// GetOusOuIDWithResponse request returning *GetOusOuIDResponse
func (c *ClientWithResponses) GetOusOuIDWithResponse(ctx context.Context, ouid string, reqEditors ...RequestEditorFn) (*GetOusOuIDResponse, error) {
	rsp, err := c.GetOusOuID(ctx, ouid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOusOuIDResponse(rsp)
}

// PatchOusOuIDWithBodyWithResponse request with arbitrary body returning *PatchOusOuIDResponse
func (c *ClientWithResponses) PatchOusOuIDWithBodyWithResponse(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOusOuIDResponse, error) {
	rsp, err := c.PatchOusOuIDWithBody(ctx, ouid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOusOuIDResponse(rsp)
}

func (c *ClientWithResponses) PatchOusOuIDWithResponse(ctx context.Context, ouid string, body PatchOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOusOuIDResponse, error) {
	rsp, err := c.PatchOusOuID(ctx, ouid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchOusOuIDResponse(rsp)
}

// PutOusOuIDWithBodyWithResponse request with arbitrary body returning *PutOusOuIDResponse
func (c *ClientWithResponses) PutOusOuIDWithBodyWithResponse(ctx context.Context, ouid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOusOuIDResponse, error) {
	rsp, err := c.PutOusOuIDWithBody(ctx, ouid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOusOuIDResponse(rsp)
}

func (c *ClientWithResponses) PutOusOuIDWithResponse(ctx context.Context, ouid string, body PutOusOuIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOusOuIDResponse, error) {
	rsp, err := c.PutOusOuID(ctx, ouid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOusOuIDResponse(rsp)
}

// GetProvidersWithResponse request returning *GetProvidersResponse
func (c *ClientWithResponses) GetProvidersWithResponse(ctx context.Context, params *GetProvidersParams, reqEditors ...RequestEditorFn) (*GetProvidersResponse, error) {
	rsp, err := c.GetProviders(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersResponse(rsp)
}

// PostProvidersWithBodyWithResponse request with arbitrary body returning *PostProvidersResponse
func (c *ClientWithResponses) PostProvidersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error) {
	rsp, err := c.PostProvidersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProvidersResponse(rsp)
}

func (c *ClientWithResponses) PostProvidersWithResponse(ctx context.Context, body PostProvidersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostProvidersResponse, error) {
	rsp, err := c.PostProviders(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostProvidersResponse(rsp)
}

// DeleteProvidersProviderIDWithResponse request returning *DeleteProvidersProviderIDResponse
func (c *ClientWithResponses) DeleteProvidersProviderIDWithResponse(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*DeleteProvidersProviderIDResponse, error) {
	rsp, err := c.DeleteProvidersProviderID(ctx, providerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProvidersProviderIDResponse(rsp)
}

// GetProvidersProviderIDWithResponse request returning *GetProvidersProviderIDResponse
func (c *ClientWithResponses) GetProvidersProviderIDWithResponse(ctx context.Context, providerID string, reqEditors ...RequestEditorFn) (*GetProvidersProviderIDResponse, error) {
	rsp, err := c.GetProvidersProviderID(ctx, providerID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProvidersProviderIDResponse(rsp)
}

// GetRegionsWithResponse request returning *GetRegionsResponse
func (c *ClientWithResponses) GetRegionsWithResponse(ctx context.Context, params *GetRegionsParams, reqEditors ...RequestEditorFn) (*GetRegionsResponse, error) {
	rsp, err := c.GetRegions(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegionsResponse(rsp)
}

// PostRegionsWithBodyWithResponse request with arbitrary body returning *PostRegionsResponse
func (c *ClientWithResponses) PostRegionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error) {
	rsp, err := c.PostRegionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegionsResponse(rsp)
}

func (c *ClientWithResponses) PostRegionsWithResponse(ctx context.Context, body PostRegionsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRegionsResponse, error) {
	rsp, err := c.PostRegions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRegionsResponse(rsp)
}

// DeleteRegionsRegionIDWithResponse request returning *DeleteRegionsRegionIDResponse
func (c *ClientWithResponses) DeleteRegionsRegionIDWithResponse(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*DeleteRegionsRegionIDResponse, error) {
	rsp, err := c.DeleteRegionsRegionID(ctx, regionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRegionsRegionIDResponse(rsp)
}

// GetRegionsRegionIDWithResponse request returning *GetRegionsRegionIDResponse
func (c *ClientWithResponses) GetRegionsRegionIDWithResponse(ctx context.Context, regionID string, reqEditors ...RequestEditorFn) (*GetRegionsRegionIDResponse, error) {
	rsp, err := c.GetRegionsRegionID(ctx, regionID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegionsRegionIDResponse(rsp)
}

// PatchRegionsRegionIDWithBodyWithResponse request with arbitrary body returning *PatchRegionsRegionIDResponse
func (c *ClientWithResponses) PatchRegionsRegionIDWithBodyWithResponse(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRegionsRegionIDResponse, error) {
	rsp, err := c.PatchRegionsRegionIDWithBody(ctx, regionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRegionsRegionIDResponse(rsp)
}

func (c *ClientWithResponses) PatchRegionsRegionIDWithResponse(ctx context.Context, regionID string, body PatchRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRegionsRegionIDResponse, error) {
	rsp, err := c.PatchRegionsRegionID(ctx, regionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRegionsRegionIDResponse(rsp)
}

// PutRegionsRegionIDWithBodyWithResponse request with arbitrary body returning *PutRegionsRegionIDResponse
func (c *ClientWithResponses) PutRegionsRegionIDWithBodyWithResponse(ctx context.Context, regionID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutRegionsRegionIDResponse, error) {
	rsp, err := c.PutRegionsRegionIDWithBody(ctx, regionID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRegionsRegionIDResponse(rsp)
}

func (c *ClientWithResponses) PutRegionsRegionIDWithResponse(ctx context.Context, regionID string, body PutRegionsRegionIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutRegionsRegionIDResponse, error) {
	rsp, err := c.PutRegionsRegionID(ctx, regionID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutRegionsRegionIDResponse(rsp)
}

// GetSchedulesWithResponse request returning *GetSchedulesResponse
func (c *ClientWithResponses) GetSchedulesWithResponse(ctx context.Context, params *GetSchedulesParams, reqEditors ...RequestEditorFn) (*GetSchedulesResponse, error) {
	rsp, err := c.GetSchedules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesResponse(rsp)
}

// GetSchedulesRepeatedWithResponse request returning *GetSchedulesRepeatedResponse
func (c *ClientWithResponses) GetSchedulesRepeatedWithResponse(ctx context.Context, params *GetSchedulesRepeatedParams, reqEditors ...RequestEditorFn) (*GetSchedulesRepeatedResponse, error) {
	rsp, err := c.GetSchedulesRepeated(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesRepeatedResponse(rsp)
}

// PostSchedulesRepeatedWithBodyWithResponse request with arbitrary body returning *PostSchedulesRepeatedResponse
func (c *ClientWithResponses) PostSchedulesRepeatedWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSchedulesRepeatedResponse, error) {
	rsp, err := c.PostSchedulesRepeatedWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSchedulesRepeatedResponse(rsp)
}

func (c *ClientWithResponses) PostSchedulesRepeatedWithResponse(ctx context.Context, body PostSchedulesRepeatedJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSchedulesRepeatedResponse, error) {
	rsp, err := c.PostSchedulesRepeated(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSchedulesRepeatedResponse(rsp)
}

// DeleteSchedulesRepeatedRepeatedScheduleIDWithResponse request returning *DeleteSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) DeleteSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*DeleteSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.DeleteSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// GetSchedulesRepeatedRepeatedScheduleIDWithResponse request returning *GetSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) GetSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, reqEditors ...RequestEditorFn) (*GetSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.GetSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// PatchSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with arbitrary body returning *PatchSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) PatchSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PatchSchedulesRepeatedRepeatedScheduleIDWithBody(ctx, repeatedScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PatchSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, body PatchSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PatchSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// PutSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse request with arbitrary body returning *PutSchedulesRepeatedRepeatedScheduleIDResponse
func (c *ClientWithResponses) PutSchedulesRepeatedRepeatedScheduleIDWithBodyWithResponse(ctx context.Context, repeatedScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PutSchedulesRepeatedRepeatedScheduleIDWithBody(ctx, repeatedScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PutSchedulesRepeatedRepeatedScheduleIDWithResponse(ctx context.Context, repeatedScheduleID string, body PutSchedulesRepeatedRepeatedScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	rsp, err := c.PutSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSchedulesRepeatedRepeatedScheduleIDResponse(rsp)
}

// GetSchedulesSingleWithResponse request returning *GetSchedulesSingleResponse
func (c *ClientWithResponses) GetSchedulesSingleWithResponse(ctx context.Context, params *GetSchedulesSingleParams, reqEditors ...RequestEditorFn) (*GetSchedulesSingleResponse, error) {
	rsp, err := c.GetSchedulesSingle(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesSingleResponse(rsp)
}

// PostSchedulesSingleWithBodyWithResponse request with arbitrary body returning *PostSchedulesSingleResponse
func (c *ClientWithResponses) PostSchedulesSingleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSchedulesSingleResponse, error) {
	rsp, err := c.PostSchedulesSingleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSchedulesSingleResponse(rsp)
}

func (c *ClientWithResponses) PostSchedulesSingleWithResponse(ctx context.Context, body PostSchedulesSingleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSchedulesSingleResponse, error) {
	rsp, err := c.PostSchedulesSingle(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSchedulesSingleResponse(rsp)
}

// DeleteSchedulesSingleSingleScheduleIDWithResponse request returning *DeleteSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) DeleteSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*DeleteSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.DeleteSchedulesSingleSingleScheduleID(ctx, singleScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSchedulesSingleSingleScheduleIDResponse(rsp)
}

// GetSchedulesSingleSingleScheduleIDWithResponse request returning *GetSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) GetSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, reqEditors ...RequestEditorFn) (*GetSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.GetSchedulesSingleSingleScheduleID(ctx, singleScheduleID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSchedulesSingleSingleScheduleIDResponse(rsp)
}

// PatchSchedulesSingleSingleScheduleIDWithBodyWithResponse request with arbitrary body returning *PatchSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) PatchSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PatchSchedulesSingleSingleScheduleIDWithBody(ctx, singleScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSchedulesSingleSingleScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PatchSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, body PatchSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PatchSchedulesSingleSingleScheduleID(ctx, singleScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSchedulesSingleSingleScheduleIDResponse(rsp)
}

// PutSchedulesSingleSingleScheduleIDWithBodyWithResponse request with arbitrary body returning *PutSchedulesSingleSingleScheduleIDResponse
func (c *ClientWithResponses) PutSchedulesSingleSingleScheduleIDWithBodyWithResponse(ctx context.Context, singleScheduleID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PutSchedulesSingleSingleScheduleIDWithBody(ctx, singleScheduleID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSchedulesSingleSingleScheduleIDResponse(rsp)
}

func (c *ClientWithResponses) PutSchedulesSingleSingleScheduleIDWithResponse(ctx context.Context, singleScheduleID string, body PutSchedulesSingleSingleScheduleIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSchedulesSingleSingleScheduleIDResponse, error) {
	rsp, err := c.PutSchedulesSingleSingleScheduleID(ctx, singleScheduleID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSchedulesSingleSingleScheduleIDResponse(rsp)
}

// GetSitesWithResponse request returning *GetSitesResponse
func (c *ClientWithResponses) GetSitesWithResponse(ctx context.Context, params *GetSitesParams, reqEditors ...RequestEditorFn) (*GetSitesResponse, error) {
	rsp, err := c.GetSites(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSitesResponse(rsp)
}

// PostSitesWithBodyWithResponse request with arbitrary body returning *PostSitesResponse
func (c *ClientWithResponses) PostSitesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSitesResponse, error) {
	rsp, err := c.PostSitesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSitesResponse(rsp)
}

func (c *ClientWithResponses) PostSitesWithResponse(ctx context.Context, body PostSitesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSitesResponse, error) {
	rsp, err := c.PostSites(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSitesResponse(rsp)
}

// DeleteSitesSiteIDWithResponse request returning *DeleteSitesSiteIDResponse
func (c *ClientWithResponses) DeleteSitesSiteIDWithResponse(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*DeleteSitesSiteIDResponse, error) {
	rsp, err := c.DeleteSitesSiteID(ctx, siteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSitesSiteIDResponse(rsp)
}

// GetSitesSiteIDWithResponse request returning *GetSitesSiteIDResponse
func (c *ClientWithResponses) GetSitesSiteIDWithResponse(ctx context.Context, siteID string, reqEditors ...RequestEditorFn) (*GetSitesSiteIDResponse, error) {
	rsp, err := c.GetSitesSiteID(ctx, siteID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSitesSiteIDResponse(rsp)
}

// PatchSitesSiteIDWithBodyWithResponse request with arbitrary body returning *PatchSitesSiteIDResponse
func (c *ClientWithResponses) PatchSitesSiteIDWithBodyWithResponse(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchSitesSiteIDResponse, error) {
	rsp, err := c.PatchSitesSiteIDWithBody(ctx, siteID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSitesSiteIDResponse(rsp)
}

func (c *ClientWithResponses) PatchSitesSiteIDWithResponse(ctx context.Context, siteID string, body PatchSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchSitesSiteIDResponse, error) {
	rsp, err := c.PatchSitesSiteID(ctx, siteID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchSitesSiteIDResponse(rsp)
}

// PutSitesSiteIDWithBodyWithResponse request with arbitrary body returning *PutSitesSiteIDResponse
func (c *ClientWithResponses) PutSitesSiteIDWithBodyWithResponse(ctx context.Context, siteID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSitesSiteIDResponse, error) {
	rsp, err := c.PutSitesSiteIDWithBody(ctx, siteID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSitesSiteIDResponse(rsp)
}

func (c *ClientWithResponses) PutSitesSiteIDWithResponse(ctx context.Context, siteID string, body PutSitesSiteIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSitesSiteIDResponse, error) {
	rsp, err := c.PutSitesSiteID(ctx, siteID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSitesSiteIDResponse(rsp)
}

// GetTelemetryGroupsLogsWithResponse request returning *GetTelemetryGroupsLogsResponse
func (c *ClientWithResponses) GetTelemetryGroupsLogsWithResponse(ctx context.Context, params *GetTelemetryGroupsLogsParams, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsLogsResponse, error) {
	rsp, err := c.GetTelemetryGroupsLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryGroupsLogsResponse(rsp)
}

// PostTelemetryGroupsLogsWithBodyWithResponse request with arbitrary body returning *PostTelemetryGroupsLogsResponse
func (c *ClientWithResponses) PostTelemetryGroupsLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsLogsResponse, error) {
	rsp, err := c.PostTelemetryGroupsLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryGroupsLogsResponse(rsp)
}

func (c *ClientWithResponses) PostTelemetryGroupsLogsWithResponse(ctx context.Context, body PostTelemetryGroupsLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsLogsResponse, error) {
	rsp, err := c.PostTelemetryGroupsLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryGroupsLogsResponse(rsp)
}

// DeleteTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse request returning *DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse
func (c *ClientWithResponses) DeleteTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse, error) {
	rsp, err := c.DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse(rsp)
}

// GetTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse request returning *GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse
func (c *ClientWithResponses) GetTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse(ctx context.Context, telemetryLogsGroupId string, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse, error) {
	rsp, err := c.GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryGroupsLogsTelemetryLogsGroupIdResponse(rsp)
}

// GetTelemetryGroupsMetricsWithResponse request returning *GetTelemetryGroupsMetricsResponse
func (c *ClientWithResponses) GetTelemetryGroupsMetricsWithResponse(ctx context.Context, params *GetTelemetryGroupsMetricsParams, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsMetricsResponse, error) {
	rsp, err := c.GetTelemetryGroupsMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryGroupsMetricsResponse(rsp)
}

// PostTelemetryGroupsMetricsWithBodyWithResponse request with arbitrary body returning *PostTelemetryGroupsMetricsResponse
func (c *ClientWithResponses) PostTelemetryGroupsMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsMetricsResponse, error) {
	rsp, err := c.PostTelemetryGroupsMetricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryGroupsMetricsResponse(rsp)
}

func (c *ClientWithResponses) PostTelemetryGroupsMetricsWithResponse(ctx context.Context, body PostTelemetryGroupsMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryGroupsMetricsResponse, error) {
	rsp, err := c.PostTelemetryGroupsMetrics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryGroupsMetricsResponse(rsp)
}

// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse request returning *DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse
func (c *ClientWithResponses) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse, error) {
	rsp, err := c.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse(rsp)
}

// GetTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse request returning *GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse
func (c *ClientWithResponses) GetTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse(ctx context.Context, telemetryMetricsGroupId string, reqEditors ...RequestEditorFn) (*GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse, error) {
	rsp, err := c.GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse(rsp)
}

// GetTelemetryProfilesLogsWithResponse request returning *GetTelemetryProfilesLogsResponse
func (c *ClientWithResponses) GetTelemetryProfilesLogsWithResponse(ctx context.Context, params *GetTelemetryProfilesLogsParams, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesLogsResponse, error) {
	rsp, err := c.GetTelemetryProfilesLogs(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryProfilesLogsResponse(rsp)
}

// PostTelemetryProfilesLogsWithBodyWithResponse request with arbitrary body returning *PostTelemetryProfilesLogsResponse
func (c *ClientWithResponses) PostTelemetryProfilesLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesLogsResponse, error) {
	rsp, err := c.PostTelemetryProfilesLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryProfilesLogsResponse(rsp)
}

func (c *ClientWithResponses) PostTelemetryProfilesLogsWithResponse(ctx context.Context, body PostTelemetryProfilesLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesLogsResponse, error) {
	rsp, err := c.PostTelemetryProfilesLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryProfilesLogsResponse(rsp)
}

// DeleteTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse request returning *DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) DeleteTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp)
}

// GetTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse request returning *GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) GetTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp)
}

// PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse request with arbitrary body returning *PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithBody(ctx, telemetryLogsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, body PatchTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp)
}

// PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse request with arbitrary body returning *PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse
func (c *ClientWithResponses) PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBodyWithResponse(ctx context.Context, telemetryLogsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PutTelemetryProfilesLogsTelemetryLogsProfileIdWithBody(ctx, telemetryLogsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PutTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse(ctx context.Context, telemetryLogsProfileId string, body PutTelemetryProfilesLogsTelemetryLogsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	rsp, err := c.PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp)
}

// GetTelemetryProfilesMetricsWithResponse request returning *GetTelemetryProfilesMetricsResponse
func (c *ClientWithResponses) GetTelemetryProfilesMetricsWithResponse(ctx context.Context, params *GetTelemetryProfilesMetricsParams, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesMetricsResponse, error) {
	rsp, err := c.GetTelemetryProfilesMetrics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryProfilesMetricsResponse(rsp)
}

// PostTelemetryProfilesMetricsWithBodyWithResponse request with arbitrary body returning *PostTelemetryProfilesMetricsResponse
func (c *ClientWithResponses) PostTelemetryProfilesMetricsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesMetricsResponse, error) {
	rsp, err := c.PostTelemetryProfilesMetricsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryProfilesMetricsResponse(rsp)
}

func (c *ClientWithResponses) PostTelemetryProfilesMetricsWithResponse(ctx context.Context, body PostTelemetryProfilesMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTelemetryProfilesMetricsResponse, error) {
	rsp, err := c.PostTelemetryProfilesMetrics(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTelemetryProfilesMetricsResponse(rsp)
}

// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse request returning *DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp)
}

// GetTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse request returning *GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) GetTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, reqEditors ...RequestEditorFn) (*GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp)
}

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse request with arbitrary body returning *PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody(ctx, telemetryMetricsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, body PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp)
}

// PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse request with arbitrary body returning *PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse
func (c *ClientWithResponses) PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBodyWithResponse(ctx context.Context, telemetryMetricsProfileId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithBody(ctx, telemetryMetricsProfileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse(ctx context.Context, telemetryMetricsProfileId string, body PutTelemetryProfilesMetricsTelemetryMetricsProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	rsp, err := c.PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp)
}

// GetWorkloadMembersWithResponse request returning *GetWorkloadMembersResponse
func (c *ClientWithResponses) GetWorkloadMembersWithResponse(ctx context.Context, params *GetWorkloadMembersParams, reqEditors ...RequestEditorFn) (*GetWorkloadMembersResponse, error) {
	rsp, err := c.GetWorkloadMembers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadMembersResponse(rsp)
}

// PostWorkloadMembersWithBodyWithResponse request with arbitrary body returning *PostWorkloadMembersResponse
func (c *ClientWithResponses) PostWorkloadMembersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkloadMembersResponse, error) {
	rsp, err := c.PostWorkloadMembersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkloadMembersResponse(rsp)
}

func (c *ClientWithResponses) PostWorkloadMembersWithResponse(ctx context.Context, body PostWorkloadMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkloadMembersResponse, error) {
	rsp, err := c.PostWorkloadMembers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkloadMembersResponse(rsp)
}

// DeleteWorkloadMembersWorkloadMemberIDWithResponse request returning *DeleteWorkloadMembersWorkloadMemberIDResponse
func (c *ClientWithResponses) DeleteWorkloadMembersWorkloadMemberIDWithResponse(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*DeleteWorkloadMembersWorkloadMemberIDResponse, error) {
	rsp, err := c.DeleteWorkloadMembersWorkloadMemberID(ctx, workloadMemberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkloadMembersWorkloadMemberIDResponse(rsp)
}

// GetWorkloadMembersWorkloadMemberIDWithResponse request returning *GetWorkloadMembersWorkloadMemberIDResponse
func (c *ClientWithResponses) GetWorkloadMembersWorkloadMemberIDWithResponse(ctx context.Context, workloadMemberID string, reqEditors ...RequestEditorFn) (*GetWorkloadMembersWorkloadMemberIDResponse, error) {
	rsp, err := c.GetWorkloadMembersWorkloadMemberID(ctx, workloadMemberID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadMembersWorkloadMemberIDResponse(rsp)
}

// GetWorkloadsWithResponse request returning *GetWorkloadsResponse
func (c *ClientWithResponses) GetWorkloadsWithResponse(ctx context.Context, params *GetWorkloadsParams, reqEditors ...RequestEditorFn) (*GetWorkloadsResponse, error) {
	rsp, err := c.GetWorkloads(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadsResponse(rsp)
}

// PostWorkloadsWithBodyWithResponse request with arbitrary body returning *PostWorkloadsResponse
func (c *ClientWithResponses) PostWorkloadsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWorkloadsResponse, error) {
	rsp, err := c.PostWorkloadsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkloadsResponse(rsp)
}

func (c *ClientWithResponses) PostWorkloadsWithResponse(ctx context.Context, body PostWorkloadsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWorkloadsResponse, error) {
	rsp, err := c.PostWorkloads(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWorkloadsResponse(rsp)
}

// DeleteWorkloadsWorkloadIDWithResponse request returning *DeleteWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) DeleteWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*DeleteWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.DeleteWorkloadsWorkloadID(ctx, workloadID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkloadsWorkloadIDResponse(rsp)
}

// GetWorkloadsWorkloadIDWithResponse request returning *GetWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) GetWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, reqEditors ...RequestEditorFn) (*GetWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.GetWorkloadsWorkloadID(ctx, workloadID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkloadsWorkloadIDResponse(rsp)
}

// PatchWorkloadsWorkloadIDWithBodyWithResponse request with arbitrary body returning *PatchWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) PatchWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PatchWorkloadsWorkloadIDWithBody(ctx, workloadID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchWorkloadsWorkloadIDResponse(rsp)
}

func (c *ClientWithResponses) PatchWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, body PatchWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PatchWorkloadsWorkloadID(ctx, workloadID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchWorkloadsWorkloadIDResponse(rsp)
}

// PutWorkloadsWorkloadIDWithBodyWithResponse request with arbitrary body returning *PutWorkloadsWorkloadIDResponse
func (c *ClientWithResponses) PutWorkloadsWorkloadIDWithBodyWithResponse(ctx context.Context, workloadID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PutWorkloadsWorkloadIDWithBody(ctx, workloadID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkloadsWorkloadIDResponse(rsp)
}

func (c *ClientWithResponses) PutWorkloadsWorkloadIDWithResponse(ctx context.Context, workloadID string, body PutWorkloadsWorkloadIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWorkloadsWorkloadIDResponse, error) {
	rsp, err := c.PutWorkloadsWorkloadID(ctx, workloadID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWorkloadsWorkloadIDResponse(rsp)
}

// ParseGetOSResourcesResponse parses an HTTP response from a GetOSResourcesWithResponse call
func ParseGetOSResourcesResponse(rsp *http.Response) (*GetOSResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOSResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResourceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostOSResourcesResponse parses an HTTP response from a PostOSResourcesWithResponse call
func ParsePostOSResourcesResponse(rsp *http.Response) (*PostOSResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOSResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteOSResourcesOSResourceIDResponse parses an HTTP response from a DeleteOSResourcesOSResourceIDWithResponse call
func ParseDeleteOSResourcesOSResourceIDResponse(rsp *http.Response) (*DeleteOSResourcesOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOSResourcesOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetOSResourcesOSResourceIDResponse parses an HTTP response from a GetOSResourcesOSResourceIDWithResponse call
func ParseGetOSResourcesOSResourceIDResponse(rsp *http.Response) (*GetOSResourcesOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOSResourcesOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchOSResourcesOSResourceIDResponse parses an HTTP response from a PatchOSResourcesOSResourceIDWithResponse call
func ParsePatchOSResourcesOSResourceIDResponse(rsp *http.Response) (*PatchOSResourcesOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOSResourcesOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutOSResourcesOSResourceIDResponse parses an HTTP response from a PutOSResourcesOSResourceIDWithResponse call
func ParsePutOSResourcesOSResourceIDResponse(rsp *http.Response) (*PutOSResourcesOSResourceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOSResourcesOSResourceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperatingSystemResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetComputeResponse parses an HTTP response from a GetComputeWithResponse call
func ParseGetComputeResponse(rsp *http.Response) (*GetComputeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetComputeHostsResponse parses an HTTP response from a GetComputeHostsWithResponse call
func ParseGetComputeHostsResponse(rsp *http.Response) (*GetComputeHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostComputeHostsResponse parses an HTTP response from a PostComputeHostsWithResponse call
func ParsePostComputeHostsResponse(rsp *http.Response) (*PostComputeHostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeHostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostComputeHostsRegisterResponse parses an HTTP response from a PostComputeHostsRegisterWithResponse call
func ParsePostComputeHostsRegisterResponse(rsp *http.Response) (*PostComputeHostsRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostComputeHostsRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetComputeHostsSummaryResponse parses an HTTP response from a GetComputeHostsSummaryWithResponse call
func ParseGetComputeHostsSummaryResponse(rsp *http.Response) (*GetComputeHostsSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeHostsSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostsSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteComputeHostsHostIDResponse parses an HTTP response from a DeleteComputeHostsHostIDWithResponse call
func ParseDeleteComputeHostsHostIDResponse(rsp *http.Response) (*DeleteComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetComputeHostsHostIDResponse parses an HTTP response from a GetComputeHostsHostIDWithResponse call
func ParseGetComputeHostsHostIDResponse(rsp *http.Response) (*GetComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchComputeHostsHostIDResponse parses an HTTP response from a PatchComputeHostsHostIDWithResponse call
func ParsePatchComputeHostsHostIDResponse(rsp *http.Response) (*PatchComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutComputeHostsHostIDResponse parses an HTTP response from a PutComputeHostsHostIDWithResponse call
func ParsePutComputeHostsHostIDResponse(rsp *http.Response) (*PutComputeHostsHostIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeHostsHostIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Host
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutComputeHostsHostIDInvalidateResponse parses an HTTP response from a PutComputeHostsHostIDInvalidateWithResponse call
func ParsePutComputeHostsHostIDInvalidateResponse(rsp *http.Response) (*PutComputeHostsHostIDInvalidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutComputeHostsHostIDInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchComputeHostsHostIDOnboardResponse parses an HTTP response from a PatchComputeHostsHostIDOnboardWithResponse call
func ParsePatchComputeHostsHostIDOnboardResponse(rsp *http.Response) (*PatchComputeHostsHostIDOnboardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchComputeHostsHostIDOnboardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchComputeHostsHostIDRegisterResponse parses an HTTP response from a PatchComputeHostsHostIDRegisterWithResponse call
func ParsePatchComputeHostsHostIDRegisterResponse(rsp *http.Response) (*PatchComputeHostsHostIDRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchComputeHostsHostIDRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetInstancesResponse parses an HTTP response from a GetInstancesWithResponse call
func ParseGetInstancesResponse(rsp *http.Response) (*GetInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostInstancesResponse parses an HTTP response from a PostInstancesWithResponse call
func ParsePostInstancesResponse(rsp *http.Response) (*PostInstancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteInstancesInstanceIDResponse parses an HTTP response from a DeleteInstancesInstanceIDWithResponse call
func ParseDeleteInstancesInstanceIDResponse(rsp *http.Response) (*DeleteInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetInstancesInstanceIDResponse parses an HTTP response from a GetInstancesInstanceIDWithResponse call
func ParseGetInstancesInstanceIDResponse(rsp *http.Response) (*GetInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchInstancesInstanceIDResponse parses an HTTP response from a PatchInstancesInstanceIDWithResponse call
func ParsePatchInstancesInstanceIDResponse(rsp *http.Response) (*PatchInstancesInstanceIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchInstancesInstanceIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutInstancesInstanceIDInvalidateResponse parses an HTTP response from a PutInstancesInstanceIDInvalidateWithResponse call
func ParsePutInstancesInstanceIDInvalidateResponse(rsp *http.Response) (*PutInstancesInstanceIDInvalidateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutInstancesInstanceIDInvalidateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetLocalAccountsResponse parses an HTTP response from a GetLocalAccountsWithResponse call
func ParseGetLocalAccountsResponse(rsp *http.Response) (*GetLocalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalAccountList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostLocalAccountsResponse parses an HTTP response from a PostLocalAccountsWithResponse call
func ParsePostLocalAccountsResponse(rsp *http.Response) (*PostLocalAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLocalAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest LocalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteLocalAccountsLocalAccountIDResponse parses an HTTP response from a DeleteLocalAccountsLocalAccountIDWithResponse call
func ParseDeleteLocalAccountsLocalAccountIDResponse(rsp *http.Response) (*DeleteLocalAccountsLocalAccountIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLocalAccountsLocalAccountIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetLocalAccountsLocalAccountIDResponse parses an HTTP response from a GetLocalAccountsLocalAccountIDWithResponse call
func ParseGetLocalAccountsLocalAccountIDResponse(rsp *http.Response) (*GetLocalAccountsLocalAccountIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocalAccountsLocalAccountIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocalAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetLocationsResponse parses an HTTP response from a GetLocationsWithResponse call
func ParseGetLocationsResponse(rsp *http.Response) (*GetLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationNodeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetOusResponse parses an HTTP response from a GetOusWithResponse call
func ParseGetOusResponse(rsp *http.Response) (*GetOusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OUsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostOusResponse parses an HTTP response from a PostOusWithResponse call
func ParsePostOusResponse(rsp *http.Response) (*PostOusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OU
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteOusOuIDResponse parses an HTTP response from a DeleteOusOuIDWithResponse call
func ParseDeleteOusOuIDResponse(rsp *http.Response) (*DeleteOusOuIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOusOuIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetOusOuIDResponse parses an HTTP response from a GetOusOuIDWithResponse call
func ParseGetOusOuIDResponse(rsp *http.Response) (*GetOusOuIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOusOuIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OU
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchOusOuIDResponse parses an HTTP response from a PatchOusOuIDWithResponse call
func ParsePatchOusOuIDResponse(rsp *http.Response) (*PatchOusOuIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOusOuIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OU
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutOusOuIDResponse parses an HTTP response from a PutOusOuIDWithResponse call
func ParsePutOusOuIDResponse(rsp *http.Response) (*PutOusOuIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOusOuIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OU
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetProvidersResponse parses an HTTP response from a GetProvidersWithResponse call
func ParseGetProvidersResponse(rsp *http.Response) (*GetProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostProvidersResponse parses an HTTP response from a PostProvidersWithResponse call
func ParsePostProvidersResponse(rsp *http.Response) (*PostProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteProvidersProviderIDResponse parses an HTTP response from a DeleteProvidersProviderIDWithResponse call
func ParseDeleteProvidersProviderIDResponse(rsp *http.Response) (*DeleteProvidersProviderIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProvidersProviderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetProvidersProviderIDResponse parses an HTTP response from a GetProvidersProviderIDWithResponse call
func ParseGetProvidersProviderIDResponse(rsp *http.Response) (*GetProvidersProviderIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProvidersProviderIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Provider
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRegionsResponse parses an HTTP response from a GetRegionsWithResponse call
func ParseGetRegionsResponse(rsp *http.Response) (*GetRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RegionsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostRegionsResponse parses an HTTP response from a PostRegionsWithResponse call
func ParsePostRegionsResponse(rsp *http.Response) (*PostRegionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRegionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteRegionsRegionIDResponse parses an HTTP response from a DeleteRegionsRegionIDWithResponse call
func ParseDeleteRegionsRegionIDResponse(rsp *http.Response) (*DeleteRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetRegionsRegionIDResponse parses an HTTP response from a GetRegionsRegionIDWithResponse call
func ParseGetRegionsRegionIDResponse(rsp *http.Response) (*GetRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParsePatchRegionsRegionIDResponse parses an HTTP response from a PatchRegionsRegionIDWithResponse call
func ParsePatchRegionsRegionIDResponse(rsp *http.Response) (*PatchRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParsePutRegionsRegionIDResponse parses an HTTP response from a PutRegionsRegionIDWithResponse call
func ParsePutRegionsRegionIDResponse(rsp *http.Response) (*PutRegionsRegionIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutRegionsRegionIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Region
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseGetSchedulesResponse parses an HTTP response from a GetSchedulesWithResponse call
func ParseGetSchedulesResponse(rsp *http.Response) (*GetSchedulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SchedulesListJoin
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSchedulesRepeatedResponse parses an HTTP response from a GetSchedulesRepeatedWithResponse call
func ParseGetSchedulesRepeatedResponse(rsp *http.Response) (*GetSchedulesRepeatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesRepeatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedulesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostSchedulesRepeatedResponse parses an HTTP response from a PostSchedulesRepeatedWithResponse call
func ParsePostSchedulesRepeatedResponse(rsp *http.Response) (*PostSchedulesRepeatedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSchedulesRepeatedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a DeleteSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParseDeleteSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*DeleteSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a GetSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParseGetSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*GetSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a PatchSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParsePatchSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*PatchSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutSchedulesRepeatedRepeatedScheduleIDResponse parses an HTTP response from a PutSchedulesRepeatedRepeatedScheduleIDWithResponse call
func ParsePutSchedulesRepeatedRepeatedScheduleIDResponse(rsp *http.Response) (*PutSchedulesRepeatedRepeatedScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSchedulesRepeatedRepeatedScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RepeatedSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSchedulesSingleResponse parses an HTTP response from a GetSchedulesSingleWithResponse call
func ParseGetSchedulesSingleResponse(rsp *http.Response) (*GetSchedulesSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedulesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostSchedulesSingleResponse parses an HTTP response from a PostSchedulesSingleWithResponse call
func ParsePostSchedulesSingleResponse(rsp *http.Response) (*PostSchedulesSingleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSchedulesSingleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a DeleteSchedulesSingleSingleScheduleIDWithResponse call
func ParseDeleteSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*DeleteSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a GetSchedulesSingleSingleScheduleIDWithResponse call
func ParseGetSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*GetSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a PatchSchedulesSingleSingleScheduleIDWithResponse call
func ParsePatchSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*PatchSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutSchedulesSingleSingleScheduleIDResponse parses an HTTP response from a PutSchedulesSingleSingleScheduleIDWithResponse call
func ParsePutSchedulesSingleSingleScheduleIDResponse(rsp *http.Response) (*PutSchedulesSingleSingleScheduleIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSchedulesSingleSingleScheduleIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SingleSchedule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSitesResponse parses an HTTP response from a GetSitesWithResponse call
func ParseGetSitesResponse(rsp *http.Response) (*GetSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SitesList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostSitesResponse parses an HTTP response from a PostSitesWithResponse call
func ParsePostSitesResponse(rsp *http.Response) (*PostSitesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSitesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteSitesSiteIDResponse parses an HTTP response from a DeleteSitesSiteIDWithResponse call
func ParseDeleteSitesSiteIDResponse(rsp *http.Response) (*DeleteSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSitesSiteIDResponse parses an HTTP response from a GetSitesSiteIDWithResponse call
func ParseGetSitesSiteIDResponse(rsp *http.Response) (*GetSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchSitesSiteIDResponse parses an HTTP response from a PatchSitesSiteIDWithResponse call
func ParsePatchSitesSiteIDResponse(rsp *http.Response) (*PatchSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutSitesSiteIDResponse parses an HTTP response from a PutSitesSiteIDWithResponse call
func ParsePutSitesSiteIDResponse(rsp *http.Response) (*PutSitesSiteIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSitesSiteIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Site
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryGroupsLogsResponse parses an HTTP response from a GetTelemetryGroupsLogsWithResponse call
func ParseGetTelemetryGroupsLogsResponse(rsp *http.Response) (*GetTelemetryGroupsLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryGroupsLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostTelemetryGroupsLogsResponse parses an HTTP response from a PostTelemetryGroupsLogsWithResponse call
func ParsePostTelemetryGroupsLogsResponse(rsp *http.Response) (*PostTelemetryGroupsLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTelemetryGroupsLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryLogsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse parses an HTTP response from a DeleteTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse call
func ParseDeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse(rsp *http.Response) (*DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTelemetryGroupsLogsTelemetryLogsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryGroupsLogsTelemetryLogsGroupIdResponse parses an HTTP response from a GetTelemetryGroupsLogsTelemetryLogsGroupIdWithResponse call
func ParseGetTelemetryGroupsLogsTelemetryLogsGroupIdResponse(rsp *http.Response) (*GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryGroupsLogsTelemetryLogsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryGroupsMetricsResponse parses an HTTP response from a GetTelemetryGroupsMetricsWithResponse call
func ParseGetTelemetryGroupsMetricsResponse(rsp *http.Response) (*GetTelemetryGroupsMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryGroupsMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostTelemetryGroupsMetricsResponse parses an HTTP response from a PostTelemetryGroupsMetricsWithResponse call
func ParsePostTelemetryGroupsMetricsResponse(rsp *http.Response) (*PostTelemetryGroupsMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTelemetryGroupsMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryMetricsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParseDeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse parses an HTTP response from a DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse call
func ParseDeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse(rsp *http.Response) (*DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse parses an HTTP response from a GetTelemetryGroupsMetricsTelemetryMetricsGroupIdWithResponse call
func ParseGetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse(rsp *http.Response) (*GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryGroupsMetricsTelemetryMetricsGroupIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryProfilesLogsResponse parses an HTTP response from a GetTelemetryProfilesLogsWithResponse call
func ParseGetTelemetryProfilesLogsResponse(rsp *http.Response) (*GetTelemetryProfilesLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryProfilesLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfileList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostTelemetryProfilesLogsResponse parses an HTTP response from a PostTelemetryProfilesLogsWithResponse call
func ParsePostTelemetryProfilesLogsResponse(rsp *http.Response) (*PostTelemetryProfilesLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTelemetryProfilesLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse parses an HTTP response from a DeleteTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse call
func ParseDeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp *http.Response) (*DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTelemetryProfilesLogsTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryProfilesLogsTelemetryLogsProfileIdResponse parses an HTTP response from a GetTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse call
func ParseGetTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp *http.Response) (*GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryProfilesLogsTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse parses an HTTP response from a PatchTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse call
func ParsePatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp *http.Response) (*PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTelemetryProfilesLogsTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutTelemetryProfilesLogsTelemetryLogsProfileIdResponse parses an HTTP response from a PutTelemetryProfilesLogsTelemetryLogsProfileIdWithResponse call
func ParsePutTelemetryProfilesLogsTelemetryLogsProfileIdResponse(rsp *http.Response) (*PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTelemetryProfilesLogsTelemetryLogsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryLogsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryProfilesMetricsResponse parses an HTTP response from a GetTelemetryProfilesMetricsWithResponse call
func ParseGetTelemetryProfilesMetricsResponse(rsp *http.Response) (*GetTelemetryProfilesMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryProfilesMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfileList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostTelemetryProfilesMetricsResponse parses an HTTP response from a PostTelemetryProfilesMetricsWithResponse call
func ParsePostTelemetryProfilesMetricsResponse(rsp *http.Response) (*PostTelemetryProfilesMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTelemetryProfilesMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse parses an HTTP response from a DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse call
func ParseDeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp *http.Response) (*DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse parses an HTTP response from a GetTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse call
func ParseGetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp *http.Response) (*GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse parses an HTTP response from a PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse call
func ParsePatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp *http.Response) (*PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	}

	return response, nil
}

// ParsePutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse parses an HTTP response from a PutTelemetryProfilesMetricsTelemetryMetricsProfileIdWithResponse call
func ParsePutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse(rsp *http.Response) (*PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTelemetryProfilesMetricsTelemetryMetricsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TelemetryMetricsProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetWorkloadMembersResponse parses an HTTP response from a GetWorkloadMembersWithResponse call
func ParseGetWorkloadMembersResponse(rsp *http.Response) (*GetWorkloadMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadMemberList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostWorkloadMembersResponse parses an HTTP response from a PostWorkloadMembersWithResponse call
func ParsePostWorkloadMembersResponse(rsp *http.Response) (*PostWorkloadMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkloadMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WorkloadMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteWorkloadMembersWorkloadMemberIDResponse parses an HTTP response from a DeleteWorkloadMembersWorkloadMemberIDWithResponse call
func ParseDeleteWorkloadMembersWorkloadMemberIDResponse(rsp *http.Response) (*DeleteWorkloadMembersWorkloadMemberIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkloadMembersWorkloadMemberIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetWorkloadMembersWorkloadMemberIDResponse parses an HTTP response from a GetWorkloadMembersWorkloadMemberIDWithResponse call
func ParseGetWorkloadMembersWorkloadMemberIDResponse(rsp *http.Response) (*GetWorkloadMembersWorkloadMemberIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadMembersWorkloadMemberIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetWorkloadsResponse parses an HTTP response from a GetWorkloadsWithResponse call
func ParseGetWorkloadsResponse(rsp *http.Response) (*GetWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkloadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePostWorkloadsResponse parses an HTTP response from a PostWorkloadsWithResponse call
func ParsePostWorkloadsResponse(rsp *http.Response) (*PostWorkloadsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWorkloadsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseDeleteWorkloadsWorkloadIDResponse parses an HTTP response from a DeleteWorkloadsWorkloadIDWithResponse call
func ParseDeleteWorkloadsWorkloadIDResponse(rsp *http.Response) (*DeleteWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetWorkloadsWorkloadIDResponse parses an HTTP response from a GetWorkloadsWorkloadIDWithResponse call
func ParseGetWorkloadsWorkloadIDResponse(rsp *http.Response) (*GetWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePatchWorkloadsWorkloadIDResponse parses an HTTP response from a PatchWorkloadsWorkloadIDWithResponse call
func ParsePatchWorkloadsWorkloadIDResponse(rsp *http.Response) (*PatchWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParsePutWorkloadsWorkloadIDResponse parses an HTTP response from a PutWorkloadsWorkloadIDWithResponse call
func ParsePutWorkloadsWorkloadIDResponse(rsp *http.Response) (*PutWorkloadsWorkloadIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWorkloadsWorkloadIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Workload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest N400BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest N401Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest N403Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest N404NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 406:
		var dest N406NotAcceptable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON406 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 408:
		var dest N408Timeout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON408 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest N409Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 412:
		var dest N412PreconditionFailed
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON412 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest N422UnprocessableEntity
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 429:
		var dest N429TooManyRequests
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON429 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest N500InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 501:
		var dest N501Unimplemented
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON501 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest N503ServiceUnavailable
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}
