// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /OSResources)
	GetOSResources(ctx echo.Context, params GetOSResourcesParams) error

	// (POST /OSResources)
	PostOSResources(ctx echo.Context) error

	// (DELETE /OSResources/{OSResourceID})
	DeleteOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /OSResources/{OSResourceID})
	GetOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PATCH /OSResources/{OSResourceID})
	PatchOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PUT /OSResources/{OSResourceID})
	PutOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /compute)
	GetCompute(ctx echo.Context, params GetComputeParams) error

	// (GET /compute/hosts)
	GetComputeHosts(ctx echo.Context, params GetComputeHostsParams) error

	// (POST /compute/hosts)
	PostComputeHosts(ctx echo.Context) error

	// (POST /compute/hosts/register)
	PostComputeHostsRegister(ctx echo.Context) error

	// (GET /compute/hosts/summary)
	GetComputeHostsSummary(ctx echo.Context, params GetComputeHostsSummaryParams) error

	// (DELETE /compute/hosts/{hostID})
	DeleteComputeHostsHostID(ctx echo.Context, hostID string) error

	// (GET /compute/hosts/{hostID})
	GetComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID})
	PatchComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID})
	PutComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID}/invalidate)
	PutComputeHostsHostIDInvalidate(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/onboard)
	PatchComputeHostsHostIDOnboard(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/register)
	PatchComputeHostsHostIDRegister(ctx echo.Context, hostID string) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstances(ctx echo.Context) error

	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (GET /instances/{instanceID})
	GetInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PATCH /instances/{instanceID})
	PatchInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PUT /instances/{instanceID}/invalidate)
	PutInstancesInstanceIDInvalidate(ctx echo.Context, instanceID string) error

	// (GET /localAccounts)
	GetLocalAccounts(ctx echo.Context, params GetLocalAccountsParams) error

	// (POST /localAccounts)
	PostLocalAccounts(ctx echo.Context) error

	// (DELETE /localAccounts/{localAccountID})
	DeleteLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /localAccounts/{localAccountID})
	GetLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /locations)
	GetLocations(ctx echo.Context, params GetLocationsParams) error

	// (GET /ous)
	GetOus(ctx echo.Context, params GetOusParams) error

	// (POST /ous)
	PostOus(ctx echo.Context) error

	// (DELETE /ous/{ouID})
	DeleteOusOuID(ctx echo.Context, ouid string) error

	// (GET /ous/{ouID})
	GetOusOuID(ctx echo.Context, ouid string) error

	// (PATCH /ous/{ouID})
	PatchOusOuID(ctx echo.Context, ouid string) error

	// (PUT /ous/{ouID})
	PutOusOuID(ctx echo.Context, ouid string) error

	// (GET /providers)
	GetProviders(ctx echo.Context, params GetProvidersParams) error

	// (POST /providers)
	PostProviders(ctx echo.Context) error

	// (DELETE /providers/{providerID})
	DeleteProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /providers/{providerID})
	GetProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /regions)
	GetRegions(ctx echo.Context, params GetRegionsParams) error

	// (POST /regions)
	PostRegions(ctx echo.Context) error

	// (DELETE /regions/{regionID})
	DeleteRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /regions/{regionID})
	GetRegionsRegionID(ctx echo.Context, regionID string) error

	// (PATCH /regions/{regionID})
	PatchRegionsRegionID(ctx echo.Context, regionID string) error

	// (PUT /regions/{regionID})
	PutRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /schedules)
	GetSchedules(ctx echo.Context, params GetSchedulesParams) error

	// (GET /schedules/repeated)
	GetSchedulesRepeated(ctx echo.Context, params GetSchedulesRepeatedParams) error

	// (POST /schedules/repeated)
	PostSchedulesRepeated(ctx echo.Context) error

	// (DELETE /schedules/repeated/{repeatedScheduleID})
	DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/repeated/{repeatedScheduleID})
	GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PATCH /schedules/repeated/{repeatedScheduleID})
	PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PUT /schedules/repeated/{repeatedScheduleID})
	PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/single)
	GetSchedulesSingle(ctx echo.Context, params GetSchedulesSingleParams) error

	// (POST /schedules/single)
	PostSchedulesSingle(ctx echo.Context) error

	// (DELETE /schedules/single/{singleScheduleID})
	DeleteSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /schedules/single/{singleScheduleID})
	GetSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PATCH /schedules/single/{singleScheduleID})
	PatchSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PUT /schedules/single/{singleScheduleID})
	PutSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /sites)
	GetSites(ctx echo.Context, params GetSitesParams) error

	// (POST /sites)
	PostSites(ctx echo.Context) error

	// (DELETE /sites/{siteID})
	DeleteSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /sites/{siteID})
	GetSitesSiteID(ctx echo.Context, siteID string) error

	// (PATCH /sites/{siteID})
	PatchSitesSiteID(ctx echo.Context, siteID string) error

	// (PUT /sites/{siteID})
	PutSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /telemetry/groups/logs)
	GetTelemetryGroupsLogs(ctx echo.Context, params GetTelemetryGroupsLogsParams) error

	// (POST /telemetry/groups/logs)
	PostTelemetryGroupsLogs(ctx echo.Context) error

	// (DELETE /telemetry/groups/logs/{telemetryLogsGroupId})
	DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/logs/{telemetryLogsGroupId})
	GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/metrics)
	GetTelemetryGroupsMetrics(ctx echo.Context, params GetTelemetryGroupsMetricsParams) error

	// (POST /telemetry/groups/metrics)
	PostTelemetryGroupsMetrics(ctx echo.Context) error

	// (DELETE /telemetry/groups/metrics/{telemetryMetricsGroupId})
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/groups/metrics/{telemetryMetricsGroupId})
	GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/profiles/logs)
	GetTelemetryProfilesLogs(ctx echo.Context, params GetTelemetryProfilesLogsParams) error

	// (POST /telemetry/profiles/logs)
	PostTelemetryProfilesLogs(ctx echo.Context) error

	// (DELETE /telemetry/profiles/logs/{telemetryLogsProfileId})
	DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/logs/{telemetryLogsProfileId})
	GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PATCH /telemetry/profiles/logs/{telemetryLogsProfileId})
	PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PUT /telemetry/profiles/logs/{telemetryLogsProfileId})
	PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/metrics)
	GetTelemetryProfilesMetrics(ctx echo.Context, params GetTelemetryProfilesMetricsParams) error

	// (POST /telemetry/profiles/metrics)
	PostTelemetryProfilesMetrics(ctx echo.Context) error

	// (DELETE /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PATCH /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PUT /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /workloadMembers)
	GetWorkloadMembers(ctx echo.Context, params GetWorkloadMembersParams) error

	// (POST /workloadMembers)
	PostWorkloadMembers(ctx echo.Context) error

	// (DELETE /workloadMembers/{workloadMemberID})
	DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloadMembers/{workloadMemberID})
	GetWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloads)
	GetWorkloads(ctx echo.Context, params GetWorkloadsParams) error

	// (POST /workloads)
	PostWorkloads(ctx echo.Context) error

	// (DELETE /workloads/{workloadID})
	DeleteWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (GET /workloads/{workloadID})
	GetWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PATCH /workloads/{workloadID})
	PatchWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PUT /workloads/{workloadID})
	PutWorkloadsWorkloadID(ctx echo.Context, workloadID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOSResourcesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResources(ctx, params)
	return err
}

// PostOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) PostOSResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOSResources(ctx)
	return err
}

// DeleteOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PatchOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PutOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetCompute converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompute(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompute(ctx, params)
	return err
}

// GetComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHosts(ctx, params)
	return err
}

// PostComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHosts(ctx)
	return err
}

// PostComputeHostsRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHostsRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHostsRegister(ctx)
	return err
}

// GetComputeHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsSummaryParams
	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsSummary(ctx, params)
	return err
}

// DeleteComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComputeHostsHostID(ctx, hostID)
	return err
}

// GetComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsHostID(ctx, hostID)
	return err
}

// PatchComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostIDInvalidate(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDOnboard converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDOnboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDOnboard(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDRegister(ctx, hostID)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workloadMemberID" -------------

	err = runtime.BindQueryParameter("form", true, false, "workloadMemberID", ctx.QueryParams(), &params.WorkloadMemberID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// DeleteInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstancesInstanceID(ctx, instanceID)
	return err
}

// PatchInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchInstancesInstanceID(ctx, instanceID)
	return err
}

// PutInstancesInstanceIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutInstancesInstanceIDInvalidate(ctx, instanceID)
	return err
}

// GetLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocalAccountsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccounts(ctx, params)
	return err
}

// PostLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocalAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocalAccounts(ctx)
	return err
}

// DeleteLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx, params)
	return err
}

// GetOus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOus(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOusParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOus(ctx, params)
	return err
}

// PostOus converts echo context to params.
func (w *ServerInterfaceWrapper) PostOus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOus(ctx)
	return err
}

// DeleteOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOusOuID(ctx, ouid)
	return err
}

// GetOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOusOuID(ctx, ouid)
	return err
}

// PatchOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOusOuID(ctx, ouid)
	return err
}

// PutOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOusOuID(ctx, ouid)
	return err
}

// GetProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvidersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviders(ctx, params)
	return err
}

// PostProviders converts echo context to params.
func (w *ServerInterfaceWrapper) PostProviders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProviders(ctx)
	return err
}

// DeleteProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProvidersProviderID(ctx, providerID)
	return err
}

// GetProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProvidersProviderID(ctx, providerID)
	return err
}

// GetRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegionsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegions(ctx, params)
	return err
}

// PostRegions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegions(ctx)
	return err
}

// DeleteRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegionsRegionID(ctx, regionID)
	return err
}

// GetRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegionsRegionID(ctx, regionID)
	return err
}

// PatchRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRegionsRegionID(ctx, regionID)
	return err
}

// PutRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRegionsRegionID(ctx, regionID)
	return err
}

// GetSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedules(ctx, params)
	return err
}

// GetSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesRepeatedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeated(ctx, params)
	return err
}

// PostSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesRepeated(ctx)
	return err
}

// DeleteSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PatchSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PutSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesSingleParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingle(ctx, params)
	return err
}

// PostSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesSingle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesSingle(ctx)
	return err
}

// DeleteSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PatchSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PutSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSites converts echo context to params.
func (w *ServerInterfaceWrapper) GetSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSitesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "ouID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ouID", ctx.QueryParams(), &params.OuID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSites(ctx, params)
	return err
}

// PostSites converts echo context to params.
func (w *ServerInterfaceWrapper) PostSites(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSites(ctx)
	return err
}

// DeleteSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSitesSiteID(ctx, siteID)
	return err
}

// GetSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSitesSiteID(ctx, siteID)
	return err
}

// PatchSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSitesSiteID(ctx, siteID)
	return err
}

// PutSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSitesSiteID(ctx, siteID)
	return err
}

// GetTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogs(ctx, params)
	return err
}

// PostTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsLogs(ctx)
	return err
}

// DeleteTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetrics(ctx, params)
	return err
}

// PostTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsMetrics(ctx)
	return err
}

// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogs(ctx, params)
	return err
}

// PostTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesLogs(ctx)
	return err
}

// DeleteTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PatchTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PutTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetrics(ctx, params)
	return err
}

// PostTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesMetrics(ctx)
	return err
}

// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PutTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadMembersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workload_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workload_id", ctx.QueryParams(), &params.WorkloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembers(ctx, params)
	return err
}

// PostWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloadMembers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloadMembers(ctx)
	return err
}

// DeleteWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloads(ctx, params)
	return err
}

// PostWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloads(ctx)
	return err
}

// DeleteWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// GetWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PatchWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PutWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PutWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/OSResources", wrapper.GetOSResources)
	router.POST(baseURL+"/OSResources", wrapper.PostOSResources)
	router.DELETE(baseURL+"/OSResources/:OSResourceID", wrapper.DeleteOSResourcesOSResourceID)
	router.GET(baseURL+"/OSResources/:OSResourceID", wrapper.GetOSResourcesOSResourceID)
	router.PATCH(baseURL+"/OSResources/:OSResourceID", wrapper.PatchOSResourcesOSResourceID)
	router.PUT(baseURL+"/OSResources/:OSResourceID", wrapper.PutOSResourcesOSResourceID)
	router.GET(baseURL+"/compute", wrapper.GetCompute)
	router.GET(baseURL+"/compute/hosts", wrapper.GetComputeHosts)
	router.POST(baseURL+"/compute/hosts", wrapper.PostComputeHosts)
	router.POST(baseURL+"/compute/hosts/register", wrapper.PostComputeHostsRegister)
	router.GET(baseURL+"/compute/hosts/summary", wrapper.GetComputeHostsSummary)
	router.DELETE(baseURL+"/compute/hosts/:hostID", wrapper.DeleteComputeHostsHostID)
	router.GET(baseURL+"/compute/hosts/:hostID", wrapper.GetComputeHostsHostID)
	router.PATCH(baseURL+"/compute/hosts/:hostID", wrapper.PatchComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID", wrapper.PutComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID/invalidate", wrapper.PutComputeHostsHostIDInvalidate)
	router.PATCH(baseURL+"/compute/hosts/:hostID/onboard", wrapper.PatchComputeHostsHostIDOnboard)
	router.PATCH(baseURL+"/compute/hosts/:hostID/register", wrapper.PatchComputeHostsHostIDRegister)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.DELETE(baseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID", wrapper.GetInstancesInstanceID)
	router.PATCH(baseURL+"/instances/:instanceID", wrapper.PatchInstancesInstanceID)
	router.PUT(baseURL+"/instances/:instanceID/invalidate", wrapper.PutInstancesInstanceIDInvalidate)
	router.GET(baseURL+"/localAccounts", wrapper.GetLocalAccounts)
	router.POST(baseURL+"/localAccounts", wrapper.PostLocalAccounts)
	router.DELETE(baseURL+"/localAccounts/:localAccountID", wrapper.DeleteLocalAccountsLocalAccountID)
	router.GET(baseURL+"/localAccounts/:localAccountID", wrapper.GetLocalAccountsLocalAccountID)
	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.GET(baseURL+"/ous", wrapper.GetOus)
	router.POST(baseURL+"/ous", wrapper.PostOus)
	router.DELETE(baseURL+"/ous/:ouID", wrapper.DeleteOusOuID)
	router.GET(baseURL+"/ous/:ouID", wrapper.GetOusOuID)
	router.PATCH(baseURL+"/ous/:ouID", wrapper.PatchOusOuID)
	router.PUT(baseURL+"/ous/:ouID", wrapper.PutOusOuID)
	router.GET(baseURL+"/providers", wrapper.GetProviders)
	router.POST(baseURL+"/providers", wrapper.PostProviders)
	router.DELETE(baseURL+"/providers/:providerID", wrapper.DeleteProvidersProviderID)
	router.GET(baseURL+"/providers/:providerID", wrapper.GetProvidersProviderID)
	router.GET(baseURL+"/regions", wrapper.GetRegions)
	router.POST(baseURL+"/regions", wrapper.PostRegions)
	router.DELETE(baseURL+"/regions/:regionID", wrapper.DeleteRegionsRegionID)
	router.GET(baseURL+"/regions/:regionID", wrapper.GetRegionsRegionID)
	router.PATCH(baseURL+"/regions/:regionID", wrapper.PatchRegionsRegionID)
	router.PUT(baseURL+"/regions/:regionID", wrapper.PutRegionsRegionID)
	router.GET(baseURL+"/schedules", wrapper.GetSchedules)
	router.GET(baseURL+"/schedules/repeated", wrapper.GetSchedulesRepeated)
	router.POST(baseURL+"/schedules/repeated", wrapper.PostSchedulesRepeated)
	router.DELETE(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.DeleteSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.GetSchedulesRepeatedRepeatedScheduleID)
	router.PATCH(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PatchSchedulesRepeatedRepeatedScheduleID)
	router.PUT(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PutSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/single", wrapper.GetSchedulesSingle)
	router.POST(baseURL+"/schedules/single", wrapper.PostSchedulesSingle)
	router.DELETE(baseURL+"/schedules/single/:singleScheduleID", wrapper.DeleteSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/schedules/single/:singleScheduleID", wrapper.GetSchedulesSingleSingleScheduleID)
	router.PATCH(baseURL+"/schedules/single/:singleScheduleID", wrapper.PatchSchedulesSingleSingleScheduleID)
	router.PUT(baseURL+"/schedules/single/:singleScheduleID", wrapper.PutSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/sites", wrapper.GetSites)
	router.POST(baseURL+"/sites", wrapper.PostSites)
	router.DELETE(baseURL+"/sites/:siteID", wrapper.DeleteSitesSiteID)
	router.GET(baseURL+"/sites/:siteID", wrapper.GetSitesSiteID)
	router.PATCH(baseURL+"/sites/:siteID", wrapper.PatchSitesSiteID)
	router.PUT(baseURL+"/sites/:siteID", wrapper.PutSitesSiteID)
	router.GET(baseURL+"/telemetry/groups/logs", wrapper.GetTelemetryGroupsLogs)
	router.POST(baseURL+"/telemetry/groups/logs", wrapper.PostTelemetryGroupsLogs)
	router.DELETE(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.DeleteTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.GetTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics", wrapper.GetTelemetryGroupsMetrics)
	router.POST(baseURL+"/telemetry/groups/metrics", wrapper.PostTelemetryGroupsMetrics)
	router.DELETE(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.GetTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/profiles/logs", wrapper.GetTelemetryProfilesLogs)
	router.POST(baseURL+"/telemetry/profiles/logs", wrapper.PostTelemetryProfilesLogs)
	router.DELETE(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.DeleteTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.GetTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PatchTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PutTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics", wrapper.GetTelemetryProfilesMetrics)
	router.POST(baseURL+"/telemetry/profiles/metrics", wrapper.PostTelemetryProfilesMetrics)
	router.DELETE(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.GetTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PutTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/workloadMembers", wrapper.GetWorkloadMembers)
	router.POST(baseURL+"/workloadMembers", wrapper.PostWorkloadMembers)
	router.DELETE(baseURL+"/workloadMembers/:workloadMemberID", wrapper.DeleteWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloadMembers/:workloadMemberID", wrapper.GetWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloads", wrapper.GetWorkloads)
	router.POST(baseURL+"/workloads", wrapper.PostWorkloads)
	router.DELETE(baseURL+"/workloads/:workloadID", wrapper.DeleteWorkloadsWorkloadID)
	router.GET(baseURL+"/workloads/:workloadID", wrapper.GetWorkloadsWorkloadID)
	router.PATCH(baseURL+"/workloads/:workloadID", wrapper.PatchWorkloadsWorkloadID)
	router.PUT(baseURL+"/workloads/:workloadID", wrapper.PutWorkloadsWorkloadID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"DgCKRPI3wZHwMH26/f8DAAD//xCOE32J4AIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
