// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /OSResources)
	GetOSResources(ctx echo.Context, params GetOSResourcesParams) error

	// (POST /OSResources)
	PostOSResources(ctx echo.Context) error

	// (DELETE /OSResources/{OSResourceID})
	DeleteOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /OSResources/{OSResourceID})
	GetOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PATCH /OSResources/{OSResourceID})
	PatchOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PUT /OSResources/{OSResourceID})
	PutOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /compute)
	GetCompute(ctx echo.Context, params GetComputeParams) error

	// (GET /compute/hosts)
	GetComputeHosts(ctx echo.Context, params GetComputeHostsParams) error

	// (POST /compute/hosts)
	PostComputeHosts(ctx echo.Context) error

	// (POST /compute/hosts/register)
	PostComputeHostsRegister(ctx echo.Context) error

	// (GET /compute/hosts/summary)
	GetComputeHostsSummary(ctx echo.Context, params GetComputeHostsSummaryParams) error

	// (DELETE /compute/hosts/{hostID})
	DeleteComputeHostsHostID(ctx echo.Context, hostID string) error

	// (GET /compute/hosts/{hostID})
	GetComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID})
	PatchComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID})
	PutComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID}/invalidate)
	PutComputeHostsHostIDInvalidate(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/onboard)
	PatchComputeHostsHostIDOnboard(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/register)
	PatchComputeHostsHostIDRegister(ctx echo.Context, hostID string) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstances(ctx echo.Context) error

	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (GET /instances/{instanceID})
	GetInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PATCH /instances/{instanceID})
	PatchInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PUT /instances/{instanceID}/invalidate)
	PutInstancesInstanceIDInvalidate(ctx echo.Context, instanceID string) error

	// (GET /localAccounts)
	GetLocalAccounts(ctx echo.Context, params GetLocalAccountsParams) error

	// (POST /localAccounts)
	PostLocalAccounts(ctx echo.Context) error

	// (DELETE /localAccounts/{localAccountID})
	DeleteLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /localAccounts/{localAccountID})
	GetLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /locations)
	GetLocations(ctx echo.Context, params GetLocationsParams) error

	// (GET /ous)
	GetOus(ctx echo.Context, params GetOusParams) error

	// (POST /ous)
	PostOus(ctx echo.Context) error

	// (DELETE /ous/{ouID})
	DeleteOusOuID(ctx echo.Context, ouid string) error

	// (GET /ous/{ouID})
	GetOusOuID(ctx echo.Context, ouid string) error

	// (PATCH /ous/{ouID})
	PatchOusOuID(ctx echo.Context, ouid string) error

	// (PUT /ous/{ouID})
	PutOusOuID(ctx echo.Context, ouid string) error

	// (GET /providers)
	GetProviders(ctx echo.Context, params GetProvidersParams) error

	// (POST /providers)
	PostProviders(ctx echo.Context) error

	// (DELETE /providers/{providerID})
	DeleteProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /providers/{providerID})
	GetProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /regions)
	GetRegions(ctx echo.Context, params GetRegionsParams) error

	// (POST /regions)
	PostRegions(ctx echo.Context) error

	// (DELETE /regions/{regionID})
	DeleteRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /regions/{regionID})
	GetRegionsRegionID(ctx echo.Context, regionID string) error

	// (PATCH /regions/{regionID})
	PatchRegionsRegionID(ctx echo.Context, regionID string) error

	// (PUT /regions/{regionID})
	PutRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /schedules)
	GetSchedules(ctx echo.Context, params GetSchedulesParams) error

	// (GET /schedules/repeated)
	GetSchedulesRepeated(ctx echo.Context, params GetSchedulesRepeatedParams) error

	// (POST /schedules/repeated)
	PostSchedulesRepeated(ctx echo.Context) error

	// (DELETE /schedules/repeated/{repeatedScheduleID})
	DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/repeated/{repeatedScheduleID})
	GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PATCH /schedules/repeated/{repeatedScheduleID})
	PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PUT /schedules/repeated/{repeatedScheduleID})
	PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/single)
	GetSchedulesSingle(ctx echo.Context, params GetSchedulesSingleParams) error

	// (POST /schedules/single)
	PostSchedulesSingle(ctx echo.Context) error

	// (DELETE /schedules/single/{singleScheduleID})
	DeleteSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /schedules/single/{singleScheduleID})
	GetSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PATCH /schedules/single/{singleScheduleID})
	PatchSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PUT /schedules/single/{singleScheduleID})
	PutSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /sites)
	GetSites(ctx echo.Context, params GetSitesParams) error

	// (POST /sites)
	PostSites(ctx echo.Context) error

	// (DELETE /sites/{siteID})
	DeleteSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /sites/{siteID})
	GetSitesSiteID(ctx echo.Context, siteID string) error

	// (PATCH /sites/{siteID})
	PatchSitesSiteID(ctx echo.Context, siteID string) error

	// (PUT /sites/{siteID})
	PutSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /telemetry/groups/logs)
	GetTelemetryGroupsLogs(ctx echo.Context, params GetTelemetryGroupsLogsParams) error

	// (POST /telemetry/groups/logs)
	PostTelemetryGroupsLogs(ctx echo.Context) error

	// (DELETE /telemetry/groups/logs/{telemetryLogsGroupId})
	DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/logs/{telemetryLogsGroupId})
	GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/metrics)
	GetTelemetryGroupsMetrics(ctx echo.Context, params GetTelemetryGroupsMetricsParams) error

	// (POST /telemetry/groups/metrics)
	PostTelemetryGroupsMetrics(ctx echo.Context) error

	// (DELETE /telemetry/groups/metrics/{telemetryMetricsGroupId})
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/groups/metrics/{telemetryMetricsGroupId})
	GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/profiles/logs)
	GetTelemetryProfilesLogs(ctx echo.Context, params GetTelemetryProfilesLogsParams) error

	// (POST /telemetry/profiles/logs)
	PostTelemetryProfilesLogs(ctx echo.Context) error

	// (DELETE /telemetry/profiles/logs/{telemetryLogsProfileId})
	DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/logs/{telemetryLogsProfileId})
	GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PATCH /telemetry/profiles/logs/{telemetryLogsProfileId})
	PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PUT /telemetry/profiles/logs/{telemetryLogsProfileId})
	PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/metrics)
	GetTelemetryProfilesMetrics(ctx echo.Context, params GetTelemetryProfilesMetricsParams) error

	// (POST /telemetry/profiles/metrics)
	PostTelemetryProfilesMetrics(ctx echo.Context) error

	// (DELETE /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PATCH /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PUT /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /workloadMembers)
	GetWorkloadMembers(ctx echo.Context, params GetWorkloadMembersParams) error

	// (POST /workloadMembers)
	PostWorkloadMembers(ctx echo.Context) error

	// (DELETE /workloadMembers/{workloadMemberID})
	DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloadMembers/{workloadMemberID})
	GetWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloads)
	GetWorkloads(ctx echo.Context, params GetWorkloadsParams) error

	// (POST /workloads)
	PostWorkloads(ctx echo.Context) error

	// (DELETE /workloads/{workloadID})
	DeleteWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (GET /workloads/{workloadID})
	GetWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PATCH /workloads/{workloadID})
	PatchWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PUT /workloads/{workloadID})
	PutWorkloadsWorkloadID(ctx echo.Context, workloadID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOSResourcesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResources(ctx, params)
	return err
}

// PostOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) PostOSResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOSResources(ctx)
	return err
}

// DeleteOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PatchOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PutOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetCompute converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompute(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompute(ctx, params)
	return err
}

// GetComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHosts(ctx, params)
	return err
}

// PostComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHosts(ctx)
	return err
}

// PostComputeHostsRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHostsRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHostsRegister(ctx)
	return err
}

// GetComputeHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsSummaryParams
	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsSummary(ctx, params)
	return err
}

// DeleteComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComputeHostsHostID(ctx, hostID)
	return err
}

// GetComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsHostID(ctx, hostID)
	return err
}

// PatchComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostIDInvalidate(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDOnboard converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDOnboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDOnboard(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDRegister(ctx, hostID)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workloadMemberID" -------------

	err = runtime.BindQueryParameter("form", true, false, "workloadMemberID", ctx.QueryParams(), &params.WorkloadMemberID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// DeleteInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstancesInstanceID(ctx, instanceID)
	return err
}

// PatchInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchInstancesInstanceID(ctx, instanceID)
	return err
}

// PutInstancesInstanceIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutInstancesInstanceIDInvalidate(ctx, instanceID)
	return err
}

// GetLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocalAccountsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccounts(ctx, params)
	return err
}

// PostLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocalAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocalAccounts(ctx)
	return err
}

// DeleteLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx, params)
	return err
}

// GetOus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOus(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOusParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOus(ctx, params)
	return err
}

// PostOus converts echo context to params.
func (w *ServerInterfaceWrapper) PostOus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOus(ctx)
	return err
}

// DeleteOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOusOuID(ctx, ouid)
	return err
}

// GetOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOusOuID(ctx, ouid)
	return err
}

// PatchOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOusOuID(ctx, ouid)
	return err
}

// PutOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOusOuID(ctx, ouid)
	return err
}

// GetProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvidersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviders(ctx, params)
	return err
}

// PostProviders converts echo context to params.
func (w *ServerInterfaceWrapper) PostProviders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProviders(ctx)
	return err
}

// DeleteProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProvidersProviderID(ctx, providerID)
	return err
}

// GetProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProvidersProviderID(ctx, providerID)
	return err
}

// GetRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegionsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegions(ctx, params)
	return err
}

// PostRegions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegions(ctx)
	return err
}

// DeleteRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegionsRegionID(ctx, regionID)
	return err
}

// GetRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegionsRegionID(ctx, regionID)
	return err
}

// PatchRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRegionsRegionID(ctx, regionID)
	return err
}

// PutRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRegionsRegionID(ctx, regionID)
	return err
}

// GetSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedules(ctx, params)
	return err
}

// GetSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesRepeatedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeated(ctx, params)
	return err
}

// PostSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesRepeated(ctx)
	return err
}

// DeleteSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PatchSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PutSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesSingleParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingle(ctx, params)
	return err
}

// PostSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesSingle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesSingle(ctx)
	return err
}

// DeleteSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PatchSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PutSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSites converts echo context to params.
func (w *ServerInterfaceWrapper) GetSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSitesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "ouID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ouID", ctx.QueryParams(), &params.OuID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSites(ctx, params)
	return err
}

// PostSites converts echo context to params.
func (w *ServerInterfaceWrapper) PostSites(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSites(ctx)
	return err
}

// DeleteSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSitesSiteID(ctx, siteID)
	return err
}

// GetSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSitesSiteID(ctx, siteID)
	return err
}

// PatchSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSitesSiteID(ctx, siteID)
	return err
}

// PutSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSitesSiteID(ctx, siteID)
	return err
}

// GetTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogs(ctx, params)
	return err
}

// PostTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsLogs(ctx)
	return err
}

// DeleteTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetrics(ctx, params)
	return err
}

// PostTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsMetrics(ctx)
	return err
}

// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogs(ctx, params)
	return err
}

// PostTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesLogs(ctx)
	return err
}

// DeleteTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PatchTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PutTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetrics(ctx, params)
	return err
}

// PostTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesMetrics(ctx)
	return err
}

// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PutTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadMembersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workload_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workload_id", ctx.QueryParams(), &params.WorkloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembers(ctx, params)
	return err
}

// PostWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloadMembers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloadMembers(ctx)
	return err
}

// DeleteWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloads(ctx, params)
	return err
}

// PostWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloads(ctx)
	return err
}

// DeleteWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// GetWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PatchWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PutWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PutWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/OSResources", wrapper.GetOSResources)
	router.POST(baseURL+"/OSResources", wrapper.PostOSResources)
	router.DELETE(baseURL+"/OSResources/:OSResourceID", wrapper.DeleteOSResourcesOSResourceID)
	router.GET(baseURL+"/OSResources/:OSResourceID", wrapper.GetOSResourcesOSResourceID)
	router.PATCH(baseURL+"/OSResources/:OSResourceID", wrapper.PatchOSResourcesOSResourceID)
	router.PUT(baseURL+"/OSResources/:OSResourceID", wrapper.PutOSResourcesOSResourceID)
	router.GET(baseURL+"/compute", wrapper.GetCompute)
	router.GET(baseURL+"/compute/hosts", wrapper.GetComputeHosts)
	router.POST(baseURL+"/compute/hosts", wrapper.PostComputeHosts)
	router.POST(baseURL+"/compute/hosts/register", wrapper.PostComputeHostsRegister)
	router.GET(baseURL+"/compute/hosts/summary", wrapper.GetComputeHostsSummary)
	router.DELETE(baseURL+"/compute/hosts/:hostID", wrapper.DeleteComputeHostsHostID)
	router.GET(baseURL+"/compute/hosts/:hostID", wrapper.GetComputeHostsHostID)
	router.PATCH(baseURL+"/compute/hosts/:hostID", wrapper.PatchComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID", wrapper.PutComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID/invalidate", wrapper.PutComputeHostsHostIDInvalidate)
	router.PATCH(baseURL+"/compute/hosts/:hostID/onboard", wrapper.PatchComputeHostsHostIDOnboard)
	router.PATCH(baseURL+"/compute/hosts/:hostID/register", wrapper.PatchComputeHostsHostIDRegister)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.DELETE(baseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID", wrapper.GetInstancesInstanceID)
	router.PATCH(baseURL+"/instances/:instanceID", wrapper.PatchInstancesInstanceID)
	router.PUT(baseURL+"/instances/:instanceID/invalidate", wrapper.PutInstancesInstanceIDInvalidate)
	router.GET(baseURL+"/localAccounts", wrapper.GetLocalAccounts)
	router.POST(baseURL+"/localAccounts", wrapper.PostLocalAccounts)
	router.DELETE(baseURL+"/localAccounts/:localAccountID", wrapper.DeleteLocalAccountsLocalAccountID)
	router.GET(baseURL+"/localAccounts/:localAccountID", wrapper.GetLocalAccountsLocalAccountID)
	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.GET(baseURL+"/ous", wrapper.GetOus)
	router.POST(baseURL+"/ous", wrapper.PostOus)
	router.DELETE(baseURL+"/ous/:ouID", wrapper.DeleteOusOuID)
	router.GET(baseURL+"/ous/:ouID", wrapper.GetOusOuID)
	router.PATCH(baseURL+"/ous/:ouID", wrapper.PatchOusOuID)
	router.PUT(baseURL+"/ous/:ouID", wrapper.PutOusOuID)
	router.GET(baseURL+"/providers", wrapper.GetProviders)
	router.POST(baseURL+"/providers", wrapper.PostProviders)
	router.DELETE(baseURL+"/providers/:providerID", wrapper.DeleteProvidersProviderID)
	router.GET(baseURL+"/providers/:providerID", wrapper.GetProvidersProviderID)
	router.GET(baseURL+"/regions", wrapper.GetRegions)
	router.POST(baseURL+"/regions", wrapper.PostRegions)
	router.DELETE(baseURL+"/regions/:regionID", wrapper.DeleteRegionsRegionID)
	router.GET(baseURL+"/regions/:regionID", wrapper.GetRegionsRegionID)
	router.PATCH(baseURL+"/regions/:regionID", wrapper.PatchRegionsRegionID)
	router.PUT(baseURL+"/regions/:regionID", wrapper.PutRegionsRegionID)
	router.GET(baseURL+"/schedules", wrapper.GetSchedules)
	router.GET(baseURL+"/schedules/repeated", wrapper.GetSchedulesRepeated)
	router.POST(baseURL+"/schedules/repeated", wrapper.PostSchedulesRepeated)
	router.DELETE(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.DeleteSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.GetSchedulesRepeatedRepeatedScheduleID)
	router.PATCH(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PatchSchedulesRepeatedRepeatedScheduleID)
	router.PUT(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PutSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/single", wrapper.GetSchedulesSingle)
	router.POST(baseURL+"/schedules/single", wrapper.PostSchedulesSingle)
	router.DELETE(baseURL+"/schedules/single/:singleScheduleID", wrapper.DeleteSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/schedules/single/:singleScheduleID", wrapper.GetSchedulesSingleSingleScheduleID)
	router.PATCH(baseURL+"/schedules/single/:singleScheduleID", wrapper.PatchSchedulesSingleSingleScheduleID)
	router.PUT(baseURL+"/schedules/single/:singleScheduleID", wrapper.PutSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/sites", wrapper.GetSites)
	router.POST(baseURL+"/sites", wrapper.PostSites)
	router.DELETE(baseURL+"/sites/:siteID", wrapper.DeleteSitesSiteID)
	router.GET(baseURL+"/sites/:siteID", wrapper.GetSitesSiteID)
	router.PATCH(baseURL+"/sites/:siteID", wrapper.PatchSitesSiteID)
	router.PUT(baseURL+"/sites/:siteID", wrapper.PutSitesSiteID)
	router.GET(baseURL+"/telemetry/groups/logs", wrapper.GetTelemetryGroupsLogs)
	router.POST(baseURL+"/telemetry/groups/logs", wrapper.PostTelemetryGroupsLogs)
	router.DELETE(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.DeleteTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.GetTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics", wrapper.GetTelemetryGroupsMetrics)
	router.POST(baseURL+"/telemetry/groups/metrics", wrapper.PostTelemetryGroupsMetrics)
	router.DELETE(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.GetTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/profiles/logs", wrapper.GetTelemetryProfilesLogs)
	router.POST(baseURL+"/telemetry/profiles/logs", wrapper.PostTelemetryProfilesLogs)
	router.DELETE(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.DeleteTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.GetTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PatchTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PutTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics", wrapper.GetTelemetryProfilesMetrics)
	router.POST(baseURL+"/telemetry/profiles/metrics", wrapper.PostTelemetryProfilesMetrics)
	router.DELETE(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.GetTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PutTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/workloadMembers", wrapper.GetWorkloadMembers)
	router.POST(baseURL+"/workloadMembers", wrapper.PostWorkloadMembers)
	router.DELETE(baseURL+"/workloadMembers/:workloadMemberID", wrapper.DeleteWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloadMembers/:workloadMemberID", wrapper.GetWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloads", wrapper.GetWorkloads)
	router.POST(baseURL+"/workloads", wrapper.PostWorkloads)
	router.DELETE(baseURL+"/workloads/:workloadID", wrapper.DeleteWorkloadsWorkloadID)
	router.GET(baseURL+"/workloads/:workloadID", wrapper.GetWorkloadsWorkloadID)
	router.PATCH(baseURL+"/workloads/:workloadID", wrapper.PatchWorkloadsWorkloadID)
	router.PUT(baseURL+"/workloads/:workloadID", wrapper.PutWorkloadsWorkloadID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
