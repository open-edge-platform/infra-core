// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /OSResources)
	GetOSResources(ctx echo.Context, params GetOSResourcesParams) error

	// (POST /OSResources)
	PostOSResources(ctx echo.Context) error

	// (DELETE /OSResources/{OSResourceID})
	DeleteOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /OSResources/{OSResourceID})
	GetOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PATCH /OSResources/{OSResourceID})
	PatchOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PUT /OSResources/{OSResourceID})
	PutOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /compute)
	GetCompute(ctx echo.Context, params GetComputeParams) error

	// (GET /compute/hosts)
	GetComputeHosts(ctx echo.Context, params GetComputeHostsParams) error

	// (POST /compute/hosts)
	PostComputeHosts(ctx echo.Context) error

	// (POST /compute/hosts/register)
	PostComputeHostsRegister(ctx echo.Context) error

	// (GET /compute/hosts/summary)
	GetComputeHostsSummary(ctx echo.Context, params GetComputeHostsSummaryParams) error

	// (DELETE /compute/hosts/{hostID})
	DeleteComputeHostsHostID(ctx echo.Context, hostID string) error

	// (GET /compute/hosts/{hostID})
	GetComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID})
	PatchComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID})
	PutComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID}/invalidate)
	PutComputeHostsHostIDInvalidate(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/onboard)
	PatchComputeHostsHostIDOnboard(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/register)
	PatchComputeHostsHostIDRegister(ctx echo.Context, hostID string) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstances(ctx echo.Context) error

	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (GET /instances/{instanceID})
	GetInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PATCH /instances/{instanceID})
	PatchInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PUT /instances/{instanceID}/invalidate)
	PutInstancesInstanceIDInvalidate(ctx echo.Context, instanceID string) error

	// (GET /localAccounts)
	GetLocalAccounts(ctx echo.Context, params GetLocalAccountsParams) error

	// (POST /localAccounts)
	PostLocalAccounts(ctx echo.Context) error

	// (DELETE /localAccounts/{localAccountID})
	DeleteLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /localAccounts/{localAccountID})
	GetLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /locations)
	GetLocations(ctx echo.Context, params GetLocationsParams) error

	// (GET /ous)
	GetOus(ctx echo.Context, params GetOusParams) error

	// (POST /ous)
	PostOus(ctx echo.Context) error

	// (DELETE /ous/{ouID})
	DeleteOusOuID(ctx echo.Context, ouid string) error

	// (GET /ous/{ouID})
	GetOusOuID(ctx echo.Context, ouid string) error

	// (PATCH /ous/{ouID})
	PatchOusOuID(ctx echo.Context, ouid string) error

	// (PUT /ous/{ouID})
	PutOusOuID(ctx echo.Context, ouid string) error

	// (GET /providers)
	GetProviders(ctx echo.Context, params GetProvidersParams) error

	// (POST /providers)
	PostProviders(ctx echo.Context) error

	// (DELETE /providers/{providerID})
	DeleteProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /providers/{providerID})
	GetProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /regions)
	GetRegions(ctx echo.Context, params GetRegionsParams) error

	// (POST /regions)
	PostRegions(ctx echo.Context) error

	// (DELETE /regions/{regionID})
	DeleteRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /regions/{regionID})
	GetRegionsRegionID(ctx echo.Context, regionID string) error

	// (PATCH /regions/{regionID})
	PatchRegionsRegionID(ctx echo.Context, regionID string) error

	// (PUT /regions/{regionID})
	PutRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /schedules)
	GetSchedules(ctx echo.Context, params GetSchedulesParams) error

	// (GET /schedules/repeated)
	GetSchedulesRepeated(ctx echo.Context, params GetSchedulesRepeatedParams) error

	// (POST /schedules/repeated)
	PostSchedulesRepeated(ctx echo.Context) error

	// (DELETE /schedules/repeated/{repeatedScheduleID})
	DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/repeated/{repeatedScheduleID})
	GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PATCH /schedules/repeated/{repeatedScheduleID})
	PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PUT /schedules/repeated/{repeatedScheduleID})
	PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/single)
	GetSchedulesSingle(ctx echo.Context, params GetSchedulesSingleParams) error

	// (POST /schedules/single)
	PostSchedulesSingle(ctx echo.Context) error

	// (DELETE /schedules/single/{singleScheduleID})
	DeleteSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /schedules/single/{singleScheduleID})
	GetSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PATCH /schedules/single/{singleScheduleID})
	PatchSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PUT /schedules/single/{singleScheduleID})
	PutSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /sites)
	GetSites(ctx echo.Context, params GetSitesParams) error

	// (POST /sites)
	PostSites(ctx echo.Context) error

	// (DELETE /sites/{siteID})
	DeleteSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /sites/{siteID})
	GetSitesSiteID(ctx echo.Context, siteID string) error

	// (PATCH /sites/{siteID})
	PatchSitesSiteID(ctx echo.Context, siteID string) error

	// (PUT /sites/{siteID})
	PutSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /telemetry/groups/logs)
	GetTelemetryGroupsLogs(ctx echo.Context, params GetTelemetryGroupsLogsParams) error

	// (POST /telemetry/groups/logs)
	PostTelemetryGroupsLogs(ctx echo.Context) error

	// (DELETE /telemetry/groups/logs/{telemetryLogsGroupId})
	DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/logs/{telemetryLogsGroupId})
	GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/metrics)
	GetTelemetryGroupsMetrics(ctx echo.Context, params GetTelemetryGroupsMetricsParams) error

	// (POST /telemetry/groups/metrics)
	PostTelemetryGroupsMetrics(ctx echo.Context) error

	// (DELETE /telemetry/groups/metrics/{telemetryMetricsGroupId})
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/groups/metrics/{telemetryMetricsGroupId})
	GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/profiles/logs)
	GetTelemetryProfilesLogs(ctx echo.Context, params GetTelemetryProfilesLogsParams) error

	// (POST /telemetry/profiles/logs)
	PostTelemetryProfilesLogs(ctx echo.Context) error

	// (DELETE /telemetry/profiles/logs/{telemetryLogsProfileId})
	DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/logs/{telemetryLogsProfileId})
	GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PATCH /telemetry/profiles/logs/{telemetryLogsProfileId})
	PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PUT /telemetry/profiles/logs/{telemetryLogsProfileId})
	PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/metrics)
	GetTelemetryProfilesMetrics(ctx echo.Context, params GetTelemetryProfilesMetricsParams) error

	// (POST /telemetry/profiles/metrics)
	PostTelemetryProfilesMetrics(ctx echo.Context) error

	// (DELETE /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PATCH /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PUT /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /workloadMembers)
	GetWorkloadMembers(ctx echo.Context, params GetWorkloadMembersParams) error

	// (POST /workloadMembers)
	PostWorkloadMembers(ctx echo.Context) error

	// (DELETE /workloadMembers/{workloadMemberID})
	DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloadMembers/{workloadMemberID})
	GetWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloads)
	GetWorkloads(ctx echo.Context, params GetWorkloadsParams) error

	// (POST /workloads)
	PostWorkloads(ctx echo.Context) error

	// (DELETE /workloads/{workloadID})
	DeleteWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (GET /workloads/{workloadID})
	GetWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PATCH /workloads/{workloadID})
	PatchWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PUT /workloads/{workloadID})
	PutWorkloadsWorkloadID(ctx echo.Context, workloadID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOSResourcesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResources(ctx, params)
	return err
}

// PostOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) PostOSResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOSResources(ctx)
	return err
}

// DeleteOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PatchOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PutOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetCompute converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompute(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompute(ctx, params)
	return err
}

// GetComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHosts(ctx, params)
	return err
}

// PostComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHosts(ctx)
	return err
}

// PostComputeHostsRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHostsRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHostsRegister(ctx)
	return err
}

// GetComputeHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsSummaryParams
	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsSummary(ctx, params)
	return err
}

// DeleteComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComputeHostsHostID(ctx, hostID)
	return err
}

// GetComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsHostID(ctx, hostID)
	return err
}

// PatchComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostIDInvalidate(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDOnboard converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDOnboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDOnboard(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDRegister(ctx, hostID)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workloadMemberID" -------------

	err = runtime.BindQueryParameter("form", true, false, "workloadMemberID", ctx.QueryParams(), &params.WorkloadMemberID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// DeleteInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstancesInstanceID(ctx, instanceID)
	return err
}

// PatchInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchInstancesInstanceID(ctx, instanceID)
	return err
}

// PutInstancesInstanceIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutInstancesInstanceIDInvalidate(ctx, instanceID)
	return err
}

// GetLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocalAccountsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccounts(ctx, params)
	return err
}

// PostLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocalAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocalAccounts(ctx)
	return err
}

// DeleteLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx, params)
	return err
}

// GetOus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOus(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOusParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOus(ctx, params)
	return err
}

// PostOus converts echo context to params.
func (w *ServerInterfaceWrapper) PostOus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOus(ctx)
	return err
}

// DeleteOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOusOuID(ctx, ouid)
	return err
}

// GetOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOusOuID(ctx, ouid)
	return err
}

// PatchOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOusOuID(ctx, ouid)
	return err
}

// PutOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOusOuID(ctx, ouid)
	return err
}

// GetProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvidersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviders(ctx, params)
	return err
}

// PostProviders converts echo context to params.
func (w *ServerInterfaceWrapper) PostProviders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProviders(ctx)
	return err
}

// DeleteProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProvidersProviderID(ctx, providerID)
	return err
}

// GetProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProvidersProviderID(ctx, providerID)
	return err
}

// GetRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegionsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegions(ctx, params)
	return err
}

// PostRegions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegions(ctx)
	return err
}

// DeleteRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegionsRegionID(ctx, regionID)
	return err
}

// GetRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegionsRegionID(ctx, regionID)
	return err
}

// PatchRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRegionsRegionID(ctx, regionID)
	return err
}

// PutRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRegionsRegionID(ctx, regionID)
	return err
}

// GetSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedules(ctx, params)
	return err
}

// GetSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesRepeatedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeated(ctx, params)
	return err
}

// PostSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesRepeated(ctx)
	return err
}

// DeleteSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PatchSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PutSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesSingleParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingle(ctx, params)
	return err
}

// PostSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesSingle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesSingle(ctx)
	return err
}

// DeleteSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PatchSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PutSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSites converts echo context to params.
func (w *ServerInterfaceWrapper) GetSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSitesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "ouID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ouID", ctx.QueryParams(), &params.OuID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSites(ctx, params)
	return err
}

// PostSites converts echo context to params.
func (w *ServerInterfaceWrapper) PostSites(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSites(ctx)
	return err
}

// DeleteSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSitesSiteID(ctx, siteID)
	return err
}

// GetSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSitesSiteID(ctx, siteID)
	return err
}

// PatchSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSitesSiteID(ctx, siteID)
	return err
}

// PutSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSitesSiteID(ctx, siteID)
	return err
}

// GetTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogs(ctx, params)
	return err
}

// PostTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsLogs(ctx)
	return err
}

// DeleteTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetrics(ctx, params)
	return err
}

// PostTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsMetrics(ctx)
	return err
}

// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogs(ctx, params)
	return err
}

// PostTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesLogs(ctx)
	return err
}

// DeleteTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PatchTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PutTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetrics(ctx, params)
	return err
}

// PostTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesMetrics(ctx)
	return err
}

// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PutTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadMembersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workload_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workload_id", ctx.QueryParams(), &params.WorkloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembers(ctx, params)
	return err
}

// PostWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloadMembers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloadMembers(ctx)
	return err
}

// DeleteWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloads(ctx, params)
	return err
}

// PostWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloads(ctx)
	return err
}

// DeleteWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// GetWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PatchWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PutWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PutWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/OSResources", wrapper.GetOSResources)
	router.POST(baseURL+"/OSResources", wrapper.PostOSResources)
	router.DELETE(baseURL+"/OSResources/:OSResourceID", wrapper.DeleteOSResourcesOSResourceID)
	router.GET(baseURL+"/OSResources/:OSResourceID", wrapper.GetOSResourcesOSResourceID)
	router.PATCH(baseURL+"/OSResources/:OSResourceID", wrapper.PatchOSResourcesOSResourceID)
	router.PUT(baseURL+"/OSResources/:OSResourceID", wrapper.PutOSResourcesOSResourceID)
	router.GET(baseURL+"/compute", wrapper.GetCompute)
	router.GET(baseURL+"/compute/hosts", wrapper.GetComputeHosts)
	router.POST(baseURL+"/compute/hosts", wrapper.PostComputeHosts)
	router.POST(baseURL+"/compute/hosts/register", wrapper.PostComputeHostsRegister)
	router.GET(baseURL+"/compute/hosts/summary", wrapper.GetComputeHostsSummary)
	router.DELETE(baseURL+"/compute/hosts/:hostID", wrapper.DeleteComputeHostsHostID)
	router.GET(baseURL+"/compute/hosts/:hostID", wrapper.GetComputeHostsHostID)
	router.PATCH(baseURL+"/compute/hosts/:hostID", wrapper.PatchComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID", wrapper.PutComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID/invalidate", wrapper.PutComputeHostsHostIDInvalidate)
	router.PATCH(baseURL+"/compute/hosts/:hostID/onboard", wrapper.PatchComputeHostsHostIDOnboard)
	router.PATCH(baseURL+"/compute/hosts/:hostID/register", wrapper.PatchComputeHostsHostIDRegister)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.DELETE(baseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID", wrapper.GetInstancesInstanceID)
	router.PATCH(baseURL+"/instances/:instanceID", wrapper.PatchInstancesInstanceID)
	router.PUT(baseURL+"/instances/:instanceID/invalidate", wrapper.PutInstancesInstanceIDInvalidate)
	router.GET(baseURL+"/localAccounts", wrapper.GetLocalAccounts)
	router.POST(baseURL+"/localAccounts", wrapper.PostLocalAccounts)
	router.DELETE(baseURL+"/localAccounts/:localAccountID", wrapper.DeleteLocalAccountsLocalAccountID)
	router.GET(baseURL+"/localAccounts/:localAccountID", wrapper.GetLocalAccountsLocalAccountID)
	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.GET(baseURL+"/ous", wrapper.GetOus)
	router.POST(baseURL+"/ous", wrapper.PostOus)
	router.DELETE(baseURL+"/ous/:ouID", wrapper.DeleteOusOuID)
	router.GET(baseURL+"/ous/:ouID", wrapper.GetOusOuID)
	router.PATCH(baseURL+"/ous/:ouID", wrapper.PatchOusOuID)
	router.PUT(baseURL+"/ous/:ouID", wrapper.PutOusOuID)
	router.GET(baseURL+"/providers", wrapper.GetProviders)
	router.POST(baseURL+"/providers", wrapper.PostProviders)
	router.DELETE(baseURL+"/providers/:providerID", wrapper.DeleteProvidersProviderID)
	router.GET(baseURL+"/providers/:providerID", wrapper.GetProvidersProviderID)
	router.GET(baseURL+"/regions", wrapper.GetRegions)
	router.POST(baseURL+"/regions", wrapper.PostRegions)
	router.DELETE(baseURL+"/regions/:regionID", wrapper.DeleteRegionsRegionID)
	router.GET(baseURL+"/regions/:regionID", wrapper.GetRegionsRegionID)
	router.PATCH(baseURL+"/regions/:regionID", wrapper.PatchRegionsRegionID)
	router.PUT(baseURL+"/regions/:regionID", wrapper.PutRegionsRegionID)
	router.GET(baseURL+"/schedules", wrapper.GetSchedules)
	router.GET(baseURL+"/schedules/repeated", wrapper.GetSchedulesRepeated)
	router.POST(baseURL+"/schedules/repeated", wrapper.PostSchedulesRepeated)
	router.DELETE(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.DeleteSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.GetSchedulesRepeatedRepeatedScheduleID)
	router.PATCH(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PatchSchedulesRepeatedRepeatedScheduleID)
	router.PUT(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PutSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/single", wrapper.GetSchedulesSingle)
	router.POST(baseURL+"/schedules/single", wrapper.PostSchedulesSingle)
	router.DELETE(baseURL+"/schedules/single/:singleScheduleID", wrapper.DeleteSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/schedules/single/:singleScheduleID", wrapper.GetSchedulesSingleSingleScheduleID)
	router.PATCH(baseURL+"/schedules/single/:singleScheduleID", wrapper.PatchSchedulesSingleSingleScheduleID)
	router.PUT(baseURL+"/schedules/single/:singleScheduleID", wrapper.PutSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/sites", wrapper.GetSites)
	router.POST(baseURL+"/sites", wrapper.PostSites)
	router.DELETE(baseURL+"/sites/:siteID", wrapper.DeleteSitesSiteID)
	router.GET(baseURL+"/sites/:siteID", wrapper.GetSitesSiteID)
	router.PATCH(baseURL+"/sites/:siteID", wrapper.PatchSitesSiteID)
	router.PUT(baseURL+"/sites/:siteID", wrapper.PutSitesSiteID)
	router.GET(baseURL+"/telemetry/groups/logs", wrapper.GetTelemetryGroupsLogs)
	router.POST(baseURL+"/telemetry/groups/logs", wrapper.PostTelemetryGroupsLogs)
	router.DELETE(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.DeleteTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.GetTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics", wrapper.GetTelemetryGroupsMetrics)
	router.POST(baseURL+"/telemetry/groups/metrics", wrapper.PostTelemetryGroupsMetrics)
	router.DELETE(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.GetTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/profiles/logs", wrapper.GetTelemetryProfilesLogs)
	router.POST(baseURL+"/telemetry/profiles/logs", wrapper.PostTelemetryProfilesLogs)
	router.DELETE(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.DeleteTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.GetTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PatchTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PutTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics", wrapper.GetTelemetryProfilesMetrics)
	router.POST(baseURL+"/telemetry/profiles/metrics", wrapper.PostTelemetryProfilesMetrics)
	router.DELETE(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.GetTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PutTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/workloadMembers", wrapper.GetWorkloadMembers)
	router.POST(baseURL+"/workloadMembers", wrapper.PostWorkloadMembers)
	router.DELETE(baseURL+"/workloadMembers/:workloadMemberID", wrapper.DeleteWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloadMembers/:workloadMemberID", wrapper.GetWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloads", wrapper.GetWorkloads)
	router.POST(baseURL+"/workloads", wrapper.PostWorkloads)
	router.DELETE(baseURL+"/workloads/:workloadID", wrapper.DeleteWorkloadsWorkloadID)
	router.GET(baseURL+"/workloads/:workloadID", wrapper.GetWorkloadsWorkloadID)
	router.PATCH(baseURL+"/workloads/:workloadID", wrapper.PatchWorkloadsWorkloadID)
	router.PUT(baseURL+"/workloads/:workloadID", wrapper.PutWorkloadsWorkloadID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9a3PbOJY//FXw6L9VSXokWXYu28lU16xjK2lN25bXstI728mmYBGWMKYINQHa0WT8",
	"3Z/CjQRJkIRkyXYSzItpR8Qd5/xwrsDX1oTMFyRCEaOtN19bMaILElEk/vGi1+u8hcEZ+jNBlPFfJiRi",
	"KBJ/wsUixBPIMIl2/klJxH+jkxmaQ/7Xf8TosvWm9f92suZ35Fe6cxqTixDNDxGDOKSt29vbditAdBLj",
	"BW+t9aY1vPgnmjCAI7CAy5DAAGAKIsLAIiYLFIdLcEnieRJChgJAYvEpRvKfjAA2Q2CO2IwE3dZtu/Wi",
	"t9sZRzBhMxLjf6HgHieilk4Pn48BRYz3hoK/AswAwmyGYhAQJEvwcUEcAQj+PhqegN/RBTgnVygCT//+",
	"+/kzviKYUTBDMEBxm0+dz/Xvv5/rHq5hiPWsn3fekfgCBwGKHnbKctnFfEsTFQMGMQkR5Vu3QDHfWgBB",
	"LNtRc3nROSHsHUmi+9y9EwJiREkSTxCfziXvHkAm1nx8NlBDe8WHtj+ZoAWDFyG616WWzApUf+map4Ph",
	"f5I4wNFU84Va1idUlVK0RNVkfu6c4zkiCXsAimGyZzWS150DEl2GePIQQ5mQJAzEWl4gDjoTRCkKOPvx",
	"NZwkccyXmzLIECCXamElpcjh7+51TmM0IVGAedPvIA7vFXjOZwhQFF+b2DJHiAESpSNeGAOkgM0UZSsK",
	"QTFYJLy8+aOiFnCJURgomtnb64wjtUac5voRw2x5j3PN9Q6Q6F6eHTHllH9BgmUeTvZed84JOYbRUm04",
	"vc+tIQTMYZQOiYIZvEbgAqEIUMHFHP6n+BpFAM5JEjGxYXguSetlr9cZRAzFEQxHYof7cUzie6atRUyu",
	"MacETDU7hEuQRGILGAEzGAX8L4N0LtAEJlRQH4wAVlMAiI9ezYyf03i+CNEcReze+SXFehIr8UEDqjEm",
	"NdLnHb72eILGEbyGOLxn5N/AFgCG5gsSw3gJyDWKuZTVbfGe1Cj4IPcF+fG/8t0fokscIcr3MaNQvXzU",
	"FMXmaE7iJYBRAAJMr8DFEgToEiYhawO6QBN8iSWuXiwZot1WuzWHX45QNGWz1pu9Xrs1x5H+5267tYCM",
	"k03rTev//uh1Xn/6y3+02i22XKDWmxZlMY6mfHt+JdQy6H0wI5QZON1uSXGSYSnuXmBCz1CIIEWHkKFy",
	"C5JIRAEQGNAv2n07GI54mzGCwTAKl603LE6QZXS8mw8oCiTPlnu4Ft/u0nZMsSQ3W+Pi45qtzyeDRbnd",
	"t8cHYHAKYBDEiNI2oMlkBiAFH1u7r/e6vW6vu/ux5drBb1iKeOWh89J83G+PD3hjKErmrTd/tN7un/WP",
	"++f7R58PhifnZ8Ojo/7Z598GJ4efxyej0/7B4N2gf9hq15Q7GZ70awsMTo8HtQU+nJ4NawucHo5bn9ot",
	"LtpC1nojB++wIJNFsh9PZpihCUtiC0maX/WmHpyOwZwEKGwD1J12wZefX31+9aLr2N8BXMALHGLNFfn+",
	"RqIoCDEVPA/DUHQ3MSqBpwtCKb4Il0KHeebcMYltPZ4k8wsk2EF0xAvxFtOlTHDEnu9V98EPmimKVSfH",
	"fF3KnaRLZjKG68BHZHKFWO3QF7MlxRMoF4vK8neYxfmMF7P0eE4YDEGU9stkQUCTxYLEHJMvlppG7tI/",
	"WZCQTJc2kBV6q5APgfx0IbQPRZdM1eyC88IvYA6XWits82MlmgLClWPaBjiSA+XIBS9IwlJaEKhA27x9",
	"HIMQLknC2uK4mcPFQuk9hUVv3lN5mp6SGxSPmDoK6g5sfuAYpbMmnGunFQNEcYyCu/Stmli9b0707xcJ",
	"teOv5vn3BX7nS4oZmlOXvs60kPD+dMy7rNgLGMdwqYd0gicNQxLC5CWcoA0MbKDbch0eX76qNePfn1AQ",
	"4ks0WU5CJFTGhII511amqCDv7Pb2XuRknP/49//9ATv/2u/8b+dzr/O6u/Pmr7/87b/+v//X/pj0es8n",
	"4v/RT0+fASkINRJ2NtxBFHDZVMogdWtTLJ5r5RzPEWVwvrABwTjCX9pgfH4gdBdRDNzMUJTiq21hbiAF",
	"IaQMJAsuYQUlkHr1wgmk5BhJDKeogXaoLLUBylH9udLNmF40DG08eruBYY1Hb12HFME5qiZkwD87ASiO",
	"ZijGDAXHiMEAskaNR5f7O8GRbIAyGE0a4Wugy922W1LVeMv1iPIc/juB0i6gzvez/WNtzaFLytC8nVNC",
	"Gmc4X3FivI7j6hYUoFo4ABUaUESq9Bf+BUBKyQQLHe0Gs9lqEg+JLggUNkUH5MsKPzD0FUd9FwAstnVn",
	"GCyv0qZwcBGTIJmwk1rSe0KBKufO4tr64GDLkOUEBE0xZbGQ4xxoxyz+wNRTHvld6Kfc2p0pyLZWm6Ih",
	"bTEZWBRzfcqAwWEbTFGEYumTi8BBjCCTVpZsX/hoO3/0Oq9h5/LT159vnRafohjDUCpTFo30+O1gOAIB",
	"usYTYfPGqQbkRMgUN0vJIywFZF52UGGe4N/4tsQos6xgCkIy0Wufp09evrgU+cG1Wzf8EM1Gf9tupRTQ",
	"KAOcZyVv260kwUHN2TMeDw4BDlDE8CVG8V/VDxQkEf4zQUKhwvN5IpxKeTriDeeY8fmr0ioLIvoz4VpJ",
	"680f8iD8pAx1wwWSZPs7ZrMT67m1Dy5jhIRfUCqWVecXwJHwJwrbXAwCFCL+l+5BeBi5vKetopCSCFyS",
	"GExmMJpaTIL6HG2Alv/6WxlaPn782PrYsh/QxfXgvXzim8tCXsy+LGkrRHjHtaEzrynaDJaLGFEUMYkN",
	"wvQr1mrBK0oflmlPOx3+3j/7PDrfP+8XLGjml/7Z2fCs8NvwpPjDu3c2q5fVXnsmAAzFg+iSlCfyq7Tc",
	"GhhnmATK2wYTRobyTJVtCYtz680lDCkq2tJHiHG6QLzBCQK8bsc4kA2DUBvczPBkBuYIaodZRMCERJdY",
	"WyducBiCC2lx59ubB2peNkITRgXR8V8vcaw8n20+iH4wRWAYT2ZITJQICFPrdUFIiGB0z5JkPfgap7XC",
	"4RIAG70+/WO/87+w869e5/Wnry/be73bZ3+zdrodlHtCizi3BpKl5GrYMeznAZIWUu0dklsjjSdxQMtE",
	"O6k1vIompcNkIlpRB17O8voH6k67bXB6MAD9L5zt6U9tcDwa/NRW3D6HEZwKTxZ4enr87FNOo7RIPfUq",
	"Y26E1lVP5jDq8GbEChjDNso6ndKyWrUYazTtLsJOcNVhnjX3hIrlzNOMi3TMxenGsQqbs1OL67LEdY2n",
	"yRiILOYwktuKY8hiP1uBLVIDnoUvLuaTmja1KxJLmOa8xeUW/vdbSJGAcXCckf0BiVhMwhDF4Onb44Nn",
	"Wdc1kzegt4kQM1Oku7VkoVxnVXyftvmEGo42YSZyNgkNTvdlNRfGDnF05WQ+PkoL3nLknPA+mudwvH+g",
	"J+FmbGFJ00CUp1pztWbW5rGswdw0xuS6L/zsFvh4F8KplA1SySulzow4ZpCC0VlnMPygfTNu5Cf6/nBJ",
	"T7iwZrXvpL6faxyzBIbgMokmUvp9+uEdfWbECggdnmISSY0tN8I2H7MaITYcSF0nlVEPU/ij7AOdwy94",
	"nsyNAX94RwurpHqldxvMetDZCHTa3LsCzFXZmsuCwASzzJTpRvhNyKQ7X/WYnNtdpmaT7seYFA9dBvgk",
	"VT5X1+m3cVjq0TmflO3WzU2VOFo11ZWQqKBFarIRmmQt5Y5Hb2upVpoERm+zkB6LimVFel5J05fka0gp",
	"nkaZ49k11MRmG3ybUN1sGq2oxWCtWDHi5uINIbX0cMB/BoGQKcSQ+YQGafRXTME7EifzNhhEE/B0PHrb",
	"Gbx7thEB1lw5Z8EhOK2SM39FX2CAJniehQOkx5H2xw8OtXJrdK4kV8f+q+KY1u5+Be6qgpKRCRflLrYI",
	"IFVHRoV1ZsQKMWSmGebX4ejcaoUxPhz2j/rng5P3ll+LRYcnb4f7Z4fFn8cn52fjUan0Wf/9YHTeP+sf",
	"Ottv6BG2B91pZ6YAFbkuFjiZQXqCvlgaUIbzVMKPEYAxP3FiuWbUOGMZkaYXFmN0XSsdGBKVaIT36+xZ",
	"dZGgGRd8+hI2HOJ0RN+5UM0bEYEeI5bEkRB/IsJAiOdYBfEs4BRHsEF/ToWgwlEh59xOV7043oItUu5t",
	"BXHTUTKfw9gaC0Tlp8L2K/9EmQiQDmSe44jLhq03PSf/RBJFnBJXrsi0dLpatSSCoTLrr1r5trCweu0s",
	"a5spbOWFjUw1MAVWFICEpsFWg8MzTjOCRGREFAxkrD8McwFVSuZY6prCnjlNlJ2Vi3YaowydrSwMWEcq",
	"RlG2QAv4P63TAb90pqSTAc3lnHV5Wy3jSwfPuRagzPOz1pvWFLNZctGdkPnOlHTIAkVwgXdkdbH2cmrH",
	"IrY7ZxhuDU4/7x8envVHo88Hw5N3g/efj4eHRegtwLcKX6ZgRm4KUxIx2WodJRBpXHfqqKIQB+fBQfX3",
	"w3+c7B8PDjj7Np+ehv/Vsgi8q/Godv5SjhWeRuuWWmZsbbX8fX80Grw/Oe6fnKd+hqpCFS3IVRmf7Z8P",
	"hic1jehyFc2c9Y/6+6OKj7JV97WW4fx26S+Qof56IeuWdXuyi3lCaI4u8IxNtRgYsTolnNKBPDVh98oe",
	"MWwcrnKJRdORiNjR6syq4ZZ6vMV4yTsNYJWYy9IAZipfwUXw4GUHh7VOjpIuafWX6p1x8NA3u6V1Y1Uj",
	"09+tmi7YDzGkZgrJ4LAwKl6/MW5AHay6r8/CnWOJTctWP6GNw30soZv5YTdjCQoKKGLMiZJLdsOl6IzO",
	"HnY6dwmmybe0fiBN3Z5vKpLmSiW3uKCDSIS5bbe4pBnuTyY6E6vWHG+WLdStYs0yWpBLEbUSiuThJGKp",
	"U3sFGBENqPolOFGMao7uLOV8J7yJavwv6TYWvI8Wr/jLdb3i5C5nBaF6LxYxUmqEpBjH3RmOslxFYQib",
	"JyK5T04+DE1zvnV3CK3aE0JX3InUh9AQD2rsi1nlgVG1PPq7QFG5tY3AkW29HjC2TxlycXSNIka4dl8R",
	"7Od0aJetepMkxmz5DkGd8Va7C4XidzD+szihDAX7jPEfm2JUbcepagHArIkHpu+qOd2Fyqva3Aitu6zl",
	"pmhfVl91k2WtB95Xc+hVsuBbxOAbkJMIjQIWsVCsaWGepYnx/604wLsQm9nOZgksv4+boqkbEl+FBAbH",
	"aH6B4gqy0oXAXJZqFKycTNO/57puNlLfGrp7Rda1yrguDie17JyMzvdPDvq2dOv8N5EV7eRL0CNqciek",
	"hoXNuhSKzd7Vu6Dbc/cwmClN37aXIZu7k6cht/M1diYXb1ottdq8aoWPZ+OTE+lYK9XKHGaFT9rv5kLl",
	"R2aAVZHEhaiFJ4CyOJGJ/Ywon3RqHVR3eIQ4uipTPqsGSnGRQhkgeTuq3Vok5L90eP1tRmHIhkzD9NHg",
	"5DfrtuUnx4xbItKFMkmgsh3zw2n+34fD308crLwF2s+2QJW0WU6PCqp9CetyWni1BdVFzbe35WqPC1ZQ",
	"76vscoVRWrOsqpWR+I7KyEojLikldPYbWjosLBcw6OwKLQty08+9vKXhKaWzDgr2Xr7cff1vNAko7NAZ",
	"3OtEmLLFy73dZ8CIlf/Lzi+f/vIM/O1p96dNx8tTFFebUooz06ULc3u+l7+XB3b+9ekPOfLOp6+99vPd",
	"2+YUmHQk6WIbJ0OOTxr4qEluyPPBZoWHDckMJqPYvL/89K+dipOcUbQVbknWyF8qt12BI79wTkJHiXQq",
	"yIuP6IQEqAqmhUoVkQCJXEwJVW2RsUQicU8nxcyWX1bJfKqtZhuma2ZPsy0MxihiVRkRhopiQHF6laCo",
	"a9ygxn/W2Y96abrgHYnFzZ5yVbC+Z/ECATRfsCUwPg8CXZyvXHNhtyze6vOlMMfCVq506jQLRkrAaWJP",
	"PjSug5UI3ZiIsW/KLN4gcGhKrgLKYhkFLF2ROQFxRMWlT5qnRY6bGU3CES/BYQAgYDFCUoqYivBzGAVi",
	"M2lb3W4oL+3Rq87L2DIwg6q0CBIHiHevoV0UBU9jQkRCX4jg5TNNoJoQOUthFMN4MltWD1DeTiSuseMf",
	"ZniR3vJpNC7SezPoYkZQe4AWbCZuF0F8ogIMV0LmFG8ckJkkbJGwGmjOpQVIYJYInF1pKtbuCQWiUeVU",
	"gGwiTRF/Jijm0BzDORJBsOmVp+pOTedgq/pBsuozZKODKaXfchL7ZPDHeaqBVF1CZ9KUBDdDzTjrj4bj",
	"M237OOu/H4jU2PzPo8F5f6074cw7VYrMq68lETzRzoWGXSwBTFnlCi3fXMMw4ciN4zxp5vnvSsq9pry3",
	"+8p24nQ//WXH+FNJgKkk+Ln76Sf9m6WY+kn/t7KmTfoVEykM8tVz2xiNnoweup87tT0UyIWviO7UBrJz",
	"+GUg13JX2EqL7Jq768ZKZP8kOGI6GN9ALo5P+uIkMhX3yekNtyuFOjPT9YYakriXtgU7D8fWIKDhuEZ5",
	"XfuuoM1fwzMcP6F3Sp7WTtSkY57EOcdxUqWgG4u0rlZOElddXAzDOrzq+zevcBQI7/PYkHDFBZNvx4I0",
	"JyFGEdtU4rkUa4aJfTBK4BQ7VvaRp2rHcMwPaUOuY6QtrV6YAfQFU6X75QZYXsZ7tVQ47OJWQv7krRwZ",
	"jQzHLSuLN0b6D8fVevVw7G4JH7rdELiOpp4N8a7K+jegFvM1d1KG9d7atj0fznJq3P5UzMcWd34iqrK9",
	"ALmJNEcGMb7OPphhDab0NDztn+2fD07efx79Y3TeP/58ejb8MDjsnxVsttXlBifvzvZrSxz1T4Yfhk6m",
	"+qpAHutBN6o56GDtRb7nclGMI8AsvyqoulxJozY9NyxbpN4cTq04t28PTlK7K6rJbZ/AKMdY4DImc0n+",
	"MnNDJQVuakZ6xFWTGccVkZPjsyMuMhOKJUDnJ9MFA67Psba4L11EQonkCzKOw1JcWW/D0+FjrgqjDEMU",
	"nMLJlf2uy3f66iSGvrA2GI46AVqgiO9ZF2SgvZANCPGHtsUzEQsUgxBHCDyN0I34gyKudzEUPOuC44Sy",
	"/Esu6mrx4s086y0D+Cj+FxXWojRfy6JcoThC4QGZz2GVLJPnNFkBTGSNbe5lfmi2ixurhdPckC1S6u7e",
	"zyVDfDpK8PRZZSjjqeNVflVngGjECBt0GP564i11Fm/rohjFcM8dTHCF+UpLXLu1CCHjFP42iYLQslnD",
	"BeRzM+7BpoyIW9NjdIliFE3kU0eThDIy1zGbKsJJtPOUPpPISZOFSj2Wp+YFpGIlRZCIkc41HHVCdI1C",
	"oFl7ghHdySVyUQFfwnLaVonTwrsq4M0cgg72TSgKXO+6ucRhRWoz/9UAUlXWENCNUNYLFJJoqlO4ayh7",
	"E1ewpeOufC7hQ/ZUwmojd7BDi0PDNQa48ljSIUwqRx8cpo11wZgioE8OTm2XOGQyC3vb55We3YpqU3W0",
	"qUVlWhkYNh9mSmdw7+UrSxzKr/t7L1+ByQxNrmgyN7Yre0ssAjMjQT6fH1nYmlcvcm+gvHpRxPjL6ndQ",
	"1nYLy6A7SVb1V1Sb0yqQo2lTLIYQrkFtf7HKBaXLSkzjW0aT+RmVIuEKvuhCYbXTpqJUoRM0K066aKMO",
	"baxrtTJtb3sFDbs6SWE7avfogdXu+9K4qzbGTQ2vIZlmCrP7LoZC4tEvciglXN3oikPjYvThqAvOZ5gq",
	"0QXT7N5XAC/5ETLhCKzWpVJnP//Hab9JXxdljsfn+2+P+pXfB8e6hIuyXng5q5yPDuMYIwqgDtwWj61F",
	"4Nfz81P5EhnQL6CW2U1VsbSqPaNpoHX5wRL54J4YXfZCEmZUwSUQXhtTXebyl7gmNEAXyXTK5cdFEi8I",
	"dbqh3madrzba7GePidXYLxb4IEZCYodhxbFQauYJTSFtklWuOhtc5JCasHnX06AwkzK4wQXuR8GC4Ii5",
	"z3P/dACQqrWGfFU3r2zc6bBsdxoJeb9SIUnHnNMLSpYlw2XlopbaVsKinL7o1eim1QK6aLpKpbR1vZZi",
	"qRtyVS+NgdUM+zeHZM9Ts6xRN7tXyaW2Kr1lv4TzKm3FO5Fb1TTSxeQI4wRNka4GBe2Ort+Uk0t3l7sZ",
	"W1uPLekO+W/pQ3Cuh5boq0kmTOn9UUYt6tG5S5/5pyG++ejDbAGcpLzcrtfQadUVax9yz0TW0uuH/snh",
	"8KyKYtVX6RL5fPQ/B/s1X4cH+640/WVZCdtflvX3t1+yRU0D785PZSNdW88zVltZSHr1tWlD9VFN/YjU",
	"VI5IJ5t8t+UktJ2J2DQbLMiotfRUe8yBFXKomwmukG1VBljUR7GmcapqPDWhA2p5y+ED+NIIHjB1pQmM",
	"1IvhiXosXBrdyl4QNYeVr1mRw89Iom5nVCn13AyJqqSo6rVwEZ3sM6kSnNKRbDukYq1Bbix/iUP+CFvf",
	"ISseVCLcNE9hMnJaB0kHOEYTFopw54slmMywOMGmOlp2hRvnFEVUgkxjYIdiic2KH2kU5YbkELU2zlKI",
	"ySffvAyiJ+8kgZi7biWKBWelYDSZoSAJkf0MkmU6VBWqu+crJtEhXB6TiMP+1/zDID99+vfTP3Y7r8V/",
	"9j6Jx72f/fv5H73dT8+ePm1Xfnv207NnVuVR9fY7Qlf2znqdV6pp8VdtQ7+SRMq1tmZef/r3rvzP3h+9",
	"zvO00dLvtV0c4yhRiFHRCV+Dl2r2Rh+5n+u7aFj53T96u3vmcqsfKhsNlA1hhCYkCipMQroQPw+pLJiF",
	"bEvqAZp62iLmQP9LCQrycs2fX73oyefg5b93MzouDsMWfV4tm+jenKQTJ7tFXGCc6pO3MP31D2HZEG/H",
	"/SguDfKe4xxXGnXJf6eGnd3eUeu+y5fmWA7jKWK/rnDxXlajSriUJeRNt1lqVErNgE9IBNaogsrQq1S3",
	"IE/7NYIlpJWCpfX2PrXjuQk4vTUnKqwqbZq1GlZKyRMPtFYVQnhutdJpuK/XaIX3BLMaDSslHhd8oHWy",
	"PlSYWyU1ge29X1iQcsqAX4CD/JFqnuHtvBhiHox5mcGQk0Y4moYoFYMcRCUHSboA/dVCdantFSTbggC3",
	"Lbdu5Wx+gODq8vY4yt42irGQ1qh00Lk98WjIFNl169oyODr4tX84PurbL2Qufj3eH5yc90/2Tw76lq/D",
	"0efx6eH+uZuDNjdfewbUkeIRGIYlgmpntCaTNTlnOvJMhc8WgssQsmrOpG2wIJTii3AJcDQJE/EqJB9c",
	"amDjAOye3rkOW+YhaIXpyBXa3mQK2LgthPkBgaW45e2VoaYEJeWYt+LLKbJA/lFJASemWp+iSP9gfDY4",
	"/8fnd/398/FZMd6j9PlkeNK3/S5+6H9+Oxyef94/Ofz8bnx09PlwMPrtc//k4Owfp+eD4YkbuOSJ0fYg",
	"RZ4daqwVKApq1VoUBeIiJUOtbafiWb4XmU0u023JJchaTu9tRX8mUERpkhhc4OlU2qFlZnZajzIYM1Wz",
	"GCD7OhckuJvXWbMAQXX4GHN7eF15ewqm3IYHUS9pjhKrDABV1LiuHWCFCStKKI3T/npBSndVr5nBmDlz",
	"w51INzcY6zUDXrH3ir1X7L9Nxb7A3QUUXkklL4hPTQp5EYor1XGLJP6YBOUfWT52ULttVGElHlYhPrI6",
	"mTGI6AjF15X3/mpiOzwR7+TzgtmiibZn0Ni6mgyKNe9UKF1NkooBDHWCiHbUqCwhsQGZXKGYwyZvrvKF",
	"enlnyaEo/JM4B2TxxzRPMbhONjbLbNeOnREmjTXjZ+acRye0PvJYrbCYScbkqmobUPUomQg/gRrWRC6i",
	"userdKH3auE3omPV3WoJrLzmRm+0yw2p+sIVt2smSFJ1Ug/HdWFCgpy3EiTUdA1J5WscDqm8ZujlQges",
	"NVT4sszCK1YOPgpWDT5qWOF7DrzarprK1lBQuWR2WMtoa6qQaw7mCFYA1hSRNMQnhAyzJHtQUlyKCU45",
	"2lEhw5gXlol7qGX5Tkiiqawp7ivTt9b1/7No+34aoGmMkGxtnoQML0Isd2O399NP/ynMxjFJokDHWiEQ",
	"IRhzcUVJGs+6QE3IeFdHyjUwmoqx/2WnA173gOorF6fwuqf+Z8QqdIwfc6Cl52fVZMUgoqnDqqaL8y0s",
	"azStXdbdn9N1BU+FiZria/Qst8a7P9sW2fw1v8p6lnaDwdpPPacyJUNVQqSD3sHQ44znpzqA0VG9Yeg7",
	"iaGTE3dUJ1iNElF+/KTyAVWsS+Xs69LBNjg5HBzIh0wLBvbSd/3QafnL4OTz6dnw/Vl/NLJ/Pzxa7zbK",
	"c8TXhcXLAxKGaMJIQ2IN0+XBRFcw53zeP+of98/P/vH5YHh01D84H1rTbSqL/Tocndd9Pzgaj877Z07u",
	"hHRqR2RK38cksb2nkE5nyguoe67EWw2Uy9/6DsepuDlU3vsh520JkCyuYC0Y2df9tt0SA6H1d6BP5XCL",
	"41k3J3P1yzeKmZkFmLBrEb+WVQeRISsvY1VzKr/wV2ledlcoWYkUbJLgWEpcmTmP5amjIGulX8VHV5O9",
	"dShbvROwXaDMlMQ+WZmk+QZ+tVPV5165UfeTyMK12zK2lWZyZ7PbXTIOHvepattSpzO2gsAsB26u5Km8",
	"r8dGiBlX8g3UF/tcivvks8vBM3NJ8V7d6RG6RqEzHY7QNYoxW8pa4n0H4zhZnZTDOgiqfDM0D0cp5a4E",
	"SdlLLrXIo1a0ang2eFRVqkajPq+ewSO8GNUPlOeHk779lXJGaYDKDoGnkbJCHMAIkChccmYnkdTAcp22",
	"QeZKEQ9BmP6nsoHC9mZmxbSqMgPzk1KuuBuBXA8zJxejS8nLVjcnoTQ95IysnrOtHMB5Vkux55Mj/DWd",
	"xVYobDqQVdtrHskamLd1KNvR3R/QKx3Q6RavfkSblFdHpcfSh1ChV+1LJQrrgFbpcTC0ljmJsNIdH0iL",
	"Kg3p+1CkzGl1t6tMmSTw8PpUYTSPQKUyR+SO5LKlNriZ4cmsbItQvrtaS4R1BGvgfY7Htw/4Jul6xHdH",
	"/Pwurwb5JRp1wHwn3Uxt5qrq2bxwrKxFp/MGYHLUsopQurKiNW+EJFViEDEUX0PLveZyasIJwwuAp1mE",
	"5rMU88uKmOleFe4aLT5LPAkUH8r3kET4skAU0+568m7wPn39+WxwIO54z+XvlnwxXnP0mqPXHDcjZ5Sw",
	"owgVn9yR2l34yKM2bRYt1lcmC4fJvYkXXqVcV8C4B60yb2wt5xaSKZA35afXq+ZxQN6N6XT8ifewmo6+",
	"o+H7kd2/Oep/6Is0qKP+h/5RpX+zUOzgbHA+ONg/qiujvcCVBX7fPzup+z44eTes+37Yfzt+7+ZCzRF3",
	"KZzWfOB+RsIAjOUV4jAKVKxU9lg9td0oI/Lh9m2RR+kb93qP9bXF2fGWhfGu9769eiDfrXvjSf1NjcCC",
	"eCb3Zaujh7rPrKD/O4mvQgKtT/yIeDY8ATdwyTdJqlYcmxIjElrQP7kQr8BAcKOas+TUfeEnIQyb5Ttd",
	"0nhpTjAsIyDE0RX/b9Y5SRjFAVJrCkNx534/mCIwiC5jmFHZMYzgVIYFVl9N627HuHIwMOm11WalOeKA",
	"7H7a6frHop7LIbe6xcfcsIK1Z6112eJNbnqoq4coVqTPF9ZFheMoKqxcmM3eUr2uBKCHV8VO+vu6saDO",
	"i60ObGM8jW+oSqOX5oZPBgpVPECp3t01t0Sfqb8Pz347Gu4f2gKF8t9Wif7R42mSffWIqqMZdEurc/3W",
	"hNrioL/v5xiyDXASPHM7X3NeKky2PsOsZ1p3HGLDulBHDakVQj/4FlU/YV9pldIVCzxutRqYj61FE9cM",
	"wCsnxlVrY+Xf4/7xW/v12tYiips/nwwP3S4fmacb5rrc93CUyUHd2+WkN4aw5wpBTQdNJdHlaL/5YHE4",
	"SGyEd5Pjx6bTUBHgXQ9Fx20rzCgdYtMBaRBe21Y7t0TqNDX49VMJppyPMY1dTafZ8dYl2budbEq2+LFO",
	"OL0pK51zBoGUTrtbceZckvKMaxQssH86aLVbIZ6giIrjTSolrf0FnMwQ2Ov2uE4ah6038sL1Nzs7Nzc3",
	"XSg+d0k83VF16c7R4KB/Mup39rq97ozNw5aReVEzhFa7da0f9mv1urvdXidA1yLRb4EiuMCtN63n3V53",
	"T3L3TGzpznCUe0NriizE9x5xYgpD84ku+sTkFyIfZJJZb7y82ay4xBvOERO884eFtNEXDZ+XOKZMkJJU",
	"eDnpKNMUDENyQwG9wosFjqYpyYngA97QnwmKl/qhjDctcnlJEVM59XMopyUegGy96ZmpNYWsmp6N9Mpv",
	"PksfMx8znJMkYgYLCGZTb8QW0lIXcIraYI6FTWZXWH3mUMx+t9drpy9Ukkuw16uaGG9jhP+F7FPbK8yt",
	"3gFVntlwoV7YVM8nptsgDYJyinyuEUMxoqwLRggBTdNTQqYh6kK86Aboemf3VU896CRep+qCc3iFKFjE",
	"aIICFE2QeFgYEI5ousOMWARmUMSqFkJWyC1DjY7afrPzy09Pn329/fjxY+uJXTOtWQ7xVG4nfQ44PUWE",
	"xVRsukxEXvLNJjETJBoH/IitW6Dne7kFqqJl3tDbpfNUK2b3SYh34q0vwe17vZ6MH4oYktnXcLEIsUyy",
	"2/knlR6zrMs1HtYTGCswtXAM8yNP33lnffrvtt16Icdn6zadx86LXq/zFgZn8tCR1XZdqu12xhFM2IzE",
	"+F8okBWfu1R83nlH4gscBCiStV641HrROSHsHUki1dUrl0qveKX9yQQtxHt0subPLjV/7nApmCRqRV67",
	"1HndOSDRZYil0vdid8+h0u5e5zQW3nURufZOvAYnqu+5VN/b64yjRUwmiFI+w37EMFvK+i5j3nvdOSfk",
	"GEZLRQBC5H/pQjgve72OcA1GMJSXWPTjWD4q9dKFgl4KCsJz9V6xnPVLFxJ62Xve4T3iCRpHqZQmUyzh",
	"lIrnBUdCol0QmwwrlSsKYOn9/fxBfEpo4SRWotlbEiy3zfmS6zORLcsrNwFo936GUfs6N7iBFCjfAV/E",
	"GYL6VacjlXFcc/0kE+8VD7QEo9opbkx+HUwcL4L0rQc+D3w/OPDdtnOayc7X7B+Dw1vJjCGyBb8cit+b",
	"oVGWM/owe2iVYOpF4xP/AkTkqAIvvHge9sJLnTGhgTvzFoR61uw9lAShZKniWf/tsL6n8Q0I6HWmLcNT",
	"YJ4Uhvld6/sLKJ5jUOp+ieCrZEfDBkBoQ5Al1/4XkE1mZZ48hTHDMAyXKlzHQbPgDdWx6HpqBgzD4aVY",
	"yLX49FPRck+o+QJ43sJ8224Rqp+OL31SIY8naWjJIkYTLtinJajtbvFyqRnce/nK+vHWSUHqPRYFSdCO",
	"l228bONxn+NDYpFtxq7omTCPnT8Sdqq4WY+dHju9bafd2lHh1A0e5zTqWrnmLVrigWrI+5i9j/nOPmb0",
	"BXK6V4H74m/BMTSZz2G8bL1psVlMkukM/Eooe0LBCDPUEfFI4skadftmN4tk+uWjvI/z+cXzn/fg7u7H",
	"Fmcn1faeve30fuysVX219i9Pvn5sXaHlx9abj7qV3/g/2x9lWfPDB/nD7ROjy+f2LkcoxjAEJyKWx5yN",
	"+F3+/MvH1hf+Pz6F28fijwfftj++XZZsitLEmeALKhlD+JcUJiIV3iQT3GCMsizOG8xmouwUX6NIP7jR",
	"BYNLI3nrSZSE4ZM2LxcBzBQDyjgfXndGKKMiYsu4hVq0DKOlvG+3YnHURc0Va1NKB/33//GR3OPyqMt6",
	"5eKkEYSbXR8z9ti2Rlm3VetUClPeyDpZl6g4gWx1xmO+Lvz/S/eO88FI8Ezv348QCvTRdInDUHpTbdNP",
	"EhzkJm7kmjx/ZUafGiuQrcYLh793927XW6p3AsWovhlGAK91iQrr2AUCceWF0ejLAk3kve3Gtc+XJBaZ",
	"Wk+u0PIXAbJPqlZonp0C2SqlUac1b4794vQIWe0dOi6rlAtILVFUauFMg8PVwctJJItGTeIUrhRb4Zgr",
	"Tnzt8DUCkxkWAaRKUW4D1J1222A8ekvbQEi5l1D8PmIkhlNUidcSzlsWt3sa77rV4CguL9DKUKiinOuV",
	"RK8k/rhKolbpcprijjhumyOUxYN1KoSwRl8U/OiVRq803ofSeK60LC01PqFaJN+M4mi2P78/5dHsViqK",
	"KhnEK5CPWoGUiovXGl3W5EdXFcVx+qOph2spg1yicNUAvzf1L6WUWrWPbkjvw4bex8UU+k3rfmYaTE54",
	"9UqgVwJ/XCVQvFTukACTmk4479gTYAoq33bDK+QL65/uOfVF9moPRRCgso0EF73iPrPFY5rHNHdMK1m1",
	"duS7zDLOyo53Z6oERzzB0BdL9S4+10pLt3rQZiTULW4pJ5D3obsYRJek9RgRUa/7BkAxa8rjosdFj4sb",
	"wcXU1lhn9RfmR1mQM6OpQ3WbPAAj1YHFEVCv/uo3p8Hg0LDwXKCQRFNxifZAXnaTGj/aqVGoMF6t91FR",
	"p7m8YamawWtUNtgBAZqp7Wq+gr2tPOuGZ7Ldja3eZu9t9s42+61bYzTfW53xFWBSYwZNTeXeaOMPcn+Q",
	"lw/yr/w/ron7FaYc+d08vX8VjW5RgRnqAfyO2eyEMNTSaScudwOkaoa/FMCjg0eHzKRrleX/O0ExTtkf",
	"sIL8xY/XJmnewIMtCg/NtwGkTyNdQIoCQCKAufw4OPQA4AHAA4D7nQl5n3JsvythZkoBjbck8NIbvSeh",
	"yvHEG9iosLKS/6mYyysCKh5DHq2TXdbfNODx0uOlgZe1dw1UIVDCPP6shz8qW9/Dj4cfDz/V1pwdHF3D",
	"EHNekVLWo5fqEuvLCnoSpnN9DuMrHE0BZoADQsTihOt2XTDkil028aANoIj9BDc4DEFEQEiiKYrBBQL6",
	"5YUJmc+TSIRLSstx3TsCSRQiSnm/OLUciTBH4e6nmET831OII0fIz+b38JayXoOlzFhXD74efD341oAv",
	"iS4IjIM7IG/34RXqoZxEZvYjEhyH8WSGKIshI7Gzcq0aa60MO2opvcbpUcejTj3q5EIVv1nYyevOKnhP",
	"AgzAkXxUT71K5YQ8GwimdFev82GV7a8FVdsM37Dezqd18cKHW8eo9TowrVpIfweex1iPsSWM1Y5Ch3sN",
	"Up9iXWjjIG3P32zgbzbIEtBXC3fUpPaEas+7ERwobM25kEdxEq8a8mj0IVY464D/85ePadKzfLZdNZhr",
	"/blT68NRfvyE5kdPaAc+v9idvHoVPKp7CTrf/L0EAjv68wVbfpBrr+OoV0zNT0GyKT2/+NyyPUffzM3P",
	"mq7Kza9sUzT5BDxFfIJAzvtZVetZtDYsPTqb9Vq1JYWncA9r9qbmpd6NXQmQTcsWECt16nx4rBG/Y5tf",
	"KvivLehvfAZUp+uLyN4sq72r09qzuF8x8g3cZ3HPYdBaVHDKSy8LH16E9yL8jyvCp8/lO73QaN7vUs7J",
	"NGX27doOskf+P+Vf0lZvqac4TOjgsHXfKezZ6OzO+RSDtpHKbm6RT9v0KOhRcDUUzBkzdr5mN1a5PtWo",
	"a7RVVjuX7bnQbIprICBKUld6vhKhaVWuSAqtA/MGLbfkjRzc+AQOz/Ce4fNiT+3bjtUij2mlrGPL3r0J",
	"FvV5G1Qorp7vPd97vl8pdyNlpkbHL87DgIPzt3Tf5d0fu6xR0ngrVZh1b/pa0cfb/HzafUdWr6TA+QwP",
	"j6weWd1UqDXDrB8DADfGW0eG0LVS0HVOMXwcodeWM6IQe+0SR5ODSR8P7ZHSI6UFKUMygeH+ZEKSyOVV",
	"EFEcQFm+NoTmKNewD6PxYTT18RI+MmTFyJBtOrVN5nVybFfggj9q/VH74x61Jhc1ergBBEc5JtLyq9XZ",
	"XTxdt5GOmBv+PTuxy33n1yy/VNr7TJMJp8HLJAyXG3Np57vSMY/ewe2B0APhekBY0jt2vpr/dHJ2A2iV",
	"OcDF0nrBmayUQ82jXJfO/mzRa6h7lZefz8m1N8F6JvdMnpN2qiwJK7Ju0ZbQxLe9BxJC5Cw8CngU8Chg",
	"6jyuXpbUuaIF8BxIVHhcwjIYOHhdRC3VcKP3RUsrfMhNFtLUkKQrgIgEqNFOKpt2WCuRw5U+lCI1EWVr",
	"/FNc+xr8FWAGJjASvhuRRkwiAKNgh8QyB4M30dZvDQrLlHG1v3h44UakBlFWl0qjcs2s70ru9dqV7yru",
	"vHG11ZXeRVS2SOGi4pNTjzMQI78kfeew8qmGGbkZYSZixGseMbzrYNSyOw3nTJSlD/eqoibAExI0J7Fo",
	"vizRtrZ142iao06VszWHbDIzSE4Qckp3XfCOxABBXmS5QCYDSQelMmYbZnaj/fxbmJgKs/m3cwr/8MeF",
	"oDGpFZLEwQc1HNe9Sz9MvLfJe5s28LSNd1Ldz7PqXK5ZwBhFDAzH4hUola4wHDs+BCVBofbdJ95W/qmn",
	"7DVt1XnxtSfRoXh7u9CPiH8hCddjZdVqtuFfq5aQJI5pxds8/IdjtweVM8z1Cq5XcH9kiWU4dktWHY7t",
	"aapSPtmGv244vm8vne6xDOjD8VbSS+Wier+bxyqPVa5YpfSqna8kcU8jtaGX/DxM6DBZwV+mkMBnfnqO",
	"9ByppYfanE8b70nDhp3xevdwnme5nXx0noc9D3sNwNGxNRw3Jw6RxN15VbAb3D1j06qp8Pom4jycutK7",
	"P3XFJ1N6gPMAlwJc7WNZFbiRsB8ONfx13B41PGpkxgZ18VTs4MrVRWsjZE7T9rxf1/t1vV/3e08+1Pzu",
	"5JgsI4g/hf0p/OOewpp5XJyUGfOYWW1ll6V5AG9Dpk/HfM/uy3y/lqiU4vJsxadp3QTv4vR45/FuNbzL",
	"6R47X/Wfrk5PFzSUhVM8PE27cHaH2jHFe0c9M3tmzgsvdWk2DqxqGg7q+LR3b+JE5kO1DN8zvmd8z/hu",
	"jtUS+zyh5SzCCk/rIg8FDv5WXcMpUTBW2VyNlk+VIlZn98wyw7zV01s913uCUJLZE6qTHBTZyTx7/ZSf",
	"/CbJLf+onyy+8qOEqhe+3t3yi4TG11XfI5wjBgPIoNmq/u2XJ18/tq7Q8mPrzUfd1G/8n+2Psqz54YP8",
	"4faJf6nwYVJ9UkLM8n3UTzLlhzrk/Ciwrcv7UUU2k/tjNriZHCDFXys8L1iblaxWMHtmT7+yp7AoQigo",
	"Jcym7/UJYgOMMBiKHGleK6xOAaczcnOeFn64/GV1TDp5C4qnrk/3vV85T+6Vk21abpXdIJ1JRtswR6tB",
	"3rMx2uzVpjtO9evvm7Y/Zwv9XRqd76iXPRTP2ZjGUDB2vso/nI2bVewkSyiGOlNtOlszDbL8UUyYHr+j",
	"RvNcFbFlSm01pfXuDVG1NU6P9huhwMeESO5R8EXRNLabZ2KTLhyMMxYB+q4B8dWSB2/CRr8PK4L07l8E",
	"+Rbj5NcxCX9HskNTOHc11SfM0/y3GeX9nYm+fMuCRJk+663raVHACJD0jECDuX2UNt9kcNdnmFSpFnCK",
	"o6nlGsNLEhcN15TBmFGAhckeMrDrje8bNb4bPDs4BAzGU8S0vpvSRJNZMSOep1N8jeSVfjKwuHhf4rM6",
	"26NBhBXWx2yoBQNkG+Au6rb1DHA0CZNAX62HoxmKMRPXDfJB5i2qWM4tSsLwWYUdMxtYZsU0hkJVt1Vb",
	"aMhod5DJrHsnbnH8FnZOD3T9fVthb9LOmnaGF6zeF/51XVMz35wZoeyb2Bw90A0wlVj6NVkqHUbTtvGC",
	"1dvGv667be+E3Z9m7zDzqTI8R5TB+aIN0JcFmjC5RBcIjE8G/wPQgkxmYHx+kBXkpwAVUQ+0YgpJhL98",
	"FjWrpsFncP+5BOmhfoQp+zvBUaWLgGofgd5Kn1HgY3N8bM4fLc1CRSl8J0YLJH29zcEuC/VAT4m36gTx",
	"M92Bj4D54YTwEsk8Gmm8QgKwDPg7k64fYEucxOx1NuRRi9TlkT/CrXESstfZmu9SbO5+Y3KzPnpz8nOz",
	"7Fxz0Hsh2gvRXoh2DH0qcJE9CsomJ2/HMZPHgvuPjLL1b5M5i+CzyXCpcutGyz5d1+Ogx8FNGBN2vsYF",
	"dl8hxK0RNmXhEnCelbpcIQLOBjo+n9dzu+f2vNRTHzDYyLo2w6AL3/YeQA7JIgtL0/KA4AHBA8KKoaPF",
	"I7Yxyze2A4NTQKmsyT9uOqy0Wavjrbmi3GNR9HqPRNHzlzd7iPUQW4DYppjfZkhKmAek9QDJ3wvtAckD",
	"UrXJRwY0OARzy8CH1WJHRrJxHzny44Vv58nlsceNlIb7vcVk3/d23CVmpGYzHncQdmHcj25T7hItUrMp",
	"PsT6EYRYi+1ZMVCk8kz3srKXlb2s7BQmUuShfKoj1NmODcEjqaC8DQU+jw33HThi690m3+SXcRt37BT6",
	"8CEjHhM9Jm7GfrDzlebY3DlcxMKTtcEiCk0KnTkHithgxoeJeA73HO4eJlLkoVTnwoyqO22bLILN/Nu7",
	"Z/kjCxcpIZKHBQ8LHhZWChYpQkRjqAi1AYJDoIist/kwkUaxJB8kUoNqj0Od6z0Cdc6HhnhA9YC6UmhI",
	"MwwlzIPQKiDkw0E8CHkQKplzxOMBDjEgrCHwQz1C4MM9/FM5qz+Vw8nrCc0CLoznZeLNPIsjCFisauk9",
	"nPTTKq/h6Fdv/EM43+pDOJYXcAQYqgdwHN6/kcXrQjcawjZE/ZXDmirDNJg9emmDMUsNcRnNiz4cb3W9",
	"HUJlatdcDG+t5Y5E3UrKTqqXmSSOS7zdIBKG3J7wyUsCXpb2svQPLEtj5hoqwqouEVFy83Y0dfYAMR+s",
	"Ritn2wrvYD6mwwOXB64VgSs1AOx8lVHTDqEbCs2qojV4ayMdge0amcF8OIZnTs+cRamiPhSDoWpDXBUH",
	"9u7lnDcjKpgPo/Ds7Nl5tRAK5hQ3wVaKlmAbj5NglcERBQh6SM2md7+ajY908JjnMc/AvKYoB1YR2vDj",
	"QoiPU/AQ4iHENFEwxDtg8XJnGpNkQXdCMnWIWUirgZBMgaxqVZnOdcH3oswRb91HMnyTkQzfg/96m36+",
	"lNQ5kQtyd3L62Vnph3mJ9cdG4jLNOPm8LDRjd4HZ4XcbMp9lJvfsHqsaQVketCzfRn1ntvb9jfoWOfXb",
	"f8XZysCVgtXOV1YqPwgck3qdmF4Wt7D9uaVjZzdSFcN4r5LXp/wpXnWK1/mYnJjZrj+5cXLvAc7VzDll",
	"nZ4HCQ8SHiSKor6j5yrjKHn86qD9Zm8Wq8ILB99WWld02ujlsgo+/B94spJRSVZZwa50rPrwpiVvWvqe",
	"TUuKztexLhV4yhuYfqxTx6ScFW1MJuU4mZkyNN6qpSk3pYcyNpUHUac+m0u5JZNTrgtvdfq+rU4Frq6T",
	"vwzbk1lrDfNTPR5YLVCqx3P7CNawQ5UYyZuivJbpz/ua897NGlXP25WKlzNj9x7mBLZZpvJT9bDhYcPD",
	"hkVNuD/7lAU7tm2iWsTkEodovbAnXbkeJ09VKR/69M3Zp87UnQTiypa8lqX3Xl53AGMEIKV4yud4g9lM",
	"lJaXKajHVWqfVAlad8gt2M6wXa+4CDb8LM9GBo8jymBkB5/CNHTR6onwEitPYxAFXKxBFGDJzSEuiB/p",
	"bG5wGHIuQV8YioJ0MuWCMf8cowBcxmQuGp1hFMN4MlsqXLgM4RRgChKKAgDF1R+iMRIhzkeKFNvG/Sck",
	"zhZrcChv9yiVaheKibUXl4kg1gbM7BlPIxJLg4OV2mfkZhDNUIz5AWYxQlwQEiIYeWvxphy26vhZIxQx",
	"O968bOxlYy8bm+y0RpSmYqcGA3pBWtx6pKaez0PGaubGUGf0U0u4xVhN3YO3m3uc9Di5EZysUbgL4bCq",
	"zpoBsZX4WnBImAh7bu1+zbBYE528N8JDgoeEatHJPTS2kq2rbGyuPN17EGGmKkQ2naYHDA8YHjDKutbK",
	"bgh9HK8WH5sHjFXcD6q/zd4E46pC8hZXRcPHpFn2HlizLMpv/q4ZD8cejmvguP7uGVfYSpgHrc2Blr/d",
	"xoOWB60V7VDrZyetFv7hM5R8BIiPAPERIPcUASIWz4eB+DCQLK5yvUiQ0mHnhUsvXHrhssBU62VUrhYS",
	"cr9ZlQ8dGGIbxsPFhvi4EA+ZHjI3DZn1Knk5YXX9AJEmwK2IEanIbrtLpEh+JD5YxOOEx4lm0Wql5NWV",
	"QkZWZ/HeQwk7NUmsPnzEQ4iHkHrt7B4iSKzg8YiCSBr1TmsciRNEPjKNtPfwGqlF0vsWw0rWwcDv74ad",
	"tYIfGtktYZ7ZtsZsPhzCy0ReJmowv9yQ+CokMDhG8wtlJ63WtbQXE5BLoCuCuaxp1bZ+L7Tugx++yetZ",
	"L3HIUJxtg/QuyynyuXLSR5TV+1Vf9XJ+VXAOrxAFixhNUICiCQLkGsWAsBmKdYcZsbQBvgQUsaqFkBWc",
	"vbFvdn756emzr7cfP35sPalwzX7fjmcxO774fAZaN6nUiVJmb46m0EU/48pwCl3EQcvZmqCRR6Yqn3je",
	"6lKGPC9ZeMnix5UsNA/VOL/3g4CrRAXOAeTin2jC7H7vssywDX0n38t9e7ltvZeRRy0W12VgEGzAn13c",
	"Bu/N9qDnQW9t0LPoTztf8z8MDmtd1WdoTq6V7lBgziofdQEefy905+yRLmIBR5lYDMdbTDyLexbXck29",
	"NaTIRReQogCQCGBGVSS6jJ9vMo0083HvnqWPSr3Hw4OHBw8PWu1x9CpnhpMKYbzCtXxjwwUHj7KuJxt3",
	"uhVZV3HIhUvHLhW5euOvN/t6s683+z5is6+tvysc5e23LgLFb7zS/dhtnbKYyjDlJRcvuXjJxSlbqcA8",
	"9cbabZtpH8pAW6UcpYuzyXSjtFFvl/XY5rFtI3ZZwyLbYIvN0oZ0hTZYxOQaByiQ9w3keDQgiIrkdyXm",
	"V8fB5O22qaVnHVutzxby/O75fRUjrYMcY5oq6pizd2/ShcX0KgevLzdhVJiVPQJ4BPAIsJIdti6SzW55",
	"Xd3mutnsnWY9jLdVhWAPrZL1HkYl8/e3eoj0EFmAyPq0pWacSZhHmRzK+AwjjzIeZXKml9t2i4rxSTks",
	"icPWm9ZXuMBnhLDbHRRMUQdHlzHskngyQ5TFkJG4CxeY7lzvttqtaxhj3gOVfCzq5dybrRljizc7ZlPo",
	"C+Qz6+KIobA7IfNWu8Zb2w+mCAx4RcriZMKSGIFjGMEpisH+6QCgSCR/ExwJD9On2/8/AAD//z4syS4M",
	"4AIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
