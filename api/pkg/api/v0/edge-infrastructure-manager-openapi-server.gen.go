// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /OSResources)
	GetOSResources(ctx echo.Context, params GetOSResourcesParams) error

	// (POST /OSResources)
	PostOSResources(ctx echo.Context) error

	// (DELETE /OSResources/{OSResourceID})
	DeleteOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /OSResources/{OSResourceID})
	GetOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PATCH /OSResources/{OSResourceID})
	PatchOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (PUT /OSResources/{OSResourceID})
	PutOSResourcesOSResourceID(ctx echo.Context, osResourceID string) error

	// (GET /compute)
	GetCompute(ctx echo.Context, params GetComputeParams) error

	// (GET /compute/hosts)
	GetComputeHosts(ctx echo.Context, params GetComputeHostsParams) error

	// (POST /compute/hosts)
	PostComputeHosts(ctx echo.Context) error

	// (POST /compute/hosts/register)
	PostComputeHostsRegister(ctx echo.Context) error

	// (GET /compute/hosts/summary)
	GetComputeHostsSummary(ctx echo.Context, params GetComputeHostsSummaryParams) error

	// (DELETE /compute/hosts/{hostID})
	DeleteComputeHostsHostID(ctx echo.Context, hostID string) error

	// (GET /compute/hosts/{hostID})
	GetComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID})
	PatchComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID})
	PutComputeHostsHostID(ctx echo.Context, hostID string) error

	// (PUT /compute/hosts/{hostID}/invalidate)
	PutComputeHostsHostIDInvalidate(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/onboard)
	PatchComputeHostsHostIDOnboard(ctx echo.Context, hostID string) error

	// (PATCH /compute/hosts/{hostID}/register)
	PatchComputeHostsHostIDRegister(ctx echo.Context, hostID string) error

	// (GET /instances)
	GetInstances(ctx echo.Context, params GetInstancesParams) error

	// (POST /instances)
	PostInstances(ctx echo.Context) error

	// (DELETE /instances/{instanceID})
	DeleteInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (GET /instances/{instanceID})
	GetInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PATCH /instances/{instanceID})
	PatchInstancesInstanceID(ctx echo.Context, instanceID string) error

	// (PUT /instances/{instanceID}/invalidate)
	PutInstancesInstanceIDInvalidate(ctx echo.Context, instanceID string) error

	// (GET /localAccounts)
	GetLocalAccounts(ctx echo.Context, params GetLocalAccountsParams) error

	// (POST /localAccounts)
	PostLocalAccounts(ctx echo.Context) error

	// (DELETE /localAccounts/{localAccountID})
	DeleteLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /localAccounts/{localAccountID})
	GetLocalAccountsLocalAccountID(ctx echo.Context, localAccountID string) error

	// (GET /locations)
	GetLocations(ctx echo.Context, params GetLocationsParams) error

	// (GET /ous)
	GetOus(ctx echo.Context, params GetOusParams) error

	// (POST /ous)
	PostOus(ctx echo.Context) error

	// (DELETE /ous/{ouID})
	DeleteOusOuID(ctx echo.Context, ouid string) error

	// (GET /ous/{ouID})
	GetOusOuID(ctx echo.Context, ouid string) error

	// (PATCH /ous/{ouID})
	PatchOusOuID(ctx echo.Context, ouid string) error

	// (PUT /ous/{ouID})
	PutOusOuID(ctx echo.Context, ouid string) error

	// (GET /providers)
	GetProviders(ctx echo.Context, params GetProvidersParams) error

	// (POST /providers)
	PostProviders(ctx echo.Context) error

	// (DELETE /providers/{providerID})
	DeleteProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /providers/{providerID})
	GetProvidersProviderID(ctx echo.Context, providerID string) error

	// (GET /regions)
	GetRegions(ctx echo.Context, params GetRegionsParams) error

	// (POST /regions)
	PostRegions(ctx echo.Context) error

	// (DELETE /regions/{regionID})
	DeleteRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /regions/{regionID})
	GetRegionsRegionID(ctx echo.Context, regionID string) error

	// (PATCH /regions/{regionID})
	PatchRegionsRegionID(ctx echo.Context, regionID string) error

	// (PUT /regions/{regionID})
	PutRegionsRegionID(ctx echo.Context, regionID string) error

	// (GET /schedules)
	GetSchedules(ctx echo.Context, params GetSchedulesParams) error

	// (GET /schedules/repeated)
	GetSchedulesRepeated(ctx echo.Context, params GetSchedulesRepeatedParams) error

	// (POST /schedules/repeated)
	PostSchedulesRepeated(ctx echo.Context) error

	// (DELETE /schedules/repeated/{repeatedScheduleID})
	DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/repeated/{repeatedScheduleID})
	GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PATCH /schedules/repeated/{repeatedScheduleID})
	PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (PUT /schedules/repeated/{repeatedScheduleID})
	PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context, repeatedScheduleID string) error

	// (GET /schedules/single)
	GetSchedulesSingle(ctx echo.Context, params GetSchedulesSingleParams) error

	// (POST /schedules/single)
	PostSchedulesSingle(ctx echo.Context) error

	// (DELETE /schedules/single/{singleScheduleID})
	DeleteSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /schedules/single/{singleScheduleID})
	GetSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PATCH /schedules/single/{singleScheduleID})
	PatchSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (PUT /schedules/single/{singleScheduleID})
	PutSchedulesSingleSingleScheduleID(ctx echo.Context, singleScheduleID string) error

	// (GET /sites)
	GetSites(ctx echo.Context, params GetSitesParams) error

	// (POST /sites)
	PostSites(ctx echo.Context) error

	// (DELETE /sites/{siteID})
	DeleteSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /sites/{siteID})
	GetSitesSiteID(ctx echo.Context, siteID string) error

	// (PATCH /sites/{siteID})
	PatchSitesSiteID(ctx echo.Context, siteID string) error

	// (PUT /sites/{siteID})
	PutSitesSiteID(ctx echo.Context, siteID string) error

	// (GET /telemetry/groups/logs)
	GetTelemetryGroupsLogs(ctx echo.Context, params GetTelemetryGroupsLogsParams) error

	// (POST /telemetry/groups/logs)
	PostTelemetryGroupsLogs(ctx echo.Context) error

	// (DELETE /telemetry/groups/logs/{telemetryLogsGroupId})
	DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/logs/{telemetryLogsGroupId})
	GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context, telemetryLogsGroupId string) error

	// (GET /telemetry/groups/metrics)
	GetTelemetryGroupsMetrics(ctx echo.Context, params GetTelemetryGroupsMetricsParams) error

	// (POST /telemetry/groups/metrics)
	PostTelemetryGroupsMetrics(ctx echo.Context) error

	// (DELETE /telemetry/groups/metrics/{telemetryMetricsGroupId})
	DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/groups/metrics/{telemetryMetricsGroupId})
	GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context, telemetryMetricsGroupId string) error

	// (GET /telemetry/profiles/logs)
	GetTelemetryProfilesLogs(ctx echo.Context, params GetTelemetryProfilesLogsParams) error

	// (POST /telemetry/profiles/logs)
	PostTelemetryProfilesLogs(ctx echo.Context) error

	// (DELETE /telemetry/profiles/logs/{telemetryLogsProfileId})
	DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/logs/{telemetryLogsProfileId})
	GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PATCH /telemetry/profiles/logs/{telemetryLogsProfileId})
	PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (PUT /telemetry/profiles/logs/{telemetryLogsProfileId})
	PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context, telemetryLogsProfileId string) error

	// (GET /telemetry/profiles/metrics)
	GetTelemetryProfilesMetrics(ctx echo.Context, params GetTelemetryProfilesMetricsParams) error

	// (POST /telemetry/profiles/metrics)
	PostTelemetryProfilesMetrics(ctx echo.Context) error

	// (DELETE /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PATCH /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (PUT /telemetry/profiles/metrics/{telemetryMetricsProfileId})
	PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context, telemetryMetricsProfileId string) error

	// (GET /workloadMembers)
	GetWorkloadMembers(ctx echo.Context, params GetWorkloadMembersParams) error

	// (POST /workloadMembers)
	PostWorkloadMembers(ctx echo.Context) error

	// (DELETE /workloadMembers/{workloadMemberID})
	DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloadMembers/{workloadMemberID})
	GetWorkloadMembersWorkloadMemberID(ctx echo.Context, workloadMemberID string) error

	// (GET /workloads)
	GetWorkloads(ctx echo.Context, params GetWorkloadsParams) error

	// (POST /workloads)
	PostWorkloads(ctx echo.Context) error

	// (DELETE /workloads/{workloadID})
	DeleteWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (GET /workloads/{workloadID})
	GetWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PATCH /workloads/{workloadID})
	PatchWorkloadsWorkloadID(ctx echo.Context, workloadID string) error

	// (PUT /workloads/{workloadID})
	PutWorkloadsWorkloadID(ctx echo.Context, workloadID string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOSResourcesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResources(ctx, params)
	return err
}

// PostOSResources converts echo context to params.
func (w *ServerInterfaceWrapper) PostOSResources(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOSResources(ctx)
	return err
}

// DeleteOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PatchOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// PutOSResourcesOSResourceID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOSResourcesOSResourceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "OSResourceID" -------------
	var osResourceID string

	err = runtime.BindStyledParameterWithOptions("simple", "OSResourceID", ctx.Param("OSResourceID"), &osResourceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter OSResourceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOSResourcesOSResourceID(ctx, osResourceID)
	return err
}

// GetCompute converts echo context to params.
func (w *ServerInterfaceWrapper) GetCompute(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCompute(ctx, params)
	return err
}

// GetComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHosts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "instanceID" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceID", ctx.QueryParams(), &params.InstanceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// ------------- Optional query parameter "metadata" -------------

	err = runtime.BindQueryParameter("form", true, false, "metadata", ctx.QueryParams(), &params.Metadata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter metadata: %s", err))
	}

	// ------------- Optional query parameter "detail" -------------

	err = runtime.BindQueryParameter("form", true, false, "detail", ctx.QueryParams(), &params.Detail)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter detail: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHosts(ctx, params)
	return err
}

// PostComputeHosts converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHosts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHosts(ctx)
	return err
}

// PostComputeHostsRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PostComputeHostsRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostComputeHostsRegister(ctx)
	return err
}

// GetComputeHostsSummary converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsSummary(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetComputeHostsSummaryParams
	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsSummary(ctx, params)
	return err
}

// DeleteComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteComputeHostsHostID(ctx, hostID)
	return err
}

// GetComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) GetComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetComputeHostsHostID(ctx, hostID)
	return err
}

// PatchComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostID converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostID(ctx, hostID)
	return err
}

// PutComputeHostsHostIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutComputeHostsHostIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutComputeHostsHostIDInvalidate(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDOnboard converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDOnboard(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDOnboard(ctx, hostID)
	return err
}

// PatchComputeHostsHostIDRegister converts echo context to params.
func (w *ServerInterfaceWrapper) PatchComputeHostsHostIDRegister(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "hostID" -------------
	var hostID string

	err = runtime.BindStyledParameterWithOptions("simple", "hostID", ctx.Param("hostID"), &hostID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchComputeHostsHostIDRegister(ctx, hostID)
	return err
}

// GetInstances converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstances(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetInstancesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workloadMemberID" -------------

	err = runtime.BindQueryParameter("form", true, false, "workloadMemberID", ctx.QueryParams(), &params.WorkloadMemberID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstances(ctx, params)
	return err
}

// PostInstances converts echo context to params.
func (w *ServerInterfaceWrapper) PostInstances(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostInstances(ctx)
	return err
}

// DeleteInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInstancesInstanceID(ctx, instanceID)
	return err
}

// GetInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) GetInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInstancesInstanceID(ctx, instanceID)
	return err
}

// PatchInstancesInstanceID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchInstancesInstanceID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchInstancesInstanceID(ctx, instanceID)
	return err
}

// PutInstancesInstanceIDInvalidate converts echo context to params.
func (w *ServerInterfaceWrapper) PutInstancesInstanceIDInvalidate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "instanceID" -------------
	var instanceID string

	err = runtime.BindStyledParameterWithOptions("simple", "instanceID", ctx.Param("instanceID"), &instanceID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutInstancesInstanceIDInvalidate(ctx, instanceID)
	return err
}

// GetLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccounts(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocalAccountsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccounts(ctx, params)
	return err
}

// PostLocalAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostLocalAccounts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLocalAccounts(ctx)
	return err
}

// DeleteLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocalAccountsLocalAccountID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocalAccountsLocalAccountID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "localAccountID" -------------
	var localAccountID string

	err = runtime.BindStyledParameterWithOptions("simple", "localAccountID", ctx.Param("localAccountID"), &localAccountID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter localAccountID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocalAccountsLocalAccountID(ctx, localAccountID)
	return err
}

// GetLocations converts echo context to params.
func (w *ServerInterfaceWrapper) GetLocations(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLocationsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "showSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showSites", ctx.QueryParams(), &params.ShowSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showSites: %s", err))
	}

	// ------------- Optional query parameter "showRegions" -------------

	err = runtime.BindQueryParameter("form", true, false, "showRegions", ctx.QueryParams(), &params.ShowRegions)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showRegions: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLocations(ctx, params)
	return err
}

// GetOus converts echo context to params.
func (w *ServerInterfaceWrapper) GetOus(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOusParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOus(ctx, params)
	return err
}

// PostOus converts echo context to params.
func (w *ServerInterfaceWrapper) PostOus(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostOus(ctx)
	return err
}

// DeleteOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteOusOuID(ctx, ouid)
	return err
}

// GetOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) GetOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOusOuID(ctx, ouid)
	return err
}

// PatchOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchOusOuID(ctx, ouid)
	return err
}

// PutOusOuID converts echo context to params.
func (w *ServerInterfaceWrapper) PutOusOuID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ouID" -------------
	var ouid string

	err = runtime.BindStyledParameterWithOptions("simple", "ouID", ctx.Param("ouID"), &ouid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutOusOuID(ctx, ouid)
	return err
}

// GetProviders converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetProvidersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviders(ctx, params)
	return err
}

// PostProviders converts echo context to params.
func (w *ServerInterfaceWrapper) PostProviders(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostProviders(ctx)
	return err
}

// DeleteProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProvidersProviderID(ctx, providerID)
	return err
}

// GetProvidersProviderID converts echo context to params.
func (w *ServerInterfaceWrapper) GetProvidersProviderID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "providerID" -------------
	var providerID string

	err = runtime.BindStyledParameterWithOptions("simple", "providerID", ctx.Param("providerID"), &providerID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter providerID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProvidersProviderID(ctx, providerID)
	return err
}

// GetRegions converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegions(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRegionsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "parent" -------------

	err = runtime.BindQueryParameter("form", true, false, "parent", ctx.QueryParams(), &params.Parent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter parent: %s", err))
	}

	// ------------- Optional query parameter "showTotalSites" -------------

	err = runtime.BindQueryParameter("form", true, false, "showTotalSites", ctx.QueryParams(), &params.ShowTotalSites)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showTotalSites: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegions(ctx, params)
	return err
}

// PostRegions converts echo context to params.
func (w *ServerInterfaceWrapper) PostRegions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRegions(ctx)
	return err
}

// DeleteRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRegionsRegionID(ctx, regionID)
	return err
}

// GetRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) GetRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRegionsRegionID(ctx, regionID)
	return err
}

// PatchRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRegionsRegionID(ctx, regionID)
	return err
}

// PutRegionsRegionID converts echo context to params.
func (w *ServerInterfaceWrapper) PutRegionsRegionID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "regionID" -------------
	var regionID string

	err = runtime.BindStyledParameterWithOptions("simple", "regionID", ctx.Param("regionID"), &regionID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutRegionsRegionID(ctx, regionID)
	return err
}

// GetSchedules converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedules(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedules(ctx, params)
	return err
}

// GetSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesRepeatedParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeated(ctx, params)
	return err
}

// PostSchedulesRepeated converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesRepeated(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesRepeated(ctx)
	return err
}

// DeleteSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PatchSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// PutSchedulesRepeatedRepeatedScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesRepeatedRepeatedScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "repeatedScheduleID" -------------
	var repeatedScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "repeatedScheduleID", ctx.Param("repeatedScheduleID"), &repeatedScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter repeatedScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesRepeatedRepeatedScheduleID(ctx, repeatedScheduleID)
	return err
}

// GetSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSchedulesSingleParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "siteID" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteID", ctx.QueryParams(), &params.SiteID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// ------------- Optional query parameter "hostID" -------------

	err = runtime.BindQueryParameter("form", true, false, "hostID", ctx.QueryParams(), &params.HostID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hostID: %s", err))
	}

	// ------------- Optional query parameter "unix_epoch" -------------

	err = runtime.BindQueryParameter("form", true, false, "unix_epoch", ctx.QueryParams(), &params.UnixEpoch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter unix_epoch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingle(ctx, params)
	return err
}

// PostSchedulesSingle converts echo context to params.
func (w *ServerInterfaceWrapper) PostSchedulesSingle(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSchedulesSingle(ctx)
	return err
}

// DeleteSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PatchSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// PutSchedulesSingleSingleScheduleID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSchedulesSingleSingleScheduleID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "singleScheduleID" -------------
	var singleScheduleID string

	err = runtime.BindStyledParameterWithOptions("simple", "singleScheduleID", ctx.Param("singleScheduleID"), &singleScheduleID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter singleScheduleID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSchedulesSingleSingleScheduleID(ctx, singleScheduleID)
	return err
}

// GetSites converts echo context to params.
func (w *ServerInterfaceWrapper) GetSites(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSitesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "regionID" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionID", ctx.QueryParams(), &params.RegionID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionID: %s", err))
	}

	// ------------- Optional query parameter "ouID" -------------

	err = runtime.BindQueryParameter("form", true, false, "ouID", ctx.QueryParams(), &params.OuID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ouID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSites(ctx, params)
	return err
}

// PostSites converts echo context to params.
func (w *ServerInterfaceWrapper) PostSites(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSites(ctx)
	return err
}

// DeleteSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSitesSiteID(ctx, siteID)
	return err
}

// GetSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) GetSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSitesSiteID(ctx, siteID)
	return err
}

// PatchSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchSitesSiteID(ctx, siteID)
	return err
}

// PutSitesSiteID converts echo context to params.
func (w *ServerInterfaceWrapper) PutSitesSiteID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "siteID" -------------
	var siteID string

	err = runtime.BindStyledParameterWithOptions("simple", "siteID", ctx.Param("siteID"), &siteID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutSitesSiteID(ctx, siteID)
	return err
}

// GetTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogs(ctx, params)
	return err
}

// PostTelemetryGroupsLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsLogs(ctx)
	return err
}

// DeleteTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsLogsTelemetryLogsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsGroupId" -------------
	var telemetryLogsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsGroupId", ctx.Param("telemetryLogsGroupId"), &telemetryLogsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsLogsTelemetryLogsGroupId(ctx, telemetryLogsGroupId)
	return err
}

// GetTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryGroupsMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetrics(ctx, params)
	return err
}

// PostTelemetryGroupsMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryGroupsMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryGroupsMetrics(ctx)
	return err
}

// DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryGroupsMetricsTelemetryMetricsGroupId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsGroupId" -------------
	var telemetryMetricsGroupId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsGroupId", ctx.Param("telemetryMetricsGroupId"), &telemetryMetricsGroupId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsGroupId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryGroupsMetricsTelemetryMetricsGroupId(ctx, telemetryMetricsGroupId)
	return err
}

// GetTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesLogsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogs(ctx, params)
	return err
}

// PostTelemetryProfilesLogs converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesLogs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesLogs(ctx)
	return err
}

// DeleteTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PatchTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// PutTelemetryProfilesLogsTelemetryLogsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryLogsProfileId" -------------
	var telemetryLogsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryLogsProfileId", ctx.Param("telemetryLogsProfileId"), &telemetryLogsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryLogsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesLogsTelemetryLogsProfileId(ctx, telemetryLogsProfileId)
	return err
}

// GetTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTelemetryProfilesMetricsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "siteId" -------------

	err = runtime.BindQueryParameter("form", true, false, "siteId", ctx.QueryParams(), &params.SiteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter siteId: %s", err))
	}

	// ------------- Optional query parameter "regionId" -------------

	err = runtime.BindQueryParameter("form", true, false, "regionId", ctx.QueryParams(), &params.RegionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter regionId: %s", err))
	}

	// ------------- Optional query parameter "instanceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "instanceId", ctx.QueryParams(), &params.InstanceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter instanceId: %s", err))
	}

	// ------------- Optional query parameter "showInherited" -------------

	err = runtime.BindQueryParameter("form", true, false, "showInherited", ctx.QueryParams(), &params.ShowInherited)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter showInherited: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetrics(ctx, params)
	return err
}

// PostTelemetryProfilesMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) PostTelemetryProfilesMetrics(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTelemetryProfilesMetrics(ctx)
	return err
}

// DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PatchTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// PutTelemetryProfilesMetricsTelemetryMetricsProfileId converts echo context to params.
func (w *ServerInterfaceWrapper) PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "telemetryMetricsProfileId" -------------
	var telemetryMetricsProfileId string

	err = runtime.BindStyledParameterWithOptions("simple", "telemetryMetricsProfileId", ctx.Param("telemetryMetricsProfileId"), &telemetryMetricsProfileId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter telemetryMetricsProfileId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutTelemetryProfilesMetricsTelemetryMetricsProfileId(ctx, telemetryMetricsProfileId)
	return err
}

// GetWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadMembersParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "workload_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "workload_id", ctx.QueryParams(), &params.WorkloadId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workload_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembers(ctx, params)
	return err
}

// PostWorkloadMembers converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloadMembers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloadMembers(ctx)
	return err
}

// DeleteWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloadMembersWorkloadMemberID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadMembersWorkloadMemberID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadMemberID" -------------
	var workloadMemberID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadMemberID", ctx.Param("workloadMemberID"), &workloadMemberID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadMemberID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadMembersWorkloadMemberID(ctx, workloadMemberID)
	return err
}

// GetWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloads(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetWorkloadsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "pageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "pageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pageSize: %s", err))
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", ctx.QueryParams(), &params.Filter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter filter: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "kind" -------------

	err = runtime.BindQueryParameter("form", true, false, "kind", ctx.QueryParams(), &params.Kind)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kind: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloads(ctx, params)
	return err
}

// PostWorkloads converts echo context to params.
func (w *ServerInterfaceWrapper) PostWorkloads(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostWorkloads(ctx)
	return err
}

// DeleteWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// GetWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) GetWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PatchWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// PutWorkloadsWorkloadID converts echo context to params.
func (w *ServerInterfaceWrapper) PutWorkloadsWorkloadID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "workloadID" -------------
	var workloadID string

	err = runtime.BindStyledParameterWithOptions("simple", "workloadID", ctx.Param("workloadID"), &workloadID, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workloadID: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutWorkloadsWorkloadID(ctx, workloadID)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/OSResources", wrapper.GetOSResources)
	router.POST(baseURL+"/OSResources", wrapper.PostOSResources)
	router.DELETE(baseURL+"/OSResources/:OSResourceID", wrapper.DeleteOSResourcesOSResourceID)
	router.GET(baseURL+"/OSResources/:OSResourceID", wrapper.GetOSResourcesOSResourceID)
	router.PATCH(baseURL+"/OSResources/:OSResourceID", wrapper.PatchOSResourcesOSResourceID)
	router.PUT(baseURL+"/OSResources/:OSResourceID", wrapper.PutOSResourcesOSResourceID)
	router.GET(baseURL+"/compute", wrapper.GetCompute)
	router.GET(baseURL+"/compute/hosts", wrapper.GetComputeHosts)
	router.POST(baseURL+"/compute/hosts", wrapper.PostComputeHosts)
	router.POST(baseURL+"/compute/hosts/register", wrapper.PostComputeHostsRegister)
	router.GET(baseURL+"/compute/hosts/summary", wrapper.GetComputeHostsSummary)
	router.DELETE(baseURL+"/compute/hosts/:hostID", wrapper.DeleteComputeHostsHostID)
	router.GET(baseURL+"/compute/hosts/:hostID", wrapper.GetComputeHostsHostID)
	router.PATCH(baseURL+"/compute/hosts/:hostID", wrapper.PatchComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID", wrapper.PutComputeHostsHostID)
	router.PUT(baseURL+"/compute/hosts/:hostID/invalidate", wrapper.PutComputeHostsHostIDInvalidate)
	router.PATCH(baseURL+"/compute/hosts/:hostID/onboard", wrapper.PatchComputeHostsHostIDOnboard)
	router.PATCH(baseURL+"/compute/hosts/:hostID/register", wrapper.PatchComputeHostsHostIDRegister)
	router.GET(baseURL+"/instances", wrapper.GetInstances)
	router.POST(baseURL+"/instances", wrapper.PostInstances)
	router.DELETE(baseURL+"/instances/:instanceID", wrapper.DeleteInstancesInstanceID)
	router.GET(baseURL+"/instances/:instanceID", wrapper.GetInstancesInstanceID)
	router.PATCH(baseURL+"/instances/:instanceID", wrapper.PatchInstancesInstanceID)
	router.PUT(baseURL+"/instances/:instanceID/invalidate", wrapper.PutInstancesInstanceIDInvalidate)
	router.GET(baseURL+"/localAccounts", wrapper.GetLocalAccounts)
	router.POST(baseURL+"/localAccounts", wrapper.PostLocalAccounts)
	router.DELETE(baseURL+"/localAccounts/:localAccountID", wrapper.DeleteLocalAccountsLocalAccountID)
	router.GET(baseURL+"/localAccounts/:localAccountID", wrapper.GetLocalAccountsLocalAccountID)
	router.GET(baseURL+"/locations", wrapper.GetLocations)
	router.GET(baseURL+"/ous", wrapper.GetOus)
	router.POST(baseURL+"/ous", wrapper.PostOus)
	router.DELETE(baseURL+"/ous/:ouID", wrapper.DeleteOusOuID)
	router.GET(baseURL+"/ous/:ouID", wrapper.GetOusOuID)
	router.PATCH(baseURL+"/ous/:ouID", wrapper.PatchOusOuID)
	router.PUT(baseURL+"/ous/:ouID", wrapper.PutOusOuID)
	router.GET(baseURL+"/providers", wrapper.GetProviders)
	router.POST(baseURL+"/providers", wrapper.PostProviders)
	router.DELETE(baseURL+"/providers/:providerID", wrapper.DeleteProvidersProviderID)
	router.GET(baseURL+"/providers/:providerID", wrapper.GetProvidersProviderID)
	router.GET(baseURL+"/regions", wrapper.GetRegions)
	router.POST(baseURL+"/regions", wrapper.PostRegions)
	router.DELETE(baseURL+"/regions/:regionID", wrapper.DeleteRegionsRegionID)
	router.GET(baseURL+"/regions/:regionID", wrapper.GetRegionsRegionID)
	router.PATCH(baseURL+"/regions/:regionID", wrapper.PatchRegionsRegionID)
	router.PUT(baseURL+"/regions/:regionID", wrapper.PutRegionsRegionID)
	router.GET(baseURL+"/schedules", wrapper.GetSchedules)
	router.GET(baseURL+"/schedules/repeated", wrapper.GetSchedulesRepeated)
	router.POST(baseURL+"/schedules/repeated", wrapper.PostSchedulesRepeated)
	router.DELETE(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.DeleteSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.GetSchedulesRepeatedRepeatedScheduleID)
	router.PATCH(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PatchSchedulesRepeatedRepeatedScheduleID)
	router.PUT(baseURL+"/schedules/repeated/:repeatedScheduleID", wrapper.PutSchedulesRepeatedRepeatedScheduleID)
	router.GET(baseURL+"/schedules/single", wrapper.GetSchedulesSingle)
	router.POST(baseURL+"/schedules/single", wrapper.PostSchedulesSingle)
	router.DELETE(baseURL+"/schedules/single/:singleScheduleID", wrapper.DeleteSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/schedules/single/:singleScheduleID", wrapper.GetSchedulesSingleSingleScheduleID)
	router.PATCH(baseURL+"/schedules/single/:singleScheduleID", wrapper.PatchSchedulesSingleSingleScheduleID)
	router.PUT(baseURL+"/schedules/single/:singleScheduleID", wrapper.PutSchedulesSingleSingleScheduleID)
	router.GET(baseURL+"/sites", wrapper.GetSites)
	router.POST(baseURL+"/sites", wrapper.PostSites)
	router.DELETE(baseURL+"/sites/:siteID", wrapper.DeleteSitesSiteID)
	router.GET(baseURL+"/sites/:siteID", wrapper.GetSitesSiteID)
	router.PATCH(baseURL+"/sites/:siteID", wrapper.PatchSitesSiteID)
	router.PUT(baseURL+"/sites/:siteID", wrapper.PutSitesSiteID)
	router.GET(baseURL+"/telemetry/groups/logs", wrapper.GetTelemetryGroupsLogs)
	router.POST(baseURL+"/telemetry/groups/logs", wrapper.PostTelemetryGroupsLogs)
	router.DELETE(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.DeleteTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/logs/:telemetryLogsGroupId", wrapper.GetTelemetryGroupsLogsTelemetryLogsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics", wrapper.GetTelemetryGroupsMetrics)
	router.POST(baseURL+"/telemetry/groups/metrics", wrapper.PostTelemetryGroupsMetrics)
	router.DELETE(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.DeleteTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/groups/metrics/:telemetryMetricsGroupId", wrapper.GetTelemetryGroupsMetricsTelemetryMetricsGroupId)
	router.GET(baseURL+"/telemetry/profiles/logs", wrapper.GetTelemetryProfilesLogs)
	router.POST(baseURL+"/telemetry/profiles/logs", wrapper.PostTelemetryProfilesLogs)
	router.DELETE(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.DeleteTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.GetTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PatchTelemetryProfilesLogsTelemetryLogsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/logs/:telemetryLogsProfileId", wrapper.PutTelemetryProfilesLogsTelemetryLogsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics", wrapper.GetTelemetryProfilesMetrics)
	router.POST(baseURL+"/telemetry/profiles/metrics", wrapper.PostTelemetryProfilesMetrics)
	router.DELETE(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.DeleteTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.GetTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PATCH(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PatchTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.PUT(baseURL+"/telemetry/profiles/metrics/:telemetryMetricsProfileId", wrapper.PutTelemetryProfilesMetricsTelemetryMetricsProfileId)
	router.GET(baseURL+"/workloadMembers", wrapper.GetWorkloadMembers)
	router.POST(baseURL+"/workloadMembers", wrapper.PostWorkloadMembers)
	router.DELETE(baseURL+"/workloadMembers/:workloadMemberID", wrapper.DeleteWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloadMembers/:workloadMemberID", wrapper.GetWorkloadMembersWorkloadMemberID)
	router.GET(baseURL+"/workloads", wrapper.GetWorkloads)
	router.POST(baseURL+"/workloads", wrapper.PostWorkloads)
	router.DELETE(baseURL+"/workloads/:workloadID", wrapper.DeleteWorkloadsWorkloadID)
	router.GET(baseURL+"/workloads/:workloadID", wrapper.GetWorkloadsWorkloadID)
	router.PATCH(baseURL+"/workloads/:workloadID", wrapper.PatchWorkloadsWorkloadID)
	router.PUT(baseURL+"/workloads/:workloadID", wrapper.PutWorkloadsWorkloadID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//9+zSIEJ4AIA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
